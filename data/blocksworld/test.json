[
    {
        "idx": 579,
        "start": [
            [
                "table",
                "B"
            ],
            [
                "table",
                "D",
                "C",
                "E",
                "A"
            ]
        ],
        "goal": [
            [
                "table",
                "C",
                "E",
                "D",
                "B",
                "A"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": true,
                "on": "E",
                "under": -1,
                "ontable": false
            },
            "B": {
                "clear": true,
                "on": -1,
                "under": -1,
                "ontable": true
            },
            "C": {
                "clear": false,
                "on": "D",
                "under": "E",
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": -1,
                "under": "C",
                "ontable": true
            },
            "E": {
                "clear": false,
                "on": "C",
                "under": "A",
                "ontable": false
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": true,
                "on": "B",
                "under": -1,
                "ontable": false
            },
            "B": {
                "clear": false,
                "on": "D",
                "under": "A",
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": -1,
                "under": "E",
                "ontable": true
            },
            "D": {
                "clear": false,
                "on": "E",
                "under": "B",
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": "C",
                "under": "D",
                "ontable": false
            }
        },
        "plan_len": 7,
        "num_blocks": 5,
        "prompt": "The initial state:\nThe hand is empty.\nB is on the table. B is clear.\nD is on the table. C is on D. E is on C. A is on E. A is clear.\n\nThe goal is:\nC is on the table. E is on C. D is on E. B is on D. A is on B. A is clear.\n",
        "system1_plan": "Move A from E to table | Move E from C to table | Move C from D to table | Move E from table to C | Move D from table to E | Move B from table to D | Move A from table to B",
        "system1_states": 7,
        "system2_plan_v1": "Moved to state -> Stack 1: [B], Stack 2: [D, C, E, A] | Plan so far [] | Exploring action Move C from D to B | New state -> Invalid | Exploring action Move B from table to A | New state -> Stack 1: [D, C, E, A, B] | Exploring action Move A from E to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, C, E] | Exploring action Move A from E to B | New state -> Stack 1: [B, A], Stack 2: [D, C, E] | Taking action Move A from E to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, C, E] | Plan so far [Move A from E to table] | Exploring action Move C from D to E | New state -> Invalid | Exploring action Move D from table to E | New state -> Invalid | Exploring action Move E from C to B | New state -> Stack 1: [A], Stack 2: [B, E], Stack 3: [D, C] | Exploring action Move E from C to A | New state -> Stack 1: [A, E], Stack 2: [B], Stack 3: [D, C] | Exploring action Move E from C to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, C], Stack 4: [E] | Taking action Move A from E to B | Moved to state -> Stack 1: [B, A], Stack 2: [D, C, E] | Plan so far [Move A from E to B] | Exploring action Move D from table to E | New state -> Invalid | Exploring action Move E from C to table | New state -> Stack 1: [B, A], Stack 2: [D, C], Stack 3: [E] | Exploring action Move B from table to A | New state -> Invalid | Exploring action Move A from B to E | New state -> Stack 1: [B], Stack 2: [D, C, E, A] | Exploring action Move A from B to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, C, E] | Taking action Move E from C to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, C], Stack 4: [E] | Plan so far [Move A from E to table | Move E from C to table] | Exploring action Move A from table to B | New state -> Stack 1: [B, A], Stack 2: [D, C], Stack 3: [E] | Exploring action Move D from table to C | New state -> Invalid | Exploring action Move D from table to A | New state -> Invalid | Exploring action Move C from D to A | New state -> Stack 1: [A, C], Stack 2: [B], Stack 3: [D], Stack 4: [E] | Exploring action Move C from D to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Taking action Move E from C to table | Moved to state -> Stack 1: [B, A], Stack 2: [D, C], Stack 3: [E] | Plan so far [Move A from E to B | Move E from C to table] | Exploring action Move B from table to C | New state -> Invalid | Exploring action Move C from D to table | New state -> Stack 1: [B, A], Stack 2: [C], Stack 3: [D], Stack 4: [E] | Exploring action Move A from B to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, C], Stack 4: [E] | Exploring action Move B from table to A | New state -> Invalid | Exploring action Move C from D to E | New state -> Stack 1: [B, A], Stack 2: [D], Stack 3: [E, C] | Taking action Move C from D to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Plan so far [Move A from E to table | Move E from C to table | Move C from D to table] | Exploring action Move E from table to C | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, E], Stack 4: [D] | Exploring action Move A from table to B | New state -> Stack 1: [B, A], Stack 2: [C], Stack 3: [D], Stack 4: [E] | Exploring action Move A from table to D | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, A], Stack 4: [E] | Taking action Move C from D to table | Moved to state -> Stack 1: [B, A], Stack 2: [C], Stack 3: [D], Stack 4: [E] | Plan so far [Move A from E to B | Move E from C to table | Move C from D to table] | Exploring action Move B from table to D | New state -> Invalid | Exploring action Move C from table to E | New state -> Stack 1: [B, A], Stack 2: [D], Stack 3: [E, C] | Exploring action Move E from table to C | New state -> Stack 1: [B, A], Stack 2: [C, E], Stack 3: [D] | Exploring action Move A from B to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Taking action Move E from table to C | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, E], Stack 4: [D] | Plan so far [Move A from E to table | Move E from C to table | Move C from D to table | Move E from table to C] | Exploring action Move C from table to A | New state -> Invalid | Exploring action Move A from table to E | New state -> Stack 1: [B], Stack 2: [C, E, A], Stack 3: [D] | Exploring action Move A from table to B | New state -> Stack 1: [B, A], Stack 2: [C, E], Stack 3: [D] | Exploring action Move D from table to E | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, E, D] | Exploring action Move C from table to D | New state -> Invalid | Taking action Move E from table to C | Moved to state -> Stack 1: [B, A], Stack 2: [C, E], Stack 3: [D] | Plan so far [Move A from E to B | Move E from C to table | Move C from D to table | Move E from table to C] | Exploring action Move A from B to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, E], Stack 4: [D] | Exploring action Move D from table to E | New state -> Stack 1: [B, A], Stack 2: [C, E, D] | Exploring action Move C from table to E | New state -> Invalid | Exploring action Move A from B to E | New state -> Stack 1: [B], Stack 2: [C, E, A], Stack 3: [D] | Taking action Move D from table to E | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, E, D] | Plan so far [Move A from E to table | Move E from C to table | Move C from D to table | Move E from table to C | Move D from table to E] | Exploring action Move B from table to D | New state -> Stack 1: [A], Stack 2: [C, E, D, B] | Exploring action Move E from C to D | New state -> Invalid | Exploring action Move B from table to A | New state -> Stack 1: [A, B], Stack 2: [C, E, D] | Exploring action Move C from table to A | New state -> Invalid | Exploring action Move A from table to B | New state -> Stack 1: [B, A], Stack 2: [C, E, D] | Taking action Move D from table to E | Moved to state -> Stack 1: [B, A], Stack 2: [C, E, D] | Plan so far [Move A from E to B | Move E from C to table | Move C from D to table | Move E from table to C | Move D from table to E] | Exploring action Move D from E to table | New state -> Stack 1: [B, A], Stack 2: [C, E], Stack 3: [D] | Exploring action Move E from C to D | New state -> Invalid | Exploring action Move A from B to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, E, D] | Exploring action Move C from table to D | New state -> Invalid | Exploring action Move A from B to D | New state -> Stack 1: [B], Stack 2: [C, E, D, A] | Taking action Move B from table to D | Moved to state -> Stack 1: [A], Stack 2: [C, E, D, B] | Plan so far [Move A from E to table | Move E from C to table | Move C from D to table | Move E from table to C | Move D from table to E | Move B from table to D] | Exploring action Move D from E to table | New state -> Invalid | Exploring action Move B from D to A | New state -> Stack 1: [A, B], Stack 2: [C, E, D] | Exploring action Move A from table to B | New state -> Stack 1: [C, E, D, B, A] | Exploring action Move B from D to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, E, D] | Taking action Move A from table to B | Moved to state -> Stack 1: [C, E, D, B, A] | Plan so far [Move A from E to table | Move E from C to table | Move C from D to table | Move E from table to C | Move D from table to E | Move B from table to D | Move A from table to B] | Reached goal state!",
        "system2_states_v1": 54
    },
    {
        "idx": 688,
        "start": [
            [
                "table",
                "B"
            ],
            [
                "table",
                "C",
                "A",
                "F",
                "D",
                "E"
            ]
        ],
        "goal": [
            [
                "table",
                "D"
            ],
            [
                "table",
                "F",
                "E",
                "C",
                "A",
                "B"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": false,
                "on": "C",
                "under": "F",
                "ontable": false
            },
            "B": {
                "clear": true,
                "on": -1,
                "under": -1,
                "ontable": true
            },
            "C": {
                "clear": false,
                "on": -1,
                "under": "A",
                "ontable": true
            },
            "D": {
                "clear": false,
                "on": "F",
                "under": "E",
                "ontable": false
            },
            "E": {
                "clear": true,
                "on": "D",
                "under": -1,
                "ontable": false
            },
            "F": {
                "clear": false,
                "on": "A",
                "under": "D",
                "ontable": false
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": false,
                "on": "C",
                "under": "B",
                "ontable": false
            },
            "B": {
                "clear": true,
                "on": "A",
                "under": -1,
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": "E",
                "under": "A",
                "ontable": false
            },
            "D": {
                "clear": true,
                "on": -1,
                "under": -1,
                "ontable": true
            },
            "E": {
                "clear": false,
                "on": "F",
                "under": "C",
                "ontable": false
            },
            "F": {
                "clear": false,
                "on": -1,
                "under": "E",
                "ontable": true
            }
        },
        "plan_len": 8,
        "num_blocks": 6,
        "prompt": "The initial state:\nThe hand is empty.\nB is on the table. B is clear.\nC is on the table. A is on C. F is on A. D is on F. E is on D. E is clear.\n\nThe goal is:\nD is on the table. D is clear.\nF is on the table. E is on F. C is on E. A is on C. B is on A. B is clear.\n",
        "system1_plan": "Move E from D to table | Move D from F to table | Move F from A to table | Move A from C to table | Move E from table to F | Move C from table to E | Move A from table to C | Move B from table to A",
        "system1_states": 8,
        "system2_plan_v1": "Moved to state -> Stack 1: [B], Stack 2: [C, A, F, D, E] | Plan so far [] | Exploring action Move E from D to B | New state -> Stack 1: [B, E], Stack 2: [C, A, F, D] | Exploring action Move B from table to E | New state -> Stack 1: [C, A, F, D, E, B] | Exploring action Move C from table to B | New state -> Invalid | Exploring action Move F from A to B | New state -> Invalid | Exploring action Move E from D to table | New state -> Stack 1: [B], Stack 2: [C, A, F, D], Stack 3: [E] | Taking action Move E from D to table | Moved to state -> Stack 1: [B], Stack 2: [C, A, F, D], Stack 3: [E] | Plan so far [Move E from D to table] | Exploring action Move D from F to B | New state -> Stack 1: [B, D], Stack 2: [C, A, F], Stack 3: [E] | Exploring action Move D from F to E | New state -> Stack 1: [B], Stack 2: [C, A, F], Stack 3: [E, D] | Exploring action Move A from C to D | New state -> Invalid | Exploring action Move D from F to table | New state -> Stack 1: [B], Stack 2: [C, A, F], Stack 3: [D], Stack 4: [E] | Taking action Move D from F to table | Moved to state -> Stack 1: [B], Stack 2: [C, A, F], Stack 3: [D], Stack 4: [E] | Plan so far [Move E from D to table | Move D from F to table] | Exploring action Move F from A to table | New state -> Stack 1: [B], Stack 2: [C, A], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Exploring action Move A from C to F | New state -> Invalid | Exploring action Move F from A to B | New state -> Stack 1: [B, F], Stack 2: [C, A], Stack 3: [D], Stack 4: [E] | Exploring action Move F from A to E | New state -> Stack 1: [B], Stack 2: [C, A], Stack 3: [D], Stack 4: [E, F] | Taking action Move F from A to table | Moved to state -> Stack 1: [B], Stack 2: [C, A], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Plan so far [Move E from D to table | Move D from F to table | Move F from A to table] | Exploring action Move B from table to A | New state -> Stack 1: [C, A, B], Stack 2: [D], Stack 3: [E], Stack 4: [F] | Exploring action Move E from table to F | New state -> Stack 1: [B], Stack 2: [C, A], Stack 3: [D], Stack 4: [F, E] | Exploring action Move C from table to D | New state -> Invalid | Exploring action Move A from C to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Taking action Move B from table to A | Moved to state -> Stack 1: [C, A, B], Stack 2: [D], Stack 3: [E], Stack 4: [F] | Plan so far [Move E from D to table | Move D from F to table | Move F from A to table | Move B from table to A] | Exploring action Move E from table to F | New state -> Stack 1: [C, A, B], Stack 2: [D], Stack 3: [F, E] | Exploring action Move D from table to F | New state -> Stack 1: [C, A, B], Stack 2: [E], Stack 3: [F, D] | Exploring action Move C from table to B | New state -> Invalid | Exploring action Move F from table to E | New state -> Stack 1: [C, A, B], Stack 2: [D], Stack 3: [E, F] | Taking action Move E from table to F | Moved to state -> Stack 1: [C, A, B], Stack 2: [D], Stack 3: [F, E] | Plan so far [Move E from D to table | Move D from F to table | Move F from A to table | Move B from table to A | Move E from table to F] | Exploring action Move B from A to table | New state -> Stack 1: [B], Stack 2: [C, A], Stack 3: [D], Stack 4: [F, E] | Exploring action Move E from F to table | New state -> Stack 1: [C, A, B], Stack 2: [D], Stack 3: [E], Stack 4: [F] | Exploring action Move F from table to D | New state -> Invalid | Exploring action Move D from table to E | New state -> Stack 1: [C, A, B], Stack 2: [F, E, D] | Taking action Move A from C to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Plan so far [Move E from D to table | Move D from F to table | Move F from A to table | Move A from C to table] | Exploring action Move E from table to F | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [F, E] | Exploring action Move B from table to C | New state -> Stack 1: [A], Stack 2: [C, B], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Exploring action Move B from table to A | New state -> Stack 1: [A, B], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Taking action Move E from table to F | Moved to state -> Stack 1: [B], Stack 2: [C, A], Stack 3: [D], Stack 4: [F, E] | Plan so far [Move E from D to table | Move D from F to table | Move F from A to table | Move E from table to F] | Exploring action Move B from table to A | New state -> Stack 1: [C, A, B], Stack 2: [D], Stack 3: [F, E] | Exploring action Move C from table to B | New state -> Invalid | Exploring action Move A from C to B | New state -> Stack 1: [B, A], Stack 2: [C], Stack 3: [D], Stack 4: [F, E] | Exploring action Move A from C to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [F, E] | Taking action Move B from table to A | Moved to state -> Stack 1: [C, A, B], Stack 2: [D], Stack 3: [F, E] | Plan so far [Move E from D to table | Move D from F to table | Move F from A to table | Move E from table to F | Move B from table to A] | Taking action Move E from table to F | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [F, E] | Plan so far [Move E from D to table | Move D from F to table | Move F from A to table | Move A from C to table | Move E from table to F] | Exploring action Move F from table to E | New state -> Invalid | Exploring action Move C from table to E | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D], Stack 4: [F, E, C] | Exploring action Move B from table to A | New state -> Stack 1: [A, B], Stack 2: [C], Stack 3: [D], Stack 4: [F, E] | Exploring action Move B from table to C | New state -> Stack 1: [A], Stack 2: [C, B], Stack 3: [D], Stack 4: [F, E] | Exploring action Move F from table to A | New state -> Invalid | Taking action Move A from C to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [F, E] | Plan so far [Move E from D to table | Move D from F to table | Move F from A to table | Move E from table to F | Move A from C to table] | Taking action Move C from table to E | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [D], Stack 4: [F, E, C] | Plan so far [Move E from D to table | Move D from F to table | Move F from A to table | Move A from C to table | Move E from table to F | Move C from table to E] | Exploring action Move B from table to A | New state -> Stack 1: [A, B], Stack 2: [D], Stack 3: [F, E, C] | Exploring action Move C from E to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [F, E] | Exploring action Move A from table to C | New state -> Stack 1: [B], Stack 2: [D], Stack 3: [F, E, C, A] | Exploring action Move E from F to table | New state -> Invalid | Taking action Move A from table to C | Moved to state -> Stack 1: [B], Stack 2: [D], Stack 3: [F, E, C, A] | Plan so far [Move E from D to table | Move D from F to table | Move F from A to table | Move A from C to table | Move E from table to F | Move C from table to E | Move A from table to C] | Exploring action Move A from C to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D], Stack 4: [F, E, C] | Exploring action Move E from F to A | New state -> Invalid | Exploring action Move E from F to B | New state -> Invalid | Exploring action Move B from table to A | New state -> Stack 1: [D], Stack 2: [F, E, C, A, B] | Exploring action Move D from table to A | New state -> Stack 1: [B], Stack 2: [F, E, C, A, D] | Taking action Move B from table to A | Moved to state -> Stack 1: [D], Stack 2: [F, E, C, A, B] | Plan so far [Move E from D to table | Move D from F to table | Move F from A to table | Move A from C to table | Move E from table to F | Move C from table to E | Move A from table to C | Move B from table to A] | Reached goal state!",
        "system2_states_v1": 46
    },
    {
        "idx": 912,
        "start": [
            [
                "table",
                "D",
                "C",
                "F"
            ],
            [
                "table",
                "E",
                "G",
                "A",
                "B"
            ]
        ],
        "goal": [
            [
                "table",
                "A",
                "D",
                "E"
            ],
            [
                "table",
                "G",
                "B",
                "F",
                "C"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": false,
                "on": "G",
                "under": "B",
                "ontable": false
            },
            "B": {
                "clear": true,
                "on": "A",
                "under": -1,
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": "D",
                "under": "F",
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": -1,
                "under": "C",
                "ontable": true
            },
            "E": {
                "clear": false,
                "on": -1,
                "under": "G",
                "ontable": true
            },
            "F": {
                "clear": true,
                "on": "C",
                "under": -1,
                "ontable": false
            },
            "G": {
                "clear": false,
                "on": "E",
                "under": "A",
                "ontable": false
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": false,
                "on": -1,
                "under": "D",
                "ontable": true
            },
            "B": {
                "clear": false,
                "on": "G",
                "under": "F",
                "ontable": false
            },
            "C": {
                "clear": true,
                "on": "F",
                "under": -1,
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": "A",
                "under": "E",
                "ontable": false
            },
            "E": {
                "clear": true,
                "on": "D",
                "under": -1,
                "ontable": false
            },
            "F": {
                "clear": false,
                "on": "B",
                "under": "C",
                "ontable": false
            },
            "G": {
                "clear": false,
                "on": -1,
                "under": "B",
                "ontable": true
            }
        },
        "plan_len": 10,
        "num_blocks": 7,
        "prompt": "The initial state:\nThe hand is empty.\nD is on the table. C is on D. F is on C. F is clear.\nE is on the table. G is on E. A is on G. B is on A. B is clear.\n\nThe goal is:\nA is on the table. D is on A. E is on D. E is clear.\nG is on the table. B is on G. F is on B. C is on F. C is clear.\n",
        "system1_plan": "Move B from A to table | Move A from G to table | Move F from C to table | Move G from E to table | Move C from D to table | Move D from table to A | Move E from table to D | Move B from table to G | Move F from table to B | Move C from table to F",
        "system1_states": 10,
        "system2_plan_v1": "Moved to state -> Stack 1: [D, C, F], Stack 2: [E, G, A, B] | Plan so far [] | Exploring action Move B from A to F | New state -> Stack 1: [D, C, F, B], Stack 2: [E, G, A] | Exploring action Move B from A to table | New state -> Stack 1: [B], Stack 2: [D, C, F], Stack 3: [E, G, A] | Exploring action Move G from E to table | New state -> Invalid | Exploring action Move F from C to table | New state -> Stack 1: [D, C], Stack 2: [E, G, A, B], Stack 3: [F] | Taking action Move B from A to table | Moved to state -> Stack 1: [B], Stack 2: [D, C, F], Stack 3: [E, G, A] | Plan so far [Move B from A to table] | Exploring action Move C from D to B | New state -> Invalid | Exploring action Move F from C to A | New state -> Stack 1: [B], Stack 2: [D, C], Stack 3: [E, G, A, F] | Exploring action Move C from D to table | New state -> Invalid | Exploring action Move A from G to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, C, F], Stack 4: [E, G] | Exploring action Move F from C to table | New state -> Stack 1: [B], Stack 2: [D, C], Stack 3: [E, G, A], Stack 4: [F] | Taking action Move F from C to table | Moved to state -> Stack 1: [D, C], Stack 2: [E, G, A, B], Stack 3: [F] | Plan so far [Move F from C to table] | Exploring action Move C from D to table | New state -> Stack 1: [C], Stack 2: [D], Stack 3: [E, G, A, B], Stack 4: [F] | Exploring action Move D from table to F | New state -> Invalid | Exploring action Move B from A to table | New state -> Stack 1: [B], Stack 2: [D, C], Stack 3: [E, G, A], Stack 4: [F] | Exploring action Move C from D to F | New state -> Stack 1: [D], Stack 2: [E, G, A, B], Stack 3: [F, C] | Taking action Move A from G to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, C, F], Stack 4: [E, G] | Plan so far [Move B from A to table | Move A from G to table] | Exploring action Move C from D to A | New state -> Invalid | Exploring action Move F from C to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, C], Stack 4: [E, G], Stack 5: [F] | Exploring action Move D from table to G | New state -> Invalid | Exploring action Move G from E to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, C, F], Stack 4: [E], Stack 5: [G] | Exploring action Move G from E to A | New state -> Stack 1: [A, G], Stack 2: [B], Stack 3: [D, C, F], Stack 4: [E] | Taking action Move C from D to table | Moved to state -> Stack 1: [C], Stack 2: [D], Stack 3: [E, G, A, B], Stack 4: [F] | Plan so far [Move F from C to table | Move C from D to table] | Exploring action Move B from A to table | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D], Stack 4: [E, G, A], Stack 5: [F] | Exploring action Move A from G to B | New state -> Invalid | Exploring action Move C from table to F | New state -> Stack 1: [D], Stack 2: [E, G, A, B], Stack 3: [F, C] | Exploring action Move B from A to D | New state -> Stack 1: [C], Stack 2: [D, B], Stack 3: [E, G, A], Stack 4: [F] | Taking action Move F from C to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, C], Stack 4: [E, G], Stack 5: [F] | Plan so far [Move B from A to table | Move A from G to table | Move F from C to table] | Exploring action Move G from E to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, C], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Exploring action Move D from table to C | New state -> Invalid | Exploring action Move C from D to F | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D], Stack 4: [E, G], Stack 5: [F, C] | Exploring action Move C from D to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E, G], Stack 6: [F] | Taking action Move G from E to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, C, F], Stack 4: [E], Stack 5: [G] | Plan so far [Move B from A to table | Move A from G to table | Move G from E to table] | Exploring action Move D from table to B | New state -> Invalid | Exploring action Move F from C to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, C], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Exploring action Move B from table to G | New state -> Stack 1: [A], Stack 2: [D, C, F], Stack 3: [E], Stack 4: [G, B] | Exploring action Move F from C to A | New state -> Stack 1: [A, F], Stack 2: [B], Stack 3: [D, C], Stack 4: [E], Stack 5: [G] | Taking action Move B from A to table | Moved to state -> Stack 1: [B], Stack 2: [C], Stack 3: [D], Stack 4: [E, G, A], Stack 5: [F] | Plan so far [Move F from C to table | Move C from D to table | Move B from A to table] | Exploring action Move A from G to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E, G], Stack 6: [F] | Exploring action Move A from G to C | New state -> Stack 1: [B], Stack 2: [C, A], Stack 3: [D], Stack 4: [E, G], Stack 5: [F] | Exploring action Move C from table to F | New state -> Stack 1: [B], Stack 2: [D], Stack 3: [E, G, A], Stack 4: [F, C] | Exploring action Move G from E to B | New state -> Invalid | Exploring action Move E from table to A | New state -> Invalid | Taking action Move G from E to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, C], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Plan so far [Move B from A to table | Move A from G to table | Move F from C to table | Move G from E to table] | Exploring action Move B from table to G | New state -> Stack 1: [A], Stack 2: [D, C], Stack 3: [E], Stack 4: [F], Stack 5: [G, B] | Exploring action Move C from D to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F], Stack 7: [G] | Exploring action Move C from D to F | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D], Stack 4: [E], Stack 5: [F, C], Stack 6: [G] | Exploring action Move D from table to F | New state -> Invalid | Exploring action Move D from table to C | New state -> Invalid | Taking action Move C from D to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E, G], Stack 6: [F] | Plan so far [Move B from A to table | Move A from G to table | Move F from C to table | Move C from D to table] | Exploring action Move E from table to C | New state -> Invalid | Exploring action Move G from E to B | New state -> Stack 1: [A], Stack 2: [B, G], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Exploring action Move E from table to A | New state -> Invalid | Exploring action Move D from table to A | New state -> Stack 1: [A, D], Stack 2: [B], Stack 3: [C], Stack 4: [E, G], Stack 5: [F] | Exploring action Move G from E to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F], Stack 7: [G] | Taking action Move C from D to F | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [D], Stack 4: [E, G], Stack 5: [F, C] | Plan so far [Move B from A to table | Move A from G to table | Move F from C to table | Move C from D to F] | Exploring action Move C from F to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E, G], Stack 6: [F] | Exploring action Move G from E to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D], Stack 4: [E], Stack 5: [F, C], Stack 6: [G] | Exploring action Move D from table to A | New state -> Stack 1: [A, D], Stack 2: [B], Stack 3: [E, G], Stack 4: [F, C] | Exploring action Move F from table to A | New state -> Invalid | Taking action Move B from table to G | Moved to state -> Stack 1: [A], Stack 2: [D, C], Stack 3: [E], Stack 4: [F], Stack 5: [G, B] | Plan so far [Move B from A to table | Move A from G to table | Move F from C to table | Move G from E to table | Move B from table to G] | Exploring action Move C from D to table | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [F], Stack 6: [G, B] | Exploring action Move F from table to B | New state -> Stack 1: [A], Stack 2: [D, C], Stack 3: [E], Stack 4: [G, B, F] | Exploring action Move C from D to F | New state -> Stack 1: [A], Stack 2: [D], Stack 3: [E], Stack 4: [F, C], Stack 5: [G, B] | Exploring action Move D from table to F | New state -> Invalid | Exploring action Move G from table to A | New state -> Invalid | Taking action Move C from D to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F], Stack 7: [G] | Plan so far [Move B from A to table | Move A from G to table | Move F from C to table | Move G from E to table | Move C from D to table] | Exploring action Move B from table to G | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [F], Stack 6: [G, B] | Exploring action Move E from table to D | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D, E], Stack 5: [F], Stack 6: [G] | Exploring action Move D from table to A | New state -> Stack 1: [A, D], Stack 2: [B], Stack 3: [C], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Taking action Move C from D to F | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [D], Stack 4: [E], Stack 5: [F, C], Stack 6: [G] | Plan so far [Move B from A to table | Move A from G to table | Move F from C to table | Move G from E to table | Move C from D to F] | Exploring action Move B from table to G | New state -> Stack 1: [A], Stack 2: [D], Stack 3: [E], Stack 4: [F, C], Stack 5: [G, B] | Exploring action Move E from table to D | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, E], Stack 4: [F, C], Stack 5: [G] | Exploring action Move D from table to A | New state -> Stack 1: [A, D], Stack 2: [B], Stack 3: [E], Stack 4: [F, C], Stack 5: [G] | Exploring action Move F from table to B | New state -> Invalid | Taking action Move C from D to table | Moved to state -> Stack 1: [A], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [F], Stack 6: [G, B] | Plan so far [Move B from A to table | Move A from G to table | Move F from C to table | Move G from E to table | Move B from table to G | Move C from D to table] | Exploring action Move D from table to A | New state -> Stack 1: [A, D], Stack 2: [C], Stack 3: [E], Stack 4: [F], Stack 5: [G, B] | Exploring action Move E from table to D | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, E], Stack 4: [F], Stack 5: [G, B] | Exploring action Move F from table to B | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [G, B, F] | Exploring action Move G from table to E | New state -> Invalid | Taking action Move D from table to A | Moved to state -> Stack 1: [A, D], Stack 2: [B], Stack 3: [C], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Plan so far [Move B from A to table | Move A from G to table | Move F from C to table | Move G from E to table | Move C from D to table | Move D from table to A] | Exploring action Move B from table to G | New state -> Stack 1: [A, D], Stack 2: [C], Stack 3: [E], Stack 4: [F], Stack 5: [G, B] | Exploring action Move A from table to E | New state -> Invalid | Exploring action Move E from table to D | New state -> Stack 1: [A, D, E], Stack 2: [B], Stack 3: [C], Stack 4: [F], Stack 5: [G] | Exploring action Move C from table to F | New state -> Stack 1: [A, D], Stack 2: [B], Stack 3: [E], Stack 4: [F, C], Stack 5: [G] | Taking action Move E from table to D | Moved to state -> Stack 1: [A, D, E], Stack 2: [B], Stack 3: [C], Stack 4: [F], Stack 5: [G] | Plan so far [Move B from A to table | Move A from G to table | Move F from C to table | Move G from E to table | Move C from D to table | Move D from table to A | Move E from table to D] | Exploring action Move C from table to F | New state -> Stack 1: [A, D, E], Stack 2: [B], Stack 3: [F, C], Stack 4: [G] | Exploring action Move B from table to F | New state -> Stack 1: [A, D, E], Stack 2: [C], Stack 3: [F, B], Stack 4: [G] | Exploring action Move A from table to G | New state -> Invalid | Exploring action Move B from table to G | New state -> Stack 1: [A, D, E], Stack 2: [C], Stack 3: [F], Stack 4: [G, B] | Taking action Move B from table to G | Moved to state -> Stack 1: [A, D, E], Stack 2: [C], Stack 3: [F], Stack 4: [G, B] | Plan so far [Move B from A to table | Move A from G to table | Move F from C to table | Move G from E to table | Move C from D to table | Move D from table to A | Move E from table to D | Move B from table to G] | Exploring action Move F from table to B | New state -> Stack 1: [A, D, E], Stack 2: [C], Stack 3: [G, B, F] | Exploring action Move B from G to table | New state -> Stack 1: [A, D, E], Stack 2: [B], Stack 3: [C], Stack 4: [F], Stack 5: [G] | Exploring action Move C from table to F | New state -> Stack 1: [A, D, E], Stack 2: [F, C], Stack 3: [G, B] | Exploring action Move G from table to E | New state -> Invalid | Taking action Move F from table to B | Moved to state -> Stack 1: [A, D, E], Stack 2: [C], Stack 3: [G, B, F] | Plan so far [Move B from A to table | Move A from G to table | Move F from C to table | Move G from E to table | Move C from D to table | Move D from table to A | Move E from table to D | Move B from table to G | Move F from table to B] | Exploring action Move A from table to F | New state -> Invalid | Exploring action Move F from B to C | New state -> Stack 1: [A, D, E], Stack 2: [C, F], Stack 3: [G, B] | Exploring action Move C from table to F | New state -> Stack 1: [A, D, E], Stack 2: [G, B, F, C] | Exploring action Move F from B to table | New state -> Stack 1: [A, D, E], Stack 2: [C], Stack 3: [F], Stack 4: [G, B] | Exploring action Move B from G to C | New state -> Invalid | Taking action Move C from table to F | Moved to state -> Stack 1: [A, D, E], Stack 2: [G, B, F, C] | Plan so far [Move B from A to table | Move A from G to table | Move F from C to table | Move G from E to table | Move C from D to table | Move D from table to A | Move E from table to D | Move B from table to G | Move F from table to B | Move C from table to F] | Reached goal state!",
        "system2_states_v1": 82
    },
    {
        "idx": 723,
        "start": [
            [
                "table",
                "B",
                "A"
            ],
            [
                "table",
                "C",
                "F",
                "E",
                "D"
            ]
        ],
        "goal": [
            [
                "table",
                "C"
            ],
            [
                "table",
                "E",
                "D",
                "B",
                "A",
                "F"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": true,
                "on": "B",
                "under": -1,
                "ontable": false
            },
            "B": {
                "clear": false,
                "on": -1,
                "under": "A",
                "ontable": true
            },
            "C": {
                "clear": false,
                "on": -1,
                "under": "F",
                "ontable": true
            },
            "D": {
                "clear": true,
                "on": "E",
                "under": -1,
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": "F",
                "under": "D",
                "ontable": false
            },
            "F": {
                "clear": false,
                "on": "C",
                "under": "E",
                "ontable": false
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": false,
                "on": "B",
                "under": "F",
                "ontable": false
            },
            "B": {
                "clear": false,
                "on": "D",
                "under": "A",
                "ontable": false
            },
            "C": {
                "clear": true,
                "on": -1,
                "under": -1,
                "ontable": true
            },
            "D": {
                "clear": false,
                "on": "E",
                "under": "B",
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": -1,
                "under": "D",
                "ontable": true
            },
            "F": {
                "clear": true,
                "on": "A",
                "under": -1,
                "ontable": false
            }
        },
        "plan_len": 8,
        "num_blocks": 6,
        "prompt": "The initial state:\nThe hand is empty.\nB is on the table. A is on B. A is clear.\nC is on the table. F is on C. E is on F. D is on E. D is clear.\n\nThe goal is:\nC is on the table. C is clear.\nE is on the table. D is on E. B is on D. A is on B. F is on A. F is clear.\n",
        "system1_plan": "Move D from E to table | Move E from F to table | Move F from C to table | Move D from table to E | Move A from B to table | Move B from table to D | Move A from table to B | Move F from table to A",
        "system1_states": 8,
        "system2_plan_v1": "Moved to state -> Stack 1: [B, A], Stack 2: [C, F, E, D] | Plan so far [] | Exploring action Move D from E to table | New state -> Stack 1: [B, A], Stack 2: [C, F, E], Stack 3: [D] | Exploring action Move A from B to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, F, E, D] | Exploring action Move A from B to D | New state -> Stack 1: [B], Stack 2: [C, F, E, D, A] | Exploring action Move B from table to A | New state -> Invalid | Exploring action Move F from C to table | New state -> Invalid | Taking action Move A from B to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, F, E, D] | Plan so far [Move A from B to table] | Exploring action Move B from table to D | New state -> Stack 1: [A], Stack 2: [C, F, E, D, B] | Exploring action Move E from F to D | New state -> Invalid | Exploring action Move D from E to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, F, E], Stack 4: [D] | Exploring action Move D from E to A | New state -> Stack 1: [A, D], Stack 2: [B], Stack 3: [C, F, E] | Taking action Move D from E to table | Moved to state -> Stack 1: [B, A], Stack 2: [C, F, E], Stack 3: [D] | Plan so far [Move D from E to table] | Exploring action Move E from F to A | New state -> Stack 1: [B, A, E], Stack 2: [C, F], Stack 3: [D] | Exploring action Move C from table to D | New state -> Invalid | Exploring action Move E from F to table | New state -> Stack 1: [B, A], Stack 2: [C, F], Stack 3: [D], Stack 4: [E] | Exploring action Move F from C to E | New state -> Invalid | Exploring action Move A from B to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, F, E], Stack 4: [D] | Taking action Move B from table to D | Moved to state -> Stack 1: [A], Stack 2: [C, F, E, D, B] | Plan so far [Move A from B to table | Move B from table to D] | Exploring action Move B from D to A | New state -> Stack 1: [A, B], Stack 2: [C, F, E, D] | Exploring action Move B from D to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, F, E, D] | Exploring action Move F from C to table | New state -> Invalid | Exploring action Move A from table to B | New state -> Stack 1: [C, F, E, D, B, A] | Taking action Move E from F to table | Moved to state -> Stack 1: [B, A], Stack 2: [C, F], Stack 3: [D], Stack 4: [E] | Plan so far [Move D from E to table | Move E from F to table] | Exploring action Move F from C to A | New state -> Stack 1: [B, A, F], Stack 2: [C], Stack 3: [D], Stack 4: [E] | Exploring action Move C from table to F | New state -> Invalid | Exploring action Move F from C to table | New state -> Stack 1: [B, A], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Exploring action Move F from C to E | New state -> Stack 1: [B, A], Stack 2: [C], Stack 3: [D], Stack 4: [E, F] | Exploring action Move B from table to F | New state -> Invalid | Taking action Move F from C to A | Moved to state -> Stack 1: [B, A, F], Stack 2: [C], Stack 3: [D], Stack 4: [E] | Plan so far [Move D from E to table | Move E from F to table | Move F from C to A] | Exploring action Move D from table to F | New state -> Stack 1: [B, A, F, D], Stack 2: [C], Stack 3: [E] | Exploring action Move E from table to D | New state -> Stack 1: [B, A, F], Stack 2: [C], Stack 3: [D, E] | Exploring action Move A from B to table | New state -> Invalid | Exploring action Move A from B to E | New state -> Invalid | Exploring action Move D from table to E | New state -> Stack 1: [B, A, F], Stack 2: [C], Stack 3: [E, D] | Taking action Move D from table to E | Moved to state -> Stack 1: [B, A, F], Stack 2: [C], Stack 3: [E, D] | Plan so far [Move D from E to table | Move E from F to table | Move F from C to A | Move D from table to E] | Exploring action Move D from E to table | New state -> Stack 1: [B, A, F], Stack 2: [C], Stack 3: [D], Stack 4: [E] | Exploring action Move A from B to C | New state -> Invalid | Exploring action Move C from table to D | New state -> Stack 1: [B, A, F], Stack 2: [E, D, C] | Exploring action Move F from A to table | New state -> Stack 1: [B, A], Stack 2: [C], Stack 3: [E, D], Stack 4: [F] | Taking action Move F from C to table | Moved to state -> Stack 1: [B, A], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Plan so far [Move D from E to table | Move E from F to table | Move F from C to table] | Exploring action Move B from table to C | New state -> Invalid | Exploring action Move B from table to F | New state -> Invalid | Exploring action Move A from B to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Exploring action Move D from table to E | New state -> Stack 1: [B, A], Stack 2: [C], Stack 3: [E, D], Stack 4: [F] | Exploring action Move F from table to A | New state -> Stack 1: [B, A, F], Stack 2: [C], Stack 3: [D], Stack 4: [E] | Taking action Move F from table to A | Moved to state -> Stack 1: [B, A, F], Stack 2: [C], Stack 3: [D], Stack 4: [E] | Plan so far [Move D from E to table | Move E from F to table | Move F from C to table | Move F from table to A] | Taking action Move A from B to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Plan so far [Move D from E to table | Move E from F to table | Move F from C to table | Move A from B to table] | Exploring action Move F from table to A | New state -> Stack 1: [A, F], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Exploring action Move D from table to E | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [E, D], Stack 5: [F] | Exploring action Move F from table to D | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D, F], Stack 5: [E] | Taking action Move D from table to E | Moved to state -> Stack 1: [B, A], Stack 2: [C], Stack 3: [E, D], Stack 4: [F] | Plan so far [Move D from E to table | Move E from F to table | Move F from C to table | Move D from table to E] | Exploring action Move A from B to D | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [E, D, A], Stack 4: [F] | Exploring action Move A from B to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [E, D], Stack 5: [F] | Exploring action Move E from table to F | New state -> Invalid | Exploring action Move F from table to A | New state -> Stack 1: [B, A, F], Stack 2: [C], Stack 3: [E, D] | Exploring action Move B from table to C | New state -> Invalid | Taking action Move F from table to A | Moved to state -> Stack 1: [B, A, F], Stack 2: [C], Stack 3: [E, D] | Plan so far [Move D from E to table | Move E from F to table | Move F from C to table | Move D from table to E | Move F from table to A] | Taking action Move E from table to D | Moved to state -> Stack 1: [B, A, F], Stack 2: [C], Stack 3: [D, E] | Plan so far [Move D from E to table | Move E from F to table | Move F from C to A | Move E from table to D] | Exploring action Move E from D to F | New state -> Stack 1: [B, A, F, E], Stack 2: [C], Stack 3: [D] | Exploring action Move D from table to C | New state -> Invalid | Exploring action Move E from D to table | New state -> Stack 1: [B, A, F], Stack 2: [C], Stack 3: [D], Stack 4: [E] | Exploring action Move E from D to C | New state -> Stack 1: [B, A, F], Stack 2: [C, E], Stack 3: [D] | Taking action Move A from B to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [E, D], Stack 5: [F] | Plan so far [Move D from E to table | Move E from F to table | Move F from C to table | Move D from table to E | Move A from B to table] | Exploring action Move F from table to A | New state -> Stack 1: [A, F], Stack 2: [B], Stack 3: [C], Stack 4: [E, D] | Exploring action Move A from table to B | New state -> Stack 1: [B, A], Stack 2: [C], Stack 3: [E, D], Stack 4: [F] | Exploring action Move E from table to C | New state -> Invalid | Exploring action Move E from table to F | New state -> Invalid | Exploring action Move B from table to D | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [E, D, B], Stack 4: [F] | Taking action Move E from D to table | Moved to state -> Stack 1: [B, A, F], Stack 2: [C], Stack 3: [D], Stack 4: [E] | Plan so far [Move D from E to table | Move E from F to table | Move F from C to A | Move E from table to D | Move E from D to table] | Taking action Move B from table to D | Moved to state -> Stack 1: [A], Stack 2: [C], Stack 3: [E, D, B], Stack 4: [F] | Plan so far [Move D from E to table | Move E from F to table | Move F from C to table | Move D from table to E | Move A from B to table | Move B from table to D] | Exploring action Move E from table to B | New state -> Invalid | Exploring action Move D from E to table | New state -> Invalid | Exploring action Move A from table to B | New state -> Stack 1: [C], Stack 2: [E, D, B, A], Stack 3: [F] | Exploring action Move F from table to A | New state -> Stack 1: [A, F], Stack 2: [C], Stack 3: [E, D, B] | Exploring action Move A from table to F | New state -> Stack 1: [C], Stack 2: [E, D, B], Stack 3: [F, A] | Taking action Move D from table to E | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [E, D], Stack 5: [F] | Plan so far [Move D from E to table | Move E from F to table | Move F from C to table | Move A from B to table | Move D from table to E] | Taking action Move D from E to table | Moved to state -> Stack 1: [B, A, F], Stack 2: [C], Stack 3: [D], Stack 4: [E] | Plan so far [Move D from E to table | Move E from F to table | Move F from C to A | Move D from table to E | Move D from E to table] | Taking action Move A from table to B | Moved to state -> Stack 1: [C], Stack 2: [E, D, B, A], Stack 3: [F] | Plan so far [Move D from E to table | Move E from F to table | Move F from C to table | Move D from table to E | Move A from B to table | Move B from table to D | Move A from table to B] | Exploring action Move A from B to F | New state -> Stack 1: [C], Stack 2: [E, D, B], Stack 3: [F, A] | Exploring action Move A from B to table | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [E, D, B], Stack 4: [F] | Exploring action Move D from E to table | New state -> Invalid | Exploring action Move F from table to A | New state -> Stack 1: [C], Stack 2: [E, D, B, A, F] | Taking action Move F from table to A | Moved to state -> Stack 1: [C], Stack 2: [E, D, B, A, F] | Plan so far [Move D from E to table | Move E from F to table | Move F from C to table | Move D from table to E | Move A from B to table | Move B from table to D | Move A from table to B | Move F from table to A] | Reached goal state!",
        "system2_states_v1": 63
    },
    {
        "idx": 602,
        "start": [
            [
                "table",
                "E",
                "B",
                "A",
                "D",
                "C"
            ]
        ],
        "goal": [
            [
                "table",
                "A"
            ],
            [
                "table",
                "D",
                "E",
                "C",
                "B"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": false,
                "on": "B",
                "under": "D",
                "ontable": false
            },
            "B": {
                "clear": false,
                "on": "E",
                "under": "A",
                "ontable": false
            },
            "C": {
                "clear": true,
                "on": "D",
                "under": -1,
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": "A",
                "under": "C",
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": -1,
                "under": "B",
                "ontable": true
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": true,
                "on": -1,
                "under": -1,
                "ontable": true
            },
            "B": {
                "clear": true,
                "on": "C",
                "under": -1,
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": "E",
                "under": "B",
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": -1,
                "under": "E",
                "ontable": true
            },
            "E": {
                "clear": false,
                "on": "D",
                "under": "C",
                "ontable": false
            }
        },
        "plan_len": 7,
        "num_blocks": 5,
        "prompt": "The initial state:\nThe hand is empty.\nE is on the table. B is on E. A is on B. D is on A. C is on D. C is clear.\n\nThe goal is:\nA is on the table. A is clear.\nD is on the table. E is on D. C is on E. B is on C. B is clear.\n",
        "system1_plan": "Move C from D to table | Move D from A to table | Move A from B to table | Move B from E to table | Move E from table to D | Move C from table to E | Move B from table to C",
        "system1_states": 7,
        "system2_plan_v1": "Moved to state -> Stack 1: [E, B, A, D, C] | Plan so far [] | Exploring action Move C from D to table | New state -> Stack 1: [C], Stack 2: [E, B, A, D] | Exploring action Move D from A to C | New state -> Invalid | Taking action Move C from D to table | Moved to state -> Stack 1: [C], Stack 2: [E, B, A, D] | Plan so far [Move C from D to table] | Exploring action Move D from A to C | New state -> Stack 1: [C, D], Stack 2: [E, B, A] | Exploring action Move C from table to D | New state -> Stack 1: [E, B, A, D, C] | Exploring action Move A from B to C | New state -> Invalid | Exploring action Move D from A to table | New state -> Stack 1: [C], Stack 2: [D], Stack 3: [E, B, A] | Taking action Move D from A to table | Moved to state -> Stack 1: [C], Stack 2: [D], Stack 3: [E, B, A] | Plan so far [Move C from D to table | Move D from A to table] | Exploring action Move A from B to table | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D], Stack 4: [E, B] | Exploring action Move E from table to D | New state -> Invalid | Exploring action Move E from table to A | New state -> Invalid | Exploring action Move A from B to C | New state -> Stack 1: [C, A], Stack 2: [D], Stack 3: [E, B] | Exploring action Move A from B to D | New state -> Stack 1: [C], Stack 2: [D, A], Stack 3: [E, B] | Taking action Move A from B to table | Moved to state -> Stack 1: [A], Stack 2: [C], Stack 3: [D], Stack 4: [E, B] | Plan so far [Move C from D to table | Move D from A to table | Move A from B to table] | Exploring action Move B from E to C | New state -> Stack 1: [A], Stack 2: [C, B], Stack 3: [D], Stack 4: [E] | Exploring action Move B from E to D | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, B], Stack 4: [E] | Exploring action Move E from table to C | New state -> Invalid | Exploring action Move B from E to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Exploring action Move E from table to D | New state -> Invalid | Taking action Move B from E to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Plan so far [Move C from D to table | Move D from A to table | Move A from B to table | Move B from E to table] | Exploring action Move B from table to C | New state -> Stack 1: [A], Stack 2: [C, B], Stack 3: [D], Stack 4: [E] | Exploring action Move B from table to D | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, B], Stack 4: [E] | Exploring action Move E from table to D | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D, E] | Taking action Move B from E to C | Moved to state -> Stack 1: [A], Stack 2: [C, B], Stack 3: [D], Stack 4: [E] | Plan so far [Move C from D to table | Move D from A to table | Move A from B to table | Move B from E to C] | Exploring action Move B from C to E | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D], Stack 4: [E, B] | Exploring action Move E from table to D | New state -> Stack 1: [A], Stack 2: [C, B], Stack 3: [D, E] | Exploring action Move B from C to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Exploring action Move C from table to B | New state -> Invalid | Taking action Move E from table to D | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D, E] | Plan so far [Move C from D to table | Move D from A to table | Move A from B to table | Move B from E to table | Move E from table to D] | Exploring action Move C from table to E | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, E, C] | Exploring action Move D from table to A | New state -> Invalid | Exploring action Move B from table to C | New state -> Stack 1: [A], Stack 2: [C, B], Stack 3: [D, E] | Exploring action Move B from table to E | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, E, B] | Taking action Move E from table to D | Moved to state -> Stack 1: [A], Stack 2: [C, B], Stack 3: [D, E] | Plan so far [Move C from D to table | Move D from A to table | Move A from B to table | Move B from E to C | Move E from table to D] | Exploring action Move D from table to A | New state -> Invalid | Exploring action Move D from table to B | New state -> Invalid | Exploring action Move B from C to E | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, E, B] | Exploring action Move E from D to table | New state -> Stack 1: [A], Stack 2: [C, B], Stack 3: [D], Stack 4: [E] | Exploring action Move B from C to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D, E] | Taking action Move C from table to E | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, E, C] | Plan so far [Move C from D to table | Move D from A to table | Move A from B to table | Move B from E to table | Move E from table to D | Move C from table to E] | Exploring action Move B from table to C | New state -> Stack 1: [A], Stack 2: [D, E, C, B] | Exploring action Move E from D to B | New state -> Invalid | Exploring action Move B from table to A | New state -> Stack 1: [A, B], Stack 2: [D, E, C] | Exploring action Move C from E to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D, E] | Taking action Move B from table to C | Moved to state -> Stack 1: [A], Stack 2: [D, E, C, B] | Plan so far [Move C from D to table | Move D from A to table | Move A from B to table | Move B from E to table | Move E from table to D | Move C from table to E | Move B from table to C] | Reached goal state!",
        "system2_states_v1": 36
    },
    {
        "idx": 792,
        "start": [
            [
                "table",
                "B",
                "E",
                "F"
            ],
            [
                "table",
                "C",
                "A",
                "D"
            ]
        ],
        "goal": [
            [
                "table",
                "F",
                "D",
                "B",
                "E",
                "C",
                "A"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": false,
                "on": "C",
                "under": "D",
                "ontable": false
            },
            "B": {
                "clear": false,
                "on": -1,
                "under": "E",
                "ontable": true
            },
            "C": {
                "clear": false,
                "on": -1,
                "under": "A",
                "ontable": true
            },
            "D": {
                "clear": true,
                "on": "A",
                "under": -1,
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": "B",
                "under": "F",
                "ontable": false
            },
            "F": {
                "clear": true,
                "on": "E",
                "under": -1,
                "ontable": false
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": true,
                "on": "C",
                "under": -1,
                "ontable": false
            },
            "B": {
                "clear": false,
                "on": "D",
                "under": "E",
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": "E",
                "under": "A",
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": "F",
                "under": "B",
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": "B",
                "under": "C",
                "ontable": false
            },
            "F": {
                "clear": false,
                "on": -1,
                "under": "D",
                "ontable": true
            }
        },
        "plan_len": 9,
        "num_blocks": 6,
        "prompt": "The initial state:\nThe hand is empty.\nB is on the table. E is on B. F is on E. F is clear.\nC is on the table. A is on C. D is on A. D is clear.\n\nThe goal is:\nF is on the table. D is on F. B is on D. E is on B. C is on E. A is on C. A is clear.\n",
        "system1_plan": "Move D from A to table | Move F from E to table | Move D from table to F | Move E from B to table | Move A from C to table | Move B from table to D | Move E from table to B | Move C from table to E | Move A from table to C",
        "system1_states": 9,
        "system2_plan_v1": "Moved to state -> Stack 1: [B, E, F], Stack 2: [C, A, D] | Plan so far [] | Exploring action Move C from table to F | New state -> Invalid | Exploring action Move D from A to F | New state -> Stack 1: [B, E, F, D], Stack 2: [C, A] | Exploring action Move F from E to table | New state -> Stack 1: [B, E], Stack 2: [C, A, D], Stack 3: [F] | Exploring action Move B from table to D | New state -> Invalid | Exploring action Move D from A to table | New state -> Stack 1: [B, E, F], Stack 2: [C, A], Stack 3: [D] | Taking action Move D from A to table | Moved to state -> Stack 1: [B, E, F], Stack 2: [C, A], Stack 3: [D] | Plan so far [Move D from A to table] | Exploring action Move B from table to D | New state -> Invalid | Exploring action Move F from E to D | New state -> Stack 1: [B, E], Stack 2: [C, A], Stack 3: [D, F] | Exploring action Move E from B to F | New state -> Invalid | Exploring action Move A from C to table | New state -> Stack 1: [A], Stack 2: [B, E, F], Stack 3: [C], Stack 4: [D] | Exploring action Move F from E to table | New state -> Stack 1: [B, E], Stack 2: [C, A], Stack 3: [D], Stack 4: [F] | Taking action Move F from E to table | Moved to state -> Stack 1: [B, E], Stack 2: [C, A], Stack 3: [D], Stack 4: [F] | Plan so far [Move D from A to table | Move F from E to table] | Exploring action Move E from B to table | New state -> Stack 1: [B], Stack 2: [C, A], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Exploring action Move B from table to F | New state -> Invalid | Exploring action Move D from table to F | New state -> Stack 1: [B, E], Stack 2: [C, A], Stack 3: [F, D] | Exploring action Move A from C to table | New state -> Stack 1: [A], Stack 2: [B, E], Stack 3: [C], Stack 4: [D], Stack 5: [F] | Exploring action Move C from table to F | New state -> Invalid | Taking action Move D from table to F | Moved to state -> Stack 1: [B, E], Stack 2: [C, A], Stack 3: [F, D] | Plan so far [Move D from A to table | Move F from E to table | Move D from table to F] | Exploring action Move E from B to table | New state -> Stack 1: [B], Stack 2: [C, A], Stack 3: [E], Stack 4: [F, D] | Exploring action Move A from C to table | New state -> Stack 1: [A], Stack 2: [B, E], Stack 3: [C], Stack 4: [F, D] | Exploring action Move C from table to A | New state -> Invalid | Exploring action Move E from B to D | New state -> Stack 1: [B], Stack 2: [C, A], Stack 3: [F, D, E] | Taking action Move E from B to table | Moved to state -> Stack 1: [B], Stack 2: [C, A], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Plan so far [Move D from A to table | Move F from E to table | Move E from B to table] | Exploring action Move A from C to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Exploring action Move C from table to B | New state -> Invalid | Exploring action Move B from table to D | New state -> Stack 1: [C, A], Stack 2: [D, B], Stack 3: [E], Stack 4: [F] | Exploring action Move D from table to F | New state -> Stack 1: [B], Stack 2: [C, A], Stack 3: [E], Stack 4: [F, D] | Taking action Move E from B to table | Moved to state -> Stack 1: [B], Stack 2: [C, A], Stack 3: [E], Stack 4: [F, D] | Plan so far [Move D from A to table | Move F from E to table | Move D from table to F | Move E from B to table] | Exploring action Move A from C to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [E], Stack 5: [F, D] | Exploring action Move B from table to D | New state -> Stack 1: [C, A], Stack 2: [E], Stack 3: [F, D, B] | Exploring action Move F from table to E | New state -> Invalid | Exploring action Move C from table to E | New state -> Invalid | Exploring action Move B from table to E | New state -> Stack 1: [C, A], Stack 2: [E, B], Stack 3: [F, D] | Taking action Move D from table to F | Moved to state -> Stack 1: [B], Stack 2: [C, A], Stack 3: [E], Stack 4: [F, D] | Plan so far [Move D from A to table | Move F from E to table | Move E from B to table | Move D from table to F] | Taking action Move B from table to D | Moved to state -> Stack 1: [C, A], Stack 2: [E], Stack 3: [F, D, B] | Plan so far [Move D from A to table | Move F from E to table | Move D from table to F | Move E from B to table | Move B from table to D] | Exploring action Move F from table to B | New state -> Invalid | Exploring action Move E from table to B | New state -> Stack 1: [C, A], Stack 2: [F, D, B, E] | Exploring action Move A from C to table | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [E], Stack 4: [F, D, B] | Exploring action Move A from C to E | New state -> Stack 1: [C], Stack 2: [E, A], Stack 3: [F, D, B] | Taking action Move E from table to B | Moved to state -> Stack 1: [C, A], Stack 2: [F, D, B, E] | Plan so far [Move D from A to table | Move F from E to table | Move D from table to F | Move E from B to table | Move B from table to D | Move E from table to B] | Exploring action Move A from C to table | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [F, D, B, E] | Exploring action Move E from B to table | New state -> Stack 1: [C, A], Stack 2: [E], Stack 3: [F, D, B] | Exploring action Move C from table to E | New state -> Invalid | Exploring action Move C from table to A | New state -> Invalid | Exploring action Move A from C to E | New state -> Stack 1: [C], Stack 2: [F, D, B, E, A] | Taking action Move A from C to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [E], Stack 5: [F, D] | Plan so far [Move D from A to table | Move F from E to table | Move D from table to F | Move E from B to table | Move A from C to table] | Exploring action Move A from table to C | New state -> Stack 1: [B], Stack 2: [C, A], Stack 3: [E], Stack 4: [F, D] | Exploring action Move B from table to D | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [E], Stack 4: [F, D, B] | Exploring action Move A from table to D | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [E], Stack 4: [F, D, A] | Exploring action Move F from table to A | New state -> Invalid | Taking action Move A from C to table | Moved to state -> Stack 1: [A], Stack 2: [B, E], Stack 3: [C], Stack 4: [F, D] | Plan so far [Move D from A to table | Move F from E to table | Move D from table to F | Move A from C to table] | Exploring action Move E from B to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [E], Stack 5: [F, D] | Exploring action Move A from table to C | New state -> Stack 1: [B, E], Stack 2: [C, A], Stack 3: [F, D] | Exploring action Move F from table to D | New state -> Invalid | Exploring action Move C from table to E | New state -> Stack 1: [A], Stack 2: [B, E, C], Stack 3: [F, D] | Taking action Move E from B to D | Moved to state -> Stack 1: [B], Stack 2: [C, A], Stack 3: [D, E], Stack 4: [F] | Plan so far [Move D from A to table | Move F from E to table | Move E from B to D] | Exploring action Move D from table to F | New state -> Invalid | Exploring action Move E from D to B | New state -> Stack 1: [B, E], Stack 2: [C, A], Stack 3: [D], Stack 4: [F] | Exploring action Move C from table to E | New state -> Invalid | Exploring action Move A from C to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D, E], Stack 5: [F] | Exploring action Move E from D to table | New state -> Stack 1: [B], Stack 2: [C, A], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Taking action Move C from table to E | Moved to state -> Stack 1: [A], Stack 2: [B, E, C], Stack 3: [F, D] | Plan so far [Move D from A to table | Move F from E to table | Move D from table to F | Move A from C to table | Move C from table to E] | Exploring action Move D from F to table | New state -> Stack 1: [A], Stack 2: [B, E, C], Stack 3: [D], Stack 4: [F] | Exploring action Move C from E to table | New state -> Stack 1: [A], Stack 2: [B, E], Stack 3: [C], Stack 4: [F, D] | Exploring action Move A from table to C | New state -> Stack 1: [B, E, C, A], Stack 2: [F, D] | Exploring action Move E from B to C | New state -> Invalid | Exploring action Move F from table to C | New state -> Invalid | Taking action Move A from table to C | Moved to state -> Stack 1: [B, E, C, A], Stack 2: [F, D] | Plan so far [Move D from A to table | Move F from E to table | Move D from table to F | Move A from C to table | Move C from table to E | Move A from table to C] | Exploring action Move A from C to D | New state -> Stack 1: [B, E, C], Stack 2: [F, D, A] | Exploring action Move C from E to D | New state -> Invalid | Exploring action Move A from C to table | New state -> Stack 1: [A], Stack 2: [B, E, C], Stack 3: [F, D] | Exploring action Move D from F to table | New state -> Stack 1: [B, E, C, A], Stack 2: [D], Stack 3: [F] | Exploring action Move F from table to A | New state -> Invalid | Taking action Move E from B to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [E], Stack 5: [F, D] | Plan so far [Move D from A to table | Move F from E to table | Move D from table to F | Move A from C to table | Move E from B to table] | Taking action Move E from D to table | Moved to state -> Stack 1: [B], Stack 2: [C, A], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Plan so far [Move D from A to table | Move F from E to table | Move E from B to D | Move E from D to table] | Taking action Move E from B to F | Moved to state -> Stack 1: [B], Stack 2: [C, A], Stack 3: [D], Stack 4: [F, E] | Plan so far [Move D from A to table | Move F from E to table | Move E from B to F] | Exploring action Move F from table to E | New state -> Invalid | Exploring action Move E from F to table | New state -> Stack 1: [B], Stack 2: [C, A], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Exploring action Move E from F to D | New state -> Stack 1: [B], Stack 2: [C, A], Stack 3: [D, E], Stack 4: [F] | Exploring action Move E from F to B | New state -> Stack 1: [B, E], Stack 2: [C, A], Stack 3: [D], Stack 4: [F] | Taking action Move B from table to D | Moved to state -> Stack 1: [A], Stack 2: [C], Stack 3: [E], Stack 4: [F, D, B] | Plan so far [Move D from A to table | Move F from E to table | Move D from table to F | Move E from B to table | Move A from C to table | Move B from table to D] | Exploring action Move A from table to E | New state -> Stack 1: [C], Stack 2: [E, A], Stack 3: [F, D, B] | Exploring action Move D from F to table | New state -> Invalid | Exploring action Move D from F to C | New state -> Invalid | Exploring action Move E from table to B | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [F, D, B, E] | Exploring action Move A from table to C | New state -> Stack 1: [C, A], Stack 2: [E], Stack 3: [F, D, B] | Taking action Move A from C to table | Moved to state -> Stack 1: [A], Stack 2: [B, E], Stack 3: [C], Stack 4: [D], Stack 5: [F] | Plan so far [Move D from A to table | Move F from E to table | Move A from C to table] | Exploring action Move E from B to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Exploring action Move D from table to F | New state -> Stack 1: [A], Stack 2: [B, E], Stack 3: [C], Stack 4: [F, D] | Exploring action Move C from table to E | New state -> Stack 1: [A], Stack 2: [B, E, C], Stack 3: [D], Stack 4: [F] | Exploring action Move B from table to D | New state -> Invalid | Taking action Move F from E to D | Moved to state -> Stack 1: [B, E], Stack 2: [C, A], Stack 3: [D, F] | Plan so far [Move D from A to table | Move F from E to D] | Exploring action Move D from table to F | New state -> Invalid | Exploring action Move B from table to F | New state -> Invalid | Exploring action Move E from B to table | New state -> Stack 1: [B], Stack 2: [C, A], Stack 3: [D, F], Stack 4: [E] | Exploring action Move E from B to F | New state -> Stack 1: [B], Stack 2: [C, A], Stack 3: [D, F, E] | Exploring action Move F from D to table | New state -> Stack 1: [B, E], Stack 2: [C, A], Stack 3: [D], Stack 4: [F] | Taking action Move A from C to table | Moved to state -> Stack 1: [A], Stack 2: [B, E, F], Stack 3: [C], Stack 4: [D] | Plan so far [Move D from A to table | Move A from C to table] | Exploring action Move F from E to C | New state -> Stack 1: [A], Stack 2: [B, E], Stack 3: [C, F], Stack 4: [D] | Exploring action Move B from table to A | New state -> Invalid | Exploring action Move F from E to D | New state -> Stack 1: [A], Stack 2: [B, E], Stack 3: [C], Stack 4: [D, F] | Exploring action Move F from E to table | New state -> Stack 1: [A], Stack 2: [B, E], Stack 3: [C], Stack 4: [D], Stack 5: [F] | Exploring action Move B from table to D | New state -> Invalid | Taking action Move D from table to F | Moved to state -> Stack 1: [A], Stack 2: [B, E], Stack 3: [C], Stack 4: [F, D] | Plan so far [Move D from A to table | Move F from E to table | Move A from C to table | Move D from table to F] | Taking action Move E from B to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Plan so far [Move D from A to table | Move F from E to table | Move A from C to table | Move E from B to table] | Exploring action Move D from table to F | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [E], Stack 5: [F, D] | Exploring action Move A from table to C | New state -> Stack 1: [B], Stack 2: [C, A], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Exploring action Move A from table to D | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, A], Stack 4: [E], Stack 5: [F] | Taking action Move E from B to table | Moved to state -> Stack 1: [B], Stack 2: [C, A], Stack 3: [D, F], Stack 4: [E] | Plan so far [Move D from A to table | Move F from E to D | Move E from B to table] | Exploring action Move F from D to table | New state -> Stack 1: [B], Stack 2: [C, A], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Exploring action Move F from D to B | New state -> Stack 1: [B, F], Stack 2: [C, A], Stack 3: [D], Stack 4: [E] | Exploring action Move C from table to E | New state -> Invalid | Exploring action Move F from D to E | New state -> Stack 1: [B], Stack 2: [C, A], Stack 3: [D], Stack 4: [E, F] | Exploring action Move C from table to F | New state -> Invalid | Taking action Move D from table to F | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [E], Stack 5: [F, D] | Plan so far [Move D from A to table | Move F from E to table | Move A from C to table | Move E from B to table | Move D from table to F] | Taking action Move F from D to table | Moved to state -> Stack 1: [B], Stack 2: [C, A], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Plan so far [Move D from A to table | Move F from E to D | Move E from B to table | Move F from D to table] | Taking action Move F from D to table | Moved to state -> Stack 1: [B, E], Stack 2: [C, A], Stack 3: [D], Stack 4: [F] | Plan so far [Move D from A to table | Move F from E to D | Move F from D to table] | Taking action Move F from E to table | Moved to state -> Stack 1: [A], Stack 2: [B, E], Stack 3: [C], Stack 4: [D], Stack 5: [F] | Plan so far [Move D from A to table | Move A from C to table | Move F from E to table] | Taking action Move E from table to B | Moved to state -> Stack 1: [A], Stack 2: [C], Stack 3: [F, D, B, E] | Plan so far [Move D from A to table | Move F from E to table | Move D from table to F | Move E from B to table | Move A from C to table | Move B from table to D | Move E from table to B] | Exploring action Move A from table to C | New state -> Stack 1: [C, A], Stack 2: [F, D, B, E] | Exploring action Move C from table to A | New state -> Stack 1: [A, C], Stack 2: [F, D, B, E] | Exploring action Move D from F to E | New state -> Invalid | Exploring action Move C from table to E | New state -> Stack 1: [A], Stack 2: [F, D, B, E, C] | Taking action Move C from table to E | Moved to state -> Stack 1: [A], Stack 2: [B, E, C], Stack 3: [D], Stack 4: [F] | Plan so far [Move D from A to table | Move F from E to table | Move A from C to table | Move C from table to E] | Exploring action Move A from table to C | New state -> Stack 1: [B, E, C, A], Stack 2: [D], Stack 3: [F] | Exploring action Move D from table to F | New state -> Stack 1: [A], Stack 2: [B, E, C], Stack 3: [F, D] | Exploring action Move E from B to D | New state -> Invalid | Exploring action Move A from table to F | New state -> Stack 1: [B, E, C], Stack 2: [D], Stack 3: [F, A] | Exploring action Move E from B to A | New state -> Invalid | Taking action Move A from table to C | Moved to state -> Stack 1: [B, E, C, A], Stack 2: [D], Stack 3: [F] | Plan so far [Move D from A to table | Move F from E to table | Move A from C to table | Move C from table to E | Move A from table to C] | Exploring action Move D from table to F | New state -> Stack 1: [B, E, C, A], Stack 2: [F, D] | Exploring action Move B from table to F | New state -> Invalid | Exploring action Move F from table to D | New state -> Stack 1: [B, E, C, A], Stack 2: [D, F] | Exploring action Move B from table to D | New state -> Invalid | Exploring action Move F from table to A | New state -> Stack 1: [B, E, C, A, F], Stack 2: [D] | Taking action Move D from table to F | Moved to state -> Stack 1: [B, E, C, A], Stack 2: [F, D] | Plan so far [Move D from A to table | Move F from E to table | Move A from C to table | Move C from table to E | Move A from table to C | Move D from table to F] | Taking action Move C from table to E | Moved to state -> Stack 1: [A], Stack 2: [F, D, B, E, C] | Plan so far [Move D from A to table | Move F from E to table | Move D from table to F | Move E from B to table | Move A from C to table | Move B from table to D | Move E from table to B | Move C from table to E] | Exploring action Move C from E to table | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [F, D, B, E] | Exploring action Move F from table to C | New state -> Invalid | Exploring action Move B from D to C | New state -> Invalid | Exploring action Move A from table to C | New state -> Stack 1: [F, D, B, E, C, A] | Exploring action Move C from E to A | New state -> Stack 1: [A, C], Stack 2: [F, D, B, E] | Taking action Move A from table to C | Moved to state -> Stack 1: [F, D, B, E, C, A] | Plan so far [Move D from A to table | Move F from E to table | Move D from table to F | Move E from B to table | Move A from C to table | Move B from table to D | Move E from table to B | Move C from table to E | Move A from table to C] | Reached goal state!",
        "system2_states_v1": 110
    },
    {
        "idx": 917,
        "start": [
            [
                "table",
                "B"
            ],
            [
                "table",
                "F",
                "E",
                "C",
                "D",
                "A",
                "G"
            ]
        ],
        "goal": [
            [
                "table",
                "A"
            ],
            [
                "table",
                "E",
                "F",
                "G",
                "D",
                "C",
                "B"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": false,
                "on": "D",
                "under": "G",
                "ontable": false
            },
            "B": {
                "clear": true,
                "on": -1,
                "under": -1,
                "ontable": true
            },
            "C": {
                "clear": false,
                "on": "E",
                "under": "D",
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": "C",
                "under": "A",
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": "F",
                "under": "C",
                "ontable": false
            },
            "F": {
                "clear": false,
                "on": -1,
                "under": "E",
                "ontable": true
            },
            "G": {
                "clear": true,
                "on": "A",
                "under": -1,
                "ontable": false
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": true,
                "on": -1,
                "under": -1,
                "ontable": true
            },
            "B": {
                "clear": true,
                "on": "C",
                "under": -1,
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": "D",
                "under": "B",
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": "G",
                "under": "C",
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": -1,
                "under": "F",
                "ontable": true
            },
            "F": {
                "clear": false,
                "on": "E",
                "under": "G",
                "ontable": false
            },
            "G": {
                "clear": false,
                "on": "F",
                "under": "D",
                "ontable": false
            }
        },
        "plan_len": 10,
        "num_blocks": 7,
        "prompt": "The initial state:\nThe hand is empty.\nB is on the table. B is clear.\nF is on the table. E is on F. C is on E. D is on C. A is on D. G is on A. G is clear.\n\nThe goal is:\nA is on the table. A is clear.\nE is on the table. F is on E. G is on F. D is on G. C is on D. B is on C. B is clear.\n",
        "system1_plan": "Move G from A to table | Move A from D to table | Move D from C to table | Move C from E to table | Move E from F to table | Move F from table to E | Move G from table to F | Move D from table to G | Move C from table to D | Move B from table to C",
        "system1_states": 10,
        "system2_plan_v1": "Moved to state -> Stack 1: [B], Stack 2: [F, E, C, D, A, G] | Plan so far [] | Exploring action Move B from table to G | New state -> Stack 1: [F, E, C, D, A, G, B] | Exploring action Move G from A to B | New state -> Stack 1: [B, G], Stack 2: [F, E, C, D, A] | Exploring action Move A from D to G | New state -> Invalid | Exploring action Move G from A to table | New state -> Stack 1: [B], Stack 2: [F, E, C, D, A], Stack 3: [G] | Exploring action Move D from C to B | New state -> Invalid | Taking action Move G from A to table | Moved to state -> Stack 1: [B], Stack 2: [F, E, C, D, A], Stack 3: [G] | Plan so far [Move G from A to table] | Exploring action Move E from F to G | New state -> Invalid | Exploring action Move A from D to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [F, E, C, D], Stack 4: [G] | Exploring action Move A from D to G | New state -> Stack 1: [B], Stack 2: [F, E, C, D], Stack 3: [G, A] | Exploring action Move A from D to B | New state -> Stack 1: [B, A], Stack 2: [F, E, C, D], Stack 3: [G] | Exploring action Move C from E to B | New state -> Invalid | Taking action Move A from D to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [F, E, C, D], Stack 4: [G] | Plan so far [Move G from A to table | Move A from D to table] | Exploring action Move D from C to G | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [F, E, C], Stack 4: [G, D] | Exploring action Move D from C to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D], Stack 4: [F, E, C], Stack 5: [G] | Exploring action Move E from F to G | New state -> Invalid | Exploring action Move D from C to B | New state -> Stack 1: [A], Stack 2: [B, D], Stack 3: [F, E, C], Stack 4: [G] | Taking action Move D from C to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [D], Stack 4: [F, E, C], Stack 5: [G] | Plan so far [Move G from A to table | Move A from D to table | Move D from C to table] | Exploring action Move C from E to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [F, E], Stack 6: [G] | Exploring action Move C from E to G | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D], Stack 4: [F, E], Stack 5: [G, C] | Exploring action Move C from E to D | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, C], Stack 4: [F, E], Stack 5: [G] | Exploring action Move F from table to D | New state -> Invalid | Exploring action Move E from F to A | New state -> Invalid | Taking action Move C from E to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [F, E], Stack 6: [G] | Plan so far [Move G from A to table | Move A from D to table | Move D from C to table | Move C from E to table] | Exploring action Move F from table to E | New state -> Invalid | Exploring action Move E from F to D | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D, E], Stack 5: [F], Stack 6: [G] | Exploring action Move E from F to C | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, E], Stack 4: [D], Stack 5: [F], Stack 6: [G] | Exploring action Move E from F to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F], Stack 7: [G] | Taking action Move E from F to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F], Stack 7: [G] | Plan so far [Move G from A to table | Move A from D to table | Move D from C to table | Move C from E to table | Move E from F to table] | Exploring action Move F from table to E | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E, F], Stack 6: [G] | Exploring action Move B from table to G | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [F], Stack 6: [G, B] | Exploring action Move B from table to C | New state -> Stack 1: [A], Stack 2: [C, B], Stack 3: [D], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Taking action Move F from table to E | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E, F], Stack 6: [G] | Plan so far [Move G from A to table | Move A from D to table | Move D from C to table | Move C from E to table | Move E from F to table | Move F from table to E] | Exploring action Move C from table to B | New state -> Stack 1: [A], Stack 2: [B, C], Stack 3: [D], Stack 4: [E, F], Stack 5: [G] | Exploring action Move G from table to F | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E, F, G] | Exploring action Move B from table to C | New state -> Stack 1: [A], Stack 2: [C, B], Stack 3: [D], Stack 4: [E, F], Stack 5: [G] | Exploring action Move E from table to B | New state -> Invalid | Taking action Move G from table to F | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E, F, G] | Plan so far [Move G from A to table | Move A from D to table | Move D from C to table | Move C from E to table | Move E from F to table | Move F from table to E | Move G from table to F] | Exploring action Move F from E to D | New state -> Invalid | Exploring action Move B from table to D | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, B], Stack 4: [E, F, G] | Exploring action Move F from E to G | New state -> Invalid | Exploring action Move D from table to G | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [E, F, G, D] | Exploring action Move B from table to C | New state -> Stack 1: [A], Stack 2: [C, B], Stack 3: [D], Stack 4: [E, F, G] | Taking action Move D from table to G | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [E, F, G, D] | Plan so far [Move G from A to table | Move A from D to table | Move D from C to table | Move C from E to table | Move E from F to table | Move F from table to E | Move G from table to F | Move D from table to G] | Exploring action Move B from table to D | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [E, F, G, D, B] | Exploring action Move G from F to table | New state -> Invalid | Exploring action Move B from table to C | New state -> Stack 1: [A], Stack 2: [C, B], Stack 3: [E, F, G, D] | Exploring action Move C from table to D | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [E, F, G, D, C] | Exploring action Move G from F to C | New state -> Invalid | Taking action Move C from table to D | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [E, F, G, D, C] | Plan so far [Move G from A to table | Move A from D to table | Move D from C to table | Move C from E to table | Move E from F to table | Move F from table to E | Move G from table to F | Move D from table to G | Move C from table to D] | Exploring action Move G from F to B | New state -> Invalid | Exploring action Move B from table to A | New state -> Stack 1: [A, B], Stack 2: [E, F, G, D, C] | Exploring action Move D from G to B | New state -> Invalid | Exploring action Move B from table to C | New state -> Stack 1: [A], Stack 2: [E, F, G, D, C, B] | Exploring action Move C from D to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [E, F, G, D] | Taking action Move B from table to C | Moved to state -> Stack 1: [A], Stack 2: [E, F, G, D, C, B] | Plan so far [Move G from A to table | Move A from D to table | Move D from C to table | Move C from E to table | Move E from F to table | Move F from table to E | Move G from table to F | Move D from table to G | Move C from table to D | Move B from table to C] | Reached goal state!",
        "system2_states_v1": 45
    },
    {
        "idx": 675,
        "start": [
            [
                "table",
                "A",
                "F",
                "B"
            ],
            [
                "table",
                "D",
                "E",
                "C"
            ]
        ],
        "goal": [
            [
                "table",
                "C",
                "D",
                "B",
                "F"
            ],
            [
                "table",
                "E",
                "A"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": false,
                "on": -1,
                "under": "F",
                "ontable": true
            },
            "B": {
                "clear": true,
                "on": "F",
                "under": -1,
                "ontable": false
            },
            "C": {
                "clear": true,
                "on": "E",
                "under": -1,
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": -1,
                "under": "E",
                "ontable": true
            },
            "E": {
                "clear": false,
                "on": "D",
                "under": "C",
                "ontable": false
            },
            "F": {
                "clear": false,
                "on": "A",
                "under": "B",
                "ontable": false
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": true,
                "on": "E",
                "under": -1,
                "ontable": false
            },
            "B": {
                "clear": false,
                "on": "D",
                "under": "F",
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": -1,
                "under": "D",
                "ontable": true
            },
            "D": {
                "clear": false,
                "on": "C",
                "under": "B",
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": -1,
                "under": "A",
                "ontable": true
            },
            "F": {
                "clear": true,
                "on": "B",
                "under": -1,
                "ontable": false
            }
        },
        "plan_len": 8,
        "num_blocks": 6,
        "prompt": "The initial state:\nThe hand is empty.\nA is on the table. F is on A. B is on F. B is clear.\nD is on the table. E is on D. C is on E. C is clear.\n\nThe goal is:\nC is on the table. D is on C. B is on D. F is on B. F is clear.\nE is on the table. A is on E. A is clear.\n",
        "system1_plan": "Move B from F to table | Move C from E to table | Move E from D to table | Move F from A to table | Move A from table to E | Move D from table to C | Move B from table to D | Move F from table to B",
        "system1_states": 8,
        "system2_plan_v1": "Moved to state -> Stack 1: [A, F, B], Stack 2: [D, E, C] | Plan so far [] | Exploring action Move E from D to C | New state -> Invalid | Exploring action Move F from A to C | New state -> Invalid | Exploring action Move B from F to C | New state -> Stack 1: [A, F], Stack 2: [D, E, C, B] | Exploring action Move C from E to table | New state -> Stack 1: [A, F, B], Stack 2: [C], Stack 3: [D, E] | Exploring action Move B from F to table | New state -> Stack 1: [A, F], Stack 2: [B], Stack 3: [D, E, C] | Taking action Move B from F to table | Moved to state -> Stack 1: [A, F], Stack 2: [B], Stack 3: [D, E, C] | Plan so far [Move B from F to table] | Exploring action Move F from A to B | New state -> Stack 1: [A], Stack 2: [B, F], Stack 3: [D, E, C] | Exploring action Move C from E to table | New state -> Stack 1: [A, F], Stack 2: [B], Stack 3: [C], Stack 4: [D, E] | Exploring action Move A from table to F | New state -> Invalid | Exploring action Move F from A to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, E, C], Stack 4: [F] | Taking action Move C from E to table | Moved to state -> Stack 1: [A, F, B], Stack 2: [C], Stack 3: [D, E] | Plan so far [Move C from E to table] | Exploring action Move D from table to C | New state -> Invalid | Exploring action Move E from D to B | New state -> Stack 1: [A, F, B, E], Stack 2: [C], Stack 3: [D] | Exploring action Move A from table to E | New state -> Invalid | Exploring action Move E from D to table | New state -> Stack 1: [A, F, B], Stack 2: [C], Stack 3: [D], Stack 4: [E] | Exploring action Move B from F to table | New state -> Stack 1: [A, F], Stack 2: [B], Stack 3: [C], Stack 4: [D, E] | Taking action Move C from E to table | Moved to state -> Stack 1: [A, F], Stack 2: [B], Stack 3: [C], Stack 4: [D, E] | Plan so far [Move B from F to table | Move C from E to table] | Exploring action Move F from A to B | New state -> Stack 1: [A], Stack 2: [B, F], Stack 3: [C], Stack 4: [D, E] | Exploring action Move F from A to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D, E], Stack 5: [F] | Exploring action Move D from table to E | New state -> Invalid | Exploring action Move E from D to table | New state -> Stack 1: [A, F], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Taking action Move F from A to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, E, C], Stack 4: [F] | Plan so far [Move B from F to table | Move F from A to table] | Exploring action Move C from E to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D, E], Stack 5: [F] | Exploring action Move F from table to B | New state -> Stack 1: [A], Stack 2: [B, F], Stack 3: [D, E, C] | Exploring action Move E from D to C | New state -> Invalid | Exploring action Move C from E to A | New state -> Stack 1: [A, C], Stack 2: [B], Stack 3: [D, E], Stack 4: [F] | Exploring action Move E from D to B | New state -> Invalid | Taking action Move E from D to table | Moved to state -> Stack 1: [A, F], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Plan so far [Move B from F to table | Move C from E to table | Move E from D to table] | Exploring action Move F from A to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Exploring action Move F from A to B | New state -> Stack 1: [A], Stack 2: [B, F], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Exploring action Move A from table to C | New state -> Invalid | Exploring action Move D from table to C | New state -> Stack 1: [A, F], Stack 2: [B], Stack 3: [C, D], Stack 4: [E] | Taking action Move F from A to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D, E], Stack 5: [F] | Plan so far [Move B from F to table | Move C from E to table | Move F from A to table] | Exploring action Move E from D to A | New state -> Stack 1: [A, E], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [F] | Exploring action Move A from table to E | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, E, A], Stack 4: [F] | Exploring action Move E from D to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Exploring action Move D from table to C | New state -> Invalid | Taking action Move F from A to B | Moved to state -> Stack 1: [A], Stack 2: [B, F], Stack 3: [C], Stack 4: [D, E] | Plan so far [Move B from F to table | Move C from E to table | Move F from A to B] | Exploring action Move A from table to E | New state -> Stack 1: [B, F], Stack 2: [C], Stack 3: [D, E, A] | Exploring action Move E from D to table | New state -> Stack 1: [A], Stack 2: [B, F], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Exploring action Move E from D to A | New state -> Stack 1: [A, E], Stack 2: [B, F], Stack 3: [C], Stack 4: [D] | Exploring action Move B from table to A | New state -> Invalid | Exploring action Move B from table to F | New state -> Invalid | Taking action Move F from A to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Plan so far [Move B from F to table | Move C from E to table | Move E from D to table | Move F from A to table] | Exploring action Move D from table to C | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, D], Stack 4: [E], Stack 5: [F] | Exploring action Move F from table to B | New state -> Stack 1: [A], Stack 2: [B, F], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Exploring action Move A from table to E | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D], Stack 4: [E, A], Stack 5: [F] | Taking action Move A from table to E | Moved to state -> Stack 1: [B], Stack 2: [C], Stack 3: [D], Stack 4: [E, A], Stack 5: [F] | Plan so far [Move B from F to table | Move C from E to table | Move E from D to table | Move F from A to table | Move A from table to E] | Exploring action Move D from table to C | New state -> Stack 1: [B], Stack 2: [C, D], Stack 3: [E, A], Stack 4: [F] | Exploring action Move F from table to B | New state -> Stack 1: [B, F], Stack 2: [C], Stack 3: [D], Stack 4: [E, A] | Exploring action Move E from table to D | New state -> Invalid | Exploring action Move C from table to D | New state -> Stack 1: [B], Stack 2: [D, C], Stack 3: [E, A], Stack 4: [F] | Exploring action Move E from table to B | New state -> Invalid | Taking action Move D from table to C | Moved to state -> Stack 1: [B], Stack 2: [C, D], Stack 3: [E, A], Stack 4: [F] | Plan so far [Move B from F to table | Move C from E to table | Move E from D to table | Move F from A to table | Move A from table to E | Move D from table to C] | Exploring action Move B from table to D | New state -> Stack 1: [C, D, B], Stack 2: [E, A], Stack 3: [F] | Exploring action Move C from table to B | New state -> Invalid | Exploring action Move F from table to B | New state -> Stack 1: [B, F], Stack 2: [C, D], Stack 3: [E, A] | Exploring action Move E from table to A | New state -> Invalid | Exploring action Move F from table to D | New state -> Stack 1: [B], Stack 2: [C, D, F], Stack 3: [E, A] | Taking action Move B from table to D | Moved to state -> Stack 1: [C, D, B], Stack 2: [E, A], Stack 3: [F] | Plan so far [Move B from F to table | Move C from E to table | Move E from D to table | Move F from A to table | Move A from table to E | Move D from table to C | Move B from table to D] | Exploring action Move B from D to table | New state -> Stack 1: [B], Stack 2: [C, D], Stack 3: [E, A], Stack 4: [F] | Exploring action Move F from table to B | New state -> Stack 1: [C, D, B, F], Stack 2: [E, A] | Exploring action Move C from table to F | New state -> Invalid | Exploring action Move B from D to F | New state -> Stack 1: [C, D], Stack 2: [E, A], Stack 3: [F, B] | Taking action Move F from table to B | Moved to state -> Stack 1: [C, D, B, F], Stack 2: [E, A] | Plan so far [Move B from F to table | Move C from E to table | Move E from D to table | Move F from A to table | Move A from table to E | Move D from table to C | Move B from table to D | Move F from table to B] | Reached goal state!",
        "system2_states_v1": 53
    },
    {
        "idx": 893,
        "start": [
            [
                "table",
                "D",
                "B",
                "G"
            ],
            [
                "table",
                "E",
                "A"
            ],
            [
                "table",
                "F",
                "C"
            ]
        ],
        "goal": [
            [
                "table",
                "B",
                "F",
                "D",
                "E",
                "C",
                "A",
                "G"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": true,
                "on": "E",
                "under": -1,
                "ontable": false
            },
            "B": {
                "clear": false,
                "on": "D",
                "under": "G",
                "ontable": false
            },
            "C": {
                "clear": true,
                "on": "F",
                "under": -1,
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": -1,
                "under": "B",
                "ontable": true
            },
            "E": {
                "clear": false,
                "on": -1,
                "under": "A",
                "ontable": true
            },
            "F": {
                "clear": false,
                "on": -1,
                "under": "C",
                "ontable": true
            },
            "G": {
                "clear": true,
                "on": "B",
                "under": -1,
                "ontable": false
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": false,
                "on": "C",
                "under": "G",
                "ontable": false
            },
            "B": {
                "clear": false,
                "on": -1,
                "under": "F",
                "ontable": true
            },
            "C": {
                "clear": false,
                "on": "E",
                "under": "A",
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": "F",
                "under": "E",
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": "D",
                "under": "C",
                "ontable": false
            },
            "F": {
                "clear": false,
                "on": "B",
                "under": "D",
                "ontable": false
            },
            "G": {
                "clear": true,
                "on": "A",
                "under": -1,
                "ontable": false
            }
        },
        "plan_len": 10,
        "num_blocks": 7,
        "prompt": "The initial state:\nThe hand is empty.\nD is on the table. B is on D. G is on B. G is clear.\nE is on the table. A is on E. A is clear.\nF is on the table. C is on F. C is clear.\n\nThe goal is:\nB is on the table. F is on B. D is on F. E is on D. C is on E. A is on C. G is on A. G is clear.\n",
        "system1_plan": "Move A from E to table | Move C from F to table | Move G from B to table | Move B from D to table | Move F from table to B | Move D from table to F | Move E from table to D | Move C from table to E | Move A from table to C | Move G from table to A",
        "system1_states": 10,
        "system2_plan_v1": "Moved to state -> Stack 1: [D, B, G], Stack 2: [E, A], Stack 3: [F, C] | Plan so far [] | Exploring action Move G from B to table | New state -> Stack 1: [D, B], Stack 2: [E, A], Stack 3: [F, C], Stack 4: [G] | Exploring action Move C from F to table | New state -> Stack 1: [C], Stack 2: [D, B, G], Stack 3: [E, A], Stack 4: [F] | Exploring action Move D from table to A | New state -> Invalid | Exploring action Move A from E to table | New state -> Stack 1: [A], Stack 2: [D, B, G], Stack 3: [E], Stack 4: [F, C] | Exploring action Move F from table to G | New state -> Invalid | Taking action Move A from E to table | Moved to state -> Stack 1: [A], Stack 2: [D, B, G], Stack 3: [E], Stack 4: [F, C] | Plan so far [Move A from E to table] | Exploring action Move G from B to table | New state -> Stack 1: [A], Stack 2: [D, B], Stack 3: [E], Stack 4: [F, C], Stack 5: [G] | Exploring action Move F from table to E | New state -> Invalid | Exploring action Move C from F to table | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, B, G], Stack 4: [E], Stack 5: [F] | Exploring action Move F from table to C | New state -> Invalid | Exploring action Move G from B to A | New state -> Stack 1: [A, G], Stack 2: [D, B], Stack 3: [E], Stack 4: [F, C] | Taking action Move G from B to table | Moved to state -> Stack 1: [D, B], Stack 2: [E, A], Stack 3: [F, C], Stack 4: [G] | Plan so far [Move G from B to table] | Exploring action Move A from E to table | New state -> Stack 1: [A], Stack 2: [D, B], Stack 3: [E], Stack 4: [F, C], Stack 5: [G] | Exploring action Move D from table to C | New state -> Invalid | Exploring action Move F from table to G | New state -> Invalid | Exploring action Move B from D to table | New state -> Stack 1: [B], Stack 2: [D], Stack 3: [E, A], Stack 4: [F, C], Stack 5: [G] | Exploring action Move C from F to table | New state -> Stack 1: [C], Stack 2: [D, B], Stack 3: [E, A], Stack 4: [F], Stack 5: [G] | Taking action Move C from F to table | Moved to state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, B, G], Stack 4: [E], Stack 5: [F] | Plan so far [Move A from E to table | Move C from F to table] | Exploring action Move G from B to E | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, B], Stack 4: [E, G], Stack 5: [F] | Exploring action Move B from D to E | New state -> Invalid | Exploring action Move G from B to table | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, B], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Exploring action Move B from D to A | New state -> Invalid | Exploring action Move G from B to A | New state -> Stack 1: [A, G], Stack 2: [C], Stack 3: [D, B], Stack 4: [E], Stack 5: [F] | Taking action Move B from D to table | Moved to state -> Stack 1: [B], Stack 2: [D], Stack 3: [E, A], Stack 4: [F, C], Stack 5: [G] | Plan so far [Move G from B to table | Move B from D to table] | Exploring action Move E from table to B | New state -> Invalid | Exploring action Move F from table to C | New state -> Invalid | Exploring action Move A from E to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D], Stack 4: [E], Stack 5: [F, C], Stack 6: [G] | Exploring action Move A from E to C | New state -> Stack 1: [B], Stack 2: [D], Stack 3: [E], Stack 4: [F, C, A], Stack 5: [G] | Exploring action Move C from F to table | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D], Stack 4: [E, A], Stack 5: [F], Stack 6: [G] | Taking action Move C from F to table | Moved to state -> Stack 1: [C], Stack 2: [D, B], Stack 3: [E, A], Stack 4: [F], Stack 5: [G] | Plan so far [Move G from B to table | Move C from F to table] | Exploring action Move B from D to table | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D], Stack 4: [E, A], Stack 5: [F], Stack 6: [G] | Exploring action Move E from table to A | New state -> Invalid | Exploring action Move D from table to C | New state -> Invalid | Exploring action Move A from E to table | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, B], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Exploring action Move B from D to A | New state -> Stack 1: [C], Stack 2: [D], Stack 3: [E, A, B], Stack 4: [F], Stack 5: [G] | Taking action Move G from B to table | Moved to state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, B], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Plan so far [Move A from E to table | Move C from F to table | Move G from B to table] | Exploring action Move D from table to F | New state -> Invalid | Exploring action Move B from D to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F], Stack 7: [G] | Exploring action Move B from D to A | New state -> Stack 1: [A, B], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Exploring action Move G from table to A | New state -> Stack 1: [A, G], Stack 2: [C], Stack 3: [D, B], Stack 4: [E], Stack 5: [F] | Taking action Move A from E to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [D], Stack 4: [E], Stack 5: [F, C], Stack 6: [G] | Plan so far [Move G from B to table | Move B from D to table | Move A from E to table] | Exploring action Move C from F to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F], Stack 7: [G] | Exploring action Move C from F to D | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, C], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Exploring action Move C from F to A | New state -> Stack 1: [A, C], Stack 2: [B], Stack 3: [D], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Exploring action Move F from table to C | New state -> Invalid | Taking action Move G from B to A | Moved to state -> Stack 1: [A, G], Stack 2: [C], Stack 3: [D, B], Stack 4: [E], Stack 5: [F] | Plan so far [Move A from E to table | Move C from F to table | Move G from B to A] | Exploring action Move B from D to table | New state -> Stack 1: [A, G], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Exploring action Move B from D to C | New state -> Stack 1: [A, G], Stack 2: [C, B], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Exploring action Move A from table to B | New state -> Invalid | Exploring action Move B from D to E | New state -> Stack 1: [A, G], Stack 2: [C], Stack 3: [D], Stack 4: [E, B], Stack 5: [F] | Taking action Move B from D to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F], Stack 7: [G] | Plan so far [Move A from E to table | Move C from F to table | Move G from B to table | Move B from D to table] | Exploring action Move A from table to D | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, A], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Exploring action Move F from table to B | New state -> Stack 1: [A], Stack 2: [B, F], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [G] | Exploring action Move G from table to A | New state -> Stack 1: [A, G], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Taking action Move C from F to table | Moved to state -> Stack 1: [C], Stack 2: [D, B, G], Stack 3: [E, A], Stack 4: [F] | Plan so far [Move C from F to table] | Exploring action Move G from B to A | New state -> Stack 1: [C], Stack 2: [D, B], Stack 3: [E, A, G], Stack 4: [F] | Exploring action Move G from B to table | New state -> Stack 1: [C], Stack 2: [D, B], Stack 3: [E, A], Stack 4: [F], Stack 5: [G] | Exploring action Move A from E to table | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, B, G], Stack 4: [E], Stack 5: [F] | Exploring action Move E from table to A | New state -> Invalid | Taking action Move F from table to B | Moved to state -> Stack 1: [A], Stack 2: [B, F], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [G] | Plan so far [Move A from E to table | Move C from F to table | Move G from B to table | Move B from D to table | Move F from table to B] | Exploring action Move D from table to F | New state -> Stack 1: [A], Stack 2: [B, F, D], Stack 3: [C], Stack 4: [E], Stack 5: [G] | Exploring action Move B from table to D | New state -> Invalid | Exploring action Move A from table to E | New state -> Stack 1: [B, F], Stack 2: [C], Stack 3: [D], Stack 4: [E, A], Stack 5: [G] | Exploring action Move G from table to A | New state -> Stack 1: [A, G], Stack 2: [B, F], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Taking action Move A from E to table | Moved to state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, B, G], Stack 4: [E], Stack 5: [F] | Plan so far [Move C from F to table | Move A from E to table] | Taking action Move G from B to table | Moved to state -> Stack 1: [C], Stack 2: [D, B], Stack 3: [E, A], Stack 4: [F], Stack 5: [G] | Plan so far [Move C from F to table | Move G from B to table] | Taking action Move G from B to A | Moved to state -> Stack 1: [C], Stack 2: [D, B], Stack 3: [E, A, G], Stack 4: [F] | Plan so far [Move C from F to table | Move G from B to A] | Exploring action Move B from D to table | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D], Stack 4: [E, A, G], Stack 5: [F] | Exploring action Move A from E to F | New state -> Invalid | Exploring action Move B from D to F | New state -> Stack 1: [C], Stack 2: [D], Stack 3: [E, A, G], Stack 4: [F, B] | Exploring action Move B from D to C | New state -> Stack 1: [C, B], Stack 2: [D], Stack 3: [E, A, G], Stack 4: [F] | Taking action Move D from table to F | Moved to state -> Stack 1: [A], Stack 2: [B, F, D], Stack 3: [C], Stack 4: [E], Stack 5: [G] | Plan so far [Move A from E to table | Move C from F to table | Move G from B to table | Move B from D to table | Move F from table to B | Move D from table to F] | Exploring action Move A from table to E | New state -> Stack 1: [B, F, D], Stack 2: [C], Stack 3: [E, A], Stack 4: [G] | Exploring action Move G from table to A | New state -> Stack 1: [A, G], Stack 2: [B, F, D], Stack 3: [C], Stack 4: [E] | Exploring action Move F from B to E | New state -> Invalid | Exploring action Move E from table to D | New state -> Stack 1: [A], Stack 2: [B, F, D, E], Stack 3: [C], Stack 4: [G] | Taking action Move G from B to A | Moved to state -> Stack 1: [A, G], Stack 2: [D, B], Stack 3: [E], Stack 4: [F, C] | Plan so far [Move A from E to table | Move G from B to A] | Exploring action Move B from D to table | New state -> Stack 1: [A, G], Stack 2: [B], Stack 3: [D], Stack 4: [E], Stack 5: [F, C] | Exploring action Move F from table to B | New state -> Invalid | Exploring action Move B from D to E | New state -> Stack 1: [A, G], Stack 2: [D], Stack 3: [E, B], Stack 4: [F, C] | Exploring action Move C from F to table | New state -> Stack 1: [A, G], Stack 2: [C], Stack 3: [D, B], Stack 4: [E], Stack 5: [F] | Exploring action Move F from table to C | New state -> Invalid | Taking action Move A from E to table | Moved to state -> Stack 1: [A], Stack 2: [D, B], Stack 3: [E], Stack 4: [F, C], Stack 5: [G] | Plan so far [Move G from B to table | Move A from E to table] | Exploring action Move C from F to table | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, B], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Exploring action Move B from D to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D], Stack 4: [E], Stack 5: [F, C], Stack 6: [G] | Exploring action Move D from table to A | New state -> Invalid | Exploring action Move B from D to A | New state -> Stack 1: [A, B], Stack 2: [D], Stack 3: [E], Stack 4: [F, C], Stack 5: [G] | Exploring action Move F from table to G | New state -> Invalid | Taking action Move B from D to table | Moved to state -> Stack 1: [B], Stack 2: [C], Stack 3: [D], Stack 4: [E, A], Stack 5: [F], Stack 6: [G] | Plan so far [Move G from B to table | Move C from F to table | Move B from D to table] | Exploring action Move A from E to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F], Stack 7: [G] | Exploring action Move A from E to C | New state -> Stack 1: [B], Stack 2: [C, A], Stack 3: [D], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Exploring action Move E from table to D | New state -> Invalid | Exploring action Move E from table to B | New state -> Invalid | Exploring action Move F from table to B | New state -> Stack 1: [B, F], Stack 2: [C], Stack 3: [D], Stack 4: [E, A], Stack 5: [G] | Taking action Move G from B to A | Moved to state -> Stack 1: [D, B], Stack 2: [E, A, G], Stack 3: [F, C] | Plan so far [Move G from B to A] | Exploring action Move G from A to table | New state -> Stack 1: [D, B], Stack 2: [E, A], Stack 3: [F, C], Stack 4: [G] | Exploring action Move C from F to table | New state -> Stack 1: [C], Stack 2: [D, B], Stack 3: [E, A, G], Stack 4: [F] | Exploring action Move A from E to G | New state -> Invalid | Exploring action Move B from D to table | New state -> Stack 1: [B], Stack 2: [D], Stack 3: [E, A, G], Stack 4: [F, C] | Taking action Move G from B to table | Moved to state -> Stack 1: [A], Stack 2: [D, B], Stack 3: [E], Stack 4: [F, C], Stack 5: [G] | Plan so far [Move A from E to table | Move G from B to table] | Taking action Move A from E to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F], Stack 7: [G] | Plan so far [Move G from B to table | Move C from F to table | Move B from D to table | Move A from E to table] | Taking action Move F from table to B | Moved to state -> Stack 1: [B, F], Stack 2: [C], Stack 3: [D], Stack 4: [E, A], Stack 5: [G] | Plan so far [Move G from B to table | Move C from F to table | Move B from D to table | Move F from table to B] | Exploring action Move B from table to D | New state -> Invalid | Exploring action Move A from E to table | New state -> Stack 1: [A], Stack 2: [B, F], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [G] | Exploring action Move D from table to F | New state -> Stack 1: [B, F, D], Stack 2: [C], Stack 3: [E, A], Stack 4: [G] | Exploring action Move E from table to C | New state -> Invalid | Exploring action Move A from E to D | New state -> Stack 1: [B, F], Stack 2: [C], Stack 3: [D, A], Stack 4: [E], Stack 5: [G] | Taking action Move B from D to table | Moved to state -> Stack 1: [B], Stack 2: [D], Stack 3: [E, A, G], Stack 4: [F, C] | Plan so far [Move G from B to A | Move B from D to table] | Exploring action Move C from F to D | New state -> Stack 1: [B], Stack 2: [D, C], Stack 3: [E, A, G], Stack 4: [F] | Exploring action Move C from F to table | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D], Stack 4: [E, A, G], Stack 5: [F] | Exploring action Move C from F to B | New state -> Stack 1: [B, C], Stack 2: [D], Stack 3: [E, A, G], Stack 4: [F] | Exploring action Move E from table to C | New state -> Invalid | Taking action Move C from F to table | Moved to state -> Stack 1: [C], Stack 2: [D, B], Stack 3: [E, A, G], Stack 4: [F] | Plan so far [Move G from B to A | Move C from F to table] | Taking action Move C from F to table | Moved to state -> Stack 1: [B], Stack 2: [C], Stack 3: [D], Stack 4: [E, A, G], Stack 5: [F] | Plan so far [Move G from B to A | Move B from D to table | Move C from F to table] | Exploring action Move A from E to G | New state -> Invalid | Exploring action Move G from A to table | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D], Stack 4: [E, A], Stack 5: [F], Stack 6: [G] | Exploring action Move F from table to B | New state -> Stack 1: [B, F], Stack 2: [C], Stack 3: [D], Stack 4: [E, A, G] | Exploring action Move B from table to C | New state -> Stack 1: [C, B], Stack 2: [D], Stack 3: [E, A, G], Stack 4: [F] | Taking action Move A from E to table | Moved to state -> Stack 1: [A], Stack 2: [B, F], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [G] | Plan so far [Move G from B to table | Move C from F to table | Move B from D to table | Move F from table to B | Move A from E to table] | Taking action Move F from table to B | Moved to state -> Stack 1: [B, F], Stack 2: [C], Stack 3: [D], Stack 4: [E, A, G] | Plan so far [Move G from B to A | Move B from D to table | Move C from F to table | Move F from table to B] | Exploring action Move D from table to F | New state -> Stack 1: [B, F, D], Stack 2: [C], Stack 3: [E, A, G] | Exploring action Move F from B to table | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D], Stack 4: [E, A, G], Stack 5: [F] | Exploring action Move G from A to table | New state -> Stack 1: [B, F], Stack 2: [C], Stack 3: [D], Stack 4: [E, A], Stack 5: [G] | Exploring action Move E from table to G | New state -> Invalid | Exploring action Move A from E to F | New state -> Invalid | Taking action Move D from table to F | Moved to state -> Stack 1: [B, F, D], Stack 2: [C], Stack 3: [E, A], Stack 4: [G] | Plan so far [Move G from B to table | Move C from F to table | Move B from D to table | Move F from table to B | Move D from table to F] | Exploring action Move E from table to C | New state -> Invalid | Exploring action Move G from table to A | New state -> Stack 1: [B, F, D], Stack 2: [C], Stack 3: [E, A, G] | Exploring action Move A from E to D | New state -> Stack 1: [B, F, D, A], Stack 2: [C], Stack 3: [E], Stack 4: [G] | Exploring action Move A from E to table | New state -> Stack 1: [A], Stack 2: [B, F, D], Stack 3: [C], Stack 4: [E], Stack 5: [G] | Taking action Move D from table to F | Moved to state -> Stack 1: [B, F, D], Stack 2: [C], Stack 3: [E, A, G] | Plan so far [Move G from B to A | Move B from D to table | Move C from F to table | Move F from table to B | Move D from table to F] | Exploring action Move G from A to C | New state -> Stack 1: [B, F, D], Stack 2: [C, G], Stack 3: [E, A] | Exploring action Move B from table to D | New state -> Invalid | Exploring action Move C from table to D | New state -> Stack 1: [B, F, D, C], Stack 2: [E, A, G] | Exploring action Move G from A to table | New state -> Stack 1: [B, F, D], Stack 2: [C], Stack 3: [E, A], Stack 4: [G] | Taking action Move A from E to table | Moved to state -> Stack 1: [A], Stack 2: [B, F, D], Stack 3: [C], Stack 4: [E], Stack 5: [G] | Plan so far [Move G from B to table | Move C from F to table | Move B from D to table | Move F from table to B | Move D from table to F | Move A from E to table] | Taking action Move A from E to table | Moved to state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, B], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Plan so far [Move G from B to table | Move C from F to table | Move A from E to table] | Taking action Move B from D to table | Moved to state -> Stack 1: [A, G], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Plan so far [Move A from E to table | Move C from F to table | Move G from B to A | Move B from D to table] | Exploring action Move G from A to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F], Stack 7: [G] | Exploring action Move C from table to D | New state -> Stack 1: [A, G], Stack 2: [B], Stack 3: [D, C], Stack 4: [E], Stack 5: [F] | Exploring action Move F from table to B | New state -> Stack 1: [A, G], Stack 2: [B, F], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Exploring action Move A from table to F | New state -> Invalid | Exploring action Move A from table to B | New state -> Invalid | Taking action Move B from D to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [D], Stack 4: [E], Stack 5: [F, C], Stack 6: [G] | Plan so far [Move G from B to table | Move A from E to table | Move B from D to table] | Taking action Move F from table to B | Moved to state -> Stack 1: [A, G], Stack 2: [B, F], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Plan so far [Move A from E to table | Move C from F to table | Move G from B to A | Move B from D to table | Move F from table to B] | Exploring action Move G from A to table | New state -> Stack 1: [A], Stack 2: [B, F], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [G] | Exploring action Move A from table to G | New state -> Invalid | Exploring action Move C from table to D | New state -> Stack 1: [A, G], Stack 2: [B, F], Stack 3: [D, C], Stack 4: [E] | Exploring action Move D from table to F | New state -> Stack 1: [A, G], Stack 2: [B, F, D], Stack 3: [C], Stack 4: [E] | Exploring action Move B from table to F | New state -> Invalid | Taking action Move C from F to table | Moved to state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, B], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Plan so far [Move G from B to table | Move A from E to table | Move C from F to table] | Taking action Move D from table to F | Moved to state -> Stack 1: [A, G], Stack 2: [B, F, D], Stack 3: [C], Stack 4: [E] | Plan so far [Move A from E to table | Move C from F to table | Move G from B to A | Move B from D to table | Move F from table to B | Move D from table to F] | Exploring action Move E from table to D | New state -> Stack 1: [A, G], Stack 2: [B, F, D, E], Stack 3: [C] | Exploring action Move A from table to D | New state -> Invalid | Exploring action Move G from A to table | New state -> Stack 1: [A], Stack 2: [B, F, D], Stack 3: [C], Stack 4: [E], Stack 5: [G] | Exploring action Move G from A to C | New state -> Stack 1: [A], Stack 2: [B, F, D], Stack 3: [C, G], Stack 4: [E] | Taking action Move E from table to D | Moved to state -> Stack 1: [A], Stack 2: [B, F, D, E], Stack 3: [C], Stack 4: [G] | Plan so far [Move A from E to table | Move C from F to table | Move G from B to table | Move B from D to table | Move F from table to B | Move D from table to F | Move E from table to D] | Exploring action Move A from table to G | New state -> Stack 1: [B, F, D, E], Stack 2: [C], Stack 3: [G, A] | Exploring action Move C from table to E | New state -> Stack 1: [A], Stack 2: [B, F, D, E, C], Stack 3: [G] | Exploring action Move G from table to A | New state -> Stack 1: [A, G], Stack 2: [B, F, D, E], Stack 3: [C] | Exploring action Move D from F to E | New state -> Invalid | Taking action Move E from table to D | Moved to state -> Stack 1: [A, G], Stack 2: [B, F, D, E], Stack 3: [C] | Plan so far [Move A from E to table | Move C from F to table | Move G from B to A | Move B from D to table | Move F from table to B | Move D from table to F | Move E from table to D] | Exploring action Move G from A to C | New state -> Stack 1: [A], Stack 2: [B, F, D, E], Stack 3: [C, G] | Exploring action Move G from A to table | New state -> Stack 1: [A], Stack 2: [B, F, D, E], Stack 3: [C], Stack 4: [G] | Exploring action Move C from table to E | New state -> Stack 1: [A, G], Stack 2: [B, F, D, E, C] | Exploring action Move A from table to C | New state -> Invalid | Taking action Move C from F to table | Moved to state -> Stack 1: [A, G], Stack 2: [C], Stack 3: [D, B], Stack 4: [E], Stack 5: [F] | Plan so far [Move A from E to table | Move G from B to A | Move C from F to table] | Taking action Move B from D to table | Moved to state -> Stack 1: [A, G], Stack 2: [B], Stack 3: [D], Stack 4: [E], Stack 5: [F, C] | Plan so far [Move A from E to table | Move G from B to A | Move B from D to table] | Exploring action Move C from F to table | New state -> Stack 1: [A, G], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Exploring action Move C from F to D | New state -> Stack 1: [A, G], Stack 2: [B], Stack 3: [D, C], Stack 4: [E], Stack 5: [F] | Exploring action Move A from table to E | New state -> Invalid | Exploring action Move C from F to B | New state -> Stack 1: [A, G], Stack 2: [B, C], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Taking action Move C from F to table | Moved to state -> Stack 1: [B], Stack 2: [C], Stack 3: [D], Stack 4: [E, A], Stack 5: [F], Stack 6: [G] | Plan so far [Move G from B to table | Move B from D to table | Move C from F to table] | Taking action Move C from F to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F], Stack 7: [G] | Plan so far [Move G from B to table | Move B from D to table | Move A from E to table | Move C from F to table] | Taking action Move B from D to table | Moved to state -> Stack 1: [B], Stack 2: [C], Stack 3: [D], Stack 4: [E, A, G], Stack 5: [F] | Plan so far [Move C from F to table | Move G from B to A | Move B from D to table] | Taking action Move C from table to E | Moved to state -> Stack 1: [A], Stack 2: [B, F, D, E, C], Stack 3: [G] | Plan so far [Move A from E to table | Move C from F to table | Move G from B to table | Move B from D to table | Move F from table to B | Move D from table to F | Move E from table to D | Move C from table to E] | Exploring action Move A from table to C | New state -> Stack 1: [B, F, D, E, C, A], Stack 2: [G] | Exploring action Move C from E to table | New state -> Stack 1: [A], Stack 2: [B, F, D, E], Stack 3: [C], Stack 4: [G] | Exploring action Move D from F to C | New state -> Invalid | Exploring action Move G from table to A | New state -> Stack 1: [A, G], Stack 2: [B, F, D, E, C] | Taking action Move C from table to E | Moved to state -> Stack 1: [A, G], Stack 2: [B, F, D, E, C] | Plan so far [Move A from E to table | Move C from F to table | Move G from B to A | Move B from D to table | Move F from table to B | Move D from table to F | Move E from table to D | Move C from table to E] | Exploring action Move A from table to C | New state -> Invalid | Exploring action Move G from A to C | New state -> Stack 1: [A], Stack 2: [B, F, D, E, C, G] | Exploring action Move F from B to C | New state -> Invalid | Exploring action Move G from A to table | New state -> Stack 1: [A], Stack 2: [B, F, D, E, C], Stack 3: [G] | Exploring action Move C from E to table | New state -> Stack 1: [A, G], Stack 2: [B, F, D, E], Stack 3: [C] | Taking action Move C from F to table | Moved to state -> Stack 1: [A, G], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Plan so far [Move A from E to table | Move G from B to A | Move B from D to table | Move C from F to table] | Taking action Move A from table to C | Moved to state -> Stack 1: [B, F, D, E, C, A], Stack 2: [G] | Plan so far [Move A from E to table | Move C from F to table | Move G from B to table | Move B from D to table | Move F from table to B | Move D from table to F | Move E from table to D | Move C from table to E | Move A from table to C] | Exploring action Move G from table to A | New state -> Stack 1: [B, F, D, E, C, A, G] | Exploring action Move A from C to G | New state -> Stack 1: [B, F, D, E, C], Stack 2: [G, A] | Exploring action Move A from C to table | New state -> Stack 1: [A], Stack 2: [B, F, D, E, C], Stack 3: [G] | Exploring action Move F from B to A | New state -> Invalid | Taking action Move G from table to A | Moved to state -> Stack 1: [B, F, D, E, C, A, G] | Plan so far [Move A from E to table | Move C from F to table | Move G from B to table | Move B from D to table | Move F from table to B | Move D from table to F | Move E from table to D | Move C from table to E | Move A from table to C | Move G from table to A] | Reached goal state!",
        "system2_states_v1": 145
    },
    {
        "idx": 876,
        "start": [
            [
                "table",
                "C"
            ],
            [
                "table",
                "D",
                "B",
                "G",
                "E",
                "A",
                "F"
            ]
        ],
        "goal": [
            [
                "table",
                "B"
            ],
            [
                "table",
                "D",
                "E",
                "A",
                "C",
                "F",
                "G"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": false,
                "on": "E",
                "under": "F",
                "ontable": false
            },
            "B": {
                "clear": false,
                "on": "D",
                "under": "G",
                "ontable": false
            },
            "C": {
                "clear": true,
                "on": -1,
                "under": -1,
                "ontable": true
            },
            "D": {
                "clear": false,
                "on": -1,
                "under": "B",
                "ontable": true
            },
            "E": {
                "clear": false,
                "on": "G",
                "under": "A",
                "ontable": false
            },
            "F": {
                "clear": true,
                "on": "A",
                "under": -1,
                "ontable": false
            },
            "G": {
                "clear": false,
                "on": "B",
                "under": "E",
                "ontable": false
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": false,
                "on": "E",
                "under": "C",
                "ontable": false
            },
            "B": {
                "clear": true,
                "on": -1,
                "under": -1,
                "ontable": true
            },
            "C": {
                "clear": false,
                "on": "A",
                "under": "F",
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": -1,
                "under": "E",
                "ontable": true
            },
            "E": {
                "clear": false,
                "on": "D",
                "under": "A",
                "ontable": false
            },
            "F": {
                "clear": false,
                "on": "C",
                "under": "G",
                "ontable": false
            },
            "G": {
                "clear": true,
                "on": "F",
                "under": -1,
                "ontable": false
            }
        },
        "plan_len": 10,
        "num_blocks": 7,
        "prompt": "The initial state:\nThe hand is empty.\nC is on the table. C is clear.\nD is on the table. B is on D. G is on B. E is on G. A is on E. F is on A. F is clear.\n\nThe goal is:\nB is on the table. B is clear.\nD is on the table. E is on D. A is on E. C is on A. F is on C. G is on F. G is clear.\n",
        "system1_plan": "Move F from A to table | Move A from E to table | Move E from G to table | Move G from B to table | Move B from D to table | Move E from table to D | Move A from table to E | Move C from table to A | Move F from table to C | Move G from table to F",
        "system1_states": 10,
        "system2_plan_v1": "Moved to state -> Stack 1: [C], Stack 2: [D, B, G, E, A, F] | Plan so far [] | Exploring action Move A from E to F | New state -> Invalid | Exploring action Move E from G to C | New state -> Invalid | Exploring action Move C from table to F | New state -> Stack 1: [D, B, G, E, A, F, C] | Exploring action Move F from A to table | New state -> Stack 1: [C], Stack 2: [D, B, G, E, A], Stack 3: [F] | Exploring action Move F from A to C | New state -> Stack 1: [C, F], Stack 2: [D, B, G, E, A] | Taking action Move F from A to table | Moved to state -> Stack 1: [C], Stack 2: [D, B, G, E, A], Stack 3: [F] | Plan so far [Move F from A to table] | Exploring action Move A from E to F | New state -> Stack 1: [C], Stack 2: [D, B, G, E], Stack 3: [F, A] | Exploring action Move A from E to table | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, B, G, E], Stack 4: [F] | Exploring action Move E from G to A | New state -> Invalid | Exploring action Move G from B to C | New state -> Invalid | Exploring action Move C from table to A | New state -> Stack 1: [D, B, G, E, A, C], Stack 2: [F] | Taking action Move A from E to table | Moved to state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, B, G, E], Stack 4: [F] | Plan so far [Move F from A to table | Move A from E to table] | Exploring action Move E from G to A | New state -> Stack 1: [A, E], Stack 2: [C], Stack 3: [D, B, G], Stack 4: [F] | Exploring action Move B from D to F | New state -> Invalid | Exploring action Move E from G to F | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, B, G], Stack 4: [F, E] | Exploring action Move E from G to table | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, B, G], Stack 4: [E], Stack 5: [F] | Taking action Move C from table to A | Moved to state -> Stack 1: [D, B, G, E, A, C], Stack 2: [F] | Plan so far [Move F from A to table | Move C from table to A] | Exploring action Move C from A to F | New state -> Stack 1: [D, B, G, E, A], Stack 2: [F, C] | Exploring action Move F from table to C | New state -> Stack 1: [D, B, G, E, A, C, F] | Exploring action Move C from A to table | New state -> Stack 1: [C], Stack 2: [D, B, G, E, A], Stack 3: [F] | Exploring action Move E from G to F | New state -> Invalid | Taking action Move E from G to table | Moved to state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, B, G], Stack 4: [E], Stack 5: [F] | Plan so far [Move F from A to table | Move A from E to table | Move E from G to table] | Exploring action Move G from B to A | New state -> Stack 1: [A, G], Stack 2: [C], Stack 3: [D, B], Stack 4: [E], Stack 5: [F] | Exploring action Move G from B to F | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, B], Stack 4: [E], Stack 5: [F, G] | Exploring action Move G from B to table | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, B], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Exploring action Move B from D to F | New state -> Invalid | Taking action Move F from table to C | Moved to state -> Stack 1: [D, B, G, E, A, C, F] | Plan so far [Move F from A to table | Move C from table to A | Move F from table to C] | Exploring action Move F from C to table | New state -> Stack 1: [D, B, G, E, A, C], Stack 2: [F] | Exploring action Move B from D to F | New state -> Invalid | Exploring action Move A from E to table | New state -> Invalid | Taking action Move G from B to table | Moved to state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, B], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Plan so far [Move F from A to table | Move A from E to table | Move E from G to table | Move G from B to table] | Exploring action Move B from D to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F], Stack 7: [G] | Exploring action Move D from table to B | New state -> Invalid | Exploring action Move G from table to F | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, B], Stack 4: [E], Stack 5: [F, G] | Exploring action Move B from D to A | New state -> Stack 1: [A, B], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Taking action Move B from D to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F], Stack 7: [G] | Plan so far [Move F from A to table | Move A from E to table | Move E from G to table | Move G from B to table | Move B from D to table] | Exploring action Move E from table to D | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D, E], Stack 5: [F], Stack 6: [G] | Exploring action Move A from table to C | New state -> Stack 1: [B], Stack 2: [C, A], Stack 3: [D], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Exploring action Move G from table to F | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F, G] | Taking action Move E from table to D | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D, E], Stack 5: [F], Stack 6: [G] | Plan so far [Move F from A to table | Move A from E to table | Move E from G to table | Move G from B to table | Move B from D to table | Move E from table to D] | Exploring action Move A from table to E | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, E, A], Stack 4: [F], Stack 5: [G] | Exploring action Move A from table to C | New state -> Stack 1: [B], Stack 2: [C, A], Stack 3: [D, E], Stack 4: [F], Stack 5: [G] | Exploring action Move G from table to F | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D, E], Stack 5: [F, G] | Exploring action Move D from table to A | New state -> Invalid | Taking action Move A from table to E | Moved to state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, E, A], Stack 4: [F], Stack 5: [G] | Plan so far [Move F from A to table | Move A from E to table | Move E from G to table | Move G from B to table | Move B from D to table | Move E from table to D | Move A from table to E] | Exploring action Move C from table to A | New state -> Stack 1: [B], Stack 2: [D, E, A, C], Stack 3: [F], Stack 4: [G] | Exploring action Move E from D to A | New state -> Invalid | Exploring action Move E from D to G | New state -> Invalid | Exploring action Move G from table to F | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, E, A], Stack 4: [F, G] | Exploring action Move C from table to F | New state -> Stack 1: [B], Stack 2: [D, E, A], Stack 3: [F, C], Stack 4: [G] | Taking action Move C from table to A | Moved to state -> Stack 1: [B], Stack 2: [D, E, A, C], Stack 3: [F], Stack 4: [G] | Plan so far [Move F from A to table | Move A from E to table | Move E from G to table | Move G from B to table | Move B from D to table | Move E from table to D | Move A from table to E | Move C from table to A] | Exploring action Move G from table to C | New state -> Stack 1: [B], Stack 2: [D, E, A, C, G], Stack 3: [F] | Exploring action Move A from E to G | New state -> Invalid | Exploring action Move G from table to F | New state -> Stack 1: [B], Stack 2: [D, E, A, C], Stack 3: [F, G] | Exploring action Move F from table to C | New state -> Stack 1: [B], Stack 2: [D, E, A, C, F], Stack 3: [G] | Taking action Move F from table to C | Moved to state -> Stack 1: [B], Stack 2: [D, E, A, C, F], Stack 3: [G] | Plan so far [Move F from A to table | Move A from E to table | Move E from G to table | Move G from B to table | Move B from D to table | Move E from table to D | Move A from table to E | Move C from table to A | Move F from table to C] | Exploring action Move F from C to table | New state -> Stack 1: [B], Stack 2: [D, E, A, C], Stack 3: [F], Stack 4: [G] | Exploring action Move G from table to F | New state -> Stack 1: [B], Stack 2: [D, E, A, C, F, G] | Exploring action Move G from table to B | New state -> Stack 1: [B, G], Stack 2: [D, E, A, C, F] | Exploring action Move C from A to G | New state -> Invalid | Taking action Move G from table to F | Moved to state -> Stack 1: [B], Stack 2: [D, E, A, C, F, G] | Plan so far [Move F from A to table | Move A from E to table | Move E from G to table | Move G from B to table | Move B from D to table | Move E from table to D | Move A from table to E | Move C from table to A | Move F from table to C | Move G from table to F] | Reached goal state!",
        "system2_states_v1": 49
    },
    {
        "idx": 791,
        "start": [
            [
                "table",
                "C",
                "B",
                "D"
            ],
            [
                "table",
                "F",
                "E",
                "A"
            ]
        ],
        "goal": [
            [
                "table",
                "D",
                "F",
                "A",
                "C",
                "E",
                "B"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": true,
                "on": "E",
                "under": -1,
                "ontable": false
            },
            "B": {
                "clear": false,
                "on": "C",
                "under": "D",
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": -1,
                "under": "B",
                "ontable": true
            },
            "D": {
                "clear": true,
                "on": "B",
                "under": -1,
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": "F",
                "under": "A",
                "ontable": false
            },
            "F": {
                "clear": false,
                "on": -1,
                "under": "E",
                "ontable": true
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": false,
                "on": "F",
                "under": "C",
                "ontable": false
            },
            "B": {
                "clear": true,
                "on": "E",
                "under": -1,
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": "A",
                "under": "E",
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": -1,
                "under": "F",
                "ontable": true
            },
            "E": {
                "clear": false,
                "on": "C",
                "under": "B",
                "ontable": false
            },
            "F": {
                "clear": false,
                "on": "D",
                "under": "A",
                "ontable": false
            }
        },
        "plan_len": 9,
        "num_blocks": 6,
        "prompt": "The initial state:\nThe hand is empty.\nC is on the table. B is on C. D is on B. D is clear.\nF is on the table. E is on F. A is on E. A is clear.\n\nThe goal is:\nD is on the table. F is on D. A is on F. C is on A. E is on C. B is on E. B is clear.\n",
        "system1_plan": "Move A from E to table | Move D from B to table | Move E from F to table | Move B from C to table | Move F from table to D | Move A from table to F | Move C from table to A | Move E from table to C | Move B from table to E",
        "system1_states": 9,
        "system2_plan_v1": "Moved to state -> Stack 1: [C, B, D], Stack 2: [F, E, A] | Plan so far [] | Exploring action Move D from B to table | New state -> Stack 1: [C, B], Stack 2: [D], Stack 3: [F, E, A] | Exploring action Move C from table to D | New state -> Invalid | Exploring action Move A from E to D | New state -> Stack 1: [C, B, D, A], Stack 2: [F, E] | Exploring action Move A from E to table | New state -> Stack 1: [A], Stack 2: [C, B, D], Stack 3: [F, E] | Taking action Move A from E to table | Moved to state -> Stack 1: [A], Stack 2: [C, B, D], Stack 3: [F, E] | Plan so far [Move A from E to table] | Exploring action Move E from F to A | New state -> Stack 1: [A, E], Stack 2: [C, B, D], Stack 3: [F] | Exploring action Move B from C to D | New state -> Invalid | Exploring action Move E from F to table | New state -> Stack 1: [A], Stack 2: [C, B, D], Stack 3: [E], Stack 4: [F] | Exploring action Move D from B to table | New state -> Stack 1: [A], Stack 2: [C, B], Stack 3: [D], Stack 4: [F, E] | Exploring action Move B from C to A | New state -> Invalid | Taking action Move D from B to table | Moved to state -> Stack 1: [C, B], Stack 2: [D], Stack 3: [F, E, A] | Plan so far [Move D from B to table] | Exploring action Move A from E to table | New state -> Stack 1: [A], Stack 2: [C, B], Stack 3: [D], Stack 4: [F, E] | Exploring action Move E from F to table | New state -> Invalid | Exploring action Move B from C to table | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D], Stack 4: [F, E, A] | Exploring action Move A from E to D | New state -> Stack 1: [C, B], Stack 2: [D, A], Stack 3: [F, E] | Taking action Move D from B to table | Moved to state -> Stack 1: [A], Stack 2: [C, B], Stack 3: [D], Stack 4: [F, E] | Plan so far [Move A from E to table | Move D from B to table] | Exploring action Move B from C to E | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D], Stack 4: [F, E, B] | Exploring action Move E from F to table | New state -> Stack 1: [A], Stack 2: [C, B], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Exploring action Move C from table to A | New state -> Invalid | Exploring action Move F from table to A | New state -> Invalid | Exploring action Move B from C to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [F, E] | Taking action Move B from C to table | Moved to state -> Stack 1: [B], Stack 2: [C], Stack 3: [D], Stack 4: [F, E, A] | Plan so far [Move D from B to table | Move B from C to table] | Exploring action Move E from F to C | New state -> Invalid | Exploring action Move A from E to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [F, E] | Exploring action Move A from E to B | New state -> Stack 1: [B, A], Stack 2: [C], Stack 3: [D], Stack 4: [F, E] | Exploring action Move A from E to C | New state -> Stack 1: [B], Stack 2: [C, A], Stack 3: [D], Stack 4: [F, E] | Taking action Move B from C to E | Moved to state -> Stack 1: [A], Stack 2: [C], Stack 3: [D], Stack 4: [F, E, B] | Plan so far [Move A from E to table | Move D from B to table | Move B from C to E] | Exploring action Move A from table to D | New state -> Stack 1: [C], Stack 2: [D, A], Stack 3: [F, E, B] | Exploring action Move B from E to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [F, E] | Exploring action Move F from table to D | New state -> Invalid | Exploring action Move B from E to D | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, B], Stack 4: [F, E] | Taking action Move E from F to table | Moved to state -> Stack 1: [A], Stack 2: [C, B], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Plan so far [Move A from E to table | Move D from B to table | Move E from F to table] | Exploring action Move B from C to E | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D], Stack 4: [E, B], Stack 5: [F] | Exploring action Move F from table to D | New state -> Stack 1: [A], Stack 2: [C, B], Stack 3: [D, F], Stack 4: [E] | Exploring action Move B from C to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Exploring action Move C from table to F | New state -> Invalid | Taking action Move A from E to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [F, E] | Plan so far [Move D from B to table | Move B from C to table | Move A from E to table] | Exploring action Move B from table to E | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D], Stack 4: [F, E, B] | Exploring action Move E from F to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Exploring action Move E from F to C | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, E], Stack 4: [D], Stack 5: [F] | Exploring action Move F from table to B | New state -> Invalid | Taking action Move B from C to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Plan so far [Move A from E to table | Move D from B to table | Move E from F to table | Move B from C to table] | Exploring action Move A from table to D | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, A], Stack 4: [E], Stack 5: [F] | Exploring action Move B from table to E | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D], Stack 4: [E, B], Stack 5: [F] | Exploring action Move F from table to D | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D, F], Stack 5: [E] | Taking action Move B from C to E | Moved to state -> Stack 1: [A], Stack 2: [C], Stack 3: [D], Stack 4: [E, B], Stack 5: [F] | Plan so far [Move A from E to table | Move D from B to table | Move E from F to table | Move B from C to E] | Exploring action Move F from table to D | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, F], Stack 4: [E, B] | Exploring action Move B from E to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Exploring action Move A from table to D | New state -> Stack 1: [C], Stack 2: [D, A], Stack 3: [E, B], Stack 4: [F] | Exploring action Move E from table to F | New state -> Invalid | Taking action Move F from table to D | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D, F], Stack 5: [E] | Plan so far [Move A from E to table | Move D from B to table | Move E from F to table | Move B from C to table | Move F from table to D] | Exploring action Move B from table to E | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, F], Stack 4: [E, B] | Exploring action Move D from table to F | New state -> Invalid | Exploring action Move A from table to E | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, F], Stack 4: [E, A] | Exploring action Move A from table to F | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, F, A], Stack 4: [E] | Exploring action Move D from table to C | New state -> Invalid | Taking action Move E from F to table | Moved to state -> Stack 1: [A], Stack 2: [C, B, D], Stack 3: [E], Stack 4: [F] | Plan so far [Move A from E to table | Move E from F to table] | Exploring action Move D from B to E | New state -> Stack 1: [A], Stack 2: [C, B], Stack 3: [E, D], Stack 4: [F] | Exploring action Move D from B to F | New state -> Stack 1: [A], Stack 2: [C, B], Stack 3: [E], Stack 4: [F, D] | Exploring action Move B from C to E | New state -> Invalid | Exploring action Move D from B to table | New state -> Stack 1: [A], Stack 2: [C, B], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Taking action Move A from E to table | Moved to state -> Stack 1: [A], Stack 2: [C, B], Stack 3: [D], Stack 4: [F, E] | Plan so far [Move D from B to table | Move A from E to table] | Taking action Move E from F to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Plan so far [Move D from B to table | Move B from C to table | Move A from E to table | Move E from F to table] | Taking action Move B from C to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [F, E] | Plan so far [Move A from E to table | Move D from B to table | Move B from C to table] | Taking action Move D from B to table | Moved to state -> Stack 1: [A], Stack 2: [C, B], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Plan so far [Move A from E to table | Move E from F to table | Move D from B to table] | Taking action Move F from table to D | Moved to state -> Stack 1: [A], Stack 2: [C, B], Stack 3: [D, F], Stack 4: [E] | Plan so far [Move A from E to table | Move D from B to table | Move E from F to table | Move F from table to D] | Exploring action Move B from C to E | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, F], Stack 4: [E, B] | Exploring action Move B from C to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D, F], Stack 5: [E] | Exploring action Move A from table to F | New state -> Stack 1: [C, B], Stack 2: [D, F, A], Stack 3: [E] | Exploring action Move C from table to B | New state -> Invalid | Exploring action Move D from table to B | New state -> Invalid | Taking action Move F from table to D | Moved to state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, F], Stack 4: [E, B] | Plan so far [Move A from E to table | Move D from B to table | Move E from F to table | Move B from C to E | Move F from table to D] | Exploring action Move A from table to F | New state -> Stack 1: [C], Stack 2: [D, F, A], Stack 3: [E, B] | Exploring action Move E from table to A | New state -> Invalid | Exploring action Move B from E to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D, F], Stack 5: [E] | Exploring action Move A from table to C | New state -> Stack 1: [C, A], Stack 2: [D, F], Stack 3: [E, B] | Taking action Move A from table to F | Moved to state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, F, A], Stack 4: [E] | Plan so far [Move A from E to table | Move D from B to table | Move E from F to table | Move B from C to table | Move F from table to D | Move A from table to F] | Exploring action Move D from table to E | New state -> Invalid | Exploring action Move C from table to A | New state -> Stack 1: [B], Stack 2: [D, F, A, C], Stack 3: [E] | Exploring action Move A from F to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D, F], Stack 5: [E] | Exploring action Move B from table to E | New state -> Stack 1: [C], Stack 2: [D, F, A], Stack 3: [E, B] | Taking action Move A from table to F | Moved to state -> Stack 1: [C, B], Stack 2: [D, F, A], Stack 3: [E] | Plan so far [Move A from E to table | Move D from B to table | Move E from F to table | Move F from table to D | Move A from table to F] | Exploring action Move B from C to A | New state -> Stack 1: [C], Stack 2: [D, F, A, B], Stack 3: [E] | Exploring action Move F from D to table | New state -> Invalid | Exploring action Move B from C to E | New state -> Stack 1: [C], Stack 2: [D, F, A], Stack 3: [E, B] | Exploring action Move B from C to table | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, F, A], Stack 4: [E] | Taking action Move C from table to A | Moved to state -> Stack 1: [B], Stack 2: [D, F, A, C], Stack 3: [E] | Plan so far [Move A from E to table | Move D from B to table | Move E from F to table | Move B from C to table | Move F from table to D | Move A from table to F | Move C from table to A] | Exploring action Move F from D to table | New state -> Invalid | Exploring action Move B from table to E | New state -> Stack 1: [D, F, A, C], Stack 2: [E, B] | Exploring action Move E from table to C | New state -> Stack 1: [B], Stack 2: [D, F, A, C, E] | Exploring action Move E from table to B | New state -> Stack 1: [B, E], Stack 2: [D, F, A, C] | Taking action Move B from C to table | Moved to state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, F, A], Stack 4: [E] | Plan so far [Move A from E to table | Move D from B to table | Move E from F to table | Move F from table to D | Move A from table to F | Move B from C to table] | Taking action Move B from C to E | Moved to state -> Stack 1: [C], Stack 2: [D, F, A], Stack 3: [E, B] | Plan so far [Move A from E to table | Move D from B to table | Move E from F to table | Move F from table to D | Move A from table to F | Move B from C to E] | Exploring action Move B from E to C | New state -> Stack 1: [C, B], Stack 2: [D, F, A], Stack 3: [E] | Exploring action Move C from table to A | New state -> Stack 1: [D, F, A, C], Stack 2: [E, B] | Exploring action Move B from E to table | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, F, A], Stack 4: [E] | Exploring action Move E from table to B | New state -> Invalid | Taking action Move E from table to C | Moved to state -> Stack 1: [B], Stack 2: [D, F, A, C, E] | Plan so far [Move A from E to table | Move D from B to table | Move E from F to table | Move B from C to table | Move F from table to D | Move A from table to F | Move C from table to A | Move E from table to C] | Exploring action Move B from table to E | New state -> Stack 1: [D, F, A, C, E, B] | Exploring action Move E from C to table | New state -> Stack 1: [B], Stack 2: [D, F, A, C], Stack 3: [E] | Exploring action Move A from F to E | New state -> Invalid | Exploring action Move E from C to B | New state -> Stack 1: [B, E], Stack 2: [D, F, A, C] | Exploring action Move A from F to B | New state -> Invalid | Taking action Move B from table to E | Moved to state -> Stack 1: [D, F, A, C, E, B] | Plan so far [Move A from E to table | Move D from B to table | Move E from F to table | Move B from C to table | Move F from table to D | Move A from table to F | Move C from table to A | Move E from table to C | Move B from table to E] | Reached goal state!",
        "system2_states_v1": 80
    },
    {
        "idx": 874,
        "start": [
            [
                "table",
                "C",
                "A",
                "B",
                "G",
                "D",
                "F"
            ],
            [
                "table",
                "E"
            ]
        ],
        "goal": [
            [
                "table",
                "C",
                "F"
            ],
            [
                "table",
                "D",
                "E",
                "G",
                "A",
                "B"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": false,
                "on": "C",
                "under": "B",
                "ontable": false
            },
            "B": {
                "clear": false,
                "on": "A",
                "under": "G",
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": -1,
                "under": "A",
                "ontable": true
            },
            "D": {
                "clear": false,
                "on": "G",
                "under": "F",
                "ontable": false
            },
            "E": {
                "clear": true,
                "on": -1,
                "under": -1,
                "ontable": true
            },
            "F": {
                "clear": true,
                "on": "D",
                "under": -1,
                "ontable": false
            },
            "G": {
                "clear": false,
                "on": "B",
                "under": "D",
                "ontable": false
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": false,
                "on": "G",
                "under": "B",
                "ontable": false
            },
            "B": {
                "clear": true,
                "on": "A",
                "under": -1,
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": -1,
                "under": "F",
                "ontable": true
            },
            "D": {
                "clear": false,
                "on": -1,
                "under": "E",
                "ontable": true
            },
            "E": {
                "clear": false,
                "on": "D",
                "under": "G",
                "ontable": false
            },
            "F": {
                "clear": true,
                "on": "C",
                "under": -1,
                "ontable": false
            },
            "G": {
                "clear": false,
                "on": "E",
                "under": "A",
                "ontable": false
            }
        },
        "plan_len": 10,
        "num_blocks": 7,
        "prompt": "The initial state:\nThe hand is empty.\nC is on the table. A is on C. B is on A. G is on B. D is on G. F is on D. F is clear.\nE is on the table. E is clear.\n\nThe goal is:\nC is on the table. F is on C. F is clear.\nD is on the table. E is on D. G is on E. A is on G. B is on A. B is clear.\n",
        "system1_plan": "Move F from D to table | Move D from G to table | Move G from B to table | Move E from table to D | Move B from A to table | Move A from C to table | Move F from table to C | Move G from table to E | Move A from table to G | Move B from table to A",
        "system1_states": 10,
        "system2_plan_v1": "Moved to state -> Stack 1: [C, A, B, G, D, F], Stack 2: [E] | Plan so far [] | Exploring action Move G from B to F | New state -> Invalid | Exploring action Move F from D to table | New state -> Stack 1: [C, A, B, G, D], Stack 2: [E], Stack 3: [F] | Exploring action Move F from D to E | New state -> Stack 1: [C, A, B, G, D], Stack 2: [E, F] | Exploring action Move E from table to F | New state -> Stack 1: [C, A, B, G, D, F, E] | Taking action Move F from D to table | Moved to state -> Stack 1: [C, A, B, G, D], Stack 2: [E], Stack 3: [F] | Plan so far [Move F from D to table] | Exploring action Move D from G to E | New state -> Stack 1: [C, A, B, G], Stack 2: [E, D], Stack 3: [F] | Exploring action Move D from G to table | New state -> Stack 1: [C, A, B, G], Stack 2: [D], Stack 3: [E], Stack 4: [F] | Exploring action Move D from G to F | New state -> Stack 1: [C, A, B, G], Stack 2: [E], Stack 3: [F, D] | Exploring action Move G from B to E | New state -> Invalid | Taking action Move D from G to table | Moved to state -> Stack 1: [C, A, B, G], Stack 2: [D], Stack 3: [E], Stack 4: [F] | Plan so far [Move F from D to table | Move D from G to table] | Exploring action Move A from C to E | New state -> Invalid | Exploring action Move G from B to F | New state -> Stack 1: [C, A, B], Stack 2: [D], Stack 3: [E], Stack 4: [F, G] | Exploring action Move G from B to table | New state -> Stack 1: [C, A, B], Stack 2: [D], Stack 3: [E], Stack 4: [F], Stack 5: [G] | Exploring action Move B from A to D | New state -> Invalid | Exploring action Move G from B to E | New state -> Stack 1: [C, A, B], Stack 2: [D], Stack 3: [E, G], Stack 4: [F] | Taking action Move G from B to table | Moved to state -> Stack 1: [C, A, B], Stack 2: [D], Stack 3: [E], Stack 4: [F], Stack 5: [G] | Plan so far [Move F from D to table | Move D from G to table | Move G from B to table] | Exploring action Move B from A to E | New state -> Stack 1: [C, A], Stack 2: [D], Stack 3: [E, B], Stack 4: [F], Stack 5: [G] | Exploring action Move A from C to table | New state -> Invalid | Exploring action Move A from C to F | New state -> Invalid | Exploring action Move E from table to D | New state -> Stack 1: [C, A, B], Stack 2: [D, E], Stack 3: [F], Stack 4: [G] | Exploring action Move B from A to table | New state -> Stack 1: [B], Stack 2: [C, A], Stack 3: [D], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Taking action Move E from table to D | Moved to state -> Stack 1: [C, A, B], Stack 2: [D, E], Stack 3: [F], Stack 4: [G] | Plan so far [Move F from D to table | Move D from G to table | Move G from B to table | Move E from table to D] | Exploring action Move G from table to E | New state -> Stack 1: [C, A, B], Stack 2: [D, E, G], Stack 3: [F] | Exploring action Move G from table to F | New state -> Stack 1: [C, A, B], Stack 2: [D, E], Stack 3: [F, G] | Exploring action Move B from A to table | New state -> Stack 1: [B], Stack 2: [C, A], Stack 3: [D, E], Stack 4: [F], Stack 5: [G] | Exploring action Move A from C to F | New state -> Invalid | Taking action Move G from table to E | Moved to state -> Stack 1: [C, A, B], Stack 2: [D, E, G], Stack 3: [F] | Plan so far [Move F from D to table | Move D from G to table | Move G from B to table | Move E from table to D | Move G from table to E] | Exploring action Move G from E to table | New state -> Stack 1: [C, A, B], Stack 2: [D, E], Stack 3: [F], Stack 4: [G] | Exploring action Move E from D to G | New state -> Invalid | Exploring action Move B from A to table | New state -> Stack 1: [B], Stack 2: [C, A], Stack 3: [D, E, G], Stack 4: [F] | Exploring action Move B from A to G | New state -> Stack 1: [C, A], Stack 2: [D, E, G, B], Stack 3: [F] | Taking action Move E from table to D | Moved to state -> Stack 1: [C, A, B, G], Stack 2: [D, E], Stack 3: [F] | Plan so far [Move F from D to table | Move D from G to table | Move E from table to D] | Exploring action Move G from B to F | New state -> Stack 1: [C, A, B], Stack 2: [D, E], Stack 3: [F, G] | Exploring action Move B from A to table | New state -> Invalid | Exploring action Move G from B to table | New state -> Stack 1: [C, A, B], Stack 2: [D, E], Stack 3: [F], Stack 4: [G] | Exploring action Move G from B to E | New state -> Stack 1: [C, A, B], Stack 2: [D, E, G], Stack 3: [F] | Taking action Move G from B to E | Moved to state -> Stack 1: [C, A, B], Stack 2: [D, E, G], Stack 3: [F] | Plan so far [Move F from D to table | Move D from G to table | Move E from table to D | Move G from B to E] | Taking action Move G from B to table | Moved to state -> Stack 1: [C, A, B], Stack 2: [D, E], Stack 3: [F], Stack 4: [G] | Plan so far [Move F from D to table | Move D from G to table | Move E from table to D | Move G from B to table] | Taking action Move G from B to F | Moved to state -> Stack 1: [C, A, B], Stack 2: [D], Stack 3: [E], Stack 4: [F, G] | Plan so far [Move F from D to table | Move D from G to table | Move G from B to F] | Exploring action Move A from C to D | New state -> Invalid | Exploring action Move G from F to table | New state -> Stack 1: [C, A, B], Stack 2: [D], Stack 3: [E], Stack 4: [F], Stack 5: [G] | Exploring action Move C from table to D | New state -> Invalid | Exploring action Move G from F to D | New state -> Stack 1: [C, A, B], Stack 2: [D, G], Stack 3: [E], Stack 4: [F] | Exploring action Move E from table to D | New state -> Stack 1: [C, A, B], Stack 2: [D, E], Stack 3: [F, G] | Taking action Move B from A to table | Moved to state -> Stack 1: [B], Stack 2: [C, A], Stack 3: [D], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Plan so far [Move F from D to table | Move D from G to table | Move G from B to table | Move B from A to table] | Exploring action Move C from table to F | New state -> Invalid | Exploring action Move A from C to D | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, A], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Exploring action Move A from C to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F], Stack 7: [G] | Exploring action Move E from table to D | New state -> Stack 1: [B], Stack 2: [C, A], Stack 3: [D, E], Stack 4: [F], Stack 5: [G] | Taking action Move B from A to table | Moved to state -> Stack 1: [B], Stack 2: [C, A], Stack 3: [D, E], Stack 4: [F], Stack 5: [G] | Plan so far [Move F from D to table | Move D from G to table | Move G from B to table | Move E from table to D | Move B from A to table] | Exploring action Move A from C to E | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, E, A], Stack 4: [F], Stack 5: [G] | Exploring action Move D from table to A | New state -> Invalid | Exploring action Move D from table to E | New state -> Invalid | Exploring action Move A from C to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D, E], Stack 5: [F], Stack 6: [G] | Exploring action Move G from table to E | New state -> Stack 1: [B], Stack 2: [C, A], Stack 3: [D, E, G], Stack 4: [F] | Taking action Move E from table to D | Moved to state -> Stack 1: [B], Stack 2: [C, A], Stack 3: [D, E], Stack 4: [F], Stack 5: [G] | Plan so far [Move F from D to table | Move D from G to table | Move G from B to table | Move B from A to table | Move E from table to D] | Taking action Move A from C to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D, E], Stack 5: [F], Stack 6: [G] | Plan so far [Move F from D to table | Move D from G to table | Move G from B to table | Move E from table to D | Move B from A to table | Move A from C to table] | Exploring action Move D from table to F | New state -> Invalid | Exploring action Move B from table to A | New state -> Stack 1: [A, B], Stack 2: [C], Stack 3: [D, E], Stack 4: [F], Stack 5: [G] | Exploring action Move G from table to E | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D, E, G], Stack 5: [F] | Exploring action Move D from table to B | New state -> Invalid | Exploring action Move F from table to C | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, F], Stack 4: [D, E], Stack 5: [G] | Taking action Move F from table to C | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, F], Stack 4: [D, E], Stack 5: [G] | Plan so far [Move F from D to table | Move D from G to table | Move G from B to table | Move E from table to D | Move B from A to table | Move A from C to table | Move F from table to C] | Exploring action Move G from table to E | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, F], Stack 4: [D, E, G] | Exploring action Move C from table to A | New state -> Invalid | Exploring action Move B from table to A | New state -> Stack 1: [A, B], Stack 2: [C, F], Stack 3: [D, E], Stack 4: [G] | Exploring action Move B from table to E | New state -> Stack 1: [A], Stack 2: [C, F], Stack 3: [D, E, B], Stack 4: [G] | Taking action Move G from table to E | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, F], Stack 4: [D, E, G] | Plan so far [Move F from D to table | Move D from G to table | Move G from B to table | Move E from table to D | Move B from A to table | Move A from C to table | Move F from table to C | Move G from table to E] | Exploring action Move A from table to B | New state -> Stack 1: [B, A], Stack 2: [C, F], Stack 3: [D, E, G] | Exploring action Move B from table to A | New state -> Stack 1: [A, B], Stack 2: [C, F], Stack 3: [D, E, G] | Exploring action Move C from table to A | New state -> Invalid | Exploring action Move E from D to table | New state -> Invalid | Exploring action Move A from table to G | New state -> Stack 1: [B], Stack 2: [C, F], Stack 3: [D, E, G, A] | Taking action Move A from table to G | Moved to state -> Stack 1: [B], Stack 2: [C, F], Stack 3: [D, E, G, A] | Plan so far [Move F from D to table | Move D from G to table | Move G from B to table | Move E from table to D | Move B from A to table | Move A from C to table | Move F from table to C | Move G from table to E | Move A from table to G] | Exploring action Move A from G to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, F], Stack 4: [D, E, G] | Exploring action Move F from C to table | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, E, G, A], Stack 4: [F] | Exploring action Move B from table to A | New state -> Stack 1: [C, F], Stack 2: [D, E, G, A, B] | Exploring action Move G from E to table | New state -> Invalid | Taking action Move B from table to A | Moved to state -> Stack 1: [C, F], Stack 2: [D, E, G, A, B] | Plan so far [Move F from D to table | Move D from G to table | Move G from B to table | Move E from table to D | Move B from A to table | Move A from C to table | Move F from table to C | Move G from table to E | Move A from table to G | Move B from table to A] | Reached goal state!",
        "system2_states_v1": 62
    },
    {
        "idx": 677,
        "start": [
            [
                "table",
                "C"
            ],
            [
                "table",
                "D",
                "A",
                "E"
            ],
            [
                "table",
                "F",
                "B"
            ]
        ],
        "goal": [
            [
                "table",
                "F",
                "D",
                "A",
                "B",
                "C",
                "E"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": false,
                "on": "D",
                "under": "E",
                "ontable": false
            },
            "B": {
                "clear": true,
                "on": "F",
                "under": -1,
                "ontable": false
            },
            "C": {
                "clear": true,
                "on": -1,
                "under": -1,
                "ontable": true
            },
            "D": {
                "clear": false,
                "on": -1,
                "under": "A",
                "ontable": true
            },
            "E": {
                "clear": true,
                "on": "A",
                "under": -1,
                "ontable": false
            },
            "F": {
                "clear": false,
                "on": -1,
                "under": "B",
                "ontable": true
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": false,
                "on": "D",
                "under": "B",
                "ontable": false
            },
            "B": {
                "clear": false,
                "on": "A",
                "under": "C",
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": "B",
                "under": "E",
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": "F",
                "under": "A",
                "ontable": false
            },
            "E": {
                "clear": true,
                "on": "C",
                "under": -1,
                "ontable": false
            },
            "F": {
                "clear": false,
                "on": -1,
                "under": "D",
                "ontable": true
            }
        },
        "plan_len": 8,
        "num_blocks": 6,
        "prompt": "The initial state:\nThe hand is empty.\nC is on the table. C is clear.\nD is on the table. A is on D. E is on A. E is clear.\nF is on the table. B is on F. B is clear.\n\nThe goal is:\nF is on the table. D is on F. A is on D. B is on A. C is on B. E is on C. E is clear.\n",
        "system1_plan": "Move E from A to table | Move B from F to table | Move A from D to table | Move D from table to F | Move A from table to D | Move B from table to A | Move C from table to B | Move E from table to C",
        "system1_states": 8,
        "system2_plan_v1": "Moved to state -> Stack 1: [C], Stack 2: [D, A, E], Stack 3: [F, B] | Plan so far [] | Exploring action Move A from D to table | New state -> Invalid | Exploring action Move B from F to table | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, A, E], Stack 4: [F] | Exploring action Move E from A to table | New state -> Stack 1: [C], Stack 2: [D, A], Stack 3: [E], Stack 4: [F, B] | Exploring action Move E from A to C | New state -> Stack 1: [C, E], Stack 2: [D, A], Stack 3: [F, B] | Exploring action Move F from table to C | New state -> Invalid | Taking action Move B from F to table | Moved to state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, A, E], Stack 4: [F] | Plan so far [Move B from F to table] | Exploring action Move E from A to C | New state -> Stack 1: [B], Stack 2: [C, E], Stack 3: [D, A], Stack 4: [F] | Exploring action Move E from A to F | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, A], Stack 4: [F, E] | Exploring action Move E from A to table | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, A], Stack 4: [E], Stack 5: [F] | Exploring action Move D from table to B | New state -> Invalid | Taking action Move E from A to table | Moved to state -> Stack 1: [C], Stack 2: [D, A], Stack 3: [E], Stack 4: [F, B] | Plan so far [Move E from A to table] | Exploring action Move B from F to A | New state -> Stack 1: [C], Stack 2: [D, A, B], Stack 3: [E], Stack 4: [F] | Exploring action Move A from D to table | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [F, B] | Exploring action Move D from table to E | New state -> Invalid | Exploring action Move F from table to B | New state -> Invalid | Exploring action Move B from F to table | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, A], Stack 4: [E], Stack 5: [F] | Taking action Move B from F to A | Moved to state -> Stack 1: [C], Stack 2: [D, A, B], Stack 3: [E], Stack 4: [F] | Plan so far [Move E from A to table | Move B from F to A] | Exploring action Move D from table to E | New state -> Invalid | Exploring action Move A from D to E | New state -> Invalid | Exploring action Move C from table to E | New state -> Stack 1: [D, A, B], Stack 2: [E, C], Stack 3: [F] | Exploring action Move C from table to B | New state -> Stack 1: [D, A, B, C], Stack 2: [E], Stack 3: [F] | Exploring action Move E from table to C | New state -> Stack 1: [C, E], Stack 2: [D, A, B], Stack 3: [F] | Taking action Move C from table to B | Moved to state -> Stack 1: [D, A, B, C], Stack 2: [E], Stack 3: [F] | Plan so far [Move E from A to table | Move B from F to A | Move C from table to B] | Exploring action Move A from D to C | New state -> Invalid | Exploring action Move E from table to C | New state -> Stack 1: [D, A, B, C, E], Stack 2: [F] | Exploring action Move A from D to F | New state -> Invalid | Exploring action Move F from table to E | New state -> Stack 1: [D, A, B, C], Stack 2: [E, F] | Exploring action Move F from table to C | New state -> Stack 1: [D, A, B, C, F], Stack 2: [E] | Taking action Move E from table to C | Moved to state -> Stack 1: [D, A, B, C, E], Stack 2: [F] | Plan so far [Move E from A to table | Move B from F to A | Move C from table to B | Move E from table to C] | Exploring action Move F from table to E | New state -> Stack 1: [D, A, B, C, E, F] | Exploring action Move E from C to F | New state -> Stack 1: [D, A, B, C], Stack 2: [F, E] | Exploring action Move D from table to F | New state -> Invalid | Exploring action Move A from D to E | New state -> Invalid | Exploring action Move E from C to table | New state -> Stack 1: [D, A, B, C], Stack 2: [E], Stack 3: [F] | Taking action Move B from F to table | Moved to state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, A], Stack 4: [E], Stack 5: [F] | Plan so far [Move E from A to table | Move B from F to table] | Exploring action Move A from D to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Exploring action Move D from table to C | New state -> Invalid | Exploring action Move A from D to C | New state -> Stack 1: [B], Stack 2: [C, A], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Exploring action Move B from table to A | New state -> Stack 1: [C], Stack 2: [D, A, B], Stack 3: [E], Stack 4: [F] | Exploring action Move D from table to E | New state -> Invalid | Taking action Move E from A to table | Moved to state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, A], Stack 4: [E], Stack 5: [F] | Plan so far [Move B from F to table | Move E from A to table] | Taking action Move A from D to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Plan so far [Move E from A to table | Move B from F to table | Move A from D to table] | Exploring action Move A from table to D | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, A], Stack 4: [E], Stack 5: [F] | Exploring action Move E from table to C | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, E], Stack 4: [D], Stack 5: [F] | Exploring action Move D from table to F | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [E], Stack 5: [F, D] | Taking action Move B from table to A | Moved to state -> Stack 1: [C], Stack 2: [D, A, B], Stack 3: [E], Stack 4: [F] | Plan so far [Move E from A to table | Move B from F to table | Move B from table to A] | Taking action Move A from D to table | Moved to state -> Stack 1: [A], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [F, B] | Plan so far [Move E from A to table | Move A from D to table] | Exploring action Move B from F to A | New state -> Stack 1: [A, B], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Exploring action Move B from F to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Exploring action Move F from table to D | New state -> Invalid | Exploring action Move B from F to C | New state -> Stack 1: [A], Stack 2: [C, B], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Taking action Move E from table to C | Moved to state -> Stack 1: [C, E], Stack 2: [D, A, B], Stack 3: [F] | Plan so far [Move E from A to table | Move B from F to A | Move E from table to C] | Exploring action Move C from table to B | New state -> Invalid | Exploring action Move F from table to B | New state -> Stack 1: [C, E], Stack 2: [D, A, B, F] | Exploring action Move E from C to table | New state -> Stack 1: [C], Stack 2: [D, A, B], Stack 3: [E], Stack 4: [F] | Exploring action Move E from C to F | New state -> Stack 1: [C], Stack 2: [D, A, B], Stack 3: [F, E] | Exploring action Move A from D to table | New state -> Invalid | Taking action Move B from F to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Plan so far [Move E from A to table | Move A from D to table | Move B from F to table] | Taking action Move D from table to F | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [E], Stack 5: [F, D] | Plan so far [Move E from A to table | Move B from F to table | Move A from D to table | Move D from table to F] | Exploring action Move A from table to B | New state -> Stack 1: [B, A], Stack 2: [C], Stack 3: [E], Stack 4: [F, D] | Exploring action Move E from table to C | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, E], Stack 4: [F, D] | Exploring action Move F from table to D | New state -> Invalid | Exploring action Move F from table to C | New state -> Invalid | Exploring action Move A from table to D | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [E], Stack 4: [F, D, A] | Taking action Move E from A to C | Moved to state -> Stack 1: [C, E], Stack 2: [D, A], Stack 3: [F, B] | Plan so far [Move E from A to C] | Exploring action Move A from D to table | New state -> Stack 1: [A], Stack 2: [C, E], Stack 3: [D], Stack 4: [F, B] | Exploring action Move B from F to A | New state -> Stack 1: [C, E], Stack 2: [D, A, B], Stack 3: [F] | Exploring action Move B from F to table | New state -> Stack 1: [B], Stack 2: [C, E], Stack 3: [D, A], Stack 4: [F] | Exploring action Move D from table to E | New state -> Invalid | Taking action Move B from F to A | Moved to state -> Stack 1: [C, E], Stack 2: [D, A, B], Stack 3: [F] | Plan so far [Move E from A to C | Move B from F to A] | Taking action Move E from A to C | Moved to state -> Stack 1: [B], Stack 2: [C, E], Stack 3: [D, A], Stack 4: [F] | Plan so far [Move B from F to table | Move E from A to C] | Exploring action Move A from D to B | New state -> Stack 1: [B, A], Stack 2: [C, E], Stack 3: [D], Stack 4: [F] | Exploring action Move A from D to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, E], Stack 4: [D], Stack 5: [F] | Exploring action Move B from table to A | New state -> Stack 1: [C, E], Stack 2: [D, A, B], Stack 3: [F] | Exploring action Move D from table to A | New state -> Invalid | Taking action Move A from table to D | Moved to state -> Stack 1: [B], Stack 2: [C], Stack 3: [E], Stack 4: [F, D, A] | Plan so far [Move E from A to table | Move B from F to table | Move A from D to table | Move D from table to F | Move A from table to D] | Exploring action Move E from table to C | New state -> Stack 1: [B], Stack 2: [C, E], Stack 3: [F, D, A] | Exploring action Move F from table to B | New state -> Invalid | Exploring action Move B from table to A | New state -> Stack 1: [C], Stack 2: [E], Stack 3: [F, D, A, B] | Exploring action Move B from table to E | New state -> Stack 1: [C], Stack 2: [E, B], Stack 3: [F, D, A] | Taking action Move A from D to table | Moved to state -> Stack 1: [A], Stack 2: [C, E], Stack 3: [D], Stack 4: [F, B] | Plan so far [Move E from A to C | Move A from D to table] | Exploring action Move C from table to D | New state -> Invalid | Exploring action Move B from F to A | New state -> Stack 1: [A, B], Stack 2: [C, E], Stack 3: [D], Stack 4: [F] | Exploring action Move B from F to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, E], Stack 4: [D], Stack 5: [F] | Exploring action Move F from table to A | New state -> Invalid | Exploring action Move B from F to D | New state -> Stack 1: [A], Stack 2: [C, E], Stack 3: [D, B], Stack 4: [F] | Taking action Move B from F to table | Moved to state -> Stack 1: [B], Stack 2: [C, E], Stack 3: [D, A], Stack 4: [F] | Plan so far [Move E from A to C | Move B from F to table] | Taking action Move B from table to A | Moved to state -> Stack 1: [C], Stack 2: [E], Stack 3: [F, D, A, B] | Plan so far [Move E from A to table | Move B from F to table | Move A from D to table | Move D from table to F | Move A from table to D | Move B from table to A] | Exploring action Move F from table to E | New state -> Invalid | Exploring action Move E from table to B | New state -> Stack 1: [C], Stack 2: [F, D, A, B, E] | Exploring action Move C from table to B | New state -> Stack 1: [E], Stack 2: [F, D, A, B, C] | Exploring action Move E from table to C | New state -> Stack 1: [C, E], Stack 2: [F, D, A, B] | Exploring action Move A from D to C | New state -> Invalid | Taking action Move B from F to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, E], Stack 4: [D], Stack 5: [F] | Plan so far [Move E from A to C | Move A from D to table | Move B from F to table] | Exploring action Move E from C to A | New state -> Stack 1: [A, E], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [F] | Exploring action Move E from C to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Exploring action Move D from table to F | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, E], Stack 4: [F, D] | Exploring action Move C from table to E | New state -> Invalid | Taking action Move C from table to B | Moved to state -> Stack 1: [E], Stack 2: [F, D, A, B, C] | Plan so far [Move E from A to table | Move B from F to table | Move A from D to table | Move D from table to F | Move A from table to D | Move B from table to A | Move C from table to B] | Exploring action Move C from B to E | New state -> Stack 1: [E, C], Stack 2: [F, D, A, B] | Exploring action Move E from table to C | New state -> Stack 1: [F, D, A, B, C, E] | Exploring action Move A from D to C | New state -> Invalid | Exploring action Move B from A to C | New state -> Invalid | Exploring action Move C from B to table | New state -> Stack 1: [C], Stack 2: [E], Stack 3: [F, D, A, B] | Taking action Move E from table to C | Moved to state -> Stack 1: [F, D, A, B, C, E] | Plan so far [Move E from A to table | Move B from F to table | Move A from D to table | Move D from table to F | Move A from table to D | Move B from table to A | Move C from table to B | Move E from table to C] | Reached goal state!",
        "system2_states_v1": 82
    },
    {
        "idx": 715,
        "start": [
            [
                "table",
                "A",
                "C",
                "E",
                "B",
                "F"
            ],
            [
                "table",
                "D"
            ]
        ],
        "goal": [
            [
                "table",
                "C",
                "D",
                "F",
                "B",
                "A"
            ],
            [
                "table",
                "E"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": false,
                "on": -1,
                "under": "C",
                "ontable": true
            },
            "B": {
                "clear": false,
                "on": "E",
                "under": "F",
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": "A",
                "under": "E",
                "ontable": false
            },
            "D": {
                "clear": true,
                "on": -1,
                "under": -1,
                "ontable": true
            },
            "E": {
                "clear": false,
                "on": "C",
                "under": "B",
                "ontable": false
            },
            "F": {
                "clear": true,
                "on": "B",
                "under": -1,
                "ontable": false
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": true,
                "on": "B",
                "under": -1,
                "ontable": false
            },
            "B": {
                "clear": false,
                "on": "F",
                "under": "A",
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": -1,
                "under": "D",
                "ontable": true
            },
            "D": {
                "clear": false,
                "on": "C",
                "under": "F",
                "ontable": false
            },
            "E": {
                "clear": true,
                "on": -1,
                "under": -1,
                "ontable": true
            },
            "F": {
                "clear": false,
                "on": "D",
                "under": "B",
                "ontable": false
            }
        },
        "plan_len": 8,
        "num_blocks": 6,
        "prompt": "The initial state:\nThe hand is empty.\nA is on the table. C is on A. E is on C. B is on E. F is on B. F is clear.\nD is on the table. D is clear.\n\nThe goal is:\nC is on the table. D is on C. F is on D. B is on F. A is on B. A is clear.\nE is on the table. E is clear.\n",
        "system1_plan": "Move F from B to table | Move B from E to table | Move E from C to table | Move C from A to table | Move D from table to C | Move F from table to D | Move B from table to F | Move A from table to B",
        "system1_states": 8,
        "system2_plan_v1": "Moved to state -> Stack 1: [A, C, E, B, F], Stack 2: [D] | Plan so far [] | Exploring action Move C from A to D | New state -> Invalid | Exploring action Move F from B to D | New state -> Stack 1: [A, C, E, B], Stack 2: [D, F] | Exploring action Move D from table to F | New state -> Stack 1: [A, C, E, B, F, D] | Exploring action Move F from B to table | New state -> Stack 1: [A, C, E, B], Stack 2: [D], Stack 3: [F] | Taking action Move F from B to table | Moved to state -> Stack 1: [A, C, E, B], Stack 2: [D], Stack 3: [F] | Plan so far [Move F from B to table] | Exploring action Move B from E to F | New state -> Stack 1: [A, C, E], Stack 2: [D], Stack 3: [F, B] | Exploring action Move B from E to table | New state -> Stack 1: [A, C, E], Stack 2: [B], Stack 3: [D], Stack 4: [F] | Exploring action Move B from E to D | New state -> Stack 1: [A, C, E], Stack 2: [D, B], Stack 3: [F] | Exploring action Move C from A to B | New state -> Invalid | Taking action Move B from E to table | Moved to state -> Stack 1: [A, C, E], Stack 2: [B], Stack 3: [D], Stack 4: [F] | Plan so far [Move F from B to table | Move B from E to table] | Exploring action Move E from C to F | New state -> Stack 1: [A, C], Stack 2: [B], Stack 3: [D], Stack 4: [F, E] | Exploring action Move E from C to B | New state -> Stack 1: [A, C], Stack 2: [B, E], Stack 3: [D], Stack 4: [F] | Exploring action Move C from A to E | New state -> Invalid | Exploring action Move E from C to table | New state -> Stack 1: [A, C], Stack 2: [B], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Taking action Move E from C to table | Moved to state -> Stack 1: [A, C], Stack 2: [B], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Plan so far [Move F from B to table | Move B from E to table | Move E from C to table] | Exploring action Move C from A to D | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, C], Stack 4: [E], Stack 5: [F] | Exploring action Move A from table to B | New state -> Invalid | Exploring action Move C from A to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Exploring action Move C from A to B | New state -> Stack 1: [A], Stack 2: [B, C], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Taking action Move C from A to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Plan so far [Move F from B to table | Move B from E to table | Move E from C to table | Move C from A to table] | Exploring action Move A from table to B | New state -> Stack 1: [B, A], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Exploring action Move D from table to C | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, D], Stack 4: [E], Stack 5: [F] | Exploring action Move A from table to D | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, A], Stack 4: [E], Stack 5: [F] | Taking action Move D from table to C | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, D], Stack 4: [E], Stack 5: [F] | Plan so far [Move F from B to table | Move B from E to table | Move E from C to table | Move C from A to table | Move D from table to C] | Exploring action Move A from table to B | New state -> Stack 1: [B, A], Stack 2: [C, D], Stack 3: [E], Stack 4: [F] | Exploring action Move B from table to D | New state -> Stack 1: [A], Stack 2: [C, D, B], Stack 3: [E], Stack 4: [F] | Exploring action Move F from table to D | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, D, F], Stack 4: [E] | Exploring action Move C from table to B | New state -> Invalid | Taking action Move F from table to D | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, D, F], Stack 4: [E] | Plan so far [Move F from B to table | Move B from E to table | Move E from C to table | Move C from A to table | Move D from table to C | Move F from table to D] | Exploring action Move A from table to B | New state -> Stack 1: [B, A], Stack 2: [C, D, F], Stack 3: [E] | Exploring action Move A from table to F | New state -> Stack 1: [B], Stack 2: [C, D, F, A], Stack 3: [E] | Exploring action Move D from C to A | New state -> Invalid | Exploring action Move B from table to F | New state -> Stack 1: [A], Stack 2: [C, D, F, B], Stack 3: [E] | Taking action Move B from table to F | Moved to state -> Stack 1: [A], Stack 2: [C, D, F, B], Stack 3: [E] | Plan so far [Move F from B to table | Move B from E to table | Move E from C to table | Move C from A to table | Move D from table to C | Move F from table to D | Move B from table to F] | Exploring action Move A from table to B | New state -> Stack 1: [C, D, F, B, A], Stack 2: [E] | Exploring action Move B from F to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, D, F], Stack 4: [E] | Exploring action Move F from D to B | New state -> Invalid | Exploring action Move E from table to A | New state -> Stack 1: [A, E], Stack 2: [C, D, F, B] | Exploring action Move C from table to E | New state -> Invalid | Taking action Move A from table to B | Moved to state -> Stack 1: [C, D, F, B, A], Stack 2: [E] | Plan so far [Move F from B to table | Move B from E to table | Move E from C to table | Move C from A to table | Move D from table to C | Move F from table to D | Move B from table to F | Move A from table to B] | Reached goal state!",
        "system2_states_v1": 32
    },
    {
        "idx": 576,
        "start": [
            [
                "table",
                "A",
                "B",
                "E",
                "C"
            ],
            [
                "table",
                "D"
            ]
        ],
        "goal": [
            [
                "table",
                "C",
                "D",
                "A",
                "B",
                "E"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": false,
                "on": -1,
                "under": "B",
                "ontable": true
            },
            "B": {
                "clear": false,
                "on": "A",
                "under": "E",
                "ontable": false
            },
            "C": {
                "clear": true,
                "on": "E",
                "under": -1,
                "ontable": false
            },
            "D": {
                "clear": true,
                "on": -1,
                "under": -1,
                "ontable": true
            },
            "E": {
                "clear": false,
                "on": "B",
                "under": "C",
                "ontable": false
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": false,
                "on": "D",
                "under": "B",
                "ontable": false
            },
            "B": {
                "clear": false,
                "on": "A",
                "under": "E",
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": -1,
                "under": "D",
                "ontable": true
            },
            "D": {
                "clear": false,
                "on": "C",
                "under": "A",
                "ontable": false
            },
            "E": {
                "clear": true,
                "on": "B",
                "under": -1,
                "ontable": false
            }
        },
        "plan_len": 7,
        "num_blocks": 5,
        "prompt": "The initial state:\nThe hand is empty.\nA is on the table. B is on A. E is on B. C is on E. C is clear.\nD is on the table. D is clear.\n\nThe goal is:\nC is on the table. D is on C. A is on D. B is on A. E is on B. E is clear.\n",
        "system1_plan": "Move C from E to table | Move D from table to C | Move E from B to table | Move B from A to table | Move A from table to D | Move B from table to A | Move E from table to B",
        "system1_states": 7,
        "system2_plan_v1": "Moved to state -> Stack 1: [A, B, E, C], Stack 2: [D] | Plan so far [] | Exploring action Move C from E to table | New state -> Stack 1: [A, B, E], Stack 2: [C], Stack 3: [D] | Exploring action Move D from table to C | New state -> Stack 1: [A, B, E, C, D] | Exploring action Move C from E to D | New state -> Stack 1: [A, B, E], Stack 2: [D, C] | Exploring action Move B from A to C | New state -> Invalid | Taking action Move C from E to table | Moved to state -> Stack 1: [A, B, E], Stack 2: [C], Stack 3: [D] | Plan so far [Move C from E to table] | Exploring action Move D from table to C | New state -> Stack 1: [A, B, E], Stack 2: [C, D] | Exploring action Move B from A to E | New state -> Invalid | Exploring action Move C from table to D | New state -> Stack 1: [A, B, E], Stack 2: [D, C] | Exploring action Move B from A to C | New state -> Invalid | Exploring action Move C from table to E | New state -> Stack 1: [A, B, E, C], Stack 2: [D] | Taking action Move D from table to C | Moved to state -> Stack 1: [A, B, E], Stack 2: [C, D] | Plan so far [Move C from E to table | Move D from table to C] | Exploring action Move A from table to D | New state -> Invalid | Exploring action Move D from C to E | New state -> Stack 1: [A, B, E, D], Stack 2: [C] | Exploring action Move D from C to table | New state -> Stack 1: [A, B, E], Stack 2: [C], Stack 3: [D] | Exploring action Move B from A to table | New state -> Invalid | Exploring action Move E from B to table | New state -> Stack 1: [A, B], Stack 2: [C, D], Stack 3: [E] | Taking action Move C from E to D | Moved to state -> Stack 1: [A, B, E], Stack 2: [D, C] | Plan so far [Move C from E to D] | Exploring action Move C from D to E | New state -> Stack 1: [A, B, E, C], Stack 2: [D] | Exploring action Move B from A to E | New state -> Invalid | Exploring action Move C from D to table | New state -> Stack 1: [A, B, E], Stack 2: [C], Stack 3: [D] | Exploring action Move E from B to table | New state -> Stack 1: [A, B], Stack 2: [D, C], Stack 3: [E] | Taking action Move C from D to table | Moved to state -> Stack 1: [A, B, E], Stack 2: [C], Stack 3: [D] | Plan so far [Move C from E to D | Move C from D to table] | Taking action Move C from table to D | Moved to state -> Stack 1: [A, B, E], Stack 2: [D, C] | Plan so far [Move C from E to table | Move C from table to D] | Taking action Move D from C to table | Moved to state -> Stack 1: [A, B, E], Stack 2: [C], Stack 3: [D] | Plan so far [Move C from E to table | Move D from table to C | Move D from C to table] | Taking action Move E from B to table | Moved to state -> Stack 1: [A, B], Stack 2: [C], Stack 3: [D], Stack 4: [E] | Plan so far [Move C from E to table | Move E from B to table] | Exploring action Move D from table to C | New state -> Stack 1: [A, B], Stack 2: [C, D], Stack 3: [E] | Exploring action Move A from table to D | New state -> Invalid | Exploring action Move B from A to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Exploring action Move E from table to B | New state -> Stack 1: [A, B, E], Stack 2: [C], Stack 3: [D] | Taking action Move E from table to B | Moved to state -> Stack 1: [A, B, E], Stack 2: [C], Stack 3: [D] | Plan so far [Move C from E to table | Move E from B to table | Move E from table to B] | Taking action Move D from table to E | Moved to state -> Stack 1: [A, B, E, D], Stack 2: [C] | Plan so far [Move C from E to table | Move D from table to E] | Exploring action Move C from table to D | New state -> Stack 1: [A, B, E, D, C] | Exploring action Move D from E to table | New state -> Stack 1: [A, B, E], Stack 2: [C], Stack 3: [D] | Exploring action Move D from E to C | New state -> Stack 1: [A, B, E], Stack 2: [C, D] | Exploring action Move B from A to table | New state -> Invalid | Exploring action Move A from table to D | New state -> Invalid | Taking action Move D from E to C | Moved to state -> Stack 1: [A, B, E], Stack 2: [C, D] | Plan so far [Move C from E to table | Move D from table to E | Move D from E to C] | Taking action Move D from E to table | Moved to state -> Stack 1: [A, B, E], Stack 2: [C], Stack 3: [D] | Plan so far [Move C from E to table | Move D from table to E | Move D from E to table] | Taking action Move B from A to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Plan so far [Move C from E to table | Move E from B to table | Move B from A to table] | Exploring action Move A from table to B | New state -> Stack 1: [B, A], Stack 2: [C], Stack 3: [D], Stack 4: [E] | Exploring action Move E from table to B | New state -> Stack 1: [A], Stack 2: [B, E], Stack 3: [C], Stack 4: [D] | Exploring action Move D from table to C | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, D], Stack 4: [E] | Moved to state -> Stack 1: [A, B, E, C], Stack 2: [D] | Plan so far [Move C from E to D | Move C from D to E] | Taking action Move E from B to table | Moved to state -> Stack 1: [A, B], Stack 2: [C, D], Stack 3: [E] | Plan so far [Move C from E to table | Move D from table to C | Move E from B to table] | Exploring action Move B from A to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, D], Stack 4: [E] | Exploring action Move C from table to E | New state -> Invalid | Exploring action Move B from A to E | New state -> Stack 1: [A], Stack 2: [C, D], Stack 3: [E, B] | Exploring action Move E from table to B | New state -> Stack 1: [A, B, E], Stack 2: [C, D] | Exploring action Move A from table to D | New state -> Invalid | Taking action Move E from table to B | Moved to state -> Stack 1: [A, B, E], Stack 2: [C, D] | Plan so far [Move C from E to table | Move D from table to C | Move E from B to table | Move E from table to B] | Taking action Move D from table to C | Moved to state -> Stack 1: [A, B], Stack 2: [C, D], Stack 3: [E] | Plan so far [Move C from E to table | Move E from B to table | Move D from table to C] | Taking action Move D from table to C | Moved to state -> Stack 1: [A, B, E, C, D] | Plan so far [Move D from table to C] | Exploring action Move D from C to table | New state -> Stack 1: [A, B, E, C], Stack 2: [D] | Exploring action Move C from E to D | New state -> Invalid | Taking action Move B from A to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, D], Stack 4: [E] | Plan so far [Move C from E to table | Move D from table to C | Move E from B to table | Move B from A to table] | Exploring action Move C from table to D | New state -> Invalid | Exploring action Move D from C to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Exploring action Move A from table to D | New state -> Stack 1: [B], Stack 2: [C, D, A], Stack 3: [E] | Exploring action Move E from table to B | New state -> Stack 1: [A], Stack 2: [B, E], Stack 3: [C, D] | Moved to state -> Stack 1: [A, B, E, C], Stack 2: [D] | Plan so far [Move C from E to table | Move C from table to E] | Moved to state -> Stack 1: [A, B, E, C], Stack 2: [D] | Plan so far [Move D from table to C | Move D from C to table] | Taking action Move A from table to D | Moved to state -> Stack 1: [B], Stack 2: [C, D, A], Stack 3: [E] | Plan so far [Move C from E to table | Move D from table to C | Move E from B to table | Move B from A to table | Move A from table to D] | Exploring action Move D from C to E | New state -> Invalid | Exploring action Move E from table to A | New state -> Stack 1: [B], Stack 2: [C, D, A, E] | Exploring action Move B from table to A | New state -> Stack 1: [C, D, A, B], Stack 2: [E] | Exploring action Move E from table to B | New state -> Stack 1: [B, E], Stack 2: [C, D, A] | Taking action Move D from table to C | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, D], Stack 4: [E] | Plan so far [Move C from E to table | Move E from B to table | Move B from A to table | Move D from table to C] | Taking action Move B from table to A | Moved to state -> Stack 1: [C, D, A, B], Stack 2: [E] | Plan so far [Move C from E to table | Move D from table to C | Move E from B to table | Move B from A to table | Move A from table to D | Move B from table to A] | Exploring action Move D from C to E | New state -> Invalid | Exploring action Move B from A to table | New state -> Stack 1: [B], Stack 2: [C, D, A], Stack 3: [E] | Exploring action Move B from A to E | New state -> Stack 1: [C, D, A], Stack 2: [E, B] | Exploring action Move E from table to B | New state -> Stack 1: [C, D, A, B, E] | Taking action Move E from table to B | Moved to state -> Stack 1: [C, D, A, B, E] | Plan so far [Move C from E to table | Move D from table to C | Move E from B to table | Move B from A to table | Move A from table to D | Move B from table to A | Move E from table to B] | Reached goal state!",
        "system2_states_v1": 49
    },
    {
        "idx": 676,
        "start": [
            [
                "table",
                "B",
                "A"
            ],
            [
                "table",
                "F",
                "E",
                "C",
                "D"
            ]
        ],
        "goal": [
            [
                "table",
                "A",
                "D",
                "F",
                "E",
                "C",
                "B"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": true,
                "on": "B",
                "under": -1,
                "ontable": false
            },
            "B": {
                "clear": false,
                "on": -1,
                "under": "A",
                "ontable": true
            },
            "C": {
                "clear": false,
                "on": "E",
                "under": "D",
                "ontable": false
            },
            "D": {
                "clear": true,
                "on": "C",
                "under": -1,
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": "F",
                "under": "C",
                "ontable": false
            },
            "F": {
                "clear": false,
                "on": -1,
                "under": "E",
                "ontable": true
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": false,
                "on": -1,
                "under": "D",
                "ontable": true
            },
            "B": {
                "clear": true,
                "on": "C",
                "under": -1,
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": "E",
                "under": "B",
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": "A",
                "under": "F",
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": "F",
                "under": "C",
                "ontable": false
            },
            "F": {
                "clear": false,
                "on": "D",
                "under": "E",
                "ontable": false
            }
        },
        "plan_len": 8,
        "num_blocks": 6,
        "prompt": "The initial state:\nThe hand is empty.\nB is on the table. A is on B. A is clear.\nF is on the table. E is on F. C is on E. D is on C. D is clear.\n\nThe goal is:\nA is on the table. D is on A. F is on D. E is on F. C is on E. B is on C. B is clear.\n",
        "system1_plan": "Move A from B to table | Move D from C to A | Move C from E to table | Move E from F to table | Move F from table to D | Move E from table to F | Move C from table to E | Move B from table to C",
        "system1_states": 8,
        "system2_plan_v1": "Moved to state -> Stack 1: [B, A], Stack 2: [F, E, C, D] | Plan so far [] | Exploring action Move A from B to D | New state -> Stack 1: [B], Stack 2: [F, E, C, D, A] | Exploring action Move C from E to A | New state -> Invalid | Exploring action Move D from C to table | New state -> Stack 1: [B, A], Stack 2: [D], Stack 3: [F, E, C] | Exploring action Move A from B to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [F, E, C, D] | Taking action Move A from B to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [F, E, C, D] | Plan so far [Move A from B to table] | Exploring action Move D from C to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D], Stack 4: [F, E, C] | Exploring action Move F from table to D | New state -> Invalid | Exploring action Move D from C to B | New state -> Stack 1: [A], Stack 2: [B, D], Stack 3: [F, E, C] | Exploring action Move D from C to A | New state -> Stack 1: [A, D], Stack 2: [B], Stack 3: [F, E, C] | Taking action Move D from C to A | Moved to state -> Stack 1: [A, D], Stack 2: [B], Stack 3: [F, E, C] | Plan so far [Move A from B to table | Move D from C to A] | Exploring action Move D from A to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D], Stack 4: [F, E, C] | Exploring action Move E from F to B | New state -> Invalid | Exploring action Move E from F to table | New state -> Invalid | Exploring action Move B from table to C | New state -> Stack 1: [A, D], Stack 2: [F, E, C, B] | Exploring action Move C from E to table | New state -> Stack 1: [A, D], Stack 2: [B], Stack 3: [C], Stack 4: [F, E] | Taking action Move B from table to C | Moved to state -> Stack 1: [A, D], Stack 2: [F, E, C, B] | Plan so far [Move A from B to table | Move D from C to A | Move B from table to C] | Exploring action Move B from C to table | New state -> Stack 1: [A, D], Stack 2: [B], Stack 3: [F, E, C] | Exploring action Move A from table to D | New state -> Invalid | Exploring action Move B from C to D | New state -> Stack 1: [A, D, B], Stack 2: [F, E, C] | Exploring action Move D from A to table | New state -> Stack 1: [A], Stack 2: [D], Stack 3: [F, E, C, B] | Taking action Move D from C to table | Moved to state -> Stack 1: [B, A], Stack 2: [D], Stack 3: [F, E, C] | Plan so far [Move D from C to table] | Exploring action Move A from B to D | New state -> Stack 1: [B], Stack 2: [D, A], Stack 3: [F, E, C] | Exploring action Move B from table to C | New state -> Invalid | Exploring action Move A from B to C | New state -> Stack 1: [B], Stack 2: [D], Stack 3: [F, E, C, A] | Exploring action Move A from B to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D], Stack 4: [F, E, C] | Taking action Move D from C to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [D], Stack 4: [F, E, C] | Plan so far [Move A from B to table | Move D from C to table] | Exploring action Move B from table to C | New state -> Stack 1: [A], Stack 2: [D], Stack 3: [F, E, C, B] | Exploring action Move D from table to A | New state -> Stack 1: [A, D], Stack 2: [B], Stack 3: [F, E, C] | Exploring action Move E from F to table | New state -> Invalid | Exploring action Move A from table to D | New state -> Stack 1: [B], Stack 2: [D, A], Stack 3: [F, E, C] | Exploring action Move F from table to B | New state -> Invalid | Taking action Move B from table to C | Moved to state -> Stack 1: [A], Stack 2: [D], Stack 3: [F, E, C, B] | Plan so far [Move A from B to table | Move D from C to table | Move B from table to C] | Exploring action Move A from table to D | New state -> Stack 1: [D, A], Stack 2: [F, E, C, B] | Exploring action Move D from table to A | New state -> Stack 1: [A, D], Stack 2: [F, E, C, B] | Exploring action Move B from C to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D], Stack 4: [F, E, C] | Exploring action Move C from E to D | New state -> Invalid | Taking action Move D from table to A | Moved to state -> Stack 1: [A, D], Stack 2: [F, E, C, B] | Plan so far [Move A from B to table | Move D from C to table | Move B from table to C | Move D from table to A] | Taking action Move D from A to table | Moved to state -> Stack 1: [A], Stack 2: [D], Stack 3: [F, E, C, B] | Plan so far [Move A from B to table | Move D from C to A | Move B from table to C | Move D from A to table] | Taking action Move A from B to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [D], Stack 4: [F, E, C] | Plan so far [Move D from C to table | Move A from B to table] | Taking action Move D from table to A | Moved to state -> Stack 1: [A, D], Stack 2: [B], Stack 3: [F, E, C] | Plan so far [Move A from B to table | Move D from C to table | Move D from table to A] | Taking action Move D from C to A | Moved to state -> Stack 1: [B, A, D], Stack 2: [F, E, C] | Plan so far [Move D from C to A] | Exploring action Move D from A to C | New state -> Stack 1: [B, A], Stack 2: [F, E, C, D] | Exploring action Move C from E to table | New state -> Stack 1: [B, A, D], Stack 2: [C], Stack 3: [F, E] | Exploring action Move E from F to table | New state -> Invalid | Exploring action Move D from A to table | New state -> Stack 1: [B, A], Stack 2: [D], Stack 3: [F, E, C] | Taking action Move D from A to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [D], Stack 4: [F, E, C] | Plan so far [Move A from B to table | Move D from C to A | Move D from A to table] | Taking action Move C from E to table | Moved to state -> Stack 1: [A, D], Stack 2: [B], Stack 3: [C], Stack 4: [F, E] | Plan so far [Move A from B to table | Move D from C to A | Move C from E to table] | Exploring action Move B from table to C | New state -> Stack 1: [A, D], Stack 2: [C, B], Stack 3: [F, E] | Exploring action Move E from F to table | New state -> Stack 1: [A, D], Stack 2: [B], Stack 3: [C], Stack 4: [E], Stack 5: [F] | Exploring action Move F from table to B | New state -> Invalid | Exploring action Move C from table to E | New state -> Stack 1: [A, D], Stack 2: [B], Stack 3: [F, E, C] | Taking action Move A from B to D | Moved to state -> Stack 1: [B], Stack 2: [D, A], Stack 3: [F, E, C] | Plan so far [Move D from C to table | Move A from B to D] | Exploring action Move A from D to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D], Stack 4: [F, E, C] | Exploring action Move B from table to C | New state -> Stack 1: [D, A], Stack 2: [F, E, C, B] | Exploring action Move E from F to table | New state -> Invalid | Exploring action Move A from D to C | New state -> Stack 1: [B], Stack 2: [D], Stack 3: [F, E, C, A] | Taking action Move B from table to C | Moved to state -> Stack 1: [D, A], Stack 2: [F, E, C, B] | Plan so far [Move D from C to table | Move A from B to D | Move B from table to C] | Exploring action Move B from C to table | New state -> Stack 1: [B], Stack 2: [D, A], Stack 3: [F, E, C] | Exploring action Move A from D to table | New state -> Stack 1: [A], Stack 2: [D], Stack 3: [F, E, C, B] | Exploring action Move A from D to B | New state -> Stack 1: [D], Stack 2: [F, E, C, B, A] | Exploring action Move D from table to B | New state -> Invalid | Exploring action Move E from F to B | New state -> Invalid | Taking action Move A from D to table | Moved to state -> Stack 1: [A], Stack 2: [D], Stack 3: [F, E, C, B] | Plan so far [Move D from C to table | Move A from B to D | Move B from table to C | Move A from D to table] | Taking action Move C from table to E | Moved to state -> Stack 1: [A, D], Stack 2: [B], Stack 3: [F, E, C] | Plan so far [Move A from B to table | Move D from C to A | Move C from E to table | Move C from table to E] | Taking action Move E from F to table | Moved to state -> Stack 1: [A, D], Stack 2: [B], Stack 3: [C], Stack 4: [E], Stack 5: [F] | Plan so far [Move A from B to table | Move D from C to A | Move C from E to table | Move E from F to table] | Exploring action Move B from table to E | New state -> Stack 1: [A, D], Stack 2: [C], Stack 3: [E, B], Stack 4: [F] | Exploring action Move A from table to B | New state -> Invalid | Exploring action Move F from table to D | New state -> Stack 1: [A, D, F], Stack 2: [B], Stack 3: [C], Stack 4: [E] | Exploring action Move B from table to C | New state -> Stack 1: [A, D], Stack 2: [C, B], Stack 3: [E], Stack 4: [F] | Exploring action Move A from table to F | New state -> Invalid | Taking action Move A from D to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [D], Stack 4: [F, E, C] | Plan so far [Move D from C to table | Move A from B to D | Move A from D to table] | Taking action Move B from table to D | Moved to state -> Stack 1: [A, D, B], Stack 2: [F, E, C] | Plan so far [Move A from B to table | Move D from C to A | Move B from table to D] | Exploring action Move B from D to C | New state -> Stack 1: [A, D], Stack 2: [F, E, C, B] | Exploring action Move D from A to C | New state -> Invalid | Exploring action Move C from E to table | New state -> Stack 1: [A, D, B], Stack 2: [C], Stack 3: [F, E] | Exploring action Move B from D to table | New state -> Stack 1: [A, D], Stack 2: [B], Stack 3: [F, E, C] | Taking action Move B from D to C | Moved to state -> Stack 1: [A, D], Stack 2: [F, E, C, B] | Plan so far [Move A from B to table | Move D from C to A | Move B from table to D | Move B from D to C] | Taking action Move A from B to C | Moved to state -> Stack 1: [B], Stack 2: [D], Stack 3: [F, E, C, A] | Plan so far [Move D from C to table | Move A from B to C] | Exploring action Move A from C to B | New state -> Stack 1: [B, A], Stack 2: [D], Stack 3: [F, E, C] | Exploring action Move C from E to B | New state -> Invalid | Exploring action Move A from C to D | New state -> Stack 1: [B], Stack 2: [D, A], Stack 3: [F, E, C] | Exploring action Move A from C to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D], Stack 4: [F, E, C] | Taking action Move D from A to table | Moved to state -> Stack 1: [B, A], Stack 2: [D], Stack 3: [F, E, C] | Plan so far [Move D from C to A | Move D from A to table] | Taking action Move D from C to B | Moved to state -> Stack 1: [A], Stack 2: [B, D], Stack 3: [F, E, C] | Plan so far [Move A from B to table | Move D from C to B] | Exploring action Move D from B to C | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [F, E, C, D] | Exploring action Move D from B to A | New state -> Stack 1: [A, D], Stack 2: [B], Stack 3: [F, E, C] | Exploring action Move E from F to D | New state -> Invalid | Exploring action Move D from B to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D], Stack 4: [F, E, C] | Taking action Move D from B to A | Moved to state -> Stack 1: [A, D], Stack 2: [B], Stack 3: [F, E, C] | Plan so far [Move A from B to table | Move D from C to B | Move D from B to A] | Taking action Move F from table to D | Moved to state -> Stack 1: [A, D, F], Stack 2: [B], Stack 3: [C], Stack 4: [E] | Plan so far [Move A from B to table | Move D from C to A | Move C from E to table | Move E from F to table | Move F from table to D] | Exploring action Move B from table to C | New state -> Stack 1: [A, D, F], Stack 2: [C, B], Stack 3: [E] | Exploring action Move E from table to F | New state -> Stack 1: [A, D, F, E], Stack 2: [B], Stack 3: [C] | Exploring action Move B from table to F | New state -> Stack 1: [A, D, F, B], Stack 2: [C], Stack 3: [E] | Exploring action Move D from A to C | New state -> Invalid | Taking action Move A from table to D | Moved to state -> Stack 1: [D, A], Stack 2: [F, E, C, B] | Plan so far [Move A from B to table | Move D from C to table | Move B from table to C | Move A from table to D] | Taking action Move E from table to F | Moved to state -> Stack 1: [A, D, F, E], Stack 2: [B], Stack 3: [C] | Plan so far [Move A from B to table | Move D from C to A | Move C from E to table | Move E from F to table | Move F from table to D | Move E from table to F] | Exploring action Move C from table to E | New state -> Stack 1: [A, D, F, E, C], Stack 2: [B] | Exploring action Move F from D to E | New state -> Invalid | Exploring action Move D from A to table | New state -> Invalid | Exploring action Move B from table to C | New state -> Stack 1: [A, D, F, E], Stack 2: [C, B] | Exploring action Move C from table to B | New state -> Stack 1: [A, D, F, E], Stack 2: [B, C] | Taking action Move A from C to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [D], Stack 4: [F, E, C] | Plan so far [Move D from C to table | Move A from B to C | Move A from C to table] | Taking action Move C from table to E | Moved to state -> Stack 1: [A, D, F, E, C], Stack 2: [B] | Plan so far [Move A from B to table | Move D from C to A | Move C from E to table | Move E from F to table | Move F from table to D | Move E from table to F | Move C from table to E] | Exploring action Move C from E to B | New state -> Stack 1: [A, D, F, E], Stack 2: [B, C] | Exploring action Move B from table to C | New state -> Stack 1: [A, D, F, E, C, B] | Exploring action Move A from table to B | New state -> Invalid | Exploring action Move C from E to table | New state -> Stack 1: [A, D, F, E], Stack 2: [B], Stack 3: [C] | Taking action Move B from table to C | Moved to state -> Stack 1: [A, D, F, E, C, B] | Plan so far [Move A from B to table | Move D from C to A | Move C from E to table | Move E from F to table | Move F from table to D | Move E from table to F | Move C from table to E | Move B from table to C] | Reached goal state!",
        "system2_states_v1": 77
    },
    {
        "idx": 698,
        "start": [
            [
                "table",
                "A",
                "E",
                "B"
            ],
            [
                "table",
                "F",
                "D",
                "C"
            ]
        ],
        "goal": [
            [
                "table",
                "A",
                "D",
                "C",
                "B",
                "E"
            ],
            [
                "table",
                "F"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": false,
                "on": -1,
                "under": "E",
                "ontable": true
            },
            "B": {
                "clear": true,
                "on": "E",
                "under": -1,
                "ontable": false
            },
            "C": {
                "clear": true,
                "on": "D",
                "under": -1,
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": "F",
                "under": "C",
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": "A",
                "under": "B",
                "ontable": false
            },
            "F": {
                "clear": false,
                "on": -1,
                "under": "D",
                "ontable": true
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": false,
                "on": -1,
                "under": "D",
                "ontable": true
            },
            "B": {
                "clear": false,
                "on": "C",
                "under": "E",
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": "D",
                "under": "B",
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": "A",
                "under": "C",
                "ontable": false
            },
            "E": {
                "clear": true,
                "on": "B",
                "under": -1,
                "ontable": false
            },
            "F": {
                "clear": true,
                "on": -1,
                "under": -1,
                "ontable": true
            }
        },
        "plan_len": 8,
        "num_blocks": 6,
        "prompt": "The initial state:\nThe hand is empty.\nA is on the table. E is on A. B is on E. B is clear.\nF is on the table. D is on F. C is on D. C is clear.\n\nThe goal is:\nA is on the table. D is on A. C is on D. B is on C. E is on B. E is clear.\nF is on the table. F is clear.\n",
        "system1_plan": "Move C from D to table | Move D from F to table | Move B from E to table | Move E from A to table | Move D from table to A | Move C from table to D | Move B from table to C | Move E from table to B",
        "system1_states": 8,
        "system2_plan_v1": "Moved to state -> Stack 1: [A, E, B], Stack 2: [F, D, C] | Plan so far [] | Exploring action Move C from D to table | New state -> Stack 1: [A, E, B], Stack 2: [C], Stack 3: [F, D] | Exploring action Move B from E to C | New state -> Stack 1: [A, E], Stack 2: [F, D, C, B] | Exploring action Move B from E to table | New state -> Stack 1: [A, E], Stack 2: [B], Stack 3: [F, D, C] | Exploring action Move F from table to B | New state -> Invalid | Taking action Move B from E to C | Moved to state -> Stack 1: [A, E], Stack 2: [F, D, C, B] | Plan so far [Move B from E to C] | Exploring action Move D from F to table | New state -> Invalid | Exploring action Move E from A to table | New state -> Stack 1: [A], Stack 2: [E], Stack 3: [F, D, C, B] | Exploring action Move A from table to E | New state -> Invalid | Exploring action Move E from A to B | New state -> Stack 1: [A], Stack 2: [F, D, C, B, E] | Exploring action Move B from C to table | New state -> Stack 1: [A, E], Stack 2: [B], Stack 3: [F, D, C] | Taking action Move E from A to B | Moved to state -> Stack 1: [A], Stack 2: [F, D, C, B, E] | Plan so far [Move B from E to C | Move E from A to B] | Exploring action Move E from B to A | New state -> Stack 1: [A, E], Stack 2: [F, D, C, B] | Exploring action Move B from C to E | New state -> Invalid | Exploring action Move A from table to E | New state -> Stack 1: [F, D, C, B, E, A] | Exploring action Move E from B to table | New state -> Stack 1: [A], Stack 2: [E], Stack 3: [F, D, C, B] | Taking action Move E from A to table | Moved to state -> Stack 1: [A], Stack 2: [E], Stack 3: [F, D, C, B] | Plan so far [Move B from E to C | Move E from A to table] | Exploring action Move E from table to A | New state -> Stack 1: [A, E], Stack 2: [F, D, C, B] | Exploring action Move C from D to E | New state -> Invalid | Exploring action Move E from table to B | New state -> Stack 1: [A], Stack 2: [F, D, C, B, E] | Exploring action Move A from table to B | New state -> Stack 1: [E], Stack 2: [F, D, C, B, A] | Taking action Move E from table to B | Moved to state -> Stack 1: [A], Stack 2: [F, D, C, B, E] | Plan so far [Move B from E to C | Move E from A to table | Move E from table to B] | Taking action Move C from D to table | Moved to state -> Stack 1: [A, E, B], Stack 2: [C], Stack 3: [F, D] | Plan so far [Move C from D to table] | Exploring action Move A from table to D | New state -> Invalid | Exploring action Move D from F to B | New state -> Stack 1: [A, E, B, D], Stack 2: [C], Stack 3: [F] | Exploring action Move B from E to table | New state -> Stack 1: [A, E], Stack 2: [B], Stack 3: [C], Stack 4: [F, D] | Exploring action Move A from table to B | New state -> Invalid | Exploring action Move D from F to table | New state -> Stack 1: [A, E, B], Stack 2: [C], Stack 3: [D], Stack 4: [F] | Taking action Move D from F to table | Moved to state -> Stack 1: [A, E, B], Stack 2: [C], Stack 3: [D], Stack 4: [F] | Plan so far [Move C from D to table | Move D from F to table] | Exploring action Move E from A to F | New state -> Invalid | Exploring action Move B from E to table | New state -> Stack 1: [A, E], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [F] | Exploring action Move B from E to C | New state -> Stack 1: [A, E], Stack 2: [C, B], Stack 3: [D], Stack 4: [F] | Exploring action Move B from E to D | New state -> Stack 1: [A, E], Stack 2: [C], Stack 3: [D, B], Stack 4: [F] | Taking action Move B from E to table | Moved to state -> Stack 1: [A, E], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [F] | Plan so far [Move C from D to table | Move D from F to table | Move B from E to table] | Exploring action Move E from A to C | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, E], Stack 4: [D], Stack 5: [F] | Exploring action Move A from table to C | New state -> Invalid | Exploring action Move E from A to B | New state -> Stack 1: [A], Stack 2: [B, E], Stack 3: [C], Stack 4: [D], Stack 5: [F] | Exploring action Move E from A to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Taking action Move E from A to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Plan so far [Move C from D to table | Move D from F to table | Move B from E to table | Move E from A to table] | Exploring action Move E from table to B | New state -> Stack 1: [A], Stack 2: [B, E], Stack 3: [C], Stack 4: [D], Stack 5: [F] | Exploring action Move A from table to D | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, A], Stack 4: [E], Stack 5: [F] | Exploring action Move D from table to A | New state -> Stack 1: [A, D], Stack 2: [B], Stack 3: [C], Stack 4: [E], Stack 5: [F] | Taking action Move E from A to B | Moved to state -> Stack 1: [A], Stack 2: [B, E], Stack 3: [C], Stack 4: [D], Stack 5: [F] | Plan so far [Move C from D to table | Move D from F to table | Move B from E to table | Move E from A to B] | Exploring action Move E from B to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Exploring action Move B from table to C | New state -> Invalid | Exploring action Move E from B to A | New state -> Stack 1: [A, E], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [F] | Exploring action Move B from table to A | New state -> Invalid | Exploring action Move D from table to A | New state -> Stack 1: [A, D], Stack 2: [B, E], Stack 3: [C], Stack 4: [F] | Taking action Move D from table to A | Moved to state -> Stack 1: [A, D], Stack 2: [B], Stack 3: [C], Stack 4: [E], Stack 5: [F] | Plan so far [Move C from D to table | Move D from F to table | Move B from E to table | Move E from A to table | Move D from table to A] | Exploring action Move E from table to B | New state -> Stack 1: [A, D], Stack 2: [B, E], Stack 3: [C], Stack 4: [F] | Exploring action Move A from table to F | New state -> Invalid | Exploring action Move B from table to C | New state -> Stack 1: [A, D], Stack 2: [C, B], Stack 3: [E], Stack 4: [F] | Exploring action Move C from table to D | New state -> Stack 1: [A, D, C], Stack 2: [B], Stack 3: [E], Stack 4: [F] | Taking action Move D from table to A | Moved to state -> Stack 1: [A, D], Stack 2: [B, E], Stack 3: [C], Stack 4: [F] | Plan so far [Move C from D to table | Move D from F to table | Move B from E to table | Move E from A to B | Move D from table to A] | Exploring action Move C from table to D | New state -> Stack 1: [A, D, C], Stack 2: [B, E], Stack 3: [F] | Exploring action Move E from B to D | New state -> Stack 1: [A, D, E], Stack 2: [B], Stack 3: [C], Stack 4: [F] | Exploring action Move A from table to E | New state -> Invalid | Exploring action Move E from B to table | New state -> Stack 1: [A, D], Stack 2: [B], Stack 3: [C], Stack 4: [E], Stack 5: [F] | Taking action Move C from table to D | Moved to state -> Stack 1: [A, D, C], Stack 2: [B], Stack 3: [E], Stack 4: [F] | Plan so far [Move C from D to table | Move D from F to table | Move B from E to table | Move E from A to table | Move D from table to A | Move C from table to D] | Exploring action Move B from table to C | New state -> Stack 1: [A, D, C, B], Stack 2: [E], Stack 3: [F] | Exploring action Move B from table to E | New state -> Stack 1: [A, D, C], Stack 2: [E, B], Stack 3: [F] | Exploring action Move E from table to B | New state -> Stack 1: [A, D, C], Stack 2: [B, E], Stack 3: [F] | Exploring action Move D from A to F | New state -> Invalid | Taking action Move C from table to D | Moved to state -> Stack 1: [A, D, C], Stack 2: [B, E], Stack 3: [F] | Plan so far [Move C from D to table | Move D from F to table | Move B from E to table | Move E from A to B | Move D from table to A | Move C from table to D] | Exploring action Move C from D to table | New state -> Stack 1: [A, D], Stack 2: [B, E], Stack 3: [C], Stack 4: [F] | Exploring action Move D from A to F | New state -> Invalid | Exploring action Move A from table to C | New state -> Invalid | Exploring action Move E from B to C | New state -> Stack 1: [A, D, C, E], Stack 2: [B], Stack 3: [F] | Exploring action Move E from B to table | New state -> Stack 1: [A, D, C], Stack 2: [B], Stack 3: [E], Stack 4: [F] | Taking action Move B from table to C | Moved to state -> Stack 1: [A, D, C, B], Stack 2: [E], Stack 3: [F] | Plan so far [Move C from D to table | Move D from F to table | Move B from E to table | Move E from A to table | Move D from table to A | Move C from table to D | Move B from table to C] | Exploring action Move F from table to B | New state -> Stack 1: [A, D, C, B, F], Stack 2: [E] | Exploring action Move B from C to table | New state -> Stack 1: [A, D, C], Stack 2: [B], Stack 3: [E], Stack 4: [F] | Exploring action Move E from table to B | New state -> Stack 1: [A, D, C, B, E], Stack 2: [F] | Exploring action Move A from table to B | New state -> Invalid | Exploring action Move D from A to B | New state -> Invalid | Taking action Move E from table to B | Moved to state -> Stack 1: [A, D, C, B, E], Stack 2: [F] | Plan so far [Move C from D to table | Move D from F to table | Move B from E to table | Move E from A to table | Move D from table to A | Move C from table to D | Move B from table to C | Move E from table to B] | Reached goal state!",
        "system2_states_v1": 60
    },
    {
        "idx": 699,
        "start": [
            [
                "table",
                "A",
                "E"
            ],
            [
                "table",
                "C",
                "F",
                "B",
                "D"
            ]
        ],
        "goal": [
            [
                "table",
                "A"
            ],
            [
                "table",
                "C",
                "D",
                "B",
                "E",
                "F"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": false,
                "on": -1,
                "under": "E",
                "ontable": true
            },
            "B": {
                "clear": false,
                "on": "F",
                "under": "D",
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": -1,
                "under": "F",
                "ontable": true
            },
            "D": {
                "clear": true,
                "on": "B",
                "under": -1,
                "ontable": false
            },
            "E": {
                "clear": true,
                "on": "A",
                "under": -1,
                "ontable": false
            },
            "F": {
                "clear": false,
                "on": "C",
                "under": "B",
                "ontable": false
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": true,
                "on": -1,
                "under": -1,
                "ontable": true
            },
            "B": {
                "clear": false,
                "on": "D",
                "under": "E",
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": -1,
                "under": "D",
                "ontable": true
            },
            "D": {
                "clear": false,
                "on": "C",
                "under": "B",
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": "B",
                "under": "F",
                "ontable": false
            },
            "F": {
                "clear": true,
                "on": "E",
                "under": -1,
                "ontable": false
            }
        },
        "plan_len": 8,
        "num_blocks": 6,
        "prompt": "The initial state:\nThe hand is empty.\nA is on the table. E is on A. E is clear.\nC is on the table. F is on C. B is on F. D is on B. D is clear.\n\nThe goal is:\nA is on the table. A is clear.\nC is on the table. D is on C. B is on D. E is on B. F is on E. F is clear.\n",
        "system1_plan": "Move E from A to table | Move D from B to table | Move B from F to table | Move F from C to table | Move D from table to C | Move B from table to D | Move E from table to B | Move F from table to E",
        "system1_states": 8,
        "system2_plan_v1": "Moved to state -> Stack 1: [A, E], Stack 2: [C, F, B, D] | Plan so far [] | Exploring action Move E from A to D | New state -> Stack 1: [A], Stack 2: [C, F, B, D, E] | Exploring action Move D from B to table | New state -> Stack 1: [A, E], Stack 2: [C, F, B], Stack 3: [D] | Exploring action Move E from A to table | New state -> Stack 1: [A], Stack 2: [C, F, B, D], Stack 3: [E] | Exploring action Move F from C to D | New state -> Invalid | Taking action Move E from A to table | Moved to state -> Stack 1: [A], Stack 2: [C, F, B, D], Stack 3: [E] | Plan so far [Move E from A to table] | Exploring action Move D from B to E | New state -> Stack 1: [A], Stack 2: [C, F, B], Stack 3: [E, D] | Exploring action Move F from C to E | New state -> Invalid | Exploring action Move E from table to D | New state -> Stack 1: [A], Stack 2: [C, F, B, D, E] | Exploring action Move D from B to table | New state -> Stack 1: [A], Stack 2: [C, F, B], Stack 3: [D], Stack 4: [E] | Exploring action Move F from C to table | New state -> Invalid | Taking action Move D from B to table | Moved to state -> Stack 1: [A], Stack 2: [C, F, B], Stack 3: [D], Stack 4: [E] | Plan so far [Move E from A to table | Move D from B to table] | Exploring action Move B from F to E | New state -> Stack 1: [A], Stack 2: [C, F], Stack 3: [D], Stack 4: [E, B] | Exploring action Move B from F to D | New state -> Stack 1: [A], Stack 2: [C, F], Stack 3: [D, B], Stack 4: [E] | Exploring action Move F from C to B | New state -> Invalid | Exploring action Move B from F to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, F], Stack 4: [D], Stack 5: [E] | Exploring action Move F from C to table | New state -> Invalid | Taking action Move B from F to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, F], Stack 4: [D], Stack 5: [E] | Plan so far [Move E from A to table | Move D from B to table | Move B from F to table] | Exploring action Move F from C to E | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E, F] | Exploring action Move C from table to D | New state -> Invalid | Exploring action Move F from C to B | New state -> Stack 1: [A], Stack 2: [B, F], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Exploring action Move C from table to E | New state -> Invalid | Exploring action Move F from C to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Taking action Move F from C to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Plan so far [Move E from A to table | Move D from B to table | Move B from F to table | Move F from C to table] | Exploring action Move F from table to E | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E, F] | Exploring action Move D from table to C | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, D], Stack 4: [E], Stack 5: [F] | Exploring action Move C from table to B | New state -> Stack 1: [A], Stack 2: [B, C], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Taking action Move F from C to E | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E, F] | Plan so far [Move E from A to table | Move D from B to table | Move B from F to table | Move F from C to E] | Exploring action Move F from E to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Exploring action Move D from table to C | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, D], Stack 4: [E, F] | Exploring action Move E from table to D | New state -> Invalid | Exploring action Move E from table to A | New state -> Invalid | Exploring action Move B from table to C | New state -> Stack 1: [A], Stack 2: [C, B], Stack 3: [D], Stack 4: [E, F] | Taking action Move D from table to C | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, D], Stack 4: [E], Stack 5: [F] | Plan so far [Move E from A to table | Move D from B to table | Move B from F to table | Move F from C to table | Move D from table to C] | Exploring action Move B from table to D | New state -> Stack 1: [A], Stack 2: [C, D, B], Stack 3: [E], Stack 4: [F] | Exploring action Move F from table to E | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, D], Stack 4: [E, F] | Exploring action Move B from table to E | New state -> Stack 1: [A], Stack 2: [C, D], Stack 3: [E, B], Stack 4: [F] | Exploring action Move C from table to B | New state -> Invalid | Exploring action Move C from table to E | New state -> Invalid | Taking action Move D from table to C | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, D], Stack 4: [E, F] | Plan so far [Move E from A to table | Move D from B to table | Move B from F to table | Move F from C to E | Move D from table to C] | Exploring action Move F from E to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, D], Stack 4: [E], Stack 5: [F] | Exploring action Move B from table to D | New state -> Stack 1: [A], Stack 2: [C, D, B], Stack 3: [E, F] | Exploring action Move C from table to F | New state -> Invalid | Exploring action Move D from C to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E, F] | Taking action Move B from table to D | Moved to state -> Stack 1: [A], Stack 2: [C, D, B], Stack 3: [E], Stack 4: [F] | Plan so far [Move E from A to table | Move D from B to table | Move B from F to table | Move F from C to table | Move D from table to C | Move B from table to D] | Exploring action Move E from table to B | New state -> Stack 1: [A], Stack 2: [C, D, B, E], Stack 3: [F] | Exploring action Move D from C to E | New state -> Invalid | Exploring action Move F from table to E | New state -> Stack 1: [A], Stack 2: [C, D, B], Stack 3: [E, F] | Exploring action Move F from table to B | New state -> Stack 1: [A], Stack 2: [C, D, B, F], Stack 3: [E] | Taking action Move B from table to D | Moved to state -> Stack 1: [A], Stack 2: [C, D, B], Stack 3: [E, F] | Plan so far [Move E from A to table | Move D from B to table | Move B from F to table | Move F from C to E | Move D from table to C | Move B from table to D] | Exploring action Move C from table to F | New state -> Invalid | Exploring action Move F from E to table | New state -> Stack 1: [A], Stack 2: [C, D, B], Stack 3: [E], Stack 4: [F] | Exploring action Move F from E to B | New state -> Stack 1: [A], Stack 2: [C, D, B, F], Stack 3: [E] | Exploring action Move B from D to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, D], Stack 4: [E, F] | Taking action Move E from table to B | Moved to state -> Stack 1: [A], Stack 2: [C, D, B, E], Stack 3: [F] | Plan so far [Move E from A to table | Move D from B to table | Move B from F to table | Move F from C to table | Move D from table to C | Move B from table to D | Move E from table to B] | Exploring action Move F from table to A | New state -> Stack 1: [A, F], Stack 2: [C, D, B, E] | Exploring action Move D from C to table | New state -> Invalid | Exploring action Move F from table to E | New state -> Stack 1: [A], Stack 2: [C, D, B, E, F] | Exploring action Move E from B to table | New state -> Stack 1: [A], Stack 2: [C, D, B], Stack 3: [E], Stack 4: [F] | Exploring action Move C from table to A | New state -> Invalid | Taking action Move F from table to E | Moved to state -> Stack 1: [A], Stack 2: [C, D, B, E, F] | Plan so far [Move E from A to table | Move D from B to table | Move B from F to table | Move F from C to table | Move D from table to C | Move B from table to D | Move E from table to B | Move F from table to E] | Reached goal state!",
        "system2_states_v1": 49
    },
    {
        "idx": 583,
        "start": [
            [
                "table",
                "C",
                "B",
                "A",
                "D"
            ],
            [
                "table",
                "E"
            ]
        ],
        "goal": [
            [
                "table",
                "A",
                "C",
                "D",
                "E",
                "B"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": false,
                "on": "B",
                "under": "D",
                "ontable": false
            },
            "B": {
                "clear": false,
                "on": "C",
                "under": "A",
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": -1,
                "under": "B",
                "ontable": true
            },
            "D": {
                "clear": true,
                "on": "A",
                "under": -1,
                "ontable": false
            },
            "E": {
                "clear": true,
                "on": -1,
                "under": -1,
                "ontable": true
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": false,
                "on": -1,
                "under": "C",
                "ontable": true
            },
            "B": {
                "clear": true,
                "on": "E",
                "under": -1,
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": "A",
                "under": "D",
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": "C",
                "under": "E",
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": "D",
                "under": "B",
                "ontable": false
            }
        },
        "plan_len": 7,
        "num_blocks": 5,
        "prompt": "The initial state:\nThe hand is empty.\nC is on the table. B is on C. A is on B. D is on A. D is clear.\nE is on the table. E is clear.\n\nThe goal is:\nA is on the table. C is on A. D is on C. E is on D. B is on E. B is clear.\n",
        "system1_plan": "Move D from A to table | Move A from B to table | Move B from C to table | Move C from table to A | Move D from table to C | Move E from table to D | Move B from table to E",
        "system1_states": 7,
        "system2_plan_v1": "Moved to state -> Stack 1: [C, B, A, D], Stack 2: [E] | Plan so far [] | Exploring action Move A from B to E | New state -> Invalid | Exploring action Move D from A to table | New state -> Stack 1: [C, B, A], Stack 2: [D], Stack 3: [E] | Exploring action Move D from A to E | New state -> Stack 1: [C, B, A], Stack 2: [E, D] | Exploring action Move A from B to table | New state -> Invalid | Exploring action Move E from table to D | New state -> Stack 1: [C, B, A, D, E] | Taking action Move D from A to table | Moved to state -> Stack 1: [C, B, A], Stack 2: [D], Stack 3: [E] | Plan so far [Move D from A to table] | Exploring action Move A from B to D | New state -> Stack 1: [C, B], Stack 2: [D, A], Stack 3: [E] | Exploring action Move A from B to E | New state -> Stack 1: [C, B], Stack 2: [D], Stack 3: [E, A] | Exploring action Move B from C to table | New state -> Invalid | Exploring action Move C from table to D | New state -> Invalid | Exploring action Move A from B to table | New state -> Stack 1: [A], Stack 2: [C, B], Stack 3: [D], Stack 4: [E] | Taking action Move A from B to table | Moved to state -> Stack 1: [A], Stack 2: [C, B], Stack 3: [D], Stack 4: [E] | Plan so far [Move D from A to table | Move A from B to table] | Exploring action Move B from C to E | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D], Stack 4: [E, B] | Exploring action Move B from C to D | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, B], Stack 4: [E] | Exploring action Move C from table to A | New state -> Invalid | Exploring action Move B from C to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Taking action Move B from C to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Plan so far [Move D from A to table | Move A from B to table | Move B from C to table] | Exploring action Move A from table to D | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, A], Stack 4: [E] | Exploring action Move B from table to E | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D], Stack 4: [E, B] | Exploring action Move C from table to A | New state -> Stack 1: [A, C], Stack 2: [B], Stack 3: [D], Stack 4: [E] | Taking action Move B from C to E | Moved to state -> Stack 1: [A], Stack 2: [C], Stack 3: [D], Stack 4: [E, B] | Plan so far [Move D from A to table | Move A from B to table | Move B from C to E] | Exploring action Move A from table to D | New state -> Stack 1: [C], Stack 2: [D, A], Stack 3: [E, B] | Exploring action Move E from table to D | New state -> Invalid | Exploring action Move C from table to A | New state -> Stack 1: [A, C], Stack 2: [D], Stack 3: [E, B] | Exploring action Move B from E to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Taking action Move C from table to A | Moved to state -> Stack 1: [A, C], Stack 2: [B], Stack 3: [D], Stack 4: [E] | Plan so far [Move D from A to table | Move A from B to table | Move B from C to table | Move C from table to A] | Exploring action Move A from table to E | New state -> Invalid | Exploring action Move D from table to C | New state -> Stack 1: [A, C, D], Stack 2: [B], Stack 3: [E] | Exploring action Move A from table to C | New state -> Invalid | Exploring action Move B from table to C | New state -> Stack 1: [A, C, B], Stack 2: [D], Stack 3: [E] | Exploring action Move B from table to E | New state -> Stack 1: [A, C], Stack 2: [D], Stack 3: [E, B] | Taking action Move C from table to A | Moved to state -> Stack 1: [A, C], Stack 2: [D], Stack 3: [E, B] | Plan so far [Move D from A to table | Move A from B to table | Move B from C to E | Move C from table to A] | Exploring action Move B from E to D | New state -> Stack 1: [A, C], Stack 2: [D, B], Stack 3: [E] | Exploring action Move D from table to C | New state -> Stack 1: [A, C, D], Stack 2: [E, B] | Exploring action Move A from table to C | New state -> Invalid | Exploring action Move B from E to table | New state -> Stack 1: [A, C], Stack 2: [B], Stack 3: [D], Stack 4: [E] | Taking action Move D from table to C | Moved to state -> Stack 1: [A, C, D], Stack 2: [B], Stack 3: [E] | Plan so far [Move D from A to table | Move A from B to table | Move B from C to table | Move C from table to A | Move D from table to C] | Exploring action Move E from table to B | New state -> Stack 1: [A, C, D], Stack 2: [B, E] | Exploring action Move E from table to D | New state -> Stack 1: [A, C, D, E], Stack 2: [B] | Exploring action Move A from table to B | New state -> Invalid | Exploring action Move B from table to E | New state -> Stack 1: [A, C, D], Stack 2: [E, B] | Taking action Move D from table to C | Moved to state -> Stack 1: [A, C, D], Stack 2: [E, B] | Plan so far [Move D from A to table | Move A from B to table | Move B from C to E | Move C from table to A | Move D from table to C] | Exploring action Move D from C to table | New state -> Stack 1: [A, C], Stack 2: [D], Stack 3: [E, B] | Exploring action Move B from E to table | New state -> Stack 1: [A, C, D], Stack 2: [B], Stack 3: [E] | Exploring action Move C from A to B | New state -> Invalid | Exploring action Move B from E to D | New state -> Stack 1: [A, C, D, B], Stack 2: [E] | Taking action Move E from table to D | Moved to state -> Stack 1: [A, C, D, E], Stack 2: [B] | Plan so far [Move D from A to table | Move A from B to table | Move B from C to table | Move C from table to A | Move D from table to C | Move E from table to D] | Exploring action Move B from table to E | New state -> Stack 1: [A, C, D, E, B] | Exploring action Move A from table to B | New state -> Invalid | Exploring action Move E from D to B | New state -> Stack 1: [A, C, D], Stack 2: [B, E] | Exploring action Move E from D to table | New state -> Stack 1: [A, C, D], Stack 2: [B], Stack 3: [E] | Taking action Move B from table to E | Moved to state -> Stack 1: [A, C, D, E, B] | Plan so far [Move D from A to table | Move A from B to table | Move B from C to table | Move C from table to A | Move D from table to C | Move E from table to D | Move B from table to E] | Reached goal state!",
        "system2_states_v1": 42
    },
    {
        "idx": 593,
        "start": [
            [
                "table",
                "A",
                "B"
            ],
            [
                "table",
                "C",
                "E",
                "D"
            ]
        ],
        "goal": [
            [
                "table",
                "E",
                "C",
                "A",
                "D",
                "B"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": false,
                "on": -1,
                "under": "B",
                "ontable": true
            },
            "B": {
                "clear": true,
                "on": "A",
                "under": -1,
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": -1,
                "under": "E",
                "ontable": true
            },
            "D": {
                "clear": true,
                "on": "E",
                "under": -1,
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": "C",
                "under": "D",
                "ontable": false
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": false,
                "on": "C",
                "under": "D",
                "ontable": false
            },
            "B": {
                "clear": true,
                "on": "D",
                "under": -1,
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": "E",
                "under": "A",
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": "A",
                "under": "B",
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": -1,
                "under": "C",
                "ontable": true
            }
        },
        "plan_len": 7,
        "num_blocks": 5,
        "prompt": "The initial state:\nThe hand is empty.\nA is on the table. B is on A. B is clear.\nC is on the table. E is on C. D is on E. D is clear.\n\nThe goal is:\nE is on the table. C is on E. A is on C. D is on A. B is on D. B is clear.\n",
        "system1_plan": "Move D from E to table | Move E from C to table | Move C from table to E | Move B from A to table | Move A from table to C | Move D from table to A | Move B from table to D",
        "system1_states": 7,
        "system2_plan_v1": "Moved to state -> Stack 1: [A, B], Stack 2: [C, E, D] | Plan so far [] | Exploring action Move A from table to D | New state -> Invalid | Exploring action Move B from A to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, E, D] | Exploring action Move B from A to D | New state -> Stack 1: [A], Stack 2: [C, E, D, B] | Exploring action Move D from E to table | New state -> Stack 1: [A, B], Stack 2: [C, E], Stack 3: [D] | Taking action Move B from A to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, E, D] | Plan so far [Move B from A to table] | Exploring action Move D from E to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, E], Stack 4: [D] | Exploring action Move C from table to D | New state -> Invalid | Exploring action Move D from E to B | New state -> Stack 1: [A], Stack 2: [B, D], Stack 3: [C, E] | Exploring action Move D from E to A | New state -> Stack 1: [A, D], Stack 2: [B], Stack 3: [C, E] | Taking action Move D from E to table | Moved to state -> Stack 1: [A, B], Stack 2: [C, E], Stack 3: [D] | Plan so far [Move D from E to table] | Exploring action Move E from C to table | New state -> Stack 1: [A, B], Stack 2: [C], Stack 3: [D], Stack 4: [E] | Exploring action Move C from table to B | New state -> Invalid | Exploring action Move B from A to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, E], Stack 4: [D] | Exploring action Move B from A to D | New state -> Stack 1: [A], Stack 2: [C, E], Stack 3: [D, B] | Taking action Move B from A to D | Moved to state -> Stack 1: [A], Stack 2: [C, E, D, B] | Plan so far [Move B from A to D] | Exploring action Move B from D to A | New state -> Stack 1: [A, B], Stack 2: [C, E, D] | Exploring action Move B from D to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, E, D] | Exploring action Move A from table to B | New state -> Stack 1: [C, E, D, B, A] | Exploring action Move D from E to A | New state -> Invalid | Taking action Move E from C to table | Moved to state -> Stack 1: [A, B], Stack 2: [C], Stack 3: [D], Stack 4: [E] | Plan so far [Move D from E to table | Move E from C to table] | Exploring action Move A from table to B | New state -> Invalid | Exploring action Move B from A to D | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, B], Stack 4: [E] | Exploring action Move C from table to E | New state -> Stack 1: [A, B], Stack 2: [D], Stack 3: [E, C] | Exploring action Move B from A to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Taking action Move D from E to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, E], Stack 4: [D] | Plan so far [Move B from A to table | Move D from E to table] | Exploring action Move C from table to E | New state -> Invalid | Exploring action Move C from table to D | New state -> Invalid | Exploring action Move E from C to D | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D, E] | Exploring action Move E from C to B | New state -> Stack 1: [A], Stack 2: [B, E], Stack 3: [C], Stack 4: [D] | Exploring action Move E from C to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Taking action Move C from table to E | Moved to state -> Stack 1: [A, B], Stack 2: [D], Stack 3: [E, C] | Plan so far [Move D from E to table | Move E from C to table | Move C from table to E] | Exploring action Move B from A to D | New state -> Stack 1: [A], Stack 2: [D, B], Stack 3: [E, C] | Exploring action Move A from table to D | New state -> Invalid | Exploring action Move B from A to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D], Stack 4: [E, C] | Exploring action Move B from A to C | New state -> Stack 1: [A], Stack 2: [D], Stack 3: [E, C, B] | Taking action Move B from A to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, E], Stack 4: [D] | Plan so far [Move D from E to table | Move B from A to table] | Taking action Move B from A to D | Moved to state -> Stack 1: [A], Stack 2: [C, E], Stack 3: [D, B] | Plan so far [Move D from E to table | Move B from A to D] | Exploring action Move E from C to A | New state -> Stack 1: [A, E], Stack 2: [C], Stack 3: [D, B] | Exploring action Move D from table to B | New state -> Invalid | Exploring action Move B from D to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, E], Stack 4: [D] | Exploring action Move E from C to table | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, B], Stack 4: [E] | Taking action Move B from A to D | Moved to state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, B], Stack 4: [E] | Plan so far [Move D from E to table | Move E from C to table | Move B from A to D] | Exploring action Move D from table to B | New state -> Invalid | Exploring action Move A from table to E | New state -> Stack 1: [C], Stack 2: [D, B], Stack 3: [E, A] | Exploring action Move C from table to E | New state -> Stack 1: [A], Stack 2: [D, B], Stack 3: [E, C] | Exploring action Move B from D to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Taking action Move E from C to table | Moved to state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, B], Stack 4: [E] | Plan so far [Move D from E to table | Move B from A to D | Move E from C to table] | Taking action Move B from A to D | Moved to state -> Stack 1: [A], Stack 2: [D, B], Stack 3: [E, C] | Plan so far [Move D from E to table | Move E from C to table | Move C from table to E | Move B from A to D] | Exploring action Move A from table to C | New state -> Stack 1: [D, B], Stack 2: [E, C, A] | Exploring action Move D from table to A | New state -> Invalid | Exploring action Move B from D to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D], Stack 4: [E, C] | Exploring action Move C from E to table | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, B], Stack 4: [E] | Taking action Move E from C to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Plan so far [Move B from A to table | Move D from E to table | Move E from C to table] | Exploring action Move A from table to D | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, A], Stack 4: [E] | Exploring action Move C from table to E | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D], Stack 4: [E, C] | Exploring action Move B from table to D | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, B], Stack 4: [E] | Taking action Move B from A to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [D], Stack 4: [E, C] | Plan so far [Move D from E to table | Move E from C to table | Move C from table to E | Move B from A to table] | Exploring action Move A from table to C | New state -> Stack 1: [B], Stack 2: [D], Stack 3: [E, C, A] | Exploring action Move C from E to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Exploring action Move E from table to D | New state -> Invalid | Exploring action Move E from table to A | New state -> Invalid | Exploring action Move B from table to D | New state -> Stack 1: [A], Stack 2: [D, B], Stack 3: [E, C] | Taking action Move B from A to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Plan so far [Move D from E to table | Move E from C to table | Move B from A to table] | Taking action Move C from table to E | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [D], Stack 4: [E, C] | Plan so far [Move B from A to table | Move D from E to table | Move E from C to table | Move C from table to E] | Taking action Move A from table to C | Moved to state -> Stack 1: [B], Stack 2: [D], Stack 3: [E, C, A] | Plan so far [Move D from E to table | Move E from C to table | Move C from table to E | Move B from A to table | Move A from table to C] | Exploring action Move B from table to D | New state -> Stack 1: [D, B], Stack 2: [E, C, A] | Exploring action Move E from table to A | New state -> Invalid | Exploring action Move D from table to B | New state -> Stack 1: [B, D], Stack 2: [E, C, A] | Exploring action Move E from table to D | New state -> Invalid | Exploring action Move D from table to A | New state -> Stack 1: [B], Stack 2: [E, C, A, D] | Taking action Move C from table to E | Moved to state -> Stack 1: [A], Stack 2: [D, B], Stack 3: [E, C] | Plan so far [Move D from E to table | Move E from C to table | Move B from A to D | Move C from table to E] | Taking action Move D from table to A | Moved to state -> Stack 1: [B], Stack 2: [E, C, A, D] | Plan so far [Move D from E to table | Move E from C to table | Move C from table to E | Move B from A to table | Move A from table to C | Move D from table to A] | Exploring action Move C from E to table | New state -> Invalid | Exploring action Move B from table to D | New state -> Stack 1: [E, C, A, D, B] | Exploring action Move D from A to table | New state -> Stack 1: [B], Stack 2: [D], Stack 3: [E, C, A] | Exploring action Move D from A to B | New state -> Stack 1: [B, D], Stack 2: [E, C, A] | Taking action Move B from table to D | Moved to state -> Stack 1: [E, C, A, D, B] | Plan so far [Move D from E to table | Move E from C to table | Move C from table to E | Move B from A to table | Move A from table to C | Move D from table to A | Move B from table to D] | Reached goal state!",
        "system2_states_v1": 58
    },
    {
        "idx": 806,
        "start": [
            [
                "table",
                "B",
                "D",
                "E",
                "F"
            ],
            [
                "table",
                "C",
                "A"
            ]
        ],
        "goal": [
            [
                "table",
                "B",
                "E",
                "D",
                "C",
                "A",
                "F"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": true,
                "on": "C",
                "under": -1,
                "ontable": false
            },
            "B": {
                "clear": false,
                "on": -1,
                "under": "D",
                "ontable": true
            },
            "C": {
                "clear": false,
                "on": -1,
                "under": "A",
                "ontable": true
            },
            "D": {
                "clear": false,
                "on": "B",
                "under": "E",
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": "D",
                "under": "F",
                "ontable": false
            },
            "F": {
                "clear": true,
                "on": "E",
                "under": -1,
                "ontable": false
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": false,
                "on": "C",
                "under": "F",
                "ontable": false
            },
            "B": {
                "clear": false,
                "on": -1,
                "under": "E",
                "ontable": true
            },
            "C": {
                "clear": false,
                "on": "D",
                "under": "A",
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": "E",
                "under": "C",
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": "B",
                "under": "D",
                "ontable": false
            },
            "F": {
                "clear": true,
                "on": "A",
                "under": -1,
                "ontable": false
            }
        },
        "plan_len": 9,
        "num_blocks": 6,
        "prompt": "The initial state:\nThe hand is empty.\nB is on the table. D is on B. E is on D. F is on E. F is clear.\nC is on the table. A is on C. A is clear.\n\nThe goal is:\nB is on the table. E is on B. D is on E. C is on D. A is on C. F is on A. F is clear.\n",
        "system1_plan": "Move F from E to table | Move E from D to table | Move D from B to table | Move E from table to B | Move D from table to E | Move A from C to table | Move C from table to D | Move A from table to C | Move F from table to A",
        "system1_states": 9,
        "system2_plan_v1": "Moved to state -> Stack 1: [B, D, E, F], Stack 2: [C, A] | Plan so far [] | Exploring action Move E from D to table | New state -> Invalid | Exploring action Move A from C to table | New state -> Stack 1: [A], Stack 2: [B, D, E, F], Stack 3: [C] | Exploring action Move F from E to table | New state -> Stack 1: [B, D, E], Stack 2: [C, A], Stack 3: [F] | Exploring action Move F from E to A | New state -> Stack 1: [B, D, E], Stack 2: [C, A, F] | Taking action Move F from E to A | Moved to state -> Stack 1: [B, D, E], Stack 2: [C, A, F] | Plan so far [Move F from E to A] | Exploring action Move A from C to E | New state -> Invalid | Exploring action Move E from D to table | New state -> Stack 1: [B, D], Stack 2: [C, A, F], Stack 3: [E] | Exploring action Move E from D to F | New state -> Stack 1: [B, D], Stack 2: [C, A, F, E] | Exploring action Move F from A to table | New state -> Stack 1: [B, D, E], Stack 2: [C, A], Stack 3: [F] | Taking action Move E from D to table | Moved to state -> Stack 1: [B, D], Stack 2: [C, A, F], Stack 3: [E] | Plan so far [Move F from E to A | Move E from D to table] | Exploring action Move B from table to D | New state -> Invalid | Exploring action Move D from B to table | New state -> Stack 1: [B], Stack 2: [C, A, F], Stack 3: [D], Stack 4: [E] | Exploring action Move D from B to F | New state -> Stack 1: [B], Stack 2: [C, A, F, D], Stack 3: [E] | Exploring action Move D from B to E | New state -> Stack 1: [B], Stack 2: [C, A, F], Stack 3: [E, D] | Taking action Move D from B to table | Moved to state -> Stack 1: [B], Stack 2: [C, A, F], Stack 3: [D], Stack 4: [E] | Plan so far [Move F from E to A | Move E from D to table | Move D from B to table] | Exploring action Move A from C to B | New state -> Invalid | Exploring action Move B from table to E | New state -> Stack 1: [C, A, F], Stack 2: [D], Stack 3: [E, B] | Exploring action Move B from table to D | New state -> Stack 1: [C, A, F], Stack 2: [D, B], Stack 3: [E] | Exploring action Move E from table to B | New state -> Stack 1: [B, E], Stack 2: [C, A, F], Stack 3: [D] | Taking action Move E from table to B | Moved to state -> Stack 1: [B, E], Stack 2: [C, A, F], Stack 3: [D] | Plan so far [Move F from E to A | Move E from D to table | Move D from B to table | Move E from table to B] | Exploring action Move A from C to E | New state -> Invalid | Exploring action Move D from table to E | New state -> Stack 1: [B, E, D], Stack 2: [C, A, F] | Exploring action Move F from A to table | New state -> Stack 1: [B, E], Stack 2: [C, A], Stack 3: [D], Stack 4: [F] | Exploring action Move A from C to D | New state -> Invalid | Exploring action Move E from B to table | New state -> Stack 1: [B], Stack 2: [C, A, F], Stack 3: [D], Stack 4: [E] | Taking action Move D from table to E | Moved to state -> Stack 1: [B, E, D], Stack 2: [C, A, F] | Plan so far [Move F from E to A | Move E from D to table | Move D from B to table | Move E from table to B | Move D from table to E] | Exploring action Move A from C to F | New state -> Invalid | Exploring action Move D from E to F | New state -> Stack 1: [B, E], Stack 2: [C, A, F, D] | Exploring action Move F from A to table | New state -> Stack 1: [B, E, D], Stack 2: [C, A], Stack 3: [F] | Exploring action Move D from E to table | New state -> Stack 1: [B, E], Stack 2: [C, A, F], Stack 3: [D] | Exploring action Move C from table to F | New state -> Invalid | Taking action Move D from B to E | Moved to state -> Stack 1: [B], Stack 2: [C, A, F], Stack 3: [E, D] | Plan so far [Move F from E to A | Move E from D to table | Move D from B to E] | Exploring action Move D from E to table | New state -> Stack 1: [B], Stack 2: [C, A, F], Stack 3: [D], Stack 4: [E] | Exploring action Move E from table to F | New state -> Invalid | Exploring action Move D from E to B | New state -> Stack 1: [B, D], Stack 2: [C, A, F], Stack 3: [E] | Exploring action Move B from table to D | New state -> Stack 1: [C, A, F], Stack 2: [E, D, B] | Taking action Move D from E to table | Moved to state -> Stack 1: [B], Stack 2: [C, A, F], Stack 3: [D], Stack 4: [E] | Plan so far [Move F from E to A | Move E from D to table | Move D from B to E | Move D from E to table] | Taking action Move B from table to E | Moved to state -> Stack 1: [C, A, F], Stack 2: [D], Stack 3: [E, B] | Plan so far [Move F from E to A | Move E from D to table | Move D from B to table | Move B from table to E] | Exploring action Move B from E to F | New state -> Stack 1: [C, A, F, B], Stack 2: [D], Stack 3: [E] | Exploring action Move E from table to F | New state -> Invalid | Exploring action Move B from E to table | New state -> Stack 1: [B], Stack 2: [C, A, F], Stack 3: [D], Stack 4: [E] | Exploring action Move B from E to D | New state -> Stack 1: [C, A, F], Stack 2: [D, B], Stack 3: [E] | Exploring action Move A from C to D | New state -> Invalid | Taking action Move E from B to table | Moved to state -> Stack 1: [B], Stack 2: [C, A, F], Stack 3: [D], Stack 4: [E] | Plan so far [Move F from E to A | Move E from D to table | Move D from B to table | Move E from table to B | Move E from B to table] | Taking action Move F from E to table | Moved to state -> Stack 1: [B, D, E], Stack 2: [C, A], Stack 3: [F] | Plan so far [Move F from E to table] | Exploring action Move B from table to F | New state -> Invalid | Exploring action Move E from D to table | New state -> Stack 1: [B, D], Stack 2: [C, A], Stack 3: [E], Stack 4: [F] | Exploring action Move F from table to A | New state -> Stack 1: [B, D, E], Stack 2: [C, A, F] | Exploring action Move D from B to table | New state -> Invalid | Exploring action Move A from C to table | New state -> Stack 1: [A], Stack 2: [B, D, E], Stack 3: [C], Stack 4: [F] | Taking action Move F from table to A | Moved to state -> Stack 1: [B, D, E], Stack 2: [C, A, F] | Plan so far [Move F from E to table | Move F from table to A] | Taking action Move B from table to D | Moved to state -> Stack 1: [C, A, F], Stack 2: [D, B], Stack 3: [E] | Plan so far [Move F from E to A | Move E from D to table | Move D from B to table | Move B from table to D] | Exploring action Move B from D to E | New state -> Stack 1: [C, A, F], Stack 2: [D], Stack 3: [E, B] | Exploring action Move B from D to F | New state -> Stack 1: [C, A, F, B], Stack 2: [D], Stack 3: [E] | Exploring action Move B from D to table | New state -> Stack 1: [B], Stack 2: [C, A, F], Stack 3: [D], Stack 4: [E] | Exploring action Move D from table to F | New state -> Invalid | Exploring action Move D from table to E | New state -> Invalid | Taking action Move A from C to table | Moved to state -> Stack 1: [A], Stack 2: [B, D, E], Stack 3: [C], Stack 4: [F] | Plan so far [Move F from E to table | Move A from C to table] | Exploring action Move D from B to E | New state -> Invalid | Exploring action Move E from D to F | New state -> Stack 1: [A], Stack 2: [B, D], Stack 3: [C], Stack 4: [F, E] | Exploring action Move D from B to C | New state -> Invalid | Exploring action Move E from D to A | New state -> Stack 1: [A, E], Stack 2: [B, D], Stack 3: [C], Stack 4: [F] | Exploring action Move E from D to table | New state -> Stack 1: [A], Stack 2: [B, D], Stack 3: [C], Stack 4: [E], Stack 5: [F] | Taking action Move E from D to table | Moved to state -> Stack 1: [B, D], Stack 2: [C, A], Stack 3: [E], Stack 4: [F] | Plan so far [Move F from E to table | Move E from D to table] | Exploring action Move D from B to table | New state -> Stack 1: [B], Stack 2: [C, A], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Exploring action Move A from C to table | New state -> Stack 1: [A], Stack 2: [B, D], Stack 3: [C], Stack 4: [E], Stack 5: [F] | Exploring action Move F from table to A | New state -> Stack 1: [B, D], Stack 2: [C, A, F], Stack 3: [E] | Exploring action Move B from table to E | New state -> Invalid | Taking action Move F from table to A | Moved to state -> Stack 1: [B, D], Stack 2: [C, A, F], Stack 3: [E] | Plan so far [Move F from E to table | Move E from D to table | Move F from table to A] | Taking action Move B from D to table | Moved to state -> Stack 1: [B], Stack 2: [C, A, F], Stack 3: [D], Stack 4: [E] | Plan so far [Move F from E to A | Move E from D to table | Move D from B to table | Move B from table to D | Move B from D to table] | Taking action Move E from table to D | Moved to state -> Stack 1: [B], Stack 2: [C, A, F], Stack 3: [D, E] | Plan so far [Move F from E to A | Move E from D to table | Move D from B to table | Move E from table to D] | Exploring action Move A from C to F | New state -> Invalid | Exploring action Move B from table to E | New state -> Stack 1: [C, A, F], Stack 2: [D, E, B] | Exploring action Move E from D to B | New state -> Stack 1: [B, E], Stack 2: [C, A, F], Stack 3: [D] | Exploring action Move E from D to table | New state -> Stack 1: [B], Stack 2: [C, A, F], Stack 3: [D], Stack 4: [E] | Taking action Move E from D to B | Moved to state -> Stack 1: [B, E], Stack 2: [C, A, F], Stack 3: [D] | Plan so far [Move F from E to A | Move E from D to table | Move D from B to table | Move E from table to D | Move E from D to B] | Taking action Move B from E to table | Moved to state -> Stack 1: [B], Stack 2: [C, A, F], Stack 3: [D], Stack 4: [E] | Plan so far [Move F from E to A | Move E from D to table | Move D from B to table | Move B from table to E | Move B from E to table] | Taking action Move E from table to D | Moved to state -> Stack 1: [B, D, E], Stack 2: [C, A, F] | Plan so far [Move F from E to A | Move E from D to table | Move E from table to D] | Taking action Move E from D to table | Moved to state -> Stack 1: [B], Stack 2: [C, A, F], Stack 3: [D], Stack 4: [E] | Plan so far [Move F from E to A | Move E from D to table | Move D from B to table | Move E from table to D | Move E from D to table] | Taking action Move E from D to F | Moved to state -> Stack 1: [B, D], Stack 2: [C, A, F, E] | Plan so far [Move F from E to A | Move E from D to F] | Exploring action Move E from F to table | New state -> Stack 1: [B, D], Stack 2: [C, A, F], Stack 3: [E] | Exploring action Move D from B to table | New state -> Stack 1: [B], Stack 2: [C, A, F, E], Stack 3: [D] | Exploring action Move E from F to D | New state -> Stack 1: [B, D, E], Stack 2: [C, A, F] | Exploring action Move F from A to table | New state -> Invalid | Taking action Move E from F to table | Moved to state -> Stack 1: [B, D], Stack 2: [C, A, F], Stack 3: [E] | Plan so far [Move F from E to A | Move E from D to F | Move E from F to table] | Taking action Move D from B to F | Moved to state -> Stack 1: [B], Stack 2: [C, A, F, D], Stack 3: [E] | Plan so far [Move F from E to A | Move E from D to table | Move D from B to F] | Exploring action Move E from table to B | New state -> Stack 1: [B, E], Stack 2: [C, A, F, D] | Exploring action Move D from F to table | New state -> Stack 1: [B], Stack 2: [C, A, F], Stack 3: [D], Stack 4: [E] | Exploring action Move D from F to B | New state -> Stack 1: [B, D], Stack 2: [C, A, F], Stack 3: [E] | Exploring action Move A from C to table | New state -> Invalid | Taking action Move D from F to table | Moved to state -> Stack 1: [B], Stack 2: [C, A, F], Stack 3: [D], Stack 4: [E] | Plan so far [Move F from E to A | Move E from D to table | Move D from B to F | Move D from F to table] | Taking action Move D from E to B | Moved to state -> Stack 1: [B, D], Stack 2: [C, A, F], Stack 3: [E] | Plan so far [Move F from E to A | Move E from D to table | Move D from B to E | Move D from E to B] | Taking action Move D from B to table | Moved to state -> Stack 1: [B], Stack 2: [C, A, F, E], Stack 3: [D] | Plan so far [Move F from E to A | Move E from D to F | Move D from B to table] | Exploring action Move F from A to D | New state -> Invalid | Exploring action Move E from F to table | New state -> Stack 1: [B], Stack 2: [C, A, F], Stack 3: [D], Stack 4: [E] | Exploring action Move E from F to D | New state -> Stack 1: [B], Stack 2: [C, A, F], Stack 3: [D, E] | Exploring action Move E from F to B | New state -> Stack 1: [B, E], Stack 2: [C, A, F], Stack 3: [D] | Taking action Move E from F to B | Moved to state -> Stack 1: [B, E], Stack 2: [C, A, F], Stack 3: [D] | Plan so far [Move F from E to A | Move E from D to F | Move D from B to table | Move E from F to B] | Taking action Move E from F to table | Moved to state -> Stack 1: [B], Stack 2: [C, A, F], Stack 3: [D], Stack 4: [E] | Plan so far [Move F from E to A | Move E from D to F | Move D from B to table | Move E from F to table] | Taking action Move E from F to D | Moved to state -> Stack 1: [B, D, E], Stack 2: [C, A, F] | Plan so far [Move F from E to A | Move E from D to F | Move E from F to D] | Taking action Move E from F to D | Moved to state -> Stack 1: [B], Stack 2: [C, A, F], Stack 3: [D, E] | Plan so far [Move F from E to A | Move E from D to F | Move D from B to table | Move E from F to D] | Taking action Move D from F to B | Moved to state -> Stack 1: [B, D], Stack 2: [C, A, F], Stack 3: [E] | Plan so far [Move F from E to A | Move E from D to table | Move D from B to F | Move D from F to B] | Taking action Move E from table to B | Moved to state -> Stack 1: [B, E], Stack 2: [C, A, F, D] | Plan so far [Move F from E to A | Move E from D to table | Move D from B to F | Move E from table to B] | Exploring action Move B from table to E | New state -> Invalid | Exploring action Move D from F to table | New state -> Stack 1: [B, E], Stack 2: [C, A, F], Stack 3: [D] | Exploring action Move B from table to D | New state -> Invalid | Exploring action Move D from F to E | New state -> Stack 1: [B, E, D], Stack 2: [C, A, F] | Exploring action Move E from B to table | New state -> Stack 1: [B], Stack 2: [C, A, F, D], Stack 3: [E] | Taking action Move D from F to E | Moved to state -> Stack 1: [B, E, D], Stack 2: [C, A, F] | Plan so far [Move F from E to A | Move E from D to table | Move D from B to F | Move E from table to B | Move D from F to E] | Taking action Move D from F to table | Moved to state -> Stack 1: [B, E], Stack 2: [C, A, F], Stack 3: [D] | Plan so far [Move F from E to A | Move E from D to table | Move D from B to F | Move E from table to B | Move D from F to table] | Taking action Move D from F to E | Moved to state -> Stack 1: [B], Stack 2: [C, A, F], Stack 3: [E, D] | Plan so far [Move F from E to A | Move E from D to table | Move D from B to F | Move D from F to E] | Taking action Move D from B to table | Moved to state -> Stack 1: [B], Stack 2: [C, A], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Plan so far [Move F from E to table | Move E from D to table | Move D from B to table] | Exploring action Move F from table to A | New state -> Stack 1: [B], Stack 2: [C, A, F], Stack 3: [D], Stack 4: [E] | Exploring action Move E from table to B | New state -> Stack 1: [B, E], Stack 2: [C, A], Stack 3: [D], Stack 4: [F] | Exploring action Move C from table to A | New state -> Invalid | Exploring action Move A from C to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Exploring action Move C from table to F | New state -> Invalid | Taking action Move F from table to A | Moved to state -> Stack 1: [B], Stack 2: [C, A, F], Stack 3: [D], Stack 4: [E] | Plan so far [Move F from E to table | Move E from D to table | Move D from B to table | Move F from table to A] | Taking action Move D from table to E | Moved to state -> Stack 1: [B], Stack 2: [C, A, F], Stack 3: [E, D] | Plan so far [Move F from E to A | Move E from D to table | Move D from B to table | Move D from table to E] | Taking action Move E from table to B | Moved to state -> Stack 1: [B, E], Stack 2: [C, A], Stack 3: [D], Stack 4: [F] | Plan so far [Move F from E to table | Move E from D to table | Move D from B to table | Move E from table to B] | Exploring action Move D from table to E | New state -> Stack 1: [B, E, D], Stack 2: [C, A], Stack 3: [F] | Exploring action Move A from C to table | New state -> Stack 1: [A], Stack 2: [B, E], Stack 3: [C], Stack 4: [D], Stack 5: [F] | Exploring action Move F from table to A | New state -> Stack 1: [B, E], Stack 2: [C, A, F], Stack 3: [D] | Exploring action Move B from table to D | New state -> Invalid | Exploring action Move B from table to E | New state -> Invalid | Taking action Move F from table to A | Moved to state -> Stack 1: [B, E], Stack 2: [C, A, F], Stack 3: [D] | Plan so far [Move F from E to table | Move E from D to table | Move D from B to table | Move E from table to B | Move F from table to A] | Taking action Move A from C to table | Moved to state -> Stack 1: [A], Stack 2: [B, D], Stack 3: [C], Stack 4: [E], Stack 5: [F] | Plan so far [Move F from E to table | Move E from D to table | Move A from C to table] | Exploring action Move B from table to C | New state -> Invalid | Exploring action Move D from B to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Exploring action Move D from B to F | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [E], Stack 5: [F, D] | Exploring action Move D from B to E | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [E, D], Stack 5: [F] | Taking action Move A from C to table | Moved to state -> Stack 1: [A], Stack 2: [B, E], Stack 3: [C], Stack 4: [D], Stack 5: [F] | Plan so far [Move F from E to table | Move E from D to table | Move D from B to table | Move E from table to B | Move A from C to table] | Exploring action Move A from table to E | New state -> Stack 1: [B, E, A], Stack 2: [C], Stack 3: [D], Stack 4: [F] | Exploring action Move F from table to A | New state -> Stack 1: [A, F], Stack 2: [B, E], Stack 3: [C], Stack 4: [D] | Exploring action Move B from table to F | New state -> Invalid | Exploring action Move B from table to E | New state -> Invalid | Exploring action Move D from table to E | New state -> Stack 1: [A], Stack 2: [B, E, D], Stack 3: [C], Stack 4: [F] | Taking action Move D from table to E | Moved to state -> Stack 1: [B, E, D], Stack 2: [C, A], Stack 3: [F] | Plan so far [Move F from E to table | Move E from D to table | Move D from B to table | Move E from table to B | Move D from table to E] | Exploring action Move B from table to A | New state -> Invalid | Exploring action Move A from C to table | New state -> Stack 1: [A], Stack 2: [B, E, D], Stack 3: [C], Stack 4: [F] | Exploring action Move A from C to F | New state -> Stack 1: [B, E, D], Stack 2: [C], Stack 3: [F, A] | Exploring action Move C from table to F | New state -> Invalid | Exploring action Move F from table to A | New state -> Stack 1: [B, E, D], Stack 2: [C, A, F] | Taking action Move F from table to A | Moved to state -> Stack 1: [B, E, D], Stack 2: [C, A, F] | Plan so far [Move F from E to table | Move E from D to table | Move D from B to table | Move E from table to B | Move D from table to E | Move F from table to A] | Taking action Move A from C to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Plan so far [Move F from E to table | Move E from D to table | Move D from B to table | Move A from C to table] | Exploring action Move F from table to A | New state -> Stack 1: [A, F], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Exploring action Move E from table to B | New state -> Stack 1: [A], Stack 2: [B, E], Stack 3: [C], Stack 4: [D], Stack 5: [F] | Exploring action Move B from table to C | New state -> Stack 1: [A], Stack 2: [C, B], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Taking action Move A from C to table | Moved to state -> Stack 1: [A], Stack 2: [B, D, E, F], Stack 3: [C] | Plan so far [Move A from C to table] | Exploring action Move F from E to C | New state -> Stack 1: [A], Stack 2: [B, D, E], Stack 3: [C, F] | Exploring action Move B from table to F | New state -> Invalid | Exploring action Move F from E to table | New state -> Stack 1: [A], Stack 2: [B, D, E], Stack 3: [C], Stack 4: [F] | Exploring action Move F from E to A | New state -> Stack 1: [A, F], Stack 2: [B, D, E], Stack 3: [C] | Taking action Move A from C to table | Moved to state -> Stack 1: [A], Stack 2: [B, E, D], Stack 3: [C], Stack 4: [F] | Plan so far [Move F from E to table | Move E from D to table | Move D from B to table | Move E from table to B | Move D from table to E | Move A from C to table] | Exploring action Move B from table to C | New state -> Invalid | Exploring action Move C from table to D | New state -> Stack 1: [A], Stack 2: [B, E, D, C], Stack 3: [F] | Exploring action Move F from table to A | New state -> Stack 1: [A, F], Stack 2: [B, E, D], Stack 3: [C] | Exploring action Move A from table to F | New state -> Stack 1: [B, E, D], Stack 2: [C], Stack 3: [F, A] | Taking action Move F from E to table | Moved to state -> Stack 1: [A], Stack 2: [B, D, E], Stack 3: [C], Stack 4: [F] | Plan so far [Move A from C to table | Move F from E to table] | Taking action Move F from E to A | Moved to state -> Stack 1: [A, F], Stack 2: [B, D, E], Stack 3: [C] | Plan so far [Move A from C to table | Move F from E to A] | Exploring action Move F from A to table | New state -> Stack 1: [A], Stack 2: [B, D, E], Stack 3: [C], Stack 4: [F] | Exploring action Move E from D to C | New state -> Stack 1: [A, F], Stack 2: [B, D], Stack 3: [C, E] | Exploring action Move E from D to table | New state -> Stack 1: [A, F], Stack 2: [B, D], Stack 3: [C], Stack 4: [E] | Exploring action Move B from table to F | New state -> Invalid | Exploring action Move D from B to table | New state -> Invalid | Taking action Move C from table to D | Moved to state -> Stack 1: [A], Stack 2: [B, E, D, C], Stack 3: [F] | Plan so far [Move F from E to table | Move E from D to table | Move D from B to table | Move E from table to B | Move D from table to E | Move A from C to table | Move C from table to D] | Exploring action Move E from B to table | New state -> Invalid | Exploring action Move D from E to C | New state -> Invalid | Exploring action Move C from D to table | New state -> Stack 1: [A], Stack 2: [B, E, D], Stack 3: [C], Stack 4: [F] | Exploring action Move F from table to A | New state -> Stack 1: [A, F], Stack 2: [B, E, D, C] | Exploring action Move A from table to C | New state -> Stack 1: [B, E, D, C, A], Stack 2: [F] | Taking action Move E from D to table | Moved to state -> Stack 1: [A, F], Stack 2: [B, D], Stack 3: [C], Stack 4: [E] | Plan so far [Move A from C to table | Move F from E to A | Move E from D to table] | Exploring action Move D from B to table | New state -> Stack 1: [A, F], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Exploring action Move A from table to F | New state -> Invalid | Exploring action Move D from B to E | New state -> Stack 1: [A, F], Stack 2: [B], Stack 3: [C], Stack 4: [E, D] | Exploring action Move B from table to E | New state -> Invalid | Exploring action Move D from B to C | New state -> Stack 1: [A, F], Stack 2: [B], Stack 3: [C, D], Stack 4: [E] | Taking action Move A from table to C | Moved to state -> Stack 1: [B, E, D, C, A], Stack 2: [F] | Plan so far [Move F from E to table | Move E from D to table | Move D from B to table | Move E from table to B | Move D from table to E | Move A from C to table | Move C from table to D | Move A from table to C] | Exploring action Move F from table to A | New state -> Stack 1: [B, E, D, C, A, F] | Exploring action Move C from D to table | New state -> Invalid | Exploring action Move A from C to F | New state -> Stack 1: [B, E, D, C], Stack 2: [F, A] | Exploring action Move C from D to F | New state -> Invalid | Exploring action Move A from C to table | New state -> Stack 1: [A], Stack 2: [B, E, D, C], Stack 3: [F] | Taking action Move F from table to A | Moved to state -> Stack 1: [B, E, D, C, A, F] | Plan so far [Move F from E to table | Move E from D to table | Move D from B to table | Move E from table to B | Move D from table to E | Move A from C to table | Move C from table to D | Move A from table to C | Move F from table to A] | Reached goal state!",
        "system2_states_v1": 130
    },
    {
        "idx": 887,
        "start": [
            [
                "table",
                "D",
                "C",
                "E",
                "F",
                "B"
            ],
            [
                "table",
                "G",
                "A"
            ]
        ],
        "goal": [
            [
                "table",
                "C",
                "F",
                "D",
                "A",
                "E",
                "B"
            ],
            [
                "table",
                "G"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": true,
                "on": "G",
                "under": -1,
                "ontable": false
            },
            "B": {
                "clear": true,
                "on": "F",
                "under": -1,
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": "D",
                "under": "E",
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": -1,
                "under": "C",
                "ontable": true
            },
            "E": {
                "clear": false,
                "on": "C",
                "under": "F",
                "ontable": false
            },
            "F": {
                "clear": false,
                "on": "E",
                "under": "B",
                "ontable": false
            },
            "G": {
                "clear": false,
                "on": -1,
                "under": "A",
                "ontable": true
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": false,
                "on": "D",
                "under": "E",
                "ontable": false
            },
            "B": {
                "clear": true,
                "on": "E",
                "under": -1,
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": -1,
                "under": "F",
                "ontable": true
            },
            "D": {
                "clear": false,
                "on": "F",
                "under": "A",
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": "A",
                "under": "B",
                "ontable": false
            },
            "F": {
                "clear": false,
                "on": "C",
                "under": "D",
                "ontable": false
            },
            "G": {
                "clear": true,
                "on": -1,
                "under": -1,
                "ontable": true
            }
        },
        "plan_len": 10,
        "num_blocks": 7,
        "prompt": "The initial state:\nThe hand is empty.\nD is on the table. C is on D. E is on C. F is on E. B is on F. B is clear.\nG is on the table. A is on G. A is clear.\n\nThe goal is:\nC is on the table. F is on C. D is on F. A is on D. E is on A. B is on E. B is clear.\nG is on the table. G is clear.\n",
        "system1_plan": "Move A from G to table | Move B from F to table | Move F from E to table | Move E from C to table | Move C from D to table | Move F from table to C | Move D from table to F | Move A from table to D | Move E from table to A | Move B from table to E",
        "system1_states": 10,
        "system2_plan_v1": "Moved to state -> Stack 1: [D, C, E, F, B], Stack 2: [G, A] | Plan so far [] | Exploring action Move E from C to table | New state -> Invalid | Exploring action Move A from G to B | New state -> Stack 1: [D, C, E, F, B, A], Stack 2: [G] | Exploring action Move C from D to B | New state -> Invalid | Exploring action Move B from F to table | New state -> Stack 1: [B], Stack 2: [D, C, E, F], Stack 3: [G, A] | Exploring action Move A from G to table | New state -> Stack 1: [A], Stack 2: [D, C, E, F, B], Stack 3: [G] | Taking action Move A from G to table | Moved to state -> Stack 1: [A], Stack 2: [D, C, E, F, B], Stack 3: [G] | Plan so far [Move A from G to table] | Exploring action Move C from D to G | New state -> Invalid | Exploring action Move B from F to A | New state -> Stack 1: [A, B], Stack 2: [D, C, E, F], Stack 3: [G] | Exploring action Move A from table to B | New state -> Stack 1: [D, C, E, F, B, A], Stack 2: [G] | Exploring action Move F from E to G | New state -> Invalid | Exploring action Move B from F to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, C, E, F], Stack 4: [G] | Taking action Move B from F to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, C, E, F], Stack 4: [G] | Plan so far [Move A from G to table | Move B from F to table] | Exploring action Move F from E to B | New state -> Stack 1: [A], Stack 2: [B, F], Stack 3: [D, C, E], Stack 4: [G] | Exploring action Move F from E to A | New state -> Stack 1: [A, F], Stack 2: [B], Stack 3: [D, C, E], Stack 4: [G] | Exploring action Move D from table to B | New state -> Invalid | Exploring action Move F from E to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, C, E], Stack 4: [F], Stack 5: [G] | Exploring action Move E from C to G | New state -> Invalid | Taking action Move F from E to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, C, E], Stack 4: [F], Stack 5: [G] | Plan so far [Move A from G to table | Move B from F to table | Move F from E to table] | Exploring action Move B from table to E | New state -> Stack 1: [A], Stack 2: [D, C, E, B], Stack 3: [F], Stack 4: [G] | Exploring action Move E from C to F | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, C], Stack 4: [F, E], Stack 5: [G] | Exploring action Move C from D to G | New state -> Invalid | Exploring action Move E from C to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, C], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Taking action Move E from C to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, C], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Plan so far [Move A from G to table | Move B from F to table | Move F from E to table | Move E from C to table] | Exploring action Move C from D to E | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D], Stack 4: [E, C], Stack 5: [F], Stack 6: [G] | Exploring action Move C from D to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F], Stack 7: [G] | Exploring action Move D from table to A | New state -> Invalid | Exploring action Move D from table to C | New state -> Invalid | Exploring action Move C from D to A | New state -> Stack 1: [A, C], Stack 2: [B], Stack 3: [D], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Taking action Move C from D to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F], Stack 7: [G] | Plan so far [Move A from G to table | Move B from F to table | Move F from E to table | Move E from C to table | Move C from D to table] | Exploring action Move F from table to C | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, F], Stack 4: [D], Stack 5: [E], Stack 6: [G] | Exploring action Move B from table to E | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D], Stack 4: [E, B], Stack 5: [F], Stack 6: [G] | Exploring action Move A from table to D | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, A], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Taking action Move F from table to C | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, F], Stack 4: [D], Stack 5: [E], Stack 6: [G] | Plan so far [Move A from G to table | Move B from F to table | Move F from E to table | Move E from C to table | Move C from D to table | Move F from table to C] | Exploring action Move A from table to E | New state -> Stack 1: [B], Stack 2: [C, F], Stack 3: [D], Stack 4: [E, A], Stack 5: [G] | Exploring action Move D from table to F | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, F, D], Stack 4: [E], Stack 5: [G] | Exploring action Move C from table to E | New state -> Invalid | Exploring action Move C from table to F | New state -> Invalid | Exploring action Move B from table to E | New state -> Stack 1: [A], Stack 2: [C, F], Stack 3: [D], Stack 4: [E, B], Stack 5: [G] | Taking action Move D from table to F | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, F, D], Stack 4: [E], Stack 5: [G] | Plan so far [Move A from G to table | Move B from F to table | Move F from E to table | Move E from C to table | Move C from D to table | Move F from table to C | Move D from table to F] | Exploring action Move A from table to D | New state -> Stack 1: [B], Stack 2: [C, F, D, A], Stack 3: [E], Stack 4: [G] | Exploring action Move B from table to E | New state -> Stack 1: [A], Stack 2: [C, F, D], Stack 3: [E, B], Stack 4: [G] | Exploring action Move A from table to E | New state -> Stack 1: [B], Stack 2: [C, F, D], Stack 3: [E, A], Stack 4: [G] | Exploring action Move C from table to D | New state -> Invalid | Exploring action Move F from C to A | New state -> Invalid | Taking action Move A from table to D | Moved to state -> Stack 1: [B], Stack 2: [C, F, D, A], Stack 3: [E], Stack 4: [G] | Plan so far [Move A from G to table | Move B from F to table | Move F from E to table | Move E from C to table | Move C from D to table | Move F from table to C | Move D from table to F | Move A from table to D] | Exploring action Move B from table to E | New state -> Stack 1: [C, F, D, A], Stack 2: [E, B], Stack 3: [G] | Exploring action Move A from D to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, F, D], Stack 4: [E], Stack 5: [G] | Exploring action Move E from table to A | New state -> Stack 1: [B], Stack 2: [C, F, D, A, E], Stack 3: [G] | Exploring action Move C from table to B | New state -> Invalid | Taking action Move E from table to A | Moved to state -> Stack 1: [B], Stack 2: [C, F, D, A, E], Stack 3: [G] | Plan so far [Move A from G to table | Move B from F to table | Move F from E to table | Move E from C to table | Move C from D to table | Move F from table to C | Move D from table to F | Move A from table to D | Move E from table to A] | Exploring action Move B from table to E | New state -> Stack 1: [C, F, D, A, E, B], Stack 2: [G] | Exploring action Move E from A to table | New state -> Stack 1: [B], Stack 2: [C, F, D, A], Stack 3: [E], Stack 4: [G] | Exploring action Move G from table to B | New state -> Stack 1: [B, G], Stack 2: [C, F, D, A, E] | Exploring action Move C from table to B | New state -> Invalid | Taking action Move B from table to E | Moved to state -> Stack 1: [C, F, D, A, E, B], Stack 2: [G] | Plan so far [Move A from G to table | Move B from F to table | Move F from E to table | Move E from C to table | Move C from D to table | Move F from table to C | Move D from table to F | Move A from table to D | Move E from table to A | Move B from table to E] | Reached goal state!",
        "system2_states_v1": 45
    },
    {
        "idx": 611,
        "start": [
            [
                "table",
                "A"
            ],
            [
                "table",
                "E",
                "B",
                "C",
                "D"
            ]
        ],
        "goal": [
            [
                "table",
                "E",
                "A",
                "C",
                "B",
                "D"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": true,
                "on": -1,
                "under": -1,
                "ontable": true
            },
            "B": {
                "clear": false,
                "on": "E",
                "under": "C",
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": "B",
                "under": "D",
                "ontable": false
            },
            "D": {
                "clear": true,
                "on": "C",
                "under": -1,
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": -1,
                "under": "B",
                "ontable": true
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": false,
                "on": "E",
                "under": "C",
                "ontable": false
            },
            "B": {
                "clear": false,
                "on": "C",
                "under": "D",
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": "A",
                "under": "B",
                "ontable": false
            },
            "D": {
                "clear": true,
                "on": "B",
                "under": -1,
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": -1,
                "under": "A",
                "ontable": true
            }
        },
        "plan_len": 7,
        "num_blocks": 5,
        "prompt": "The initial state:\nThe hand is empty.\nA is on the table. A is clear.\nE is on the table. B is on E. C is on B. D is on C. D is clear.\n\nThe goal is:\nE is on the table. A is on E. C is on A. B is on C. D is on B. D is clear.\n",
        "system1_plan": "Move D from C to table | Move C from B to table | Move B from E to table | Move A from table to E | Move C from table to A | Move B from table to C | Move D from table to B",
        "system1_states": 7,
        "system2_plan_v1": "Moved to state -> Stack 1: [A], Stack 2: [E, B, C, D] | Plan so far [] | Exploring action Move C from B to A | New state -> Invalid | Exploring action Move D from C to A | New state -> Stack 1: [A, D], Stack 2: [E, B, C] | Exploring action Move C from B to D | New state -> Invalid | Exploring action Move A from table to D | New state -> Stack 1: [E, B, C, D, A] | Exploring action Move D from C to table | New state -> Stack 1: [A], Stack 2: [D], Stack 3: [E, B, C] | Taking action Move D from C to table | Moved to state -> Stack 1: [A], Stack 2: [D], Stack 3: [E, B, C] | Plan so far [Move D from C to table] | Exploring action Move C from B to A | New state -> Stack 1: [A, C], Stack 2: [D], Stack 3: [E, B] | Exploring action Move E from table to D | New state -> Invalid | Exploring action Move C from B to D | New state -> Stack 1: [A], Stack 2: [D, C], Stack 3: [E, B] | Exploring action Move C from B to table | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D], Stack 4: [E, B] | Taking action Move C from B to table | Moved to state -> Stack 1: [A], Stack 2: [C], Stack 3: [D], Stack 4: [E, B] | Plan so far [Move D from C to table | Move C from B to table] | Exploring action Move E from table to C | New state -> Invalid | Exploring action Move B from E to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Exploring action Move B from E to C | New state -> Stack 1: [A], Stack 2: [C, B], Stack 3: [D], Stack 4: [E] | Exploring action Move B from E to D | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, B], Stack 4: [E] | Taking action Move B from E to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Plan so far [Move D from C to table | Move C from B to table | Move B from E to table] | Exploring action Move D from table to B | New state -> Stack 1: [A], Stack 2: [B, D], Stack 3: [C], Stack 4: [E] | Exploring action Move A from table to E | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D], Stack 4: [E, A] | Exploring action Move A from table to D | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, A], Stack 4: [E] | Taking action Move A from table to E | Moved to state -> Stack 1: [B], Stack 2: [C], Stack 3: [D], Stack 4: [E, A] | Plan so far [Move D from C to table | Move C from B to table | Move B from E to table | Move A from table to E] | Exploring action Move D from table to B | New state -> Stack 1: [B, D], Stack 2: [C], Stack 3: [E, A] | Exploring action Move E from table to D | New state -> Invalid | Exploring action Move E from table to B | New state -> Invalid | Exploring action Move B from table to D | New state -> Stack 1: [C], Stack 2: [D, B], Stack 3: [E, A] | Exploring action Move C from table to A | New state -> Stack 1: [B], Stack 2: [D], Stack 3: [E, A, C] | Taking action Move C from table to A | Moved to state -> Stack 1: [B], Stack 2: [D], Stack 3: [E, A, C] | Plan so far [Move D from C to table | Move C from B to table | Move B from E to table | Move A from table to E | Move C from table to A] | Exploring action Move B from table to C | New state -> Stack 1: [D], Stack 2: [E, A, C, B] | Exploring action Move C from A to table | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D], Stack 4: [E, A] | Exploring action Move A from E to table | New state -> Invalid | Exploring action Move D from table to B | New state -> Stack 1: [B, D], Stack 2: [E, A, C] | Taking action Move B from table to C | Moved to state -> Stack 1: [D], Stack 2: [E, A, C, B] | Plan so far [Move D from C to table | Move C from B to table | Move B from E to table | Move A from table to E | Move C from table to A | Move B from table to C] | Exploring action Move A from E to table | New state -> Invalid | Exploring action Move B from C to D | New state -> Stack 1: [D, B], Stack 2: [E, A, C] | Exploring action Move B from C to table | New state -> Stack 1: [B], Stack 2: [D], Stack 3: [E, A, C] | Exploring action Move A from E to D | New state -> Invalid | Exploring action Move D from table to B | New state -> Stack 1: [E, A, C, B, D] | Taking action Move D from table to B | Moved to state -> Stack 1: [E, A, C, B, D] | Plan so far [Move D from C to table | Move C from B to table | Move B from E to table | Move A from table to E | Move C from table to A | Move B from table to C | Move D from table to B] | Reached goal state!",
        "system2_states_v1": 30
    },
    {
        "idx": 693,
        "start": [
            [
                "table",
                "B",
                "C",
                "D",
                "F",
                "E",
                "A"
            ]
        ],
        "goal": [
            [
                "table",
                "C",
                "B"
            ],
            [
                "table",
                "D",
                "A",
                "F"
            ],
            [
                "table",
                "E"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": true,
                "on": "E",
                "under": -1,
                "ontable": false
            },
            "B": {
                "clear": false,
                "on": -1,
                "under": "C",
                "ontable": true
            },
            "C": {
                "clear": false,
                "on": "B",
                "under": "D",
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": "C",
                "under": "F",
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": "F",
                "under": "A",
                "ontable": false
            },
            "F": {
                "clear": false,
                "on": "D",
                "under": "E",
                "ontable": false
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": false,
                "on": "D",
                "under": "F",
                "ontable": false
            },
            "B": {
                "clear": true,
                "on": "C",
                "under": -1,
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": -1,
                "under": "B",
                "ontable": true
            },
            "D": {
                "clear": false,
                "on": -1,
                "under": "A",
                "ontable": true
            },
            "E": {
                "clear": true,
                "on": -1,
                "under": -1,
                "ontable": true
            },
            "F": {
                "clear": true,
                "on": "A",
                "under": -1,
                "ontable": false
            }
        },
        "plan_len": 8,
        "num_blocks": 6,
        "prompt": "The initial state:\nThe hand is empty.\nB is on the table. C is on B. D is on C. F is on D. E is on F. A is on E. A is clear.\n\nThe goal is:\nC is on the table. B is on C. B is clear.\nD is on the table. A is on D. F is on A. F is clear.\nE is on the table. E is clear.\n",
        "system1_plan": "Move A from E to table | Move E from F to table | Move F from D to table | Move D from C to table | Move A from table to D | Move F from table to A | Move C from B to table | Move B from table to C",
        "system1_states": 8,
        "system2_plan_v1": "Moved to state -> Stack 1: [B, C, D, F, E, A] | Plan so far [] | Exploring action Move D from C to table | New state -> Invalid | Exploring action Move F from D to table | New state -> Invalid | Exploring action Move A from E to table | New state -> Stack 1: [A], Stack 2: [B, C, D, F, E] | Taking action Move A from E to table | Moved to state -> Stack 1: [A], Stack 2: [B, C, D, F, E] | Plan so far [Move A from E to table] | Exploring action Move D from C to A | New state -> Invalid | Exploring action Move E from F to table | New state -> Stack 1: [A], Stack 2: [B, C, D, F], Stack 3: [E] | Exploring action Move A from table to E | New state -> Stack 1: [B, C, D, F, E, A] | Exploring action Move E from F to A | New state -> Stack 1: [A, E], Stack 2: [B, C, D, F] | Taking action Move E from F to table | Moved to state -> Stack 1: [A], Stack 2: [B, C, D, F], Stack 3: [E] | Plan so far [Move A from E to table | Move E from F to table] | Exploring action Move F from D to table | New state -> Stack 1: [A], Stack 2: [B, C, D], Stack 3: [E], Stack 4: [F] | Exploring action Move C from B to F | New state -> Invalid | Exploring action Move B from table to F | New state -> Invalid | Exploring action Move F from D to A | New state -> Stack 1: [A, F], Stack 2: [B, C, D], Stack 3: [E] | Exploring action Move F from D to E | New state -> Stack 1: [A], Stack 2: [B, C, D], Stack 3: [E, F] | Taking action Move F from D to table | Moved to state -> Stack 1: [A], Stack 2: [B, C, D], Stack 3: [E], Stack 4: [F] | Plan so far [Move A from E to table | Move E from F to table | Move F from D to table] | Exploring action Move D from C to F | New state -> Stack 1: [A], Stack 2: [B, C], Stack 3: [E], Stack 4: [F, D] | Exploring action Move D from C to A | New state -> Stack 1: [A, D], Stack 2: [B, C], Stack 3: [E], Stack 4: [F] | Exploring action Move C from B to table | New state -> Invalid | Exploring action Move D from C to table | New state -> Stack 1: [A], Stack 2: [B, C], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Taking action Move F from D to A | Moved to state -> Stack 1: [A, F], Stack 2: [B, C, D], Stack 3: [E] | Plan so far [Move A from E to table | Move E from F to table | Move F from D to A] | Exploring action Move B from table to D | New state -> Invalid | Exploring action Move F from A to D | New state -> Stack 1: [A], Stack 2: [B, C, D, F], Stack 3: [E] | Exploring action Move D from C to table | New state -> Stack 1: [A, F], Stack 2: [B, C], Stack 3: [D], Stack 4: [E] | Exploring action Move F from A to table | New state -> Stack 1: [A], Stack 2: [B, C, D], Stack 3: [E], Stack 4: [F] | Taking action Move D from C to table | Moved to state -> Stack 1: [A], Stack 2: [B, C], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Plan so far [Move A from E to table | Move E from F to table | Move F from D to table | Move D from C to table] | Exploring action Move C from B to A | New state -> Stack 1: [A, C], Stack 2: [B], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Exploring action Move B from table to F | New state -> Invalid | Exploring action Move A from table to D | New state -> Stack 1: [B, C], Stack 2: [D, A], Stack 3: [E], Stack 4: [F] | Exploring action Move C from B to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Taking action Move D from C to table | Moved to state -> Stack 1: [A, F], Stack 2: [B, C], Stack 3: [D], Stack 4: [E] | Plan so far [Move A from E to table | Move E from F to table | Move F from D to A | Move D from C to table] | Exploring action Move C from B to table | New state -> Stack 1: [A, F], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Exploring action Move C from B to D | New state -> Stack 1: [A, F], Stack 2: [B], Stack 3: [D, C], Stack 4: [E] | Exploring action Move B from table to E | New state -> Invalid | Exploring action Move F from A to table | New state -> Stack 1: [A], Stack 2: [B, C], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Exploring action Move A from table to F | New state -> Invalid | Taking action Move A from table to D | Moved to state -> Stack 1: [B, C], Stack 2: [D, A], Stack 3: [E], Stack 4: [F] | Plan so far [Move A from E to table | Move E from F to table | Move F from D to table | Move D from C to table | Move A from table to D] | Exploring action Move C from B to A | New state -> Stack 1: [B], Stack 2: [D, A, C], Stack 3: [E], Stack 4: [F] | Exploring action Move F from table to A | New state -> Stack 1: [B, C], Stack 2: [D, A, F], Stack 3: [E] | Exploring action Move B from table to A | New state -> Invalid | Exploring action Move C from B to table | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, A], Stack 4: [E], Stack 5: [F] | Taking action Move F from table to A | Moved to state -> Stack 1: [B, C], Stack 2: [D, A, F], Stack 3: [E] | Plan so far [Move A from E to table | Move E from F to table | Move F from D to table | Move D from C to table | Move A from table to D | Move F from table to A] | Exploring action Move C from B to table | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, A, F], Stack 4: [E] | Exploring action Move C from B to F | New state -> Stack 1: [B], Stack 2: [D, A, F, C], Stack 3: [E] | Exploring action Move D from table to C | New state -> Invalid | Exploring action Move C from B to E | New state -> Stack 1: [B], Stack 2: [D, A, F], Stack 3: [E, C] | Exploring action Move A from D to F | New state -> Invalid | Taking action Move C from B to table | Moved to state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, A, F], Stack 4: [E] | Plan so far [Move A from E to table | Move E from F to table | Move F from D to table | Move D from C to table | Move A from table to D | Move F from table to A | Move C from B to table] | Exploring action Move A from D to E | New state -> Invalid | Exploring action Move C from table to B | New state -> Stack 1: [B, C], Stack 2: [D, A, F], Stack 3: [E] | Exploring action Move B from table to F | New state -> Stack 1: [C], Stack 2: [D, A, F, B], Stack 3: [E] | Exploring action Move B from table to C | New state -> Stack 1: [C, B], Stack 2: [D, A, F], Stack 3: [E] | Taking action Move B from table to C | Moved to state -> Stack 1: [C, B], Stack 2: [D, A, F], Stack 3: [E] | Plan so far [Move A from E to table | Move E from F to table | Move F from D to table | Move D from C to table | Move A from table to D | Move F from table to A | Move C from B to table | Move B from table to C] | Reached goal state!",
        "system2_states_v1": 42
    },
    {
        "idx": 814,
        "start": [
            [
                "table",
                "A",
                "B",
                "C"
            ],
            [
                "table",
                "F",
                "E"
            ],
            [
                "table",
                "G",
                "D"
            ]
        ],
        "goal": [
            [
                "table",
                "A",
                "C",
                "B",
                "F",
                "D",
                "E",
                "G"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": false,
                "on": -1,
                "under": "B",
                "ontable": true
            },
            "B": {
                "clear": false,
                "on": "A",
                "under": "C",
                "ontable": false
            },
            "C": {
                "clear": true,
                "on": "B",
                "under": -1,
                "ontable": false
            },
            "D": {
                "clear": true,
                "on": "G",
                "under": -1,
                "ontable": false
            },
            "E": {
                "clear": true,
                "on": "F",
                "under": -1,
                "ontable": false
            },
            "F": {
                "clear": false,
                "on": -1,
                "under": "E",
                "ontable": true
            },
            "G": {
                "clear": false,
                "on": -1,
                "under": "D",
                "ontable": true
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": false,
                "on": -1,
                "under": "C",
                "ontable": true
            },
            "B": {
                "clear": false,
                "on": "C",
                "under": "F",
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": "A",
                "under": "B",
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": "F",
                "under": "E",
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": "D",
                "under": "G",
                "ontable": false
            },
            "F": {
                "clear": false,
                "on": "B",
                "under": "D",
                "ontable": false
            },
            "G": {
                "clear": true,
                "on": "E",
                "under": -1,
                "ontable": false
            }
        },
        "plan_len": 9,
        "num_blocks": 7,
        "prompt": "The initial state:\nThe hand is empty.\nA is on the table. B is on A. C is on B. C is clear.\nF is on the table. E is on F. E is clear.\nG is on the table. D is on G. D is clear.\n\nThe goal is:\nA is on the table. C is on A. B is on C. F is on B. D is on F. E is on D. G is on E. G is clear.\n",
        "system1_plan": "Move C from B to table | Move B from A to table | Move C from table to A | Move B from table to C | Move E from F to table | Move F from table to B | Move D from G to F | Move E from table to D | Move G from table to E",
        "system1_states": 9,
        "system2_plan_v1": "Moved to state -> Stack 1: [A, B, C], Stack 2: [F, E], Stack 3: [G, D] | Plan so far [] | Exploring action Move C from B to table | New state -> Stack 1: [A, B], Stack 2: [C], Stack 3: [F, E], Stack 4: [G, D] | Exploring action Move E from F to table | New state -> Stack 1: [A, B, C], Stack 2: [E], Stack 3: [F], Stack 4: [G, D] | Exploring action Move A from table to C | New state -> Invalid | Exploring action Move D from G to table | New state -> Stack 1: [A, B, C], Stack 2: [D], Stack 3: [F, E], Stack 4: [G] | Taking action Move C from B to table | Moved to state -> Stack 1: [A, B], Stack 2: [C], Stack 3: [F, E], Stack 4: [G, D] | Plan so far [Move C from B to table] | Exploring action Move E from F to table | New state -> Stack 1: [A, B], Stack 2: [C], Stack 3: [E], Stack 4: [F], Stack 5: [G, D] | Exploring action Move D from G to table | New state -> Stack 1: [A, B], Stack 2: [C], Stack 3: [D], Stack 4: [F, E], Stack 5: [G] | Exploring action Move G from table to C | New state -> Invalid | Exploring action Move B from A to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [F, E], Stack 5: [G, D] | Exploring action Move F from table to B | New state -> Invalid | Taking action Move E from F to table | Moved to state -> Stack 1: [A, B, C], Stack 2: [E], Stack 3: [F], Stack 4: [G, D] | Plan so far [Move E from F to table] | Exploring action Move D from G to table | New state -> Stack 1: [A, B, C], Stack 2: [D], Stack 3: [E], Stack 4: [F], Stack 5: [G] | Exploring action Move C from B to E | New state -> Stack 1: [A, B], Stack 2: [E, C], Stack 3: [F], Stack 4: [G, D] | Exploring action Move A from table to F | New state -> Invalid | Exploring action Move B from A to C | New state -> Invalid | Exploring action Move C from B to table | New state -> Stack 1: [A, B], Stack 2: [C], Stack 3: [E], Stack 4: [F], Stack 5: [G, D] | Taking action Move D from G to table | Moved to state -> Stack 1: [A, B, C], Stack 2: [D], Stack 3: [F, E], Stack 4: [G] | Plan so far [Move D from G to table] | Exploring action Move F from table to E | New state -> Invalid | Exploring action Move E from F to table | New state -> Stack 1: [A, B, C], Stack 2: [D], Stack 3: [E], Stack 4: [F], Stack 5: [G] | Exploring action Move A from table to G | New state -> Invalid | Exploring action Move C from B to E | New state -> Stack 1: [A, B], Stack 2: [D], Stack 3: [F, E, C], Stack 4: [G] | Exploring action Move C from B to table | New state -> Stack 1: [A, B], Stack 2: [C], Stack 3: [D], Stack 4: [F, E], Stack 5: [G] | Taking action Move D from G to table | Moved to state -> Stack 1: [A, B, C], Stack 2: [D], Stack 3: [E], Stack 4: [F], Stack 5: [G] | Plan so far [Move E from F to table | Move D from G to table] | Exploring action Move C from B to E | New state -> Stack 1: [A, B], Stack 2: [D], Stack 3: [E, C], Stack 4: [F], Stack 5: [G] | Exploring action Move A from table to C | New state -> Invalid | Exploring action Move C from B to table | New state -> Stack 1: [A, B], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Exploring action Move A from table to F | New state -> Invalid | Exploring action Move C from B to D | New state -> Stack 1: [A, B], Stack 2: [D, C], Stack 3: [E], Stack 4: [F], Stack 5: [G] | Taking action Move E from F to table | Moved to state -> Stack 1: [A, B], Stack 2: [C], Stack 3: [E], Stack 4: [F], Stack 5: [G, D] | Plan so far [Move C from B to table | Move E from F to table] | Exploring action Move B from A to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [E], Stack 5: [F], Stack 6: [G, D] | Exploring action Move A from table to C | New state -> Invalid | Exploring action Move B from A to D | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [E], Stack 4: [F], Stack 5: [G, D, B] | Exploring action Move A from table to F | New state -> Invalid | Exploring action Move D from G to table | New state -> Stack 1: [A, B], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Taking action Move C from B to table | Moved to state -> Stack 1: [A, B], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Plan so far [Move E from F to table | Move D from G to table | Move C from B to table] | Exploring action Move A from table to F | New state -> Invalid | Exploring action Move B from A to D | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, B], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Exploring action Move A from table to C | New state -> Invalid | Exploring action Move B from A to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F], Stack 7: [G] | Exploring action Move G from table to E | New state -> Stack 1: [A, B], Stack 2: [C], Stack 3: [D], Stack 4: [E, G], Stack 5: [F] | Taking action Move C from B to table | Moved to state -> Stack 1: [A, B], Stack 2: [C], Stack 3: [E], Stack 4: [F], Stack 5: [G, D] | Plan so far [Move E from F to table | Move C from B to table] | Taking action Move E from F to table | Moved to state -> Stack 1: [A, B, C], Stack 2: [D], Stack 3: [E], Stack 4: [F], Stack 5: [G] | Plan so far [Move D from G to table | Move E from F to table] | Taking action Move B from A to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F], Stack 7: [G] | Plan so far [Move E from F to table | Move D from G to table | Move C from B to table | Move B from A to table] | Exploring action Move C from table to A | New state -> Stack 1: [A, C], Stack 2: [B], Stack 3: [D], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Exploring action Move G from table to E | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E, G], Stack 6: [F] | Exploring action Move A from table to B | New state -> Stack 1: [B, A], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Taking action Move B from A to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [F, E], Stack 5: [G, D] | Plan so far [Move C from B to table | Move B from A to table] | Exploring action Move G from table to D | New state -> Invalid | Exploring action Move E from F to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [E], Stack 5: [F], Stack 6: [G, D] | Exploring action Move D from G to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [F, E], Stack 6: [G] | Exploring action Move F from table to D | New state -> Invalid | Exploring action Move C from table to A | New state -> Stack 1: [A, C], Stack 2: [B], Stack 3: [F, E], Stack 4: [G, D] | Taking action Move C from B to table | Moved to state -> Stack 1: [A, B], Stack 2: [C], Stack 3: [D], Stack 4: [F, E], Stack 5: [G] | Plan so far [Move D from G to table | Move C from B to table] | Exploring action Move A from table to E | New state -> Invalid | Exploring action Move B from A to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [F, E], Stack 6: [G] | Exploring action Move E from F to table | New state -> Stack 1: [A, B], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Exploring action Move B from A to D | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, B], Stack 4: [F, E], Stack 5: [G] | Exploring action Move A from table to C | New state -> Invalid | Taking action Move D from G to table | Moved to state -> Stack 1: [A, B], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Plan so far [Move C from B to table | Move E from F to table | Move D from G to table] | Taking action Move E from F to table | Moved to state -> Stack 1: [A, B], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Plan so far [Move D from G to table | Move C from B to table | Move E from F to table] | Taking action Move C from table to A | Moved to state -> Stack 1: [A, C], Stack 2: [B], Stack 3: [F, E], Stack 4: [G, D] | Plan so far [Move C from B to table | Move B from A to table | Move C from table to A] | Exploring action Move B from table to C | New state -> Stack 1: [A, C, B], Stack 2: [F, E], Stack 3: [G, D] | Exploring action Move D from G to table | New state -> Stack 1: [A, C], Stack 2: [B], Stack 3: [D], Stack 4: [F, E], Stack 5: [G] | Exploring action Move E from F to table | New state -> Stack 1: [A, C], Stack 2: [B], Stack 3: [E], Stack 4: [F], Stack 5: [G, D] | Exploring action Move A from table to D | New state -> Invalid | Exploring action Move G from table to E | New state -> Invalid | Taking action Move E from F to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [E], Stack 5: [F], Stack 6: [G, D] | Plan so far [Move C from B to table | Move B from A to table | Move E from F to table] | Exploring action Move G from table to D | New state -> Invalid | Exploring action Move C from table to A | New state -> Stack 1: [A, C], Stack 2: [B], Stack 3: [E], Stack 4: [F], Stack 5: [G, D] | Exploring action Move G from table to A | New state -> Invalid | Exploring action Move D from G to E | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [E, D], Stack 5: [F], Stack 6: [G] | Exploring action Move D from G to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F], Stack 7: [G] | Taking action Move B from table to C | Moved to state -> Stack 1: [A, C, B], Stack 2: [F, E], Stack 3: [G, D] | Plan so far [Move C from B to table | Move B from A to table | Move C from table to A | Move B from table to C] | Exploring action Move F from table to E | New state -> Invalid | Exploring action Move D from G to E | New state -> Stack 1: [A, C, B], Stack 2: [F, E, D], Stack 3: [G] | Exploring action Move D from G to table | New state -> Stack 1: [A, C, B], Stack 2: [D], Stack 3: [F, E], Stack 4: [G] | Exploring action Move E from F to table | New state -> Stack 1: [A, C, B], Stack 2: [E], Stack 3: [F], Stack 4: [G, D] | Exploring action Move A from table to E | New state -> Invalid | Taking action Move D from G to table | Moved to state -> Stack 1: [A, C], Stack 2: [B], Stack 3: [D], Stack 4: [F, E], Stack 5: [G] | Plan so far [Move C from B to table | Move B from A to table | Move C from table to A | Move D from G to table] | Exploring action Move E from F to B | New state -> Stack 1: [A, C], Stack 2: [B, E], Stack 3: [D], Stack 4: [F], Stack 5: [G] | Exploring action Move A from table to E | New state -> Invalid | Exploring action Move B from table to C | New state -> Stack 1: [A, C, B], Stack 2: [D], Stack 3: [F, E], Stack 4: [G] | Exploring action Move E from F to table | New state -> Stack 1: [A, C], Stack 2: [B], Stack 3: [D], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Exploring action Move A from table to D | New state -> Invalid | Taking action Move D from G to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F], Stack 7: [G] | Plan so far [Move C from B to table | Move B from A to table | Move E from F to table | Move D from G to table] | Taking action Move D from G to table | Moved to state -> Stack 1: [A, C, B], Stack 2: [D], Stack 3: [F, E], Stack 4: [G] | Plan so far [Move C from B to table | Move B from A to table | Move C from table to A | Move B from table to C | Move D from G to table] | Exploring action Move E from F to B | New state -> Stack 1: [A, C, B, E], Stack 2: [D], Stack 3: [F], Stack 4: [G] | Exploring action Move E from F to table | New state -> Stack 1: [A, C, B], Stack 2: [D], Stack 3: [E], Stack 4: [F], Stack 5: [G] | Exploring action Move C from A to D | New state -> Invalid | Exploring action Move G from table to E | New state -> Stack 1: [A, C, B], Stack 2: [D], Stack 3: [F, E, G] | Taking action Move E from F to table | Moved to state -> Stack 1: [A, C, B], Stack 2: [E], Stack 3: [F], Stack 4: [G, D] | Plan so far [Move C from B to table | Move B from A to table | Move C from table to A | Move B from table to C | Move E from F to table] | Exploring action Move G from table to B | New state -> Invalid | Exploring action Move D from G to table | New state -> Stack 1: [A, C, B], Stack 2: [D], Stack 3: [E], Stack 4: [F], Stack 5: [G] | Exploring action Move D from G to E | New state -> Stack 1: [A, C, B], Stack 2: [E, D], Stack 3: [F], Stack 4: [G] | Exploring action Move F from table to B | New state -> Stack 1: [A, C, B, F], Stack 2: [E], Stack 3: [G, D] | Taking action Move B from table to C | Moved to state -> Stack 1: [A, C, B], Stack 2: [D], Stack 3: [F, E], Stack 4: [G] | Plan so far [Move C from B to table | Move B from A to table | Move C from table to A | Move D from G to table | Move B from table to C] | Taking action Move E from F to table | Moved to state -> Stack 1: [A, C], Stack 2: [B], Stack 3: [E], Stack 4: [F], Stack 5: [G, D] | Plan so far [Move C from B to table | Move B from A to table | Move C from table to A | Move E from F to table] | Exploring action Move B from table to C | New state -> Stack 1: [A, C, B], Stack 2: [E], Stack 3: [F], Stack 4: [G, D] | Exploring action Move D from G to C | New state -> Stack 1: [A, C, D], Stack 2: [B], Stack 3: [E], Stack 4: [F], Stack 5: [G] | Exploring action Move G from table to C | New state -> Invalid | Exploring action Move D from G to table | New state -> Stack 1: [A, C], Stack 2: [B], Stack 3: [D], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Taking action Move C from table to A | Moved to state -> Stack 1: [A, C], Stack 2: [B], Stack 3: [E], Stack 4: [F], Stack 5: [G, D] | Plan so far [Move C from B to table | Move B from A to table | Move E from F to table | Move C from table to A] | Taking action Move B from A to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [F, E], Stack 6: [G] | Plan so far [Move D from G to table | Move C from B to table | Move B from A to table] | Exploring action Move E from F to C | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, E], Stack 4: [D], Stack 5: [F], Stack 6: [G] | Exploring action Move E from F to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F], Stack 7: [G] | Exploring action Move C from table to A | New state -> Stack 1: [A, C], Stack 2: [B], Stack 3: [D], Stack 4: [F, E], Stack 5: [G] | Exploring action Move F from table to C | New state -> Invalid | Taking action Move D from G to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [F, E], Stack 6: [G] | Plan so far [Move C from B to table | Move B from A to table | Move D from G to table] | Taking action Move D from G to table | Moved to state -> Stack 1: [A, B], Stack 2: [C], Stack 3: [D], Stack 4: [F, E], Stack 5: [G] | Plan so far [Move C from B to table | Move D from G to table] | Taking action Move C from table to A | Moved to state -> Stack 1: [A, C], Stack 2: [B], Stack 3: [D], Stack 4: [F, E], Stack 5: [G] | Plan so far [Move D from G to table | Move C from B to table | Move B from A to table | Move C from table to A] | Taking action Move E from F to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F], Stack 7: [G] | Plan so far [Move D from G to table | Move C from B to table | Move B from A to table | Move E from F to table] | Taking action Move D from G to table | Moved to state -> Stack 1: [A, C, B], Stack 2: [D], Stack 3: [E], Stack 4: [F], Stack 5: [G] | Plan so far [Move C from B to table | Move B from A to table | Move C from table to A | Move B from table to C | Move E from F to table | Move D from G to table] | Exploring action Move F from table to B | New state -> Stack 1: [A, C, B, F], Stack 2: [D], Stack 3: [E], Stack 4: [G] | Exploring action Move A from table to B | New state -> Invalid | Exploring action Move C from A to D | New state -> Invalid | Exploring action Move G from table to E | New state -> Stack 1: [A, C, B], Stack 2: [D], Stack 3: [E, G], Stack 4: [F] | Exploring action Move B from C to table | New state -> Stack 1: [A, C], Stack 2: [B], Stack 3: [D], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Taking action Move D from G to table | Moved to state -> Stack 1: [A, C], Stack 2: [B], Stack 3: [D], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Plan so far [Move C from B to table | Move B from A to table | Move C from table to A | Move E from F to table | Move D from G to table] | Exploring action Move G from table to E | New state -> Stack 1: [A, C], Stack 2: [B], Stack 3: [D], Stack 4: [E, G], Stack 5: [F] | Exploring action Move B from table to C | New state -> Stack 1: [A, C, B], Stack 2: [D], Stack 3: [E], Stack 4: [F], Stack 5: [G] | Exploring action Move B from table to E | New state -> Stack 1: [A, C], Stack 2: [D], Stack 3: [E, B], Stack 4: [F], Stack 5: [G] | Exploring action Move A from table to D | New state -> Invalid | Taking action Move F from table to B | Moved to state -> Stack 1: [A, C, B, F], Stack 2: [E], Stack 3: [G, D] | Plan so far [Move C from B to table | Move B from A to table | Move C from table to A | Move B from table to C | Move E from F to table | Move F from table to B] | Exploring action Move G from table to F | New state -> Invalid | Exploring action Move C from A to D | New state -> Invalid | Exploring action Move D from G to F | New state -> Stack 1: [A, C, B, F, D], Stack 2: [E], Stack 3: [G] | Exploring action Move D from G to table | New state -> Stack 1: [A, C, B, F], Stack 2: [D], Stack 3: [E], Stack 4: [G] | Exploring action Move D from G to E | New state -> Stack 1: [A, C, B, F], Stack 2: [E, D], Stack 3: [G] | Taking action Move D from G to F | Moved to state -> Stack 1: [A, C, B, F, D], Stack 2: [E], Stack 3: [G] | Plan so far [Move C from B to table | Move B from A to table | Move C from table to A | Move B from table to C | Move E from F to table | Move F from table to B | Move D from G to F] | Exploring action Move E from table to D | New state -> Stack 1: [A, C, B, F, D, E], Stack 2: [G] | Exploring action Move G from table to E | New state -> Stack 1: [A, C, B, F, D], Stack 2: [E, G] | Exploring action Move G from table to D | New state -> Stack 1: [A, C, B, F, D, G], Stack 2: [E] | Exploring action Move A from table to D | New state -> Invalid | Taking action Move E from table to D | Moved to state -> Stack 1: [A, C, B, F, D, E], Stack 2: [G] | Plan so far [Move C from B to table | Move B from A to table | Move C from table to A | Move B from table to C | Move E from F to table | Move F from table to B | Move D from G to F | Move E from table to D] | Exploring action Move F from B to E | New state -> Invalid | Exploring action Move G from table to E | New state -> Stack 1: [A, C, B, F, D, E, G] | Exploring action Move C from A to G | New state -> Invalid | Exploring action Move E from D to G | New state -> Stack 1: [A, C, B, F, D], Stack 2: [G, E] | Exploring action Move E from D to table | New state -> Stack 1: [A, C, B, F, D], Stack 2: [E], Stack 3: [G] | Taking action Move G from table to E | Moved to state -> Stack 1: [A, C, B, F, D, E, G] | Plan so far [Move C from B to table | Move B from A to table | Move C from table to A | Move B from table to C | Move E from F to table | Move F from table to B | Move D from G to F | Move E from table to D | Move G from table to E] | Reached goal state!",
        "system2_states_v1": 106
    },
    {
        "idx": 714,
        "start": [
            [
                "table",
                "C",
                "F"
            ],
            [
                "table",
                "D",
                "E",
                "B",
                "A"
            ]
        ],
        "goal": [
            [
                "table",
                "B",
                "A",
                "D",
                "C",
                "E"
            ],
            [
                "table",
                "F"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": true,
                "on": "B",
                "under": -1,
                "ontable": false
            },
            "B": {
                "clear": false,
                "on": "E",
                "under": "A",
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": -1,
                "under": "F",
                "ontable": true
            },
            "D": {
                "clear": false,
                "on": -1,
                "under": "E",
                "ontable": true
            },
            "E": {
                "clear": false,
                "on": "D",
                "under": "B",
                "ontable": false
            },
            "F": {
                "clear": true,
                "on": "C",
                "under": -1,
                "ontable": false
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": false,
                "on": "B",
                "under": "D",
                "ontable": false
            },
            "B": {
                "clear": false,
                "on": -1,
                "under": "A",
                "ontable": true
            },
            "C": {
                "clear": false,
                "on": "D",
                "under": "E",
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": "A",
                "under": "C",
                "ontable": false
            },
            "E": {
                "clear": true,
                "on": "C",
                "under": -1,
                "ontable": false
            },
            "F": {
                "clear": true,
                "on": -1,
                "under": -1,
                "ontable": true
            }
        },
        "plan_len": 8,
        "num_blocks": 6,
        "prompt": "The initial state:\nThe hand is empty.\nC is on the table. F is on C. F is clear.\nD is on the table. E is on D. B is on E. A is on B. A is clear.\n\nThe goal is:\nB is on the table. A is on B. D is on A. C is on D. E is on C. E is clear.\nF is on the table. F is clear.\n",
        "system1_plan": "Move F from C to table | Move A from B to table | Move B from E to table | Move A from table to B | Move E from D to table | Move D from table to A | Move C from table to D | Move E from table to C",
        "system1_states": 8,
        "system2_plan_v1": "Moved to state -> Stack 1: [C, F], Stack 2: [D, E, B, A] | Plan so far [] | Exploring action Move A from B to F | New state -> Stack 1: [C, F, A], Stack 2: [D, E, B] | Exploring action Move E from D to F | New state -> Invalid | Exploring action Move C from table to F | New state -> Invalid | Exploring action Move A from B to table | New state -> Stack 1: [A], Stack 2: [C, F], Stack 3: [D, E, B] | Exploring action Move F from C to table | New state -> Stack 1: [C], Stack 2: [D, E, B, A], Stack 3: [F] | Taking action Move F from C to table | Moved to state -> Stack 1: [C], Stack 2: [D, E, B, A], Stack 3: [F] | Plan so far [Move F from C to table] | Exploring action Move A from B to C | New state -> Stack 1: [C, A], Stack 2: [D, E, B], Stack 3: [F] | Exploring action Move D from table to C | New state -> Invalid | Exploring action Move B from E to table | New state -> Invalid | Exploring action Move A from B to F | New state -> Stack 1: [C], Stack 2: [D, E, B], Stack 3: [F, A] | Exploring action Move A from B to table | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, E, B], Stack 4: [F] | Taking action Move A from B to table | Moved to state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, E, B], Stack 4: [F] | Plan so far [Move F from C to table | Move A from B to table] | Exploring action Move B from E to A | New state -> Stack 1: [A, B], Stack 2: [C], Stack 3: [D, E], Stack 4: [F] | Exploring action Move E from D to A | New state -> Invalid | Exploring action Move B from E to C | New state -> Stack 1: [A], Stack 2: [C, B], Stack 3: [D, E], Stack 4: [F] | Exploring action Move B from E to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D, E], Stack 5: [F] | Exploring action Move D from table to F | New state -> Invalid | Taking action Move B from E to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D, E], Stack 5: [F] | Plan so far [Move F from C to table | Move A from B to table | Move B from E to table] | Exploring action Move E from D to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Exploring action Move A from table to B | New state -> Stack 1: [B, A], Stack 2: [C], Stack 3: [D, E], Stack 4: [F] | Exploring action Move E from D to C | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, E], Stack 4: [D], Stack 5: [F] | Exploring action Move D from table to E | New state -> Invalid | Taking action Move A from table to B | Moved to state -> Stack 1: [B, A], Stack 2: [C], Stack 3: [D, E], Stack 4: [F] | Plan so far [Move F from C to table | Move A from B to table | Move B from E to table | Move A from table to B] | Exploring action Move B from table to F | New state -> Invalid | Exploring action Move E from D to A | New state -> Stack 1: [B, A, E], Stack 2: [C], Stack 3: [D], Stack 4: [F] | Exploring action Move E from D to C | New state -> Stack 1: [B, A], Stack 2: [C, E], Stack 3: [D], Stack 4: [F] | Exploring action Move E from D to table | New state -> Stack 1: [B, A], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Exploring action Move D from table to E | New state -> Invalid | Taking action Move E from D to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Plan so far [Move F from C to table | Move A from B to table | Move B from E to table | Move E from D to table] | Exploring action Move A from table to B | New state -> Stack 1: [B, A], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Exploring action Move A from table to D | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, A], Stack 4: [E], Stack 5: [F] | Exploring action Move E from table to C | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, E], Stack 4: [D], Stack 5: [F] | Taking action Move E from D to table | Moved to state -> Stack 1: [B, A], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Plan so far [Move F from C to table | Move A from B to table | Move B from E to table | Move A from table to B | Move E from D to table] | Exploring action Move B from table to F | New state -> Invalid | Exploring action Move D from table to A | New state -> Stack 1: [B, A, D], Stack 2: [C], Stack 3: [E], Stack 4: [F] | Exploring action Move E from table to C | New state -> Stack 1: [B, A], Stack 2: [C, E], Stack 3: [D], Stack 4: [F] | Exploring action Move C from table to A | New state -> Stack 1: [B, A, C], Stack 2: [D], Stack 3: [E], Stack 4: [F] | Taking action Move E from D to C | Moved to state -> Stack 1: [B, A], Stack 2: [C, E], Stack 3: [D], Stack 4: [F] | Plan so far [Move F from C to table | Move A from B to table | Move B from E to table | Move A from table to B | Move E from D to C] | Exploring action Move C from table to E | New state -> Invalid | Exploring action Move C from table to F | New state -> Invalid | Exploring action Move D from table to A | New state -> Stack 1: [B, A, D], Stack 2: [C, E], Stack 3: [F] | Exploring action Move E from C to table | New state -> Stack 1: [B, A], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Exploring action Move E from C to D | New state -> Stack 1: [B, A], Stack 2: [C], Stack 3: [D, E], Stack 4: [F] | Taking action Move A from table to B | Moved to state -> Stack 1: [B, A], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Plan so far [Move F from C to table | Move A from B to table | Move B from E to table | Move E from D to table | Move A from table to B] | Taking action Move D from table to A | Moved to state -> Stack 1: [B, A, D], Stack 2: [C, E], Stack 3: [F] | Plan so far [Move F from C to table | Move A from B to table | Move B from E to table | Move A from table to B | Move E from D to C | Move D from table to A] | Exploring action Move E from C to table | New state -> Stack 1: [B, A, D], Stack 2: [C], Stack 3: [E], Stack 4: [F] | Exploring action Move D from A to table | New state -> Stack 1: [B, A], Stack 2: [C, E], Stack 3: [D], Stack 4: [F] | Exploring action Move E from C to D | New state -> Stack 1: [B, A, D, E], Stack 2: [C], Stack 3: [F] | Exploring action Move A from B to table | New state -> Invalid | Exploring action Move A from B to E | New state -> Invalid | Taking action Move E from D to C | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, E], Stack 4: [D], Stack 5: [F] | Plan so far [Move F from C to table | Move A from B to table | Move B from E to table | Move E from D to C] | Exploring action Move E from C to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Exploring action Move A from table to B | New state -> Stack 1: [B, A], Stack 2: [C, E], Stack 3: [D], Stack 4: [F] | Exploring action Move C from table to A | New state -> Invalid | Exploring action Move E from C to A | New state -> Stack 1: [A, E], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [F] | Taking action Move D from table to A | Moved to state -> Stack 1: [B, A, D], Stack 2: [C], Stack 3: [E], Stack 4: [F] | Plan so far [Move F from C to table | Move A from B to table | Move B from E to table | Move A from table to B | Move E from D to table | Move D from table to A] | Exploring action Move B from table to E | New state -> Invalid | Exploring action Move E from table to C | New state -> Stack 1: [B, A, D], Stack 2: [C, E], Stack 3: [F] | Exploring action Move C from table to D | New state -> Stack 1: [B, A, D, C], Stack 2: [E], Stack 3: [F] | Exploring action Move C from table to E | New state -> Stack 1: [B, A, D], Stack 2: [E, C], Stack 3: [F] | Exploring action Move B from table to F | New state -> Invalid | Taking action Move A from table to B | Moved to state -> Stack 1: [B, A], Stack 2: [C, E], Stack 3: [D], Stack 4: [F] | Plan so far [Move F from C to table | Move A from B to table | Move B from E to table | Move E from D to C | Move A from table to B] | Taking action Move C from table to D | Moved to state -> Stack 1: [B, A, D, C], Stack 2: [E], Stack 3: [F] | Plan so far [Move F from C to table | Move A from B to table | Move B from E to table | Move A from table to B | Move E from D to table | Move D from table to A | Move C from table to D] | Exploring action Move A from B to F | New state -> Invalid | Exploring action Move E from table to C | New state -> Stack 1: [B, A, D, C, E], Stack 2: [F] | Exploring action Move B from table to C | New state -> Invalid | Exploring action Move C from D to table | New state -> Stack 1: [B, A, D], Stack 2: [C], Stack 3: [E], Stack 4: [F] | Exploring action Move F from table to C | New state -> Stack 1: [B, A, D, C, F], Stack 2: [E] | Taking action Move E from table to C | Moved to state -> Stack 1: [B, A, D, C, E], Stack 2: [F] | Plan so far [Move F from C to table | Move A from B to table | Move B from E to table | Move A from table to B | Move E from D to table | Move D from table to A | Move C from table to D | Move E from table to C] | Reached goal state!",
        "system2_states_v1": 55
    },
    {
        "idx": 907,
        "start": [
            [
                "table",
                "A",
                "B",
                "F"
            ],
            [
                "table",
                "E",
                "D",
                "G",
                "C"
            ]
        ],
        "goal": [
            [
                "table",
                "A",
                "F",
                "B",
                "E",
                "D"
            ],
            [
                "table",
                "G",
                "C"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": false,
                "on": -1,
                "under": "B",
                "ontable": true
            },
            "B": {
                "clear": false,
                "on": "A",
                "under": "F",
                "ontable": false
            },
            "C": {
                "clear": true,
                "on": "G",
                "under": -1,
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": "E",
                "under": "G",
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": -1,
                "under": "D",
                "ontable": true
            },
            "F": {
                "clear": true,
                "on": "B",
                "under": -1,
                "ontable": false
            },
            "G": {
                "clear": false,
                "on": "D",
                "under": "C",
                "ontable": false
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": false,
                "on": -1,
                "under": "F",
                "ontable": true
            },
            "B": {
                "clear": false,
                "on": "F",
                "under": "E",
                "ontable": false
            },
            "C": {
                "clear": true,
                "on": "G",
                "under": -1,
                "ontable": false
            },
            "D": {
                "clear": true,
                "on": "E",
                "under": -1,
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": "B",
                "under": "D",
                "ontable": false
            },
            "F": {
                "clear": false,
                "on": "A",
                "under": "B",
                "ontable": false
            },
            "G": {
                "clear": false,
                "on": -1,
                "under": "C",
                "ontable": true
            }
        },
        "plan_len": 10,
        "num_blocks": 7,
        "prompt": "The initial state:\nThe hand is empty.\nA is on the table. B is on A. F is on B. F is clear.\nE is on the table. D is on E. G is on D. C is on G. C is clear.\n\nThe goal is:\nA is on the table. F is on A. B is on F. E is on B. D is on E. D is clear.\nG is on the table. C is on G. C is clear.\n",
        "system1_plan": "Move F from B to table | Move C from G to table | Move G from D to table | Move C from table to G | Move B from A to table | Move F from table to A | Move B from table to F | Move D from E to table | Move E from table to B | Move D from table to E",
        "system1_states": 10,
        "system2_plan_v1": "Moved to state -> Stack 1: [A, B, F], Stack 2: [E, D, G, C] | Plan so far [] | Exploring action Move F from B to table | New state -> Stack 1: [A, B], Stack 2: [E, D, G, C], Stack 3: [F] | Exploring action Move C from G to F | New state -> Stack 1: [A, B, F, C], Stack 2: [E, D, G] | Exploring action Move C from G to table | New state -> Stack 1: [A, B, F], Stack 2: [C], Stack 3: [E, D, G] | Exploring action Move B from A to C | New state -> Invalid | Exploring action Move G from D to F | New state -> Invalid | Taking action Move F from B to table | Moved to state -> Stack 1: [A, B], Stack 2: [E, D, G, C], Stack 3: [F] | Plan so far [Move F from B to table] | Exploring action Move B from A to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [E, D, G, C], Stack 4: [F] | Exploring action Move D from E to B | New state -> Invalid | Exploring action Move B from A to F | New state -> Stack 1: [A], Stack 2: [E, D, G, C], Stack 3: [F, B] | Exploring action Move C from G to table | New state -> Stack 1: [A, B], Stack 2: [C], Stack 3: [E, D, G], Stack 4: [F] | Taking action Move B from A to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [E, D, G, C], Stack 4: [F] | Plan so far [Move F from B to table | Move B from A to table] | Exploring action Move F from table to A | New state -> Stack 1: [A, F], Stack 2: [B], Stack 3: [E, D, G, C] | Exploring action Move C from G to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [E, D, G], Stack 5: [F] | Exploring action Move A from table to B | New state -> Stack 1: [B, A], Stack 2: [E, D, G, C], Stack 3: [F] | Exploring action Move E from table to C | New state -> Invalid | Taking action Move F from table to A | Moved to state -> Stack 1: [A, F], Stack 2: [B], Stack 3: [E, D, G, C] | Plan so far [Move F from B to table | Move B from A to table | Move F from table to A] | Exploring action Move C from G to table | New state -> Stack 1: [A, F], Stack 2: [B], Stack 3: [C], Stack 4: [E, D, G] | Exploring action Move A from table to B | New state -> Invalid | Exploring action Move E from table to F | New state -> Invalid | Exploring action Move F from A to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [E, D, G, C], Stack 4: [F] | Exploring action Move B from table to F | New state -> Stack 1: [A, F, B], Stack 2: [E, D, G, C] | Taking action Move B from table to F | Moved to state -> Stack 1: [A, F, B], Stack 2: [E, D, G, C] | Plan so far [Move F from B to table | Move B from A to table | Move F from table to A | Move B from table to F] | Exploring action Move C from G to B | New state -> Stack 1: [A, F, B, C], Stack 2: [E, D, G] | Exploring action Move D from E to table | New state -> Invalid | Exploring action Move C from G to table | New state -> Stack 1: [A, F, B], Stack 2: [C], Stack 3: [E, D, G] | Exploring action Move B from F to table | New state -> Stack 1: [A, F], Stack 2: [B], Stack 3: [E, D, G, C] | Taking action Move C from G to table | Moved to state -> Stack 1: [A, B], Stack 2: [C], Stack 3: [E, D, G], Stack 4: [F] | Plan so far [Move F from B to table | Move C from G to table] | Exploring action Move G from D to table | New state -> Stack 1: [A, B], Stack 2: [C], Stack 3: [E, D], Stack 4: [F], Stack 5: [G] | Exploring action Move G from D to F | New state -> Stack 1: [A, B], Stack 2: [C], Stack 3: [E, D], Stack 4: [F, G] | Exploring action Move A from table to C | New state -> Invalid | Exploring action Move G from D to B | New state -> Stack 1: [A, B, G], Stack 2: [C], Stack 3: [E, D], Stack 4: [F] | Taking action Move G from D to table | Moved to state -> Stack 1: [A, B], Stack 2: [C], Stack 3: [E, D], Stack 4: [F], Stack 5: [G] | Plan so far [Move F from B to table | Move C from G to table | Move G from D to table] | Exploring action Move B from A to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [E, D], Stack 5: [F], Stack 6: [G] | Exploring action Move B from A to G | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [E, D], Stack 4: [F], Stack 5: [G, B] | Exploring action Move A from table to B | New state -> Invalid | Exploring action Move A from table to D | New state -> Invalid | Exploring action Move C from table to G | New state -> Stack 1: [A, B], Stack 2: [E, D], Stack 3: [F], Stack 4: [G, C] | Taking action Move C from table to G | Moved to state -> Stack 1: [A, B], Stack 2: [E, D], Stack 3: [F], Stack 4: [G, C] | Plan so far [Move F from B to table | Move C from G to table | Move G from D to table | Move C from table to G] | Exploring action Move D from E to table | New state -> Stack 1: [A, B], Stack 2: [D], Stack 3: [E], Stack 4: [F], Stack 5: [G, C] | Exploring action Move B from A to F | New state -> Stack 1: [A], Stack 2: [E, D], Stack 3: [F, B], Stack 4: [G, C] | Exploring action Move G from table to C | New state -> Invalid | Exploring action Move B from A to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [E, D], Stack 4: [F], Stack 5: [G, C] | Exploring action Move G from table to B | New state -> Invalid | Taking action Move B from A to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [E, D], Stack 4: [F], Stack 5: [G, C] | Plan so far [Move F from B to table | Move C from G to table | Move G from D to table | Move C from table to G | Move B from A to table] | Exploring action Move A from table to B | New state -> Stack 1: [B, A], Stack 2: [E, D], Stack 3: [F], Stack 4: [G, C] | Exploring action Move F from table to A | New state -> Stack 1: [A, F], Stack 2: [B], Stack 3: [E, D], Stack 4: [G, C] | Exploring action Move G from table to C | New state -> Invalid | Exploring action Move D from E to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D], Stack 4: [E], Stack 5: [F], Stack 6: [G, C] | Exploring action Move G from table to A | New state -> Invalid | Taking action Move F from table to A | Moved to state -> Stack 1: [A, F], Stack 2: [B], Stack 3: [E, D], Stack 4: [G, C] | Plan so far [Move F from B to table | Move C from G to table | Move G from D to table | Move C from table to G | Move B from A to table | Move F from table to A] | Exploring action Move B from table to F | New state -> Stack 1: [A, F, B], Stack 2: [E, D], Stack 3: [G, C] | Exploring action Move F from A to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [E, D], Stack 4: [F], Stack 5: [G, C] | Exploring action Move E from table to F | New state -> Invalid | Exploring action Move D from E to table | New state -> Stack 1: [A, F], Stack 2: [B], Stack 3: [D], Stack 4: [E], Stack 5: [G, C] | Taking action Move B from table to F | Moved to state -> Stack 1: [A, F, B], Stack 2: [E, D], Stack 3: [G, C] | Plan so far [Move F from B to table | Move C from G to table | Move G from D to table | Move C from table to G | Move B from A to table | Move F from table to A | Move B from table to F] | Exploring action Move F from A to D | New state -> Invalid | Exploring action Move F from A to B | New state -> Invalid | Exploring action Move B from F to table | New state -> Stack 1: [A, F], Stack 2: [B], Stack 3: [E, D], Stack 4: [G, C] | Exploring action Move D from E to table | New state -> Stack 1: [A, F, B], Stack 2: [D], Stack 3: [E], Stack 4: [G, C] | Exploring action Move D from E to B | New state -> Stack 1: [A, F, B, D], Stack 2: [E], Stack 3: [G, C] | Taking action Move B from A to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [E, D], Stack 5: [F], Stack 6: [G] | Plan so far [Move F from B to table | Move C from G to table | Move G from D to table | Move B from A to table] | Exploring action Move E from table to B | New state -> Invalid | Exploring action Move D from E to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F], Stack 7: [G] | Exploring action Move E from table to D | New state -> Invalid | Exploring action Move F from table to A | New state -> Stack 1: [A, F], Stack 2: [B], Stack 3: [C], Stack 4: [E, D], Stack 5: [G] | Exploring action Move C from table to G | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [E, D], Stack 4: [F], Stack 5: [G, C] | Taking action Move C from table to G | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [E, D], Stack 4: [F], Stack 5: [G, C] | Plan so far [Move F from B to table | Move C from G to table | Move G from D to table | Move B from A to table | Move C from table to G] | Taking action Move D from E to table | Moved to state -> Stack 1: [A, F, B], Stack 2: [D], Stack 3: [E], Stack 4: [G, C] | Plan so far [Move F from B to table | Move C from G to table | Move G from D to table | Move C from table to G | Move B from A to table | Move F from table to A | Move B from table to F | Move D from E to table] | Exploring action Move E from table to D | New state -> Stack 1: [A, F, B], Stack 2: [D, E], Stack 3: [G, C] | Exploring action Move E from table to B | New state -> Stack 1: [A, F, B, E], Stack 2: [D], Stack 3: [G, C] | Exploring action Move D from table to E | New state -> Stack 1: [A, F, B], Stack 2: [E, D], Stack 3: [G, C] | Exploring action Move F from A to C | New state -> Invalid | Taking action Move D from E to table | Moved to state -> Stack 1: [A, F], Stack 2: [B], Stack 3: [D], Stack 4: [E], Stack 5: [G, C] | Plan so far [Move F from B to table | Move C from G to table | Move G from D to table | Move C from table to G | Move B from A to table | Move F from table to A | Move D from E to table] | Exploring action Move E from table to B | New state -> Stack 1: [A, F], Stack 2: [B, E], Stack 3: [D], Stack 4: [G, C] | Exploring action Move B from table to F | New state -> Stack 1: [A, F, B], Stack 2: [D], Stack 3: [E], Stack 4: [G, C] | Exploring action Move A from table to D | New state -> Invalid | Exploring action Move D from table to E | New state -> Stack 1: [A, F], Stack 2: [B], Stack 3: [E, D], Stack 4: [G, C] | Taking action Move D from E to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [D], Stack 4: [E], Stack 5: [F], Stack 6: [G, C] | Plan so far [Move F from B to table | Move C from G to table | Move G from D to table | Move C from table to G | Move B from A to table | Move D from E to table] | Exploring action Move D from table to E | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [E, D], Stack 4: [F], Stack 5: [G, C] | Exploring action Move G from table to F | New state -> Invalid | Exploring action Move F from table to B | New state -> Stack 1: [A], Stack 2: [B, F], Stack 3: [D], Stack 4: [E], Stack 5: [G, C] | Exploring action Move F from table to A | New state -> Stack 1: [A, F], Stack 2: [B], Stack 3: [D], Stack 4: [E], Stack 5: [G, C] | Taking action Move E from table to B | Moved to state -> Stack 1: [A, F, B, E], Stack 2: [D], Stack 3: [G, C] | Plan so far [Move F from B to table | Move C from G to table | Move G from D to table | Move C from table to G | Move B from A to table | Move F from table to A | Move B from table to F | Move D from E to table | Move E from table to B] | Exploring action Move G from table to E | New state -> Invalid | Exploring action Move C from G to table | New state -> Stack 1: [A, F, B, E], Stack 2: [C], Stack 3: [D], Stack 4: [G] | Exploring action Move E from B to table | New state -> Stack 1: [A, F, B], Stack 2: [D], Stack 3: [E], Stack 4: [G, C] | Exploring action Move D from table to E | New state -> Stack 1: [A, F, B, E, D], Stack 2: [G, C] | Exploring action Move A from table to C | New state -> Invalid | Taking action Move D from table to E | Moved to state -> Stack 1: [A, F, B, E, D], Stack 2: [G, C] | Plan so far [Move F from B to table | Move C from G to table | Move G from D to table | Move C from table to G | Move B from A to table | Move F from table to A | Move B from table to F | Move D from E to table | Move E from table to B | Move D from table to E] | Reached goal state!",
        "system2_states_v1": 72
    },
    {
        "idx": 615,
        "start": [
            [
                "table",
                "B",
                "C",
                "A",
                "D",
                "E"
            ]
        ],
        "goal": [
            [
                "table",
                "A",
                "B",
                "D"
            ],
            [
                "table",
                "C",
                "E"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": false,
                "on": "C",
                "under": "D",
                "ontable": false
            },
            "B": {
                "clear": false,
                "on": -1,
                "under": "C",
                "ontable": true
            },
            "C": {
                "clear": false,
                "on": "B",
                "under": "A",
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": "A",
                "under": "E",
                "ontable": false
            },
            "E": {
                "clear": true,
                "on": "D",
                "under": -1,
                "ontable": false
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": false,
                "on": -1,
                "under": "B",
                "ontable": true
            },
            "B": {
                "clear": false,
                "on": "A",
                "under": "D",
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": -1,
                "under": "E",
                "ontable": true
            },
            "D": {
                "clear": true,
                "on": "B",
                "under": -1,
                "ontable": false
            },
            "E": {
                "clear": true,
                "on": "C",
                "under": -1,
                "ontable": false
            }
        },
        "plan_len": 7,
        "num_blocks": 5,
        "prompt": "The initial state:\nThe hand is empty.\nB is on the table. C is on B. A is on C. D is on A. E is on D. E is clear.\n\nThe goal is:\nA is on the table. B is on A. D is on B. D is clear.\nC is on the table. E is on C. E is clear.\n",
        "system1_plan": "Move E from D to table | Move D from A to table | Move A from C to table | Move C from B to table | Move E from table to C | Move B from table to A | Move D from table to B",
        "system1_states": 7,
        "system2_plan_v1": "Moved to state -> Stack 1: [B, C, A, D, E] | Plan so far [] | Exploring action Move A from C to table | New state -> Invalid | Exploring action Move E from D to table | New state -> Stack 1: [B, C, A, D], Stack 2: [E] | Taking action Move E from D to table | Moved to state -> Stack 1: [B, C, A, D], Stack 2: [E] | Plan so far [Move E from D to table] | Exploring action Move E from table to D | New state -> Stack 1: [B, C, A, D, E] | Exploring action Move A from C to E | New state -> Invalid | Exploring action Move D from A to table | New state -> Stack 1: [B, C, A], Stack 2: [D], Stack 3: [E] | Exploring action Move D from A to E | New state -> Stack 1: [B, C, A], Stack 2: [E, D] | Exploring action Move C from B to D | New state -> Invalid | Taking action Move D from A to table | Moved to state -> Stack 1: [B, C, A], Stack 2: [D], Stack 3: [E] | Plan so far [Move E from D to table | Move D from A to table] | Exploring action Move A from C to table | New state -> Stack 1: [A], Stack 2: [B, C], Stack 3: [D], Stack 4: [E] | Exploring action Move B from table to E | New state -> Invalid | Exploring action Move A from C to D | New state -> Stack 1: [B, C], Stack 2: [D, A], Stack 3: [E] | Exploring action Move A from C to E | New state -> Stack 1: [B, C], Stack 2: [D], Stack 3: [E, A] | Exploring action Move B from table to A | New state -> Invalid | Taking action Move A from C to table | Moved to state -> Stack 1: [A], Stack 2: [B, C], Stack 3: [D], Stack 4: [E] | Plan so far [Move E from D to table | Move D from A to table | Move A from C to table] | Exploring action Move B from table to D | New state -> Invalid | Exploring action Move C from B to E | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D], Stack 4: [E, C] | Exploring action Move C from B to D | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, C], Stack 4: [E] | Exploring action Move C from B to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Exploring action Move B from table to E | New state -> Invalid | Taking action Move C from B to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Plan so far [Move E from D to table | Move D from A to table | Move A from C to table | Move C from B to table] | Exploring action Move D from table to B | New state -> Stack 1: [A], Stack 2: [B, D], Stack 3: [C], Stack 4: [E] | Exploring action Move B from table to A | New state -> Stack 1: [A, B], Stack 2: [C], Stack 3: [D], Stack 4: [E] | Exploring action Move E from table to C | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, E], Stack 4: [D] | Taking action Move E from table to C | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, E], Stack 4: [D] | Plan so far [Move E from D to table | Move D from A to table | Move A from C to table | Move C from B to table | Move E from table to C] | Exploring action Move D from table to B | New state -> Stack 1: [A], Stack 2: [B, D], Stack 3: [C, E] | Exploring action Move C from table to B | New state -> Invalid | Exploring action Move D from table to A | New state -> Stack 1: [A, D], Stack 2: [B], Stack 3: [C, E] | Exploring action Move B from table to A | New state -> Stack 1: [A, B], Stack 2: [C, E], Stack 3: [D] | Taking action Move B from table to A | Moved to state -> Stack 1: [A, B], Stack 2: [C, E], Stack 3: [D] | Plan so far [Move E from D to table | Move D from A to table | Move A from C to table | Move C from B to table | Move E from table to C | Move B from table to A] | Exploring action Move D from table to B | New state -> Stack 1: [A, B, D], Stack 2: [C, E] | Exploring action Move E from C to table | New state -> Stack 1: [A, B], Stack 2: [C], Stack 3: [D], Stack 4: [E] | Exploring action Move A from table to D | New state -> Invalid | Exploring action Move B from A to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, E], Stack 4: [D] | Taking action Move D from table to B | Moved to state -> Stack 1: [A, B, D], Stack 2: [C, E] | Plan so far [Move E from D to table | Move D from A to table | Move A from C to table | Move C from B to table | Move E from table to C | Move B from table to A | Move D from table to B] | Reached goal state!",
        "system2_states_v1": 28
    },
    {
        "idx": 821,
        "start": [
            [
                "table",
                "D",
                "B",
                "E",
                "F",
                "A"
            ],
            [
                "table",
                "G",
                "C"
            ]
        ],
        "goal": [
            [
                "table",
                "B",
                "F",
                "A",
                "C",
                "G",
                "E"
            ],
            [
                "table",
                "D"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": true,
                "on": "F",
                "under": -1,
                "ontable": false
            },
            "B": {
                "clear": false,
                "on": "D",
                "under": "E",
                "ontable": false
            },
            "C": {
                "clear": true,
                "on": "G",
                "under": -1,
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": -1,
                "under": "B",
                "ontable": true
            },
            "E": {
                "clear": false,
                "on": "B",
                "under": "F",
                "ontable": false
            },
            "F": {
                "clear": false,
                "on": "E",
                "under": "A",
                "ontable": false
            },
            "G": {
                "clear": false,
                "on": -1,
                "under": "C",
                "ontable": true
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": false,
                "on": "F",
                "under": "C",
                "ontable": false
            },
            "B": {
                "clear": false,
                "on": -1,
                "under": "F",
                "ontable": true
            },
            "C": {
                "clear": false,
                "on": "A",
                "under": "G",
                "ontable": false
            },
            "D": {
                "clear": true,
                "on": -1,
                "under": -1,
                "ontable": true
            },
            "E": {
                "clear": true,
                "on": "G",
                "under": -1,
                "ontable": false
            },
            "F": {
                "clear": false,
                "on": "B",
                "under": "A",
                "ontable": false
            },
            "G": {
                "clear": false,
                "on": "C",
                "under": "E",
                "ontable": false
            }
        },
        "plan_len": 9,
        "num_blocks": 7,
        "prompt": "The initial state:\nThe hand is empty.\nD is on the table. B is on D. E is on B. F is on E. A is on F. A is clear.\nG is on the table. C is on G. C is clear.\n\nThe goal is:\nB is on the table. F is on B. A is on F. C is on A. G is on C. E is on G. E is clear.\nD is on the table. D is clear.\n",
        "system1_plan": "Move A from F to table | Move F from E to table | Move E from B to table | Move B from D to table | Move F from table to B | Move A from table to F | Move C from G to A | Move G from table to C | Move E from table to G",
        "system1_states": 9,
        "system2_plan_v1": "Moved to state -> Stack 1: [D, B, E, F, A], Stack 2: [G, C] | Plan so far [] | Exploring action Move A from F to table | New state -> Stack 1: [A], Stack 2: [D, B, E, F], Stack 3: [G, C] | Exploring action Move C from G to A | New state -> Stack 1: [D, B, E, F, A, C], Stack 2: [G] | Exploring action Move F from E to C | New state -> Invalid | Exploring action Move C from G to table | New state -> Stack 1: [C], Stack 2: [D, B, E, F, A], Stack 3: [G] | Taking action Move C from G to A | Moved to state -> Stack 1: [D, B, E, F, A, C], Stack 2: [G] | Plan so far [Move C from G to A] | Exploring action Move C from A to G | New state -> Stack 1: [D, B, E, F, A], Stack 2: [G, C] | Exploring action Move C from A to table | New state -> Stack 1: [C], Stack 2: [D, B, E, F, A], Stack 3: [G] | Exploring action Move G from table to C | New state -> Stack 1: [D, B, E, F, A, C, G] | Exploring action Move A from F to G | New state -> Invalid | Exploring action Move B from D to C | New state -> Invalid | Taking action Move G from table to C | Moved to state -> Stack 1: [D, B, E, F, A, C, G] | Plan so far [Move C from G to A | Move G from table to C] | Exploring action Move C from A to table | New state -> Invalid | Exploring action Move G from C to table | New state -> Stack 1: [D, B, E, F, A, C], Stack 2: [G] | Taking action Move C from G to table | Moved to state -> Stack 1: [C], Stack 2: [D, B, E, F, A], Stack 3: [G] | Plan so far [Move C from G to table] | Exploring action Move C from table to A | New state -> Stack 1: [D, B, E, F, A, C], Stack 2: [G] | Exploring action Move F from E to G | New state -> Invalid | Exploring action Move B from D to C | New state -> Invalid | Exploring action Move A from F to table | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, B, E, F], Stack 4: [G] | Exploring action Move A from F to G | New state -> Stack 1: [C], Stack 2: [D, B, E, F], Stack 3: [G, A] | Taking action Move A from F to table | Moved to state -> Stack 1: [A], Stack 2: [D, B, E, F], Stack 3: [G, C] | Plan so far [Move A from F to table] | Exploring action Move F from E to A | New state -> Stack 1: [A, F], Stack 2: [D, B, E], Stack 3: [G, C] | Exploring action Move C from G to table | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, B, E, F], Stack 4: [G] | Exploring action Move B from D to table | New state -> Invalid | Exploring action Move F from E to table | New state -> Stack 1: [A], Stack 2: [D, B, E], Stack 3: [F], Stack 4: [G, C] | Taking action Move A from F to table | Moved to state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, B, E, F], Stack 4: [G] | Plan so far [Move C from G to table | Move A from F to table] | Exploring action Move F from E to table | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, B, E], Stack 4: [F], Stack 5: [G] | Exploring action Move F from E to G | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, B, E], Stack 4: [G, F] | Exploring action Move B from D to F | New state -> Invalid | Exploring action Move E from B to G | New state -> Invalid | Exploring action Move F from E to A | New state -> Stack 1: [A, F], Stack 2: [C], Stack 3: [D, B, E], Stack 4: [G] | Taking action Move C from G to table | Moved to state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, B, E, F], Stack 4: [G] | Plan so far [Move A from F to table | Move C from G to table] | Taking action Move F from E to table | Moved to state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, B, E], Stack 4: [F], Stack 5: [G] | Plan so far [Move C from G to table | Move A from F to table | Move F from E to table] | Exploring action Move D from table to C | New state -> Invalid | Exploring action Move B from D to C | New state -> Invalid | Exploring action Move E from B to F | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, B], Stack 4: [F, E], Stack 5: [G] | Exploring action Move E from B to table | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, B], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Exploring action Move E from B to G | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, B], Stack 4: [F], Stack 5: [G, E] | Taking action Move C from table to A | Moved to state -> Stack 1: [D, B, E, F, A, C], Stack 2: [G] | Plan so far [Move C from G to table | Move C from table to A] | Taking action Move F from E to table | Moved to state -> Stack 1: [A], Stack 2: [D, B, E], Stack 3: [F], Stack 4: [G, C] | Plan so far [Move A from F to table | Move F from E to table] | Exploring action Move E from B to table | New state -> Stack 1: [A], Stack 2: [D, B], Stack 3: [E], Stack 4: [F], Stack 5: [G, C] | Exploring action Move B from D to F | New state -> Invalid | Exploring action Move C from G to E | New state -> Stack 1: [A], Stack 2: [D, B, E, C], Stack 3: [F], Stack 4: [G] | Exploring action Move G from table to F | New state -> Invalid | Exploring action Move C from G to table | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, B, E], Stack 4: [F], Stack 5: [G] | Taking action Move E from B to G | Moved to state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, B], Stack 4: [F], Stack 5: [G, E] | Plan so far [Move C from G to table | Move A from F to table | Move F from E to table | Move E from B to G] | Exploring action Move B from D to C | New state -> Stack 1: [A], Stack 2: [C, B], Stack 3: [D], Stack 4: [F], Stack 5: [G, E] | Exploring action Move G from table to B | New state -> Invalid | Exploring action Move B from D to A | New state -> Stack 1: [A, B], Stack 2: [C], Stack 3: [D], Stack 4: [F], Stack 5: [G, E] | Exploring action Move B from D to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [F], Stack 6: [G, E] | Taking action Move B from D to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [F], Stack 6: [G, E] | Plan so far [Move C from G to table | Move A from F to table | Move F from E to table | Move E from B to G | Move B from D to table] | Exploring action Move G from table to F | New state -> Invalid | Exploring action Move F from table to B | New state -> Stack 1: [A], Stack 2: [B, F], Stack 3: [C], Stack 4: [D], Stack 5: [G, E] | Exploring action Move E from G to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F], Stack 7: [G] | Exploring action Move G from table to A | New state -> Invalid | Exploring action Move B from table to A | New state -> Stack 1: [A, B], Stack 2: [C], Stack 3: [D], Stack 4: [F], Stack 5: [G, E] | Taking action Move F from table to B | Moved to state -> Stack 1: [A], Stack 2: [B, F], Stack 3: [C], Stack 4: [D], Stack 5: [G, E] | Plan so far [Move C from G to table | Move A from F to table | Move F from E to table | Move E from B to G | Move B from D to table | Move F from table to B] | Exploring action Move E from G to A | New state -> Stack 1: [A, E], Stack 2: [B, F], Stack 3: [C], Stack 4: [D], Stack 5: [G] | Exploring action Move A from table to F | New state -> Stack 1: [B, F, A], Stack 2: [C], Stack 3: [D], Stack 4: [G, E] | Exploring action Move G from table to D | New state -> Invalid | Exploring action Move E from G to table | New state -> Stack 1: [A], Stack 2: [B, F], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [G] | Exploring action Move B from table to D | New state -> Invalid | Taking action Move A from table to F | Moved to state -> Stack 1: [B, F, A], Stack 2: [C], Stack 3: [D], Stack 4: [G, E] | Plan so far [Move C from G to table | Move A from F to table | Move F from E to table | Move E from B to G | Move B from D to table | Move F from table to B | Move A from table to F] | Exploring action Move E from G to table | New state -> Stack 1: [B, F, A], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [G] | Exploring action Move E from G to A | New state -> Stack 1: [B, F, A, E], Stack 2: [C], Stack 3: [D], Stack 4: [G] | Exploring action Move B from table to A | New state -> Invalid | Exploring action Move C from table to A | New state -> Stack 1: [B, F, A, C], Stack 2: [D], Stack 3: [G, E] | Taking action Move C from table to A | Moved to state -> Stack 1: [B, F, A, C], Stack 2: [D], Stack 3: [G, E] | Plan so far [Move C from G to table | Move A from F to table | Move F from E to table | Move E from B to G | Move B from D to table | Move F from table to B | Move A from table to F | Move C from table to A] | Exploring action Move E from G to table | New state -> Stack 1: [B, F, A, C], Stack 2: [D], Stack 3: [E], Stack 4: [G] | Exploring action Move C from A to table | New state -> Stack 1: [B, F, A], Stack 2: [C], Stack 3: [D], Stack 4: [G, E] | Exploring action Move E from G to C | New state -> Stack 1: [B, F, A, C, E], Stack 2: [D], Stack 3: [G] | Exploring action Move B from table to E | New state -> Invalid | Taking action Move E from G to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F], Stack 7: [G] | Plan so far [Move C from G to table | Move A from F to table | Move F from E to table | Move E from B to G | Move B from D to table | Move E from G to table] | Exploring action Move E from table to G | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [F], Stack 6: [G, E] | Exploring action Move A from table to B | New state -> Stack 1: [B, A], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Exploring action Move F from table to B | New state -> Stack 1: [A], Stack 2: [B, F], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [G] | Taking action Move E from G to table | Moved to state -> Stack 1: [A], Stack 2: [B, F], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [G] | Plan so far [Move C from G to table | Move A from F to table | Move F from E to table | Move E from B to G | Move B from D to table | Move F from table to B | Move E from G to table] | Exploring action Move A from table to F | New state -> Stack 1: [B, F, A], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [G] | Exploring action Move E from table to G | New state -> Stack 1: [A], Stack 2: [B, F], Stack 3: [C], Stack 4: [D], Stack 5: [G, E] | Exploring action Move B from table to E | New state -> Invalid | Exploring action Move B from table to F | New state -> Invalid | Exploring action Move A from table to E | New state -> Stack 1: [B, F], Stack 2: [C], Stack 3: [D], Stack 4: [E, A], Stack 5: [G] | Taking action Move E from B to table | Moved to state -> Stack 1: [A], Stack 2: [D, B], Stack 3: [E], Stack 4: [F], Stack 5: [G, C] | Plan so far [Move A from F to table | Move F from E to table | Move E from B to table] | Exploring action Move D from table to E | New state -> Invalid | Exploring action Move B from D to C | New state -> Stack 1: [A], Stack 2: [D], Stack 3: [E], Stack 4: [F], Stack 5: [G, C, B] | Exploring action Move B from D to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D], Stack 4: [E], Stack 5: [F], Stack 6: [G, C] | Exploring action Move G from table to A | New state -> Invalid | Exploring action Move B from D to A | New state -> Stack 1: [A, B], Stack 2: [D], Stack 3: [E], Stack 4: [F], Stack 5: [G, C] | Taking action Move B from D to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [D], Stack 4: [E], Stack 5: [F], Stack 6: [G, C] | Plan so far [Move A from F to table | Move F from E to table | Move E from B to table | Move B from D to table] | Exploring action Move C from G to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F], Stack 7: [G] | Exploring action Move G from table to C | New state -> Invalid | Exploring action Move F from table to B | New state -> Stack 1: [A], Stack 2: [B, F], Stack 3: [D], Stack 4: [E], Stack 5: [G, C] | Exploring action Move C from G to A | New state -> Stack 1: [A, C], Stack 2: [B], Stack 3: [D], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Taking action Move C from G to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F], Stack 7: [G] | Plan so far [Move A from F to table | Move F from E to table | Move E from B to table | Move B from D to table | Move C from G to table] | Taking action Move F from table to B | Moved to state -> Stack 1: [A], Stack 2: [B, F], Stack 3: [D], Stack 4: [E], Stack 5: [G, C] | Plan so far [Move A from F to table | Move F from E to table | Move E from B to table | Move B from D to table | Move F from table to B] | Exploring action Move C from G to table | New state -> Stack 1: [A], Stack 2: [B, F], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [G] | Exploring action Move C from G to A | New state -> Stack 1: [A, C], Stack 2: [B, F], Stack 3: [D], Stack 4: [E], Stack 5: [G] | Exploring action Move G from table to D | New state -> Invalid | Exploring action Move A from table to F | New state -> Stack 1: [B, F, A], Stack 2: [D], Stack 3: [E], Stack 4: [G, C] | Taking action Move A from table to F | Moved to state -> Stack 1: [B, F, A], Stack 2: [D], Stack 3: [E], Stack 4: [G, C] | Plan so far [Move A from F to table | Move F from E to table | Move E from B to table | Move B from D to table | Move F from table to B | Move A from table to F] | Exploring action Move C from G to table | New state -> Stack 1: [B, F, A], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [G] | Exploring action Move C from G to E | New state -> Stack 1: [B, F, A], Stack 2: [D], Stack 3: [E, C], Stack 4: [G] | Exploring action Move C from G to A | New state -> Stack 1: [B, F, A, C], Stack 2: [D], Stack 3: [E], Stack 4: [G] | Exploring action Move B from table to E | New state -> Invalid | Taking action Move C from G to A | Moved to state -> Stack 1: [B, F, A, C], Stack 2: [D], Stack 3: [E], Stack 4: [G] | Plan so far [Move A from F to table | Move F from E to table | Move E from B to table | Move B from D to table | Move F from table to B | Move A from table to F | Move C from G to A] | Exploring action Move G from table to E | New state -> Stack 1: [B, F, A, C], Stack 2: [D], Stack 3: [E, G] | Exploring action Move E from table to G | New state -> Stack 1: [B, F, A, C], Stack 2: [D], Stack 3: [G, E] | Exploring action Move G from table to C | New state -> Stack 1: [B, F, A, C, G], Stack 2: [D], Stack 3: [E] | Exploring action Move A from F to C | New state -> Invalid | Taking action Move G from table to C | Moved to state -> Stack 1: [B, F, A, C, G], Stack 2: [D], Stack 3: [E] | Plan so far [Move A from F to table | Move F from E to table | Move E from B to table | Move B from D to table | Move F from table to B | Move A from table to F | Move C from G to A | Move G from table to C] | Exploring action Move C from A to G | New state -> Invalid | Exploring action Move E from table to D | New state -> Stack 1: [B, F, A, C, G], Stack 2: [D, E] | Exploring action Move E from table to G | New state -> Stack 1: [B, F, A, C, G, E], Stack 2: [D] | Exploring action Move C from A to E | New state -> Invalid | Exploring action Move G from C to table | New state -> Stack 1: [B, F, A, C], Stack 2: [D], Stack 3: [E], Stack 4: [G] | Taking action Move E from table to G | Moved to state -> Stack 1: [B, F, A, C, G, E], Stack 2: [D] | Plan so far [Move A from F to table | Move F from E to table | Move E from B to table | Move B from D to table | Move F from table to B | Move A from table to F | Move C from G to A | Move G from table to C | Move E from table to G] | Reached goal state!",
        "system2_states_v1": 91
    },
    {
        "idx": 600,
        "start": [
            [
                "table",
                "C",
                "A"
            ],
            [
                "table",
                "D",
                "E",
                "B"
            ]
        ],
        "goal": [
            [
                "table",
                "E",
                "B",
                "C",
                "D",
                "A"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": true,
                "on": "C",
                "under": -1,
                "ontable": false
            },
            "B": {
                "clear": true,
                "on": "E",
                "under": -1,
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": -1,
                "under": "A",
                "ontable": true
            },
            "D": {
                "clear": false,
                "on": -1,
                "under": "E",
                "ontable": true
            },
            "E": {
                "clear": false,
                "on": "D",
                "under": "B",
                "ontable": false
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": true,
                "on": "D",
                "under": -1,
                "ontable": false
            },
            "B": {
                "clear": false,
                "on": "E",
                "under": "C",
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": "B",
                "under": "D",
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": "C",
                "under": "A",
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": -1,
                "under": "B",
                "ontable": true
            }
        },
        "plan_len": 7,
        "num_blocks": 5,
        "prompt": "The initial state:\nThe hand is empty.\nC is on the table. A is on C. A is clear.\nD is on the table. E is on D. B is on E. B is clear.\n\nThe goal is:\nE is on the table. B is on E. C is on B. D is on C. A is on D. A is clear.\n",
        "system1_plan": "Move A from C to table | Move B from E to table | Move E from D to table | Move B from table to E | Move C from table to B | Move D from table to C | Move A from table to D",
        "system1_states": 7,
        "system2_plan_v1": "Moved to state -> Stack 1: [C, A], Stack 2: [D, E, B] | Plan so far [] | Exploring action Move E from D to table | New state -> Invalid | Exploring action Move A from C to B | New state -> Stack 1: [C], Stack 2: [D, E, B, A] | Exploring action Move A from C to table | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, E, B] | Exploring action Move B from E to table | New state -> Stack 1: [B], Stack 2: [C, A], Stack 3: [D, E] | Taking action Move A from C to table | Moved to state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, E, B] | Plan so far [Move A from C to table] | Exploring action Move D from table to A | New state -> Invalid | Exploring action Move C from table to B | New state -> Stack 1: [A], Stack 2: [D, E, B, C] | Exploring action Move B from E to A | New state -> Stack 1: [A, B], Stack 2: [C], Stack 3: [D, E] | Exploring action Move B from E to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D, E] | Taking action Move B from E to table | Moved to state -> Stack 1: [B], Stack 2: [C, A], Stack 3: [D, E] | Plan so far [Move B from E to table] | Exploring action Move E from D to table | New state -> Stack 1: [B], Stack 2: [C, A], Stack 3: [D], Stack 4: [E] | Exploring action Move E from D to A | New state -> Stack 1: [B], Stack 2: [C, A, E], Stack 3: [D] | Exploring action Move A from C to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D, E] | Exploring action Move D from table to A | New state -> Invalid | Exploring action Move C from table to B | New state -> Invalid | Taking action Move B from E to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D, E] | Plan so far [Move A from C to table | Move B from E to table] | Exploring action Move E from D to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Exploring action Move D from table to A | New state -> Invalid | Exploring action Move D from table to B | New state -> Invalid | Exploring action Move E from D to B | New state -> Stack 1: [A], Stack 2: [B, E], Stack 3: [C], Stack 4: [D] | Exploring action Move E from D to C | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, E], Stack 4: [D] | Taking action Move E from D to table | Moved to state -> Stack 1: [B], Stack 2: [C, A], Stack 3: [D], Stack 4: [E] | Plan so far [Move B from E to table | Move E from D to table] | Exploring action Move A from C to D | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, A], Stack 4: [E] | Exploring action Move B from table to E | New state -> Stack 1: [C, A], Stack 2: [D], Stack 3: [E, B] | Exploring action Move C from table to B | New state -> Invalid | Exploring action Move A from C to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Exploring action Move C from table to D | New state -> Invalid | Taking action Move E from D to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Plan so far [Move A from C to table | Move B from E to table | Move E from D to table] | Exploring action Move B from table to E | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D], Stack 4: [E, B] | Exploring action Move A from table to D | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, A], Stack 4: [E] | Exploring action Move A from table to B | New state -> Stack 1: [B, A], Stack 2: [C], Stack 3: [D], Stack 4: [E] | Taking action Move A from C to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Plan so far [Move B from E to table | Move E from D to table | Move A from C to table] | Taking action Move A from C to D | Moved to state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, A], Stack 4: [E] | Plan so far [Move B from E to table | Move E from D to table | Move A from C to D] | Exploring action Move D from table to A | New state -> Invalid | Exploring action Move A from D to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Exploring action Move B from table to E | New state -> Stack 1: [C], Stack 2: [D, A], Stack 3: [E, B] | Exploring action Move A from D to C | New state -> Stack 1: [B], Stack 2: [C, A], Stack 3: [D], Stack 4: [E] | Exploring action Move D from table to C | New state -> Invalid | Taking action Move B from table to E | Moved to state -> Stack 1: [A], Stack 2: [C], Stack 3: [D], Stack 4: [E, B] | Plan so far [Move A from C to table | Move B from E to table | Move E from D to table | Move B from table to E] | Exploring action Move C from table to B | New state -> Stack 1: [A], Stack 2: [D], Stack 3: [E, B, C] | Exploring action Move A from table to B | New state -> Stack 1: [C], Stack 2: [D], Stack 3: [E, B, A] | Exploring action Move E from table to C | New state -> Invalid | Exploring action Move A from table to D | New state -> Stack 1: [C], Stack 2: [D, A], Stack 3: [E, B] | Taking action Move C from table to B | Moved to state -> Stack 1: [A], Stack 2: [D, E, B, C] | Plan so far [Move A from C to table | Move C from table to B] | Exploring action Move C from B to A | New state -> Stack 1: [A, C], Stack 2: [D, E, B] | Exploring action Move E from D to C | New state -> Invalid | Exploring action Move A from table to C | New state -> Stack 1: [D, E, B, C, A] | Exploring action Move C from B to table | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, E, B] | Taking action Move A from C to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D, E] | Plan so far [Move B from E to table | Move A from C to table] | Taking action Move B from table to E | Moved to state -> Stack 1: [C, A], Stack 2: [D], Stack 3: [E, B] | Plan so far [Move B from E to table | Move E from D to table | Move B from table to E] | Exploring action Move A from C to D | New state -> Stack 1: [C], Stack 2: [D, A], Stack 3: [E, B] | Exploring action Move A from C to B | New state -> Stack 1: [C], Stack 2: [D], Stack 3: [E, B, A] | Exploring action Move E from table to D | New state -> Invalid | Exploring action Move A from C to table | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D], Stack 4: [E, B] | Taking action Move C from table to B | Moved to state -> Stack 1: [A], Stack 2: [D], Stack 3: [E, B, C] | Plan so far [Move A from C to table | Move B from E to table | Move E from D to table | Move B from table to E | Move C from table to B] | Exploring action Move A from table to D | New state -> Stack 1: [D, A], Stack 2: [E, B, C] | Exploring action Move E from table to C | New state -> Invalid | Exploring action Move D from table to C | New state -> Stack 1: [A], Stack 2: [E, B, C, D] | Exploring action Move D from table to A | New state -> Stack 1: [A, D], Stack 2: [E, B, C] | Exploring action Move B from E to D | New state -> Invalid | Taking action Move B from table to E | Moved to state -> Stack 1: [C], Stack 2: [D, A], Stack 3: [E, B] | Plan so far [Move B from E to table | Move E from D to table | Move A from C to D | Move B from table to E] | Exploring action Move D from table to C | New state -> Invalid | Exploring action Move A from D to C | New state -> Stack 1: [C, A], Stack 2: [D], Stack 3: [E, B] | Exploring action Move D from table to A | New state -> Invalid | Exploring action Move C from table to B | New state -> Stack 1: [D, A], Stack 2: [E, B, C] | Exploring action Move A from D to table | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D], Stack 4: [E, B] | Taking action Move D from table to C | Moved to state -> Stack 1: [A], Stack 2: [E, B, C, D] | Plan so far [Move A from C to table | Move B from E to table | Move E from D to table | Move B from table to E | Move C from table to B | Move D from table to C] | Exploring action Move C from B to D | New state -> Invalid | Exploring action Move D from C to A | New state -> Stack 1: [A, D], Stack 2: [E, B, C] | Exploring action Move A from table to D | New state -> Stack 1: [E, B, C, D, A] | Exploring action Move D from C to table | New state -> Stack 1: [A], Stack 2: [D], Stack 3: [E, B, C] | Exploring action Move C from B to A | New state -> Invalid | Taking action Move A from table to D | Moved to state -> Stack 1: [E, B, C, D, A] | Plan so far [Move A from C to table | Move B from E to table | Move E from D to table | Move B from table to E | Move C from table to B | Move D from table to C | Move A from table to D] | Reached goal state!",
        "system2_states_v1": 58
    },
    {
        "idx": 605,
        "start": [
            [
                "table",
                "D",
                "C",
                "E",
                "A",
                "B"
            ]
        ],
        "goal": [
            [
                "table",
                "B"
            ],
            [
                "table",
                "C",
                "D",
                "E",
                "A"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": false,
                "on": "E",
                "under": "B",
                "ontable": false
            },
            "B": {
                "clear": true,
                "on": "A",
                "under": -1,
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": "D",
                "under": "E",
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": -1,
                "under": "C",
                "ontable": true
            },
            "E": {
                "clear": false,
                "on": "C",
                "under": "A",
                "ontable": false
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": true,
                "on": "E",
                "under": -1,
                "ontable": false
            },
            "B": {
                "clear": true,
                "on": -1,
                "under": -1,
                "ontable": true
            },
            "C": {
                "clear": false,
                "on": -1,
                "under": "D",
                "ontable": true
            },
            "D": {
                "clear": false,
                "on": "C",
                "under": "E",
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": "D",
                "under": "A",
                "ontable": false
            }
        },
        "plan_len": 7,
        "num_blocks": 5,
        "prompt": "The initial state:\nThe hand is empty.\nD is on the table. C is on D. E is on C. A is on E. B is on A. B is clear.\n\nThe goal is:\nB is on the table. B is clear.\nC is on the table. D is on C. E is on D. A is on E. A is clear.\n",
        "system1_plan": "Move B from A to table | Move A from E to table | Move E from C to table | Move C from D to table | Move D from table to C | Move E from table to D | Move A from table to E",
        "system1_states": 7,
        "system2_plan_v1": "Moved to state -> Stack 1: [D, C, E, A, B] | Plan so far [] | Exploring action Move C from D to B | New state -> Invalid | Exploring action Move D from table to B | New state -> Invalid | Exploring action Move B from A to table | New state -> Stack 1: [B], Stack 2: [D, C, E, A] | Taking action Move B from A to table | Moved to state -> Stack 1: [B], Stack 2: [D, C, E, A] | Plan so far [Move B from A to table] | Exploring action Move C from D to table | New state -> Invalid | Exploring action Move A from E to B | New state -> Stack 1: [B, A], Stack 2: [D, C, E] | Exploring action Move E from C to table | New state -> Invalid | Exploring action Move B from table to A | New state -> Stack 1: [D, C, E, A, B] | Exploring action Move A from E to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, C, E] | Taking action Move A from E to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, C, E] | Plan so far [Move B from A to table | Move A from E to table] | Exploring action Move E from C to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, C], Stack 4: [E] | Exploring action Move E from C to A | New state -> Stack 1: [A, E], Stack 2: [B], Stack 3: [D, C] | Exploring action Move D from table to B | New state -> Invalid | Exploring action Move C from D to E | New state -> Invalid | Exploring action Move A from table to E | New state -> Stack 1: [B], Stack 2: [D, C, E, A] | Taking action Move E from C to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, C], Stack 4: [E] | Plan so far [Move B from A to table | Move A from E to table | Move E from C to table] | Exploring action Move C from D to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Exploring action Move C from D to A | New state -> Stack 1: [A, C], Stack 2: [B], Stack 3: [D], Stack 4: [E] | Exploring action Move D from table to E | New state -> Invalid | Exploring action Move A from table to E | New state -> Stack 1: [B], Stack 2: [D, C], Stack 3: [E, A] | Taking action Move C from D to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Plan so far [Move B from A to table | Move A from E to table | Move E from C to table | Move C from D to table] | Exploring action Move D from table to C | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, D], Stack 4: [E] | Exploring action Move A from table to D | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, A], Stack 4: [E] | Exploring action Move A from table to E | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D], Stack 4: [E, A] | Taking action Move D from table to C | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, D], Stack 4: [E] | Plan so far [Move B from A to table | Move A from E to table | Move E from C to table | Move C from D to table | Move D from table to C] | Exploring action Move A from table to E | New state -> Stack 1: [B], Stack 2: [C, D], Stack 3: [E, A] | Exploring action Move E from table to D | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, D, E] | Exploring action Move D from C to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Exploring action Move C from table to A | New state -> Invalid | Taking action Move E from table to D | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, D, E] | Plan so far [Move B from A to table | Move A from E to table | Move E from C to table | Move C from D to table | Move D from table to C | Move E from table to D] | Exploring action Move A from table to E | New state -> Stack 1: [B], Stack 2: [C, D, E, A] | Exploring action Move B from table to A | New state -> Stack 1: [A, B], Stack 2: [C, D, E] | Exploring action Move E from D to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, D], Stack 4: [E] | Exploring action Move D from C to E | New state -> Invalid | Taking action Move A from table to E | Moved to state -> Stack 1: [B], Stack 2: [C, D, E, A] | Plan so far [Move B from A to table | Move A from E to table | Move E from C to table | Move C from D to table | Move D from table to C | Move E from table to D | Move A from table to E] | Reached goal state!",
        "system2_states_v1": 28
    },
    {
        "idx": 812,
        "start": [
            [
                "table",
                "A",
                "F",
                "C",
                "E",
                "D",
                "B"
            ]
        ],
        "goal": [
            [
                "table",
                "B"
            ],
            [
                "table",
                "C",
                "A",
                "E",
                "F",
                "D"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": false,
                "on": -1,
                "under": "F",
                "ontable": true
            },
            "B": {
                "clear": true,
                "on": "D",
                "under": -1,
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": "F",
                "under": "E",
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": "E",
                "under": "B",
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": "C",
                "under": "D",
                "ontable": false
            },
            "F": {
                "clear": false,
                "on": "A",
                "under": "C",
                "ontable": false
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": false,
                "on": "C",
                "under": "E",
                "ontable": false
            },
            "B": {
                "clear": true,
                "on": -1,
                "under": -1,
                "ontable": true
            },
            "C": {
                "clear": false,
                "on": -1,
                "under": "A",
                "ontable": true
            },
            "D": {
                "clear": true,
                "on": "F",
                "under": -1,
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": "A",
                "under": "F",
                "ontable": false
            },
            "F": {
                "clear": false,
                "on": "E",
                "under": "D",
                "ontable": false
            }
        },
        "plan_len": 9,
        "num_blocks": 6,
        "prompt": "The initial state:\nThe hand is empty.\nA is on the table. F is on A. C is on F. E is on C. D is on E. B is on D. B is clear.\n\nThe goal is:\nB is on the table. B is clear.\nC is on the table. A is on C. E is on A. F is on E. D is on F. D is clear.\n",
        "system1_plan": "Move B from D to table | Move D from E to table | Move E from C to table | Move C from F to table | Move F from A to table | Move A from table to C | Move E from table to A | Move F from table to E | Move D from table to F",
        "system1_states": 9,
        "system2_plan_v1": "Moved to state -> Stack 1: [A, F, C, E, D, B] | Plan so far [] | Exploring action Move D from E to B | New state -> Invalid | Exploring action Move B from D to table | New state -> Stack 1: [A, F, C, E, D], Stack 2: [B] | Exploring action Move C from F to B | New state -> Invalid | Taking action Move B from D to table | Moved to state -> Stack 1: [A, F, C, E, D], Stack 2: [B] | Plan so far [Move B from D to table] | Exploring action Move F from A to D | New state -> Invalid | Exploring action Move D from E to table | New state -> Stack 1: [A, F, C, E], Stack 2: [B], Stack 3: [D] | Exploring action Move B from table to D | New state -> Stack 1: [A, F, C, E, D, B] | Exploring action Move D from E to B | New state -> Stack 1: [A, F, C, E], Stack 2: [B, D] | Taking action Move D from E to table | Moved to state -> Stack 1: [A, F, C, E], Stack 2: [B], Stack 3: [D] | Plan so far [Move B from D to table | Move D from E to table] | Exploring action Move E from C to D | New state -> Stack 1: [A, F, C], Stack 2: [B], Stack 3: [D, E] | Exploring action Move E from C to table | New state -> Stack 1: [A, F, C], Stack 2: [B], Stack 3: [D], Stack 4: [E] | Exploring action Move E from C to B | New state -> Stack 1: [A, F, C], Stack 2: [B, E], Stack 3: [D] | Exploring action Move A from table to D | New state -> Invalid | Taking action Move E from C to table | Moved to state -> Stack 1: [A, F, C], Stack 2: [B], Stack 3: [D], Stack 4: [E] | Plan so far [Move B from D to table | Move D from E to table | Move E from C to table] | Exploring action Move F from A to B | New state -> Invalid | Exploring action Move F from A to table | New state -> Invalid | Exploring action Move C from F to D | New state -> Stack 1: [A, F], Stack 2: [B], Stack 3: [D, C], Stack 4: [E] | Exploring action Move C from F to table | New state -> Stack 1: [A, F], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Exploring action Move C from F to E | New state -> Stack 1: [A, F], Stack 2: [B], Stack 3: [D], Stack 4: [E, C] | Taking action Move C from F to table | Moved to state -> Stack 1: [A, F], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Plan so far [Move B from D to table | Move D from E to table | Move E from C to table | Move C from F to table] | Exploring action Move F from A to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Exploring action Move F from A to D | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D, F], Stack 5: [E] | Exploring action Move A from table to D | New state -> Invalid | Exploring action Move A from table to E | New state -> Invalid | Exploring action Move D from table to F | New state -> Stack 1: [A, F, D], Stack 2: [B], Stack 3: [C], Stack 4: [E] | Taking action Move F from A to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Plan so far [Move B from D to table | Move D from E to table | Move E from C to table | Move C from F to table | Move F from A to table] | Exploring action Move A from table to C | New state -> Stack 1: [B], Stack 2: [C, A], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Exploring action Move A from table to D | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, A], Stack 4: [E], Stack 5: [F] | Exploring action Move D from table to F | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [E], Stack 5: [F, D] | Taking action Move A from table to C | Moved to state -> Stack 1: [B], Stack 2: [C, A], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Plan so far [Move B from D to table | Move D from E to table | Move E from C to table | Move C from F to table | Move F from A to table | Move A from table to C] | Exploring action Move C from table to B | New state -> Invalid | Exploring action Move D from table to F | New state -> Stack 1: [B], Stack 2: [C, A], Stack 3: [E], Stack 4: [F, D] | Exploring action Move A from C to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Exploring action Move C from table to E | New state -> Invalid | Exploring action Move E from table to A | New state -> Stack 1: [B], Stack 2: [C, A, E], Stack 3: [D], Stack 4: [F] | Taking action Move E from table to A | Moved to state -> Stack 1: [B], Stack 2: [C, A, E], Stack 3: [D], Stack 4: [F] | Plan so far [Move B from D to table | Move D from E to table | Move E from C to table | Move C from F to table | Move F from A to table | Move A from table to C | Move E from table to A] | Exploring action Move F from table to E | New state -> Stack 1: [B], Stack 2: [C, A, E, F], Stack 3: [D] | Exploring action Move A from C to B | New state -> Invalid | Exploring action Move E from A to table | New state -> Stack 1: [B], Stack 2: [C, A], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Exploring action Move D from table to F | New state -> Stack 1: [B], Stack 2: [C, A, E], Stack 3: [F, D] | Taking action Move F from table to E | Moved to state -> Stack 1: [B], Stack 2: [C, A, E, F], Stack 3: [D] | Plan so far [Move B from D to table | Move D from E to table | Move E from C to table | Move C from F to table | Move F from A to table | Move A from table to C | Move E from table to A | Move F from table to E] | Exploring action Move D from table to F | New state -> Stack 1: [B], Stack 2: [C, A, E, F, D] | Exploring action Move E from A to F | New state -> Invalid | Exploring action Move D from table to B | New state -> Stack 1: [B, D], Stack 2: [C, A, E, F] | Exploring action Move F from E to table | New state -> Stack 1: [B], Stack 2: [C, A, E], Stack 3: [D], Stack 4: [F] | Taking action Move D from table to F | Moved to state -> Stack 1: [B], Stack 2: [C, A, E, F, D] | Plan so far [Move B from D to table | Move D from E to table | Move E from C to table | Move C from F to table | Move F from A to table | Move A from table to C | Move E from table to A | Move F from table to E | Move D from table to F] | Reached goal state!",
        "system2_states_v1": 37
    },
    {
        "idx": 914,
        "start": [
            [
                "table",
                "A",
                "D",
                "B",
                "E"
            ],
            [
                "table",
                "G",
                "C",
                "F"
            ]
        ],
        "goal": [
            [
                "table",
                "B",
                "G",
                "E",
                "D",
                "F"
            ],
            [
                "table",
                "C",
                "A"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": false,
                "on": -1,
                "under": "D",
                "ontable": true
            },
            "B": {
                "clear": false,
                "on": "D",
                "under": "E",
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": "G",
                "under": "F",
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": "A",
                "under": "B",
                "ontable": false
            },
            "E": {
                "clear": true,
                "on": "B",
                "under": -1,
                "ontable": false
            },
            "F": {
                "clear": true,
                "on": "C",
                "under": -1,
                "ontable": false
            },
            "G": {
                "clear": false,
                "on": -1,
                "under": "C",
                "ontable": true
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": true,
                "on": "C",
                "under": -1,
                "ontable": false
            },
            "B": {
                "clear": false,
                "on": -1,
                "under": "G",
                "ontable": true
            },
            "C": {
                "clear": false,
                "on": -1,
                "under": "A",
                "ontable": true
            },
            "D": {
                "clear": false,
                "on": "E",
                "under": "F",
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": "G",
                "under": "D",
                "ontable": false
            },
            "F": {
                "clear": true,
                "on": "D",
                "under": -1,
                "ontable": false
            },
            "G": {
                "clear": false,
                "on": "B",
                "under": "E",
                "ontable": false
            }
        },
        "plan_len": 10,
        "num_blocks": 7,
        "prompt": "The initial state:\nThe hand is empty.\nA is on the table. D is on A. B is on D. E is on B. E is clear.\nG is on the table. C is on G. F is on C. F is clear.\n\nThe goal is:\nB is on the table. G is on B. E is on G. D is on E. F is on D. F is clear.\nC is on the table. A is on C. A is clear.\n",
        "system1_plan": "Move E from B to table | Move B from D to table | Move F from C to table | Move D from A to table | Move C from G to table | Move A from table to C | Move G from table to B | Move E from table to G | Move D from table to E | Move F from table to D",
        "system1_states": 10,
        "system2_plan_v1": "Moved to state -> Stack 1: [A, D, B, E], Stack 2: [G, C, F] | Plan so far [] | Exploring action Move E from B to F | New state -> Stack 1: [A, D, B], Stack 2: [G, C, F, E] | Exploring action Move A from table to E | New state -> Invalid | Exploring action Move F from C to table | New state -> Stack 1: [A, D, B, E], Stack 2: [F], Stack 3: [G, C] | Exploring action Move E from B to table | New state -> Stack 1: [A, D, B], Stack 2: [E], Stack 3: [G, C, F] | Exploring action Move D from A to F | New state -> Invalid | Taking action Move E from B to table | Moved to state -> Stack 1: [A, D, B], Stack 2: [E], Stack 3: [G, C, F] | Plan so far [Move E from B to table] | Exploring action Move F from C to B | New state -> Stack 1: [A, D, B, F], Stack 2: [E], Stack 3: [G, C] | Exploring action Move F from C to table | New state -> Stack 1: [A, D, B], Stack 2: [E], Stack 3: [F], Stack 4: [G, C] | Exploring action Move C from G to F | New state -> Invalid | Exploring action Move B from D to table | New state -> Stack 1: [A, D], Stack 2: [B], Stack 3: [E], Stack 4: [G, C, F] | Exploring action Move G from table to B | New state -> Invalid | Taking action Move F from C to table | Moved to state -> Stack 1: [A, D, B, E], Stack 2: [F], Stack 3: [G, C] | Plan so far [Move F from C to table] | Exploring action Move E from B to table | New state -> Stack 1: [A, D, B], Stack 2: [E], Stack 3: [F], Stack 4: [G, C] | Exploring action Move A from table to F | New state -> Invalid | Exploring action Move C from G to table | New state -> Stack 1: [A, D, B, E], Stack 2: [C], Stack 3: [F], Stack 4: [G] | Exploring action Move C from G to F | New state -> Stack 1: [A, D, B, E], Stack 2: [F, C], Stack 3: [G] | Taking action Move B from D to table | Moved to state -> Stack 1: [A, D], Stack 2: [B], Stack 3: [E], Stack 4: [G, C, F] | Plan so far [Move E from B to table | Move B from D to table] | Exploring action Move F from C to table | New state -> Stack 1: [A, D], Stack 2: [B], Stack 3: [E], Stack 4: [F], Stack 5: [G, C] | Exploring action Move F from C to D | New state -> Stack 1: [A, D, F], Stack 2: [B], Stack 3: [E], Stack 4: [G, C] | Exploring action Move D from A to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D], Stack 4: [E], Stack 5: [G, C, F] | Exploring action Move A from table to D | New state -> Invalid | Taking action Move E from B to table | Moved to state -> Stack 1: [A, D, B], Stack 2: [E], Stack 3: [F], Stack 4: [G, C] | Plan so far [Move F from C to table | Move E from B to table] | Exploring action Move B from D to E | New state -> Stack 1: [A, D], Stack 2: [E, B], Stack 3: [F], Stack 4: [G, C] | Exploring action Move B from D to table | New state -> Stack 1: [A, D], Stack 2: [B], Stack 3: [E], Stack 4: [F], Stack 5: [G, C] | Exploring action Move G from table to B | New state -> Invalid | Exploring action Move C from G to table | New state -> Stack 1: [A, D, B], Stack 2: [C], Stack 3: [E], Stack 4: [F], Stack 5: [G] | Taking action Move F from C to table | Moved to state -> Stack 1: [A, D], Stack 2: [B], Stack 3: [E], Stack 4: [F], Stack 5: [G, C] | Plan so far [Move E from B to table | Move B from D to table | Move F from C to table] | Exploring action Move C from G to B | New state -> Stack 1: [A, D], Stack 2: [B, C], Stack 3: [E], Stack 4: [F], Stack 5: [G] | Exploring action Move A from table to C | New state -> Invalid | Exploring action Move C from G to table | New state -> Stack 1: [A, D], Stack 2: [B], Stack 3: [C], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Exploring action Move D from A to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D], Stack 4: [E], Stack 5: [F], Stack 6: [G, C] | Taking action Move F from C to D | Moved to state -> Stack 1: [A, D, F], Stack 2: [B], Stack 3: [E], Stack 4: [G, C] | Plan so far [Move E from B to table | Move B from D to table | Move F from C to D] | Exploring action Move C from G to table | New state -> Stack 1: [A, D, F], Stack 2: [B], Stack 3: [C], Stack 4: [E], Stack 5: [G] | Exploring action Move A from table to E | New state -> Invalid | Exploring action Move G from table to C | New state -> Invalid | Exploring action Move C from G to E | New state -> Stack 1: [A, D, F], Stack 2: [B], Stack 3: [E, C], Stack 4: [G] | Exploring action Move C from G to B | New state -> Stack 1: [A, D, F], Stack 2: [B, C], Stack 3: [E], Stack 4: [G] | Taking action Move B from D to table | Moved to state -> Stack 1: [A, D], Stack 2: [B], Stack 3: [E], Stack 4: [F], Stack 5: [G, C] | Plan so far [Move F from C to table | Move E from B to table | Move B from D to table] | Taking action Move C from G to table | Moved to state -> Stack 1: [A, D], Stack 2: [B], Stack 3: [C], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Plan so far [Move E from B to table | Move B from D to table | Move F from C to table | Move C from G to table] | Exploring action Move D from A to E | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [E, D], Stack 5: [F], Stack 6: [G] | Exploring action Move D from A to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F], Stack 7: [G] | Exploring action Move G from table to B | New state -> Stack 1: [A, D], Stack 2: [B, G], Stack 3: [C], Stack 4: [E], Stack 5: [F] | Exploring action Move A from table to C | New state -> Invalid | Exploring action Move A from table to E | New state -> Invalid | Taking action Move D from A to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [D], Stack 4: [E], Stack 5: [F], Stack 6: [G, C] | Plan so far [Move E from B to table | Move B from D to table | Move F from C to table | Move D from A to table] | Exploring action Move C from G to D | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, C], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Exploring action Move G from table to C | New state -> Invalid | Exploring action Move C from G to A | New state -> Stack 1: [A, C], Stack 2: [B], Stack 3: [D], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Exploring action Move G from table to E | New state -> Invalid | Exploring action Move C from G to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F], Stack 7: [G] | Taking action Move G from table to B | Moved to state -> Stack 1: [A, D], Stack 2: [B, G], Stack 3: [C], Stack 4: [E], Stack 5: [F] | Plan so far [Move E from B to table | Move B from D to table | Move F from C to table | Move C from G to table | Move G from table to B] | Exploring action Move D from A to E | New state -> Stack 1: [A], Stack 2: [B, G], Stack 3: [C], Stack 4: [E, D], Stack 5: [F] | Exploring action Move D from A to table | New state -> Stack 1: [A], Stack 2: [B, G], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Exploring action Move E from table to G | New state -> Stack 1: [A, D], Stack 2: [B, G, E], Stack 3: [C], Stack 4: [F] | Exploring action Move B from table to D | New state -> Invalid | Taking action Move C from G to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F], Stack 7: [G] | Plan so far [Move E from B to table | Move B from D to table | Move F from C to table | Move D from A to table | Move C from G to table] | Exploring action Move F from table to D | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D, F], Stack 5: [E], Stack 6: [G] | Exploring action Move A from table to C | New state -> Stack 1: [B], Stack 2: [C, A], Stack 3: [D], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Exploring action Move G from table to B | New state -> Stack 1: [A], Stack 2: [B, G], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Taking action Move A from table to C | Moved to state -> Stack 1: [B], Stack 2: [C, A], Stack 3: [D], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Plan so far [Move E from B to table | Move B from D to table | Move F from C to table | Move D from A to table | Move C from G to table | Move A from table to C] | Exploring action Move C from table to A | New state -> Invalid | Exploring action Move B from table to D | New state -> Stack 1: [C, A], Stack 2: [D, B], Stack 3: [E], Stack 4: [F], Stack 5: [G] | Exploring action Move G from table to B | New state -> Stack 1: [B, G], Stack 2: [C, A], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Exploring action Move F from table to D | New state -> Stack 1: [B], Stack 2: [C, A], Stack 3: [D, F], Stack 4: [E], Stack 5: [G] | Taking action Move G from table to B | Moved to state -> Stack 1: [B, G], Stack 2: [C, A], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Plan so far [Move E from B to table | Move B from D to table | Move F from C to table | Move D from A to table | Move C from G to table | Move A from table to C | Move G from table to B] | Exploring action Move D from table to E | New state -> Stack 1: [B, G], Stack 2: [C, A], Stack 3: [E, D], Stack 4: [F] | Exploring action Move F from table to D | New state -> Stack 1: [B, G], Stack 2: [C, A], Stack 3: [D, F], Stack 4: [E] | Exploring action Move E from table to G | New state -> Stack 1: [B, G, E], Stack 2: [C, A], Stack 3: [D], Stack 4: [F] | Exploring action Move B from table to F | New state -> Invalid | Taking action Move E from table to G | Moved to state -> Stack 1: [B, G, E], Stack 2: [C, A], Stack 3: [D], Stack 4: [F] | Plan so far [Move E from B to table | Move B from D to table | Move F from C to table | Move D from A to table | Move C from G to table | Move A from table to C | Move G from table to B | Move E from table to G] | Exploring action Move D from table to E | New state -> Stack 1: [B, G, E, D], Stack 2: [C, A], Stack 3: [F] | Exploring action Move F from table to D | New state -> Stack 1: [B, G, E], Stack 2: [C, A], Stack 3: [D, F] | Exploring action Move F from table to E | New state -> Stack 1: [B, G, E, F], Stack 2: [C, A], Stack 3: [D] | Exploring action Move G from B to table | New state -> Invalid | Taking action Move D from table to E | Moved to state -> Stack 1: [B, G, E, D], Stack 2: [C, A], Stack 3: [F] | Plan so far [Move E from B to table | Move B from D to table | Move F from C to table | Move D from A to table | Move C from G to table | Move A from table to C | Move G from table to B | Move E from table to G | Move D from table to E] | Exploring action Move B from table to F | New state -> Invalid | Exploring action Move D from E to F | New state -> Stack 1: [B, G, E], Stack 2: [C, A], Stack 3: [F, D] | Exploring action Move F from table to D | New state -> Stack 1: [B, G, E, D, F], Stack 2: [C, A] | Exploring action Move C from table to F | New state -> Invalid | Exploring action Move D from E to table | New state -> Stack 1: [B, G, E], Stack 2: [C, A], Stack 3: [D], Stack 4: [F] | Taking action Move F from table to D | Moved to state -> Stack 1: [B, G, E, D, F], Stack 2: [C, A] | Plan so far [Move E from B to table | Move B from D to table | Move F from C to table | Move D from A to table | Move C from G to table | Move A from table to C | Move G from table to B | Move E from table to G | Move D from table to E | Move F from table to D] | Reached goal state!",
        "system2_states_v1": 65
    },
    {
        "idx": 720,
        "start": [
            [
                "table",
                "C",
                "E",
                "A",
                "B"
            ],
            [
                "table",
                "F",
                "D"
            ]
        ],
        "goal": [
            [
                "table",
                "A",
                "F",
                "D"
            ],
            [
                "table",
                "B",
                "C",
                "E"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": false,
                "on": "E",
                "under": "B",
                "ontable": false
            },
            "B": {
                "clear": true,
                "on": "A",
                "under": -1,
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": -1,
                "under": "E",
                "ontable": true
            },
            "D": {
                "clear": true,
                "on": "F",
                "under": -1,
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": "C",
                "under": "A",
                "ontable": false
            },
            "F": {
                "clear": false,
                "on": -1,
                "under": "D",
                "ontable": true
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": false,
                "on": -1,
                "under": "F",
                "ontable": true
            },
            "B": {
                "clear": false,
                "on": -1,
                "under": "C",
                "ontable": true
            },
            "C": {
                "clear": false,
                "on": "B",
                "under": "E",
                "ontable": false
            },
            "D": {
                "clear": true,
                "on": "F",
                "under": -1,
                "ontable": false
            },
            "E": {
                "clear": true,
                "on": "C",
                "under": -1,
                "ontable": false
            },
            "F": {
                "clear": false,
                "on": "A",
                "under": "D",
                "ontable": false
            }
        },
        "plan_len": 8,
        "num_blocks": 6,
        "prompt": "The initial state:\nThe hand is empty.\nC is on the table. E is on C. A is on E. B is on A. B is clear.\nF is on the table. D is on F. D is clear.\n\nThe goal is:\nA is on the table. F is on A. D is on F. D is clear.\nB is on the table. C is on B. E is on C. E is clear.\n",
        "system1_plan": "Move B from A to table | Move A from E to table | Move D from F to table | Move F from table to A | Move D from table to F | Move E from C to table | Move C from table to B | Move E from table to C",
        "system1_states": 8,
        "system2_plan_v1": "Moved to state -> Stack 1: [C, E, A, B], Stack 2: [F, D] | Plan so far [] | Exploring action Move B from A to D | New state -> Stack 1: [C, E, A], Stack 2: [F, D, B] | Exploring action Move B from A to table | New state -> Stack 1: [B], Stack 2: [C, E, A], Stack 3: [F, D] | Exploring action Move D from F to table | New state -> Stack 1: [C, E, A, B], Stack 2: [D], Stack 3: [F] | Exploring action Move A from E to table | New state -> Invalid | Taking action Move B from A to table | Moved to state -> Stack 1: [B], Stack 2: [C, E, A], Stack 3: [F, D] | Plan so far [Move B from A to table] | Exploring action Move A from E to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, E], Stack 4: [F, D] | Exploring action Move A from E to B | New state -> Stack 1: [B, A], Stack 2: [C, E], Stack 3: [F, D] | Exploring action Move E from C to B | New state -> Invalid | Exploring action Move A from E to D | New state -> Stack 1: [B], Stack 2: [C, E], Stack 3: [F, D, A] | Exploring action Move C from table to B | New state -> Invalid | Taking action Move A from E to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, E], Stack 4: [F, D] | Plan so far [Move B from A to table | Move A from E to table] | Exploring action Move E from C to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [E], Stack 5: [F, D] | Exploring action Move D from F to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, E], Stack 4: [D], Stack 5: [F] | Exploring action Move F from table to A | New state -> Invalid | Exploring action Move C from table to A | New state -> Invalid | Exploring action Move A from table to B | New state -> Stack 1: [B, A], Stack 2: [C, E], Stack 3: [F, D] | Taking action Move A from E to B | Moved to state -> Stack 1: [B, A], Stack 2: [C, E], Stack 3: [F, D] | Plan so far [Move B from A to table | Move A from E to B] | Exploring action Move E from C to table | New state -> Stack 1: [B, A], Stack 2: [C], Stack 3: [E], Stack 4: [F, D] | Exploring action Move A from B to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, E], Stack 4: [F, D] | Exploring action Move D from F to table | New state -> Stack 1: [B, A], Stack 2: [C, E], Stack 3: [D], Stack 4: [F] | Exploring action Move F from table to E | New state -> Invalid | Taking action Move D from F to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, E], Stack 4: [D], Stack 5: [F] | Plan so far [Move B from A to table | Move A from E to table | Move D from F to table] | Exploring action Move F from table to A | New state -> Stack 1: [A, F], Stack 2: [B], Stack 3: [C, E], Stack 4: [D] | Exploring action Move C from table to D | New state -> Invalid | Exploring action Move D from table to F | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, E], Stack 4: [F, D] | Exploring action Move E from C to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Taking action Move A from B to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, E], Stack 4: [F, D] | Plan so far [Move B from A to table | Move A from E to B | Move A from B to table] | Taking action Move F from table to A | Moved to state -> Stack 1: [A, F], Stack 2: [B], Stack 3: [C, E], Stack 4: [D] | Plan so far [Move B from A to table | Move A from E to table | Move D from F to table | Move F from table to A] | Exploring action Move A from table to F | New state -> Invalid | Exploring action Move D from table to F | New state -> Stack 1: [A, F, D], Stack 2: [B], Stack 3: [C, E] | Exploring action Move E from C to table | New state -> Stack 1: [A, F], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Exploring action Move B from table to D | New state -> Stack 1: [A, F], Stack 2: [C, E], Stack 3: [D, B] | Exploring action Move A from table to D | New state -> Invalid | Taking action Move D from table to F | Moved to state -> Stack 1: [A, F, D], Stack 2: [B], Stack 3: [C, E] | Plan so far [Move B from A to table | Move A from E to table | Move D from F to table | Move F from table to A | Move D from table to F] | Exploring action Move E from C to B | New state -> Stack 1: [A, F, D], Stack 2: [B, E], Stack 3: [C] | Exploring action Move F from A to table | New state -> Invalid | Exploring action Move E from C to table | New state -> Stack 1: [A, F, D], Stack 2: [B], Stack 3: [C], Stack 4: [E] | Exploring action Move B from table to D | New state -> Stack 1: [A, F, D, B], Stack 2: [C, E] | Taking action Move E from C to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [E], Stack 5: [F, D] | Plan so far [Move B from A to table | Move A from E to table | Move E from C to table] | Exploring action Move F from table to C | New state -> Invalid | Exploring action Move E from table to C | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, E], Stack 4: [F, D] | Exploring action Move C from table to B | New state -> Stack 1: [A], Stack 2: [B, C], Stack 3: [E], Stack 4: [F, D] | Exploring action Move D from F to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Exploring action Move F from table to E | New state -> Invalid | Taking action Move E from C to table | Moved to state -> Stack 1: [A, F, D], Stack 2: [B], Stack 3: [C], Stack 4: [E] | Plan so far [Move B from A to table | Move A from E to table | Move D from F to table | Move F from table to A | Move D from table to F | Move E from C to table] | Exploring action Move B from table to E | New state -> Stack 1: [A, F, D], Stack 2: [C], Stack 3: [E, B] | Exploring action Move F from A to B | New state -> Invalid | Exploring action Move E from table to C | New state -> Stack 1: [A, F, D], Stack 2: [B], Stack 3: [C, E] | Exploring action Move A from table to C | New state -> Invalid | Exploring action Move C from table to B | New state -> Stack 1: [A, F, D], Stack 2: [B, C], Stack 3: [E] | Taking action Move C from table to B | Moved to state -> Stack 1: [A], Stack 2: [B, C], Stack 3: [E], Stack 4: [F, D] | Plan so far [Move B from A to table | Move A from E to table | Move E from C to table | Move C from table to B] | Exploring action Move E from table to C | New state -> Stack 1: [A], Stack 2: [B, C, E], Stack 3: [F, D] | Exploring action Move F from table to D | New state -> Invalid | Exploring action Move D from F to table | New state -> Stack 1: [A], Stack 2: [B, C], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Exploring action Move A from table to E | New state -> Stack 1: [B, C], Stack 2: [E, A], Stack 3: [F, D] | Exploring action Move B from table to A | New state -> Invalid | Taking action Move E from table to C | Moved to state -> Stack 1: [A], Stack 2: [B, C, E], Stack 3: [F, D] | Plan so far [Move B from A to table | Move A from E to table | Move E from C to table | Move C from table to B | Move E from table to C] | Exploring action Move D from F to A | New state -> Stack 1: [A, D], Stack 2: [B, C, E], Stack 3: [F] | Exploring action Move D from F to table | New state -> Stack 1: [A], Stack 2: [B, C, E], Stack 3: [D], Stack 4: [F] | Exploring action Move C from B to E | New state -> Invalid | Exploring action Move A from table to D | New state -> Stack 1: [B, C, E], Stack 2: [F, D, A] | Exploring action Move B from table to D | New state -> Invalid | Taking action Move C from table to B | Moved to state -> Stack 1: [A, F, D], Stack 2: [B, C], Stack 3: [E] | Plan so far [Move B from A to table | Move A from E to table | Move D from F to table | Move F from table to A | Move D from table to F | Move E from C to table | Move C from table to B] | Exploring action Move E from table to C | New state -> Stack 1: [A, F, D], Stack 2: [B, C, E] | Exploring action Move C from B to E | New state -> Stack 1: [A, F, D], Stack 2: [B], Stack 3: [E, C] | Exploring action Move C from B to table | New state -> Stack 1: [A, F, D], Stack 2: [B], Stack 3: [C], Stack 4: [E] | Exploring action Move B from table to E | New state -> Invalid | Exploring action Move A from table to C | New state -> Invalid | Taking action Move E from table to C | Moved to state -> Stack 1: [A, F, D], Stack 2: [B, C, E] | Plan so far [Move B from A to table | Move A from E to table | Move D from F to table | Move F from table to A | Move D from table to F | Move E from C to table | Move C from table to B | Move E from table to C] | Reached goal state!",
        "system2_states_v1": 56
    },
    {
        "idx": 783,
        "start": [
            [
                "table",
                "A",
                "B"
            ],
            [
                "table",
                "E",
                "C",
                "D",
                "F"
            ]
        ],
        "goal": [
            [
                "table",
                "D",
                "E",
                "A",
                "F",
                "B",
                "C"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": false,
                "on": -1,
                "under": "B",
                "ontable": true
            },
            "B": {
                "clear": true,
                "on": "A",
                "under": -1,
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": "E",
                "under": "D",
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": "C",
                "under": "F",
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": -1,
                "under": "C",
                "ontable": true
            },
            "F": {
                "clear": true,
                "on": "D",
                "under": -1,
                "ontable": false
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": false,
                "on": "E",
                "under": "F",
                "ontable": false
            },
            "B": {
                "clear": false,
                "on": "F",
                "under": "C",
                "ontable": false
            },
            "C": {
                "clear": true,
                "on": "B",
                "under": -1,
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": -1,
                "under": "E",
                "ontable": true
            },
            "E": {
                "clear": false,
                "on": "D",
                "under": "A",
                "ontable": false
            },
            "F": {
                "clear": false,
                "on": "A",
                "under": "B",
                "ontable": false
            }
        },
        "plan_len": 9,
        "num_blocks": 6,
        "prompt": "The initial state:\nThe hand is empty.\nA is on the table. B is on A. B is clear.\nE is on the table. C is on E. D is on C. F is on D. F is clear.\n\nThe goal is:\nD is on the table. E is on D. A is on E. F is on A. B is on F. C is on B. C is clear.\n",
        "system1_plan": "Move F from D to table | Move D from C to table | Move B from A to table | Move C from E to table | Move E from table to D | Move A from table to E | Move F from table to A | Move B from table to F | Move C from table to B",
        "system1_states": 9,
        "system2_plan_v1": "Moved to state -> Stack 1: [A, B], Stack 2: [E, C, D, F] | Plan so far [] | Exploring action Move C from E to table | New state -> Invalid | Exploring action Move F from D to table | New state -> Stack 1: [A, B], Stack 2: [E, C, D], Stack 3: [F] | Exploring action Move D from C to table | New state -> Invalid | Exploring action Move B from A to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [E, C, D, F] | Exploring action Move B from A to F | New state -> Stack 1: [A], Stack 2: [E, C, D, F, B] | Taking action Move B from A to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [E, C, D, F] | Plan so far [Move B from A to table] | Exploring action Move F from D to A | New state -> Stack 1: [A, F], Stack 2: [B], Stack 3: [E, C, D] | Exploring action Move F from D to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [E, C, D], Stack 4: [F] | Exploring action Move E from table to A | New state -> Invalid | Exploring action Move F from D to B | New state -> Stack 1: [A], Stack 2: [B, F], Stack 3: [E, C, D] | Taking action Move F from D to table | Moved to state -> Stack 1: [A, B], Stack 2: [E, C, D], Stack 3: [F] | Plan so far [Move F from D to table] | Exploring action Move B from A to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [E, C, D], Stack 4: [F] | Exploring action Move B from A to F | New state -> Stack 1: [A], Stack 2: [E, C, D], Stack 3: [F, B] | Exploring action Move D from C to table | New state -> Stack 1: [A, B], Stack 2: [D], Stack 3: [E, C], Stack 4: [F] | Exploring action Move A from table to F | New state -> Invalid | Exploring action Move C from E to B | New state -> Invalid | Taking action Move F from D to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [E, C, D], Stack 4: [F] | Plan so far [Move B from A to table | Move F from D to table] | Exploring action Move D from C to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D], Stack 4: [E, C], Stack 5: [F] | Exploring action Move D from C to F | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [E, C], Stack 4: [F, D] | Exploring action Move C from E to F | New state -> Invalid | Exploring action Move D from C to A | New state -> Stack 1: [A, D], Stack 2: [B], Stack 3: [E, C], Stack 4: [F] | Taking action Move D from C to table | Moved to state -> Stack 1: [A, B], Stack 2: [D], Stack 3: [E, C], Stack 4: [F] | Plan so far [Move F from D to table | Move D from C to table] | Exploring action Move A from table to D | New state -> Invalid | Exploring action Move C from E to table | New state -> Stack 1: [A, B], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Exploring action Move A from table to B | New state -> Invalid | Exploring action Move C from E to B | New state -> Stack 1: [A, B, C], Stack 2: [D], Stack 3: [E], Stack 4: [F] | Exploring action Move B from A to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D], Stack 4: [E, C], Stack 5: [F] | Taking action Move B from A to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [E, C, D], Stack 4: [F] | Plan so far [Move F from D to table | Move B from A to table] | Taking action Move B from A to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [D], Stack 4: [E, C], Stack 5: [F] | Plan so far [Move F from D to table | Move D from C to table | Move B from A to table] | Exploring action Move C from E to B | New state -> Stack 1: [A], Stack 2: [B, C], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Exploring action Move C from E to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Exploring action Move E from table to A | New state -> Invalid | Exploring action Move E from table to D | New state -> Invalid | Exploring action Move C from E to D | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, C], Stack 4: [E], Stack 5: [F] | Taking action Move D from C to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [D], Stack 4: [E, C], Stack 5: [F] | Plan so far [Move B from A to table | Move F from D to table | Move D from C to table] | Taking action Move C from E to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Plan so far [Move F from D to table | Move D from C to table | Move B from A to table | Move C from E to table] | Exploring action Move B from table to C | New state -> Stack 1: [A], Stack 2: [C, B], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Exploring action Move E from table to D | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D, E], Stack 5: [F] | Exploring action Move C from table to B | New state -> Stack 1: [A], Stack 2: [B, C], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Taking action Move C from E to B | Moved to state -> Stack 1: [A], Stack 2: [B, C], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Plan so far [Move F from D to table | Move D from C to table | Move B from A to table | Move C from E to B] | Exploring action Move E from table to D | New state -> Stack 1: [A], Stack 2: [B, C], Stack 3: [D, E], Stack 4: [F] | Exploring action Move B from table to F | New state -> Invalid | Exploring action Move A from table to E | New state -> Stack 1: [B, C], Stack 2: [D], Stack 3: [E, A], Stack 4: [F] | Exploring action Move C from B to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Exploring action Move B from table to E | New state -> Invalid | Taking action Move C from E to table | Moved to state -> Stack 1: [A, B], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Plan so far [Move F from D to table | Move D from C to table | Move C from E to table] | Exploring action Move A from table to F | New state -> Invalid | Exploring action Move A from table to C | New state -> Invalid | Exploring action Move B from A to D | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, B], Stack 4: [E], Stack 5: [F] | Exploring action Move B from A to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Exploring action Move E from table to D | New state -> Stack 1: [A, B], Stack 2: [C], Stack 3: [D, E], Stack 4: [F] | Taking action Move E from table to D | Moved to state -> Stack 1: [A], Stack 2: [B, C], Stack 3: [D, E], Stack 4: [F] | Plan so far [Move F from D to table | Move D from C to table | Move B from A to table | Move C from E to B | Move E from table to D] | Exploring action Move B from table to C | New state -> Invalid | Exploring action Move A from table to E | New state -> Stack 1: [B, C], Stack 2: [D, E, A], Stack 3: [F] | Exploring action Move A from table to F | New state -> Stack 1: [B, C], Stack 2: [D, E], Stack 3: [F, A] | Exploring action Move C from B to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D, E], Stack 5: [F] | Taking action Move B from A to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Plan so far [Move F from D to table | Move D from C to table | Move C from E to table | Move B from A to table] | Taking action Move E from table to D | Moved to state -> Stack 1: [A, B], Stack 2: [C], Stack 3: [D, E], Stack 4: [F] | Plan so far [Move F from D to table | Move D from C to table | Move C from E to table | Move E from table to D] | Exploring action Move B from A to E | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, E, B], Stack 4: [F] | Exploring action Move B from A to C | New state -> Stack 1: [A], Stack 2: [C, B], Stack 3: [D, E], Stack 4: [F] | Exploring action Move A from table to E | New state -> Invalid | Exploring action Move B from A to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D, E], Stack 5: [F] | Exploring action Move A from table to F | New state -> Invalid | Taking action Move E from table to D | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D, E], Stack 5: [F] | Plan so far [Move F from D to table | Move D from C to table | Move B from A to table | Move C from E to table | Move E from table to D] | Exploring action Move A from table to B | New state -> Stack 1: [B, A], Stack 2: [C], Stack 3: [D, E], Stack 4: [F] | Exploring action Move A from table to E | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, E, A], Stack 4: [F] | Exploring action Move D from table to A | New state -> Invalid | Exploring action Move C from table to B | New state -> Stack 1: [A], Stack 2: [B, C], Stack 3: [D, E], Stack 4: [F] | Taking action Move C from E to B | Moved to state -> Stack 1: [A, B, C], Stack 2: [D], Stack 3: [E], Stack 4: [F] | Plan so far [Move F from D to table | Move D from C to table | Move C from E to B] | Exploring action Move E from table to D | New state -> Stack 1: [A, B, C], Stack 2: [D, E], Stack 3: [F] | Exploring action Move C from B to table | New state -> Stack 1: [A, B], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Exploring action Move B from A to table | New state -> Invalid | Exploring action Move C from B to E | New state -> Stack 1: [A, B], Stack 2: [D], Stack 3: [E, C], Stack 4: [F] | Taking action Move A from table to E | Moved to state -> Stack 1: [B, C], Stack 2: [D, E, A], Stack 3: [F] | Plan so far [Move F from D to table | Move D from C to table | Move B from A to table | Move C from E to B | Move E from table to D | Move A from table to E] | Exploring action Move F from table to A | New state -> Stack 1: [B, C], Stack 2: [D, E, A, F] | Exploring action Move C from B to F | New state -> Stack 1: [B], Stack 2: [D, E, A], Stack 3: [F, C] | Exploring action Move C from B to table | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, E, A], Stack 4: [F] | Exploring action Move B from table to F | New state -> Invalid | Exploring action Move E from D to A | New state -> Invalid | Taking action Move B from A to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D, E], Stack 5: [F] | Plan so far [Move F from D to table | Move D from C to table | Move C from E to table | Move E from table to D | Move B from A to table] | Taking action Move F from table to A | Moved to state -> Stack 1: [B, C], Stack 2: [D, E, A, F] | Plan so far [Move F from D to table | Move D from C to table | Move B from A to table | Move C from E to B | Move E from table to D | Move A from table to E | Move F from table to A] | Exploring action Move A from E to table | New state -> Invalid | Exploring action Move C from B to table | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, E, A, F] | Exploring action Move F from A to table | New state -> Stack 1: [B, C], Stack 2: [D, E, A], Stack 3: [F] | Exploring action Move C from B to F | New state -> Stack 1: [B], Stack 2: [D, E, A, F, C] | Taking action Move E from table to D | Moved to state -> Stack 1: [A, B, C], Stack 2: [D, E], Stack 3: [F] | Plan so far [Move F from D to table | Move D from C to table | Move C from E to B | Move E from table to D] | Exploring action Move F from table to E | New state -> Stack 1: [A, B, C], Stack 2: [D, E, F] | Exploring action Move A from table to F | New state -> Invalid | Exploring action Move D from table to E | New state -> Invalid | Exploring action Move C from B to F | New state -> Stack 1: [A, B], Stack 2: [D, E], Stack 3: [F, C] | Exploring action Move C from B to table | New state -> Stack 1: [A, B], Stack 2: [C], Stack 3: [D, E], Stack 4: [F] | Taking action Move A from table to E | Moved to state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, E, A], Stack 4: [F] | Plan so far [Move F from D to table | Move D from C to table | Move B from A to table | Move C from E to table | Move E from table to D | Move A from table to E] | Exploring action Move E from D to F | New state -> Invalid | Exploring action Move B from table to C | New state -> Stack 1: [C, B], Stack 2: [D, E, A], Stack 3: [F] | Exploring action Move F from table to A | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, E, A, F] | Exploring action Move C from table to B | New state -> Stack 1: [B, C], Stack 2: [D, E, A], Stack 3: [F] | Taking action Move F from table to A | Moved to state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, E, A, F] | Plan so far [Move F from D to table | Move D from C to table | Move B from A to table | Move C from E to table | Move E from table to D | Move A from table to E | Move F from table to A] | Exploring action Move C from table to B | New state -> Stack 1: [B, C], Stack 2: [D, E, A, F] | Exploring action Move E from D to C | New state -> Invalid | Exploring action Move D from table to F | New state -> Invalid | Exploring action Move B from table to C | New state -> Stack 1: [C, B], Stack 2: [D, E, A, F] | Exploring action Move B from table to F | New state -> Stack 1: [C], Stack 2: [D, E, A, F, B] | Taking action Move B from table to F | Moved to state -> Stack 1: [C], Stack 2: [D, E, A, F, B] | Plan so far [Move F from D to table | Move D from C to table | Move B from A to table | Move C from E to table | Move E from table to D | Move A from table to E | Move F from table to A | Move B from table to F] | Exploring action Move B from F to C | New state -> Stack 1: [C, B], Stack 2: [D, E, A, F] | Exploring action Move F from A to B | New state -> Invalid | Exploring action Move B from F to table | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, E, A, F] | Exploring action Move C from table to B | New state -> Stack 1: [D, E, A, F, B, C] | Taking action Move C from table to B | Moved to state -> Stack 1: [D, E, A, F, B, C] | Plan so far [Move F from D to table | Move D from C to table | Move B from A to table | Move C from E to table | Move E from table to D | Move A from table to E | Move F from table to A | Move B from table to F | Move C from table to B] | Reached goal state!",
        "system2_states_v1": 85
    },
    {
        "idx": 601,
        "start": [
            [
                "table",
                "B",
                "A",
                "E",
                "C",
                "D"
            ]
        ],
        "goal": [
            [
                "table",
                "D",
                "C",
                "B",
                "E",
                "A"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": false,
                "on": "B",
                "under": "E",
                "ontable": false
            },
            "B": {
                "clear": false,
                "on": -1,
                "under": "A",
                "ontable": true
            },
            "C": {
                "clear": false,
                "on": "E",
                "under": "D",
                "ontable": false
            },
            "D": {
                "clear": true,
                "on": "C",
                "under": -1,
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": "A",
                "under": "C",
                "ontable": false
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": true,
                "on": "E",
                "under": -1,
                "ontable": false
            },
            "B": {
                "clear": false,
                "on": "C",
                "under": "E",
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": "D",
                "under": "B",
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": -1,
                "under": "C",
                "ontable": true
            },
            "E": {
                "clear": false,
                "on": "B",
                "under": "A",
                "ontable": false
            }
        },
        "plan_len": 7,
        "num_blocks": 5,
        "prompt": "The initial state:\nThe hand is empty.\nB is on the table. A is on B. E is on A. C is on E. D is on C. D is clear.\n\nThe goal is:\nD is on the table. C is on D. B is on C. E is on B. A is on E. A is clear.\n",
        "system1_plan": "Move D from C to table | Move C from E to D | Move E from A to table | Move A from B to table | Move B from table to C | Move E from table to B | Move A from table to E",
        "system1_states": 7,
        "system2_plan_v1": "Moved to state -> Stack 1: [B, A, E, C, D] | Plan so far [] | Exploring action Move D from C to table | New state -> Stack 1: [B, A, E, C], Stack 2: [D] | Exploring action Move C from E to D | New state -> Invalid | Exploring action Move E from A to D | New state -> Invalid | Taking action Move D from C to table | Moved to state -> Stack 1: [B, A, E, C], Stack 2: [D] | Plan so far [Move D from C to table] | Exploring action Move B from table to C | New state -> Invalid | Exploring action Move C from E to table | New state -> Stack 1: [B, A, E], Stack 2: [C], Stack 3: [D] | Exploring action Move C from E to D | New state -> Stack 1: [B, A, E], Stack 2: [D, C] | Exploring action Move B from table to D | New state -> Invalid | Exploring action Move D from table to C | New state -> Stack 1: [B, A, E, C, D] | Taking action Move C from E to D | Moved to state -> Stack 1: [B, A, E], Stack 2: [D, C] | Plan so far [Move D from C to table | Move C from E to D] | Exploring action Move A from B to C | New state -> Invalid | Exploring action Move E from A to table | New state -> Stack 1: [B, A], Stack 2: [D, C], Stack 3: [E] | Exploring action Move E from A to C | New state -> Stack 1: [B, A], Stack 2: [D, C, E] | Exploring action Move C from D to table | New state -> Stack 1: [B, A, E], Stack 2: [C], Stack 3: [D] | Exploring action Move B from table to C | New state -> Invalid | Taking action Move E from A to table | Moved to state -> Stack 1: [B, A], Stack 2: [D, C], Stack 3: [E] | Plan so far [Move D from C to table | Move C from E to D | Move E from A to table] | Exploring action Move A from B to E | New state -> Stack 1: [B], Stack 2: [D, C], Stack 3: [E, A] | Exploring action Move B from table to C | New state -> Invalid | Exploring action Move A from B to C | New state -> Stack 1: [B], Stack 2: [D, C, A], Stack 3: [E] | Exploring action Move A from B to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, C], Stack 4: [E] | Taking action Move A from B to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, C], Stack 4: [E] | Plan so far [Move D from C to table | Move C from E to D | Move E from A to table | Move A from B to table] | Exploring action Move A from table to E | New state -> Stack 1: [B], Stack 2: [D, C], Stack 3: [E, A] | Exploring action Move D from table to B | New state -> Invalid | Exploring action Move B from table to C | New state -> Stack 1: [A], Stack 2: [D, C, B], Stack 3: [E] | Exploring action Move A from table to B | New state -> Stack 1: [B, A], Stack 2: [D, C], Stack 3: [E] | Exploring action Move D from table to E | New state -> Invalid | Taking action Move A from B to E | Moved to state -> Stack 1: [B], Stack 2: [D, C], Stack 3: [E, A] | Plan so far [Move D from C to table | Move C from E to D | Move E from A to table | Move A from B to E] | Exploring action Move A from E to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, C], Stack 4: [E] | Exploring action Move E from table to B | New state -> Invalid | Exploring action Move A from E to C | New state -> Stack 1: [B], Stack 2: [D, C, A], Stack 3: [E] | Exploring action Move B from table to C | New state -> Stack 1: [D, C, B], Stack 2: [E, A] | Taking action Move B from table to C | Moved to state -> Stack 1: [A], Stack 2: [D, C, B], Stack 3: [E] | Plan so far [Move D from C to table | Move C from E to D | Move E from A to table | Move A from B to table | Move B from table to C] | Exploring action Move C from D to B | New state -> Invalid | Exploring action Move E from table to B | New state -> Stack 1: [A], Stack 2: [D, C, B, E] | Exploring action Move C from D to table | New state -> Invalid | Exploring action Move A from table to E | New state -> Stack 1: [D, C, B], Stack 2: [E, A] | Exploring action Move E from table to A | New state -> Stack 1: [A, E], Stack 2: [D, C, B] | Taking action Move B from table to C | Moved to state -> Stack 1: [D, C, B], Stack 2: [E, A] | Plan so far [Move D from C to table | Move C from E to D | Move E from A to table | Move A from B to E | Move B from table to C] | Exploring action Move A from E to B | New state -> Stack 1: [D, C, B, A], Stack 2: [E] | Exploring action Move C from D to table | New state -> Invalid | Exploring action Move E from table to A | New state -> Invalid | Exploring action Move B from C to table | New state -> Stack 1: [B], Stack 2: [D, C], Stack 3: [E, A] | Exploring action Move A from E to table | New state -> Stack 1: [A], Stack 2: [D, C, B], Stack 3: [E] | Taking action Move E from table to B | Moved to state -> Stack 1: [A], Stack 2: [D, C, B, E] | Plan so far [Move D from C to table | Move C from E to D | Move E from A to table | Move A from B to table | Move B from table to C | Move E from table to B] | Exploring action Move A from table to E | New state -> Stack 1: [D, C, B, E, A] | Exploring action Move C from D to A | New state -> Invalid | Exploring action Move E from B to A | New state -> Stack 1: [A, E], Stack 2: [D, C, B] | Exploring action Move E from B to table | New state -> Stack 1: [A], Stack 2: [D, C, B], Stack 3: [E] | Exploring action Move C from D to E | New state -> Invalid | Taking action Move A from table to E | Moved to state -> Stack 1: [D, C, B, E, A] | Plan so far [Move D from C to table | Move C from E to D | Move E from A to table | Move A from B to table | Move B from table to C | Move E from table to B | Move A from table to E] | Reached goal state!",
        "system2_states_v1": 41
    },
    {
        "idx": 788,
        "start": [
            [
                "table",
                "A",
                "F",
                "C",
                "D",
                "E",
                "B"
            ]
        ],
        "goal": [
            [
                "table",
                "D",
                "B"
            ],
            [
                "table",
                "F",
                "E",
                "C",
                "A"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": false,
                "on": -1,
                "under": "F",
                "ontable": true
            },
            "B": {
                "clear": true,
                "on": "E",
                "under": -1,
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": "F",
                "under": "D",
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": "C",
                "under": "E",
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": "D",
                "under": "B",
                "ontable": false
            },
            "F": {
                "clear": false,
                "on": "A",
                "under": "C",
                "ontable": false
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": true,
                "on": "C",
                "under": -1,
                "ontable": false
            },
            "B": {
                "clear": true,
                "on": "D",
                "under": -1,
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": "E",
                "under": "A",
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": -1,
                "under": "B",
                "ontable": true
            },
            "E": {
                "clear": false,
                "on": "F",
                "under": "C",
                "ontable": false
            },
            "F": {
                "clear": false,
                "on": -1,
                "under": "E",
                "ontable": true
            }
        },
        "plan_len": 9,
        "num_blocks": 6,
        "prompt": "The initial state:\nThe hand is empty.\nA is on the table. F is on A. C is on F. D is on C. E is on D. B is on E. B is clear.\n\nThe goal is:\nD is on the table. B is on D. B is clear.\nF is on the table. E is on F. C is on E. A is on C. A is clear.\n",
        "system1_plan": "Move B from E to table | Move E from D to table | Move D from C to table | Move B from table to D | Move C from F to table | Move F from A to table | Move E from table to F | Move C from table to E | Move A from table to C",
        "system1_states": 9,
        "system2_plan_v1": "Moved to state -> Stack 1: [A, F, C, D, E, B] | Plan so far [] | Exploring action Move D from C to table | New state -> Invalid | Exploring action Move A from table to B | New state -> Invalid | Exploring action Move B from E to table | New state -> Stack 1: [A, F, C, D, E], Stack 2: [B] | Taking action Move B from E to table | Moved to state -> Stack 1: [A, F, C, D, E], Stack 2: [B] | Plan so far [Move B from E to table] | Exploring action Move B from table to E | New state -> Stack 1: [A, F, C, D, E, B] | Exploring action Move E from D to table | New state -> Stack 1: [A, F, C, D], Stack 2: [B], Stack 3: [E] | Exploring action Move E from D to B | New state -> Stack 1: [A, F, C, D], Stack 2: [B, E] | Exploring action Move F from A to E | New state -> Invalid | Exploring action Move C from F to table | New state -> Invalid | Taking action Move E from D to table | Moved to state -> Stack 1: [A, F, C, D], Stack 2: [B], Stack 3: [E] | Plan so far [Move B from E to table | Move E from D to table] | Exploring action Move F from A to B | New state -> Invalid | Exploring action Move D from C to B | New state -> Stack 1: [A, F, C], Stack 2: [B, D], Stack 3: [E] | Exploring action Move D from C to table | New state -> Stack 1: [A, F, C], Stack 2: [B], Stack 3: [D], Stack 4: [E] | Exploring action Move A from table to D | New state -> Invalid | Exploring action Move B from table to D | New state -> Stack 1: [A, F, C, D, B], Stack 2: [E] | Taking action Move D from C to table | Moved to state -> Stack 1: [A, F, C], Stack 2: [B], Stack 3: [D], Stack 4: [E] | Plan so far [Move B from E to table | Move E from D to table | Move D from C to table] | Exploring action Move A from table to C | New state -> Invalid | Exploring action Move C from F to table | New state -> Stack 1: [A, F], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Exploring action Move B from table to D | New state -> Stack 1: [A, F, C], Stack 2: [D, B], Stack 3: [E] | Exploring action Move C from F to D | New state -> Stack 1: [A, F], Stack 2: [B], Stack 3: [D, C], Stack 4: [E] | Exploring action Move A from table to D | New state -> Invalid | Taking action Move B from table to D | Moved to state -> Stack 1: [A, F, C], Stack 2: [D, B], Stack 3: [E] | Plan so far [Move B from E to table | Move E from D to table | Move D from C to table | Move B from table to D] | Exploring action Move F from A to table | New state -> Invalid | Exploring action Move D from table to C | New state -> Invalid | Exploring action Move C from F to table | New state -> Stack 1: [A, F], Stack 2: [C], Stack 3: [D, B], Stack 4: [E] | Exploring action Move C from F to B | New state -> Stack 1: [A, F], Stack 2: [D, B, C], Stack 3: [E] | Exploring action Move C from F to E | New state -> Stack 1: [A, F], Stack 2: [D, B], Stack 3: [E, C] | Taking action Move C from F to table | Moved to state -> Stack 1: [A, F], Stack 2: [C], Stack 3: [D, B], Stack 4: [E] | Plan so far [Move B from E to table | Move E from D to table | Move D from C to table | Move B from table to D | Move C from F to table] | Exploring action Move F from A to E | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, B], Stack 4: [E, F] | Exploring action Move F from A to C | New state -> Stack 1: [A], Stack 2: [C, F], Stack 3: [D, B], Stack 4: [E] | Exploring action Move D from table to C | New state -> Invalid | Exploring action Move D from table to B | New state -> Invalid | Exploring action Move F from A to table | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, B], Stack 4: [E], Stack 5: [F] | Taking action Move F from A to table | Moved to state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, B], Stack 4: [E], Stack 5: [F] | Plan so far [Move B from E to table | Move E from D to table | Move D from C to table | Move B from table to D | Move C from F to table | Move F from A to table] | Exploring action Move D from table to F | New state -> Invalid | Exploring action Move A from table to E | New state -> Stack 1: [C], Stack 2: [D, B], Stack 3: [E, A], Stack 4: [F] | Exploring action Move A from table to C | New state -> Stack 1: [C, A], Stack 2: [D, B], Stack 3: [E], Stack 4: [F] | Exploring action Move D from table to E | New state -> Invalid | Exploring action Move E from table to F | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, B], Stack 4: [F, E] | Taking action Move E from table to F | Moved to state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, B], Stack 4: [F, E] | Plan so far [Move B from E to table | Move E from D to table | Move D from C to table | Move B from table to D | Move C from F to table | Move F from A to table | Move E from table to F] | Exploring action Move A from table to E | New state -> Stack 1: [C], Stack 2: [D, B], Stack 3: [F, E, A] | Exploring action Move F from table to C | New state -> Invalid | Exploring action Move C from table to E | New state -> Stack 1: [A], Stack 2: [D, B], Stack 3: [F, E, C] | Exploring action Move A from table to C | New state -> Stack 1: [C, A], Stack 2: [D, B], Stack 3: [F, E] | Exploring action Move D from table to E | New state -> Invalid | Taking action Move C from table to E | Moved to state -> Stack 1: [A], Stack 2: [D, B], Stack 3: [F, E, C] | Plan so far [Move B from E to table | Move E from D to table | Move D from C to table | Move B from table to D | Move C from F to table | Move F from A to table | Move E from table to F | Move C from table to E] | Exploring action Move F from table to A | New state -> Invalid | Exploring action Move C from E to A | New state -> Stack 1: [A, C], Stack 2: [D, B], Stack 3: [F, E] | Exploring action Move C from E to table | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, B], Stack 4: [F, E] | Exploring action Move A from table to C | New state -> Stack 1: [D, B], Stack 2: [F, E, C, A] | Taking action Move A from table to C | Moved to state -> Stack 1: [D, B], Stack 2: [F, E, C, A] | Plan so far [Move B from E to table | Move E from D to table | Move D from C to table | Move B from table to D | Move C from F to table | Move F from A to table | Move E from table to F | Move C from table to E | Move A from table to C] | Reached goal state!",
        "system2_states_v1": 42
    },
    {
        "idx": 890,
        "start": [
            [
                "table",
                "A",
                "E"
            ],
            [
                "table",
                "B",
                "C"
            ],
            [
                "table",
                "F",
                "D",
                "G"
            ]
        ],
        "goal": [
            [
                "table",
                "D",
                "A",
                "B",
                "G",
                "C",
                "F",
                "E"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": false,
                "on": -1,
                "under": "E",
                "ontable": true
            },
            "B": {
                "clear": false,
                "on": -1,
                "under": "C",
                "ontable": true
            },
            "C": {
                "clear": true,
                "on": "B",
                "under": -1,
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": "F",
                "under": "G",
                "ontable": false
            },
            "E": {
                "clear": true,
                "on": "A",
                "under": -1,
                "ontable": false
            },
            "F": {
                "clear": false,
                "on": -1,
                "under": "D",
                "ontable": true
            },
            "G": {
                "clear": true,
                "on": "D",
                "under": -1,
                "ontable": false
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": false,
                "on": "D",
                "under": "B",
                "ontable": false
            },
            "B": {
                "clear": false,
                "on": "A",
                "under": "G",
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": "G",
                "under": "F",
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": -1,
                "under": "A",
                "ontable": true
            },
            "E": {
                "clear": true,
                "on": "F",
                "under": -1,
                "ontable": false
            },
            "F": {
                "clear": false,
                "on": "C",
                "under": "E",
                "ontable": false
            },
            "G": {
                "clear": false,
                "on": "B",
                "under": "C",
                "ontable": false
            }
        },
        "plan_len": 10,
        "num_blocks": 7,
        "prompt": "The initial state:\nThe hand is empty.\nA is on the table. E is on A. E is clear.\nB is on the table. C is on B. C is clear.\nF is on the table. D is on F. G is on D. G is clear.\n\nThe goal is:\nD is on the table. A is on D. B is on A. G is on B. C is on G. F is on C. E is on F. E is clear.\n",
        "system1_plan": "Move C from B to table | Move E from A to table | Move G from D to table | Move D from F to table | Move A from table to D | Move B from table to A | Move G from table to B | Move C from table to G | Move F from table to C | Move E from table to F",
        "system1_states": 10,
        "system2_plan_v1": "Moved to state -> Stack 1: [A, E], Stack 2: [B, C], Stack 3: [F, D, G] | Plan so far [] | Exploring action Move E from A to table | New state -> Stack 1: [A], Stack 2: [B, C], Stack 3: [E], Stack 4: [F, D, G] | Exploring action Move G from D to table | New state -> Stack 1: [A, E], Stack 2: [B, C], Stack 3: [F, D], Stack 4: [G] | Exploring action Move F from table to G | New state -> Invalid | Exploring action Move C from B to table | New state -> Stack 1: [A, E], Stack 2: [B], Stack 3: [C], Stack 4: [F, D, G] | Taking action Move C from B to table | Moved to state -> Stack 1: [A, E], Stack 2: [B], Stack 3: [C], Stack 4: [F, D, G] | Plan so far [Move C from B to table] | Exploring action Move F from table to B | New state -> Invalid | Exploring action Move E from A to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [E], Stack 5: [F, D, G] | Exploring action Move G from D to B | New state -> Stack 1: [A, E], Stack 2: [B, G], Stack 3: [C], Stack 4: [F, D] | Exploring action Move G from D to table | New state -> Stack 1: [A, E], Stack 2: [B], Stack 3: [C], Stack 4: [F, D], Stack 5: [G] | Taking action Move G from D to table | Moved to state -> Stack 1: [A, E], Stack 2: [B, C], Stack 3: [F, D], Stack 4: [G] | Plan so far [Move G from D to table] | Exploring action Move F from table to E | New state -> Invalid | Exploring action Move E from A to table | New state -> Stack 1: [A], Stack 2: [B, C], Stack 3: [E], Stack 4: [F, D], Stack 5: [G] | Exploring action Move D from F to table | New state -> Stack 1: [A, E], Stack 2: [B, C], Stack 3: [D], Stack 4: [F], Stack 5: [G] | Exploring action Move C from B to table | New state -> Stack 1: [A, E], Stack 2: [B], Stack 3: [C], Stack 4: [F, D], Stack 5: [G] | Exploring action Move F from table to D | New state -> Invalid | Taking action Move E from A to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [E], Stack 5: [F, D, G] | Plan so far [Move C from B to table | Move E from A to table] | Exploring action Move G from D to A | New state -> Stack 1: [A, G], Stack 2: [B], Stack 3: [C], Stack 4: [E], Stack 5: [F, D] | Exploring action Move G from D to C | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, G], Stack 4: [E], Stack 5: [F, D] | Exploring action Move G from D to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [E], Stack 5: [F, D], Stack 6: [G] | Exploring action Move F from table to G | New state -> Invalid | Taking action Move D from F to table | Moved to state -> Stack 1: [A, E], Stack 2: [B, C], Stack 3: [D], Stack 4: [F], Stack 5: [G] | Plan so far [Move G from D to table | Move D from F to table] | Exploring action Move E from A to table | New state -> Stack 1: [A], Stack 2: [B, C], Stack 3: [D], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Exploring action Move E from A to F | New state -> Stack 1: [A], Stack 2: [B, C], Stack 3: [D], Stack 4: [F, E], Stack 5: [G] | Exploring action Move C from B to table | New state -> Stack 1: [A, E], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [F], Stack 6: [G] | Exploring action Move B from table to F | New state -> Invalid | Taking action Move E from A to table | Moved to state -> Stack 1: [A], Stack 2: [B, C], Stack 3: [E], Stack 4: [F, D], Stack 5: [G] | Plan so far [Move G from D to table | Move E from A to table] | Exploring action Move B from table to A | New state -> Invalid | Exploring action Move F from table to A | New state -> Invalid | Exploring action Move D from F to table | New state -> Stack 1: [A], Stack 2: [B, C], Stack 3: [D], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Exploring action Move C from B to A | New state -> Stack 1: [A, C], Stack 2: [B], Stack 3: [E], Stack 4: [F, D], Stack 5: [G] | Exploring action Move C from B to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [E], Stack 5: [F, D], Stack 6: [G] | Taking action Move G from D to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [E], Stack 5: [F, D], Stack 6: [G] | Plan so far [Move C from B to table | Move E from A to table | Move G from D to table] | Exploring action Move D from F to E | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [E, D], Stack 5: [F], Stack 6: [G] | Exploring action Move D from F to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F], Stack 7: [G] | Exploring action Move D from F to A | New state -> Stack 1: [A, D], Stack 2: [B], Stack 3: [C], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Exploring action Move F from table to A | New state -> Invalid | Taking action Move C from B to table | Moved to state -> Stack 1: [A, E], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [F], Stack 6: [G] | Plan so far [Move G from D to table | Move D from F to table | Move C from B to table] | Exploring action Move E from A to F | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [F, E], Stack 6: [G] | Exploring action Move E from A to B | New state -> Stack 1: [A], Stack 2: [B, E], Stack 3: [C], Stack 4: [D], Stack 5: [F], Stack 6: [G] | Exploring action Move A from table to E | New state -> Invalid | Exploring action Move E from A to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F], Stack 7: [G] | Taking action Move D from F to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F], Stack 7: [G] | Plan so far [Move C from B to table | Move E from A to table | Move G from D to table | Move D from F to table] | Exploring action Move A from table to D | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, A], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Exploring action Move A from table to B | New state -> Stack 1: [B, A], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Exploring action Move E from table to F | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [F, E], Stack 6: [G] | Taking action Move E from A to table | Moved to state -> Stack 1: [A], Stack 2: [B, C], Stack 3: [E], Stack 4: [F, D, G] | Plan so far [Move E from A to table] | Exploring action Move C from B to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [E], Stack 5: [F, D, G] | Exploring action Move D from F to C | New state -> Invalid | Exploring action Move F from table to G | New state -> Invalid | Exploring action Move C from B to E | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [E, C], Stack 4: [F, D, G] | Exploring action Move G from D to table | New state -> Stack 1: [A], Stack 2: [B, C], Stack 3: [E], Stack 4: [F, D], Stack 5: [G] | Taking action Move C from B to table | Moved to state -> Stack 1: [A, E], Stack 2: [B], Stack 3: [C], Stack 4: [F, D], Stack 5: [G] | Plan so far [Move G from D to table | Move C from B to table] | Exploring action Move D from F to E | New state -> Stack 1: [A, E, D], Stack 2: [B], Stack 3: [C], Stack 4: [F], Stack 5: [G] | Exploring action Move D from F to table | New state -> Stack 1: [A, E], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [F], Stack 6: [G] | Exploring action Move A from table to E | New state -> Invalid | Exploring action Move E from A to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [E], Stack 5: [F, D], Stack 6: [G] | Taking action Move C from B to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [E], Stack 5: [F, D, G] | Plan so far [Move E from A to table | Move C from B to table] | Taking action Move G from D to table | Moved to state -> Stack 1: [A], Stack 2: [B, C], Stack 3: [E], Stack 4: [F, D], Stack 5: [G] | Plan so far [Move E from A to table | Move G from D to table] | Taking action Move E from A to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [E], Stack 5: [F, D], Stack 6: [G] | Plan so far [Move G from D to table | Move C from B to table | Move E from A to table] | Taking action Move D from F to table | Moved to state -> Stack 1: [A, E], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [F], Stack 6: [G] | Plan so far [Move G from D to table | Move C from B to table | Move D from F to table] | Taking action Move C from B to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [E], Stack 5: [F, D], Stack 6: [G] | Plan so far [Move G from D to table | Move E from A to table | Move C from B to table] | Taking action Move D from F to table | Moved to state -> Stack 1: [A], Stack 2: [B, C], Stack 3: [D], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Plan so far [Move G from D to table | Move E from A to table | Move D from F to table] | Exploring action Move C from B to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F], Stack 7: [G] | Exploring action Move B from table to D | New state -> Invalid | Exploring action Move A from table to D | New state -> Stack 1: [B, C], Stack 2: [D, A], Stack 3: [E], Stack 4: [F], Stack 5: [G] | Exploring action Move C from B to A | New state -> Stack 1: [A, C], Stack 2: [B], Stack 3: [D], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Exploring action Move B from table to E | New state -> Invalid | Taking action Move A from table to D | Moved to state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, A], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Plan so far [Move C from B to table | Move E from A to table | Move G from D to table | Move D from F to table | Move A from table to D] | Exploring action Move B from table to A | New state -> Stack 1: [C], Stack 2: [D, A, B], Stack 3: [E], Stack 4: [F], Stack 5: [G] | Exploring action Move A from D to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F], Stack 7: [G] | Exploring action Move E from table to F | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, A], Stack 4: [F, E], Stack 5: [G] | Exploring action Move D from table to E | New state -> Invalid | Exploring action Move D from table to F | New state -> Invalid | Taking action Move A from table to D | Moved to state -> Stack 1: [B, C], Stack 2: [D, A], Stack 3: [E], Stack 4: [F], Stack 5: [G] | Plan so far [Move G from D to table | Move E from A to table | Move D from F to table | Move A from table to D] | Exploring action Move D from table to A | New state -> Invalid | Exploring action Move D from table to F | New state -> Invalid | Exploring action Move C from B to A | New state -> Stack 1: [B], Stack 2: [D, A, C], Stack 3: [E], Stack 4: [F], Stack 5: [G] | Exploring action Move E from table to F | New state -> Stack 1: [B, C], Stack 2: [D, A], Stack 3: [F, E], Stack 4: [G] | Exploring action Move C from B to table | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, A], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Taking action Move C from B to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F], Stack 7: [G] | Plan so far [Move G from D to table | Move E from A to table | Move D from F to table | Move C from B to table] | Taking action Move G from D to table | Moved to state -> Stack 1: [A, E], Stack 2: [B], Stack 3: [C], Stack 4: [F, D], Stack 5: [G] | Plan so far [Move C from B to table | Move G from D to table] | Taking action Move E from A to F | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [F, E], Stack 6: [G] | Plan so far [Move G from D to table | Move D from F to table | Move C from B to table | Move E from A to F] | Exploring action Move A from table to B | New state -> Stack 1: [B, A], Stack 2: [C], Stack 3: [D], Stack 4: [F, E], Stack 5: [G] | Exploring action Move F from table to C | New state -> Invalid | Exploring action Move E from F to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F], Stack 7: [G] | Exploring action Move A from table to D | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, A], Stack 4: [F, E], Stack 5: [G] | Exploring action Move F from table to E | New state -> Invalid | Taking action Move C from B to table | Moved to state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, A], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Plan so far [Move G from D to table | Move E from A to table | Move D from F to table | Move A from table to D | Move C from B to table] | Taking action Move E from A to table | Moved to state -> Stack 1: [A], Stack 2: [B, C], Stack 3: [D], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Plan so far [Move G from D to table | Move D from F to table | Move E from A to table] | Taking action Move E from A to F | Moved to state -> Stack 1: [A], Stack 2: [B, C], Stack 3: [D], Stack 4: [F, E], Stack 5: [G] | Plan so far [Move G from D to table | Move D from F to table | Move E from A to F] | Exploring action Move C from B to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [F, E], Stack 6: [G] | Exploring action Move B from table to D | New state -> Invalid | Exploring action Move C from B to A | New state -> Stack 1: [A, C], Stack 2: [B], Stack 3: [D], Stack 4: [F, E], Stack 5: [G] | Exploring action Move A from table to D | New state -> Stack 1: [B, C], Stack 2: [D, A], Stack 3: [F, E], Stack 4: [G] | Exploring action Move F from table to E | New state -> Invalid | Taking action Move A from table to D | Moved to state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, A], Stack 4: [F, E], Stack 5: [G] | Plan so far [Move G from D to table | Move D from F to table | Move C from B to table | Move E from A to F | Move A from table to D] | Exploring action Move A from D to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [F, E], Stack 6: [G] | Exploring action Move B from table to A | New state -> Stack 1: [C], Stack 2: [D, A, B], Stack 3: [F, E], Stack 4: [G] | Exploring action Move E from F to table | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, A], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Exploring action Move F from table to A | New state -> Invalid | Taking action Move E from A to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F], Stack 7: [G] | Plan so far [Move G from D to table | Move D from F to table | Move C from B to table | Move E from A to table] | Taking action Move A from table to D | Moved to state -> Stack 1: [B, C], Stack 2: [D, A], Stack 3: [F, E], Stack 4: [G] | Plan so far [Move G from D to table | Move D from F to table | Move E from A to F | Move A from table to D] | Exploring action Move C from B to table | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, A], Stack 4: [F, E], Stack 5: [G] | Exploring action Move C from B to A | New state -> Stack 1: [B], Stack 2: [D, A, C], Stack 3: [F, E], Stack 4: [G] | Exploring action Move B from table to G | New state -> Invalid | Exploring action Move C from B to G | New state -> Stack 1: [B], Stack 2: [D, A], Stack 3: [F, E], Stack 4: [G, C] | Exploring action Move F from table to A | New state -> Invalid | Taking action Move C from B to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [F, E], Stack 6: [G] | Plan so far [Move G from D to table | Move D from F to table | Move E from A to F | Move C from B to table] | Taking action Move B from table to A | Moved to state -> Stack 1: [C], Stack 2: [D, A, B], Stack 3: [F, E], Stack 4: [G] | Plan so far [Move G from D to table | Move D from F to table | Move C from B to table | Move E from A to F | Move A from table to D | Move B from table to A] | Exploring action Move E from F to table | New state -> Stack 1: [C], Stack 2: [D, A, B], Stack 3: [E], Stack 4: [F], Stack 5: [G] | Exploring action Move C from table to G | New state -> Stack 1: [D, A, B], Stack 2: [F, E], Stack 3: [G, C] | Exploring action Move G from table to B | New state -> Stack 1: [C], Stack 2: [D, A, B, G], Stack 3: [F, E] | Exploring action Move A from D to C | New state -> Invalid | Taking action Move C from B to table | Moved to state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, A], Stack 4: [F, E], Stack 5: [G] | Plan so far [Move G from D to table | Move D from F to table | Move E from A to F | Move A from table to D | Move C from B to table] | Taking action Move G from table to B | Moved to state -> Stack 1: [C], Stack 2: [D, A, B, G], Stack 3: [F, E] | Plan so far [Move G from D to table | Move D from F to table | Move C from B to table | Move E from A to F | Move A from table to D | Move B from table to A | Move G from table to B] | Exploring action Move G from B to table | New state -> Stack 1: [C], Stack 2: [D, A, B], Stack 3: [F, E], Stack 4: [G] | Exploring action Move D from table to G | New state -> Invalid | Exploring action Move E from F to table | New state -> Stack 1: [C], Stack 2: [D, A, B, G], Stack 3: [E], Stack 4: [F] | Exploring action Move C from table to G | New state -> Stack 1: [D, A, B, G, C], Stack 2: [F, E] | Taking action Move B from table to A | Moved to state -> Stack 1: [C], Stack 2: [D, A, B], Stack 3: [E], Stack 4: [F], Stack 5: [G] | Plan so far [Move C from B to table | Move E from A to table | Move G from D to table | Move D from F to table | Move A from table to D | Move B from table to A] | Exploring action Move G from table to B | New state -> Stack 1: [C], Stack 2: [D, A, B, G], Stack 3: [E], Stack 4: [F] | Exploring action Move B from A to table | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, A], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Exploring action Move D from table to G | New state -> Invalid | Exploring action Move D from table to E | New state -> Invalid | Exploring action Move E from table to F | New state -> Stack 1: [C], Stack 2: [D, A, B], Stack 3: [F, E], Stack 4: [G] | Taking action Move C from table to G | Moved to state -> Stack 1: [D, A, B, G, C], Stack 2: [F, E] | Plan so far [Move G from D to table | Move D from F to table | Move C from B to table | Move E from A to F | Move A from table to D | Move B from table to A | Move G from table to B | Move C from table to G] | Exploring action Move B from A to C | New state -> Invalid | Exploring action Move E from F to table | New state -> Stack 1: [D, A, B, G, C], Stack 2: [E], Stack 3: [F] | Exploring action Move E from F to C | New state -> Stack 1: [D, A, B, G, C, E], Stack 2: [F] | Exploring action Move C from G to table | New state -> Stack 1: [C], Stack 2: [D, A, B, G], Stack 3: [F, E] | Taking action Move G from table to B | Moved to state -> Stack 1: [C], Stack 2: [D, A, B, G], Stack 3: [E], Stack 4: [F] | Plan so far [Move C from B to table | Move E from A to table | Move G from D to table | Move D from F to table | Move A from table to D | Move B from table to A | Move G from table to B] | Exploring action Move C from table to G | New state -> Stack 1: [D, A, B, G, C], Stack 2: [E], Stack 3: [F] | Exploring action Move B from A to F | New state -> Invalid | Exploring action Move E from table to F | New state -> Stack 1: [C], Stack 2: [D, A, B, G], Stack 3: [F, E] | Exploring action Move A from D to F | New state -> Invalid | Exploring action Move C from table to E | New state -> Stack 1: [D, A, B, G], Stack 2: [E, C], Stack 3: [F] | Taking action Move C from table to G | Moved to state -> Stack 1: [D, A, B, G, C], Stack 2: [E], Stack 3: [F] | Plan so far [Move C from B to table | Move E from A to table | Move G from D to table | Move D from F to table | Move A from table to D | Move B from table to A | Move G from table to B | Move C from table to G] | Exploring action Move E from table to F | New state -> Stack 1: [D, A, B, G, C], Stack 2: [F, E] | Exploring action Move F from table to E | New state -> Stack 1: [D, A, B, G, C], Stack 2: [E, F] | Exploring action Move B from A to table | New state -> Invalid | Exploring action Move A from D to C | New state -> Invalid | Exploring action Move F from table to C | New state -> Stack 1: [D, A, B, G, C, F], Stack 2: [E] | Taking action Move F from table to C | Moved to state -> Stack 1: [D, A, B, G, C, F], Stack 2: [E] | Plan so far [Move C from B to table | Move E from A to table | Move G from D to table | Move D from F to table | Move A from table to D | Move B from table to A | Move G from table to B | Move C from table to G | Move F from table to C] | Exploring action Move B from A to E | New state -> Invalid | Exploring action Move F from C to table | New state -> Stack 1: [D, A, B, G, C], Stack 2: [E], Stack 3: [F] | Exploring action Move B from A to F | New state -> Invalid | Exploring action Move E from table to F | New state -> Stack 1: [D, A, B, G, C, F, E] | Exploring action Move F from C to E | New state -> Stack 1: [D, A, B, G, C], Stack 2: [E, F] | Taking action Move E from table to F | Moved to state -> Stack 1: [D, A, B, G, C, F, E] | Plan so far [Move C from B to table | Move E from A to table | Move G from D to table | Move D from F to table | Move A from table to D | Move B from table to A | Move G from table to B | Move C from table to G | Move F from table to C | Move E from table to F] | Reached goal state!",
        "system2_states_v1": 112
    },
    {
        "idx": 591,
        "start": [
            [
                "table",
                "D",
                "E",
                "C",
                "A",
                "B"
            ]
        ],
        "goal": [
            [
                "table",
                "B"
            ],
            [
                "table",
                "D",
                "C",
                "E",
                "A"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": false,
                "on": "C",
                "under": "B",
                "ontable": false
            },
            "B": {
                "clear": true,
                "on": "A",
                "under": -1,
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": "E",
                "under": "A",
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": -1,
                "under": "E",
                "ontable": true
            },
            "E": {
                "clear": false,
                "on": "D",
                "under": "C",
                "ontable": false
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": true,
                "on": "E",
                "under": -1,
                "ontable": false
            },
            "B": {
                "clear": true,
                "on": -1,
                "under": -1,
                "ontable": true
            },
            "C": {
                "clear": false,
                "on": "D",
                "under": "E",
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": -1,
                "under": "C",
                "ontable": true
            },
            "E": {
                "clear": false,
                "on": "C",
                "under": "A",
                "ontable": false
            }
        },
        "plan_len": 7,
        "num_blocks": 5,
        "prompt": "The initial state:\nThe hand is empty.\nD is on the table. E is on D. C is on E. A is on C. B is on A. B is clear.\n\nThe goal is:\nB is on the table. B is clear.\nD is on the table. C is on D. E is on C. A is on E. A is clear.\n",
        "system1_plan": "Move B from A to table | Move A from C to table | Move C from E to table | Move E from D to table | Move C from table to D | Move E from table to C | Move A from table to E",
        "system1_states": 7,
        "system2_plan_v1": "Moved to state -> Stack 1: [D, E, C, A, B] | Plan so far [] | Exploring action Move B from A to table | New state -> Stack 1: [B], Stack 2: [D, E, C, A] | Exploring action Move C from E to B | New state -> Invalid | Taking action Move B from A to table | Moved to state -> Stack 1: [B], Stack 2: [D, E, C, A] | Plan so far [Move B from A to table] | Exploring action Move E from D to A | New state -> Invalid | Exploring action Move A from C to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, E, C] | Exploring action Move A from C to B | New state -> Stack 1: [B, A], Stack 2: [D, E, C] | Exploring action Move B from table to A | New state -> Stack 1: [D, E, C, A, B] | Taking action Move A from C to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, E, C] | Plan so far [Move B from A to table | Move A from C to table] | Exploring action Move C from E to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D, E] | Exploring action Move E from D to A | New state -> Invalid | Exploring action Move E from D to C | New state -> Invalid | Exploring action Move C from E to B | New state -> Stack 1: [A], Stack 2: [B, C], Stack 3: [D, E] | Exploring action Move C from E to A | New state -> Stack 1: [A, C], Stack 2: [B], Stack 3: [D, E] | Taking action Move C from E to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D, E] | Plan so far [Move B from A to table | Move A from C to table | Move C from E to table] | Exploring action Move E from D to C | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, E], Stack 4: [D] | Exploring action Move D from table to E | New state -> Invalid | Exploring action Move A from table to E | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, E, A] | Exploring action Move E from D to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Taking action Move E from D to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Plan so far [Move B from A to table | Move A from C to table | Move C from E to table | Move E from D to table] | Exploring action Move A from table to D | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, A], Stack 4: [E] | Exploring action Move A from table to E | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D], Stack 4: [E, A] | Exploring action Move C from table to D | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, C], Stack 4: [E] | Taking action Move C from table to D | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, C], Stack 4: [E] | Plan so far [Move B from A to table | Move A from C to table | Move C from E to table | Move E from D to table | Move C from table to D] | Exploring action Move C from D to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Exploring action Move D from table to A | New state -> Invalid | Exploring action Move D from table to B | New state -> Invalid | Exploring action Move A from table to E | New state -> Stack 1: [B], Stack 2: [D, C], Stack 3: [E, A] | Exploring action Move E from table to C | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, C, E] | Taking action Move E from table to C | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, C, E] | Plan so far [Move B from A to table | Move A from C to table | Move C from E to table | Move E from D to table | Move C from table to D | Move E from table to C] | Exploring action Move B from table to A | New state -> Stack 1: [A, B], Stack 2: [D, C, E] | Exploring action Move A from table to E | New state -> Stack 1: [B], Stack 2: [D, C, E, A] | Exploring action Move E from C to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, C], Stack 4: [E] | Exploring action Move C from D to table | New state -> Invalid | Taking action Move A from table to E | Moved to state -> Stack 1: [B], Stack 2: [D, C, E, A] | Plan so far [Move B from A to table | Move A from C to table | Move C from E to table | Move E from D to table | Move C from table to D | Move E from table to C | Move A from table to E] | Reached goal state!",
        "system2_states_v1": 27
    },
    {
        "idx": 713,
        "start": [
            [
                "table",
                "C"
            ],
            [
                "table",
                "D",
                "F",
                "E",
                "B",
                "A"
            ]
        ],
        "goal": [
            [
                "table",
                "B",
                "C",
                "A"
            ],
            [
                "table",
                "F",
                "E",
                "D"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": true,
                "on": "B",
                "under": -1,
                "ontable": false
            },
            "B": {
                "clear": false,
                "on": "E",
                "under": "A",
                "ontable": false
            },
            "C": {
                "clear": true,
                "on": -1,
                "under": -1,
                "ontable": true
            },
            "D": {
                "clear": false,
                "on": -1,
                "under": "F",
                "ontable": true
            },
            "E": {
                "clear": false,
                "on": "F",
                "under": "B",
                "ontable": false
            },
            "F": {
                "clear": false,
                "on": "D",
                "under": "E",
                "ontable": false
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": true,
                "on": "C",
                "under": -1,
                "ontable": false
            },
            "B": {
                "clear": false,
                "on": -1,
                "under": "C",
                "ontable": true
            },
            "C": {
                "clear": false,
                "on": "B",
                "under": "A",
                "ontable": false
            },
            "D": {
                "clear": true,
                "on": "E",
                "under": -1,
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": "F",
                "under": "D",
                "ontable": false
            },
            "F": {
                "clear": false,
                "on": -1,
                "under": "E",
                "ontable": true
            }
        },
        "plan_len": 8,
        "num_blocks": 6,
        "prompt": "The initial state:\nThe hand is empty.\nC is on the table. C is clear.\nD is on the table. F is on D. E is on F. B is on E. A is on B. A is clear.\n\nThe goal is:\nB is on the table. C is on B. A is on C. A is clear.\nF is on the table. E is on F. D is on E. D is clear.\n",
        "system1_plan": "Move A from B to table | Move B from E to table | Move C from table to B | Move A from table to C | Move E from F to table | Move F from D to table | Move E from table to F | Move D from table to E",
        "system1_states": 8,
        "system2_plan_v1": "Moved to state -> Stack 1: [C], Stack 2: [D, F, E, B, A] | Plan so far [] | Exploring action Move B from E to table | New state -> Invalid | Exploring action Move C from table to A | New state -> Stack 1: [D, F, E, B, A, C] | Exploring action Move A from B to table | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, F, E, B] | Exploring action Move B from E to C | New state -> Invalid | Exploring action Move A from B to C | New state -> Stack 1: [C, A], Stack 2: [D, F, E, B] | Taking action Move A from B to table | Moved to state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, F, E, B] | Plan so far [Move A from B to table] | Exploring action Move B from E to A | New state -> Stack 1: [A, B], Stack 2: [C], Stack 3: [D, F, E] | Exploring action Move B from E to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D, F, E] | Exploring action Move A from table to C | New state -> Stack 1: [C, A], Stack 2: [D, F, E, B] | Exploring action Move D from table to B | New state -> Invalid | Taking action Move A from B to C | Moved to state -> Stack 1: [C, A], Stack 2: [D, F, E, B] | Plan so far [Move A from B to C] | Exploring action Move A from C to table | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, F, E, B] | Exploring action Move F from D to table | New state -> Invalid | Exploring action Move D from table to A | New state -> Invalid | Exploring action Move A from C to B | New state -> Stack 1: [C], Stack 2: [D, F, E, B, A] | Exploring action Move B from E to table | New state -> Stack 1: [B], Stack 2: [C, A], Stack 3: [D, F, E] | Taking action Move B from E to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D, F, E] | Plan so far [Move A from B to table | Move B from E to table] | Exploring action Move D from table to C | New state -> Invalid | Exploring action Move E from F to B | New state -> Stack 1: [A], Stack 2: [B, E], Stack 3: [C], Stack 4: [D, F] | Exploring action Move C from table to B | New state -> Stack 1: [A], Stack 2: [B, C], Stack 3: [D, F, E] | Exploring action Move E from F to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D, F], Stack 5: [E] | Taking action Move B from E to table | Moved to state -> Stack 1: [B], Stack 2: [C, A], Stack 3: [D, F, E] | Plan so far [Move A from B to C | Move B from E to table] | Exploring action Move E from F to B | New state -> Stack 1: [B, E], Stack 2: [C, A], Stack 3: [D, F] | Exploring action Move A from C to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D, F, E] | Exploring action Move E from F to table | New state -> Stack 1: [B], Stack 2: [C, A], Stack 3: [D, F], Stack 4: [E] | Exploring action Move C from table to B | New state -> Invalid | Taking action Move C from table to B | Moved to state -> Stack 1: [A], Stack 2: [B, C], Stack 3: [D, F, E] | Plan so far [Move A from B to table | Move B from E to table | Move C from table to B] | Exploring action Move B from table to E | New state -> Invalid | Exploring action Move E from F to A | New state -> Stack 1: [A, E], Stack 2: [B, C], Stack 3: [D, F] | Exploring action Move A from table to C | New state -> Stack 1: [B, C, A], Stack 2: [D, F, E] | Exploring action Move E from F to table | New state -> Stack 1: [A], Stack 2: [B, C], Stack 3: [D, F], Stack 4: [E] | Exploring action Move F from D to table | New state -> Invalid | Taking action Move A from table to C | Moved to state -> Stack 1: [B, C, A], Stack 2: [D, F, E] | Plan so far [Move A from B to table | Move B from E to table | Move C from table to B | Move A from table to C] | Exploring action Move E from F to A | New state -> Stack 1: [B, C, A, E], Stack 2: [D, F] | Exploring action Move F from D to E | New state -> Invalid | Exploring action Move E from F to table | New state -> Stack 1: [B, C, A], Stack 2: [D, F], Stack 3: [E] | Exploring action Move A from C to table | New state -> Stack 1: [A], Stack 2: [B, C], Stack 3: [D, F, E] | Exploring action Move C from B to A | New state -> Invalid | Taking action Move E from F to table | Moved to state -> Stack 1: [B, C, A], Stack 2: [D, F], Stack 3: [E] | Plan so far [Move A from B to table | Move B from E to table | Move C from table to B | Move A from table to C | Move E from F to table] | Exploring action Move F from D to E | New state -> Stack 1: [B, C, A], Stack 2: [D], Stack 3: [E, F] | Exploring action Move E from table to F | New state -> Stack 1: [B, C, A], Stack 2: [D, F, E] | Exploring action Move D from table to E | New state -> Invalid | Exploring action Move F from D to table | New state -> Stack 1: [B, C, A], Stack 2: [D], Stack 3: [E], Stack 4: [F] | Taking action Move F from D to table | Moved to state -> Stack 1: [B, C, A], Stack 2: [D], Stack 3: [E], Stack 4: [F] | Plan so far [Move A from B to table | Move B from E to table | Move C from table to B | Move A from table to C | Move E from F to table | Move F from D to table] | Exploring action Move D from table to E | New state -> Stack 1: [B, C, A], Stack 2: [E, D], Stack 3: [F] | Exploring action Move C from B to F | New state -> Invalid | Exploring action Move D from table to F | New state -> Stack 1: [B, C, A], Stack 2: [E], Stack 3: [F, D] | Exploring action Move B from table to F | New state -> Invalid | Exploring action Move E from table to F | New state -> Stack 1: [B, C, A], Stack 2: [D], Stack 3: [F, E] | Taking action Move E from table to F | Moved to state -> Stack 1: [B, C, A], Stack 2: [D], Stack 3: [F, E] | Plan so far [Move A from B to table | Move B from E to table | Move C from table to B | Move A from table to C | Move E from F to table | Move F from D to table | Move E from table to F] | Exploring action Move A from C to table | New state -> Stack 1: [A], Stack 2: [B, C], Stack 3: [D], Stack 4: [F, E] | Exploring action Move D from table to E | New state -> Stack 1: [B, C, A], Stack 2: [F, E, D] | Exploring action Move F from table to D | New state -> Invalid | Exploring action Move E from F to table | New state -> Stack 1: [B, C, A], Stack 2: [D], Stack 3: [E], Stack 4: [F] | Exploring action Move F from table to E | New state -> Invalid | Taking action Move D from table to E | Moved to state -> Stack 1: [B, C, A], Stack 2: [F, E, D] | Plan so far [Move A from B to table | Move B from E to table | Move C from table to B | Move A from table to C | Move E from F to table | Move F from D to table | Move E from table to F | Move D from table to E] | Reached goal state!",
        "system2_states_v1": 46
    },
    {
        "idx": 687,
        "start": [
            [
                "table",
                "A",
                "C",
                "B",
                "E",
                "F"
            ],
            [
                "table",
                "D"
            ]
        ],
        "goal": [
            [
                "table",
                "B",
                "F",
                "D",
                "E",
                "A"
            ],
            [
                "table",
                "C"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": false,
                "on": -1,
                "under": "C",
                "ontable": true
            },
            "B": {
                "clear": false,
                "on": "C",
                "under": "E",
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": "A",
                "under": "B",
                "ontable": false
            },
            "D": {
                "clear": true,
                "on": -1,
                "under": -1,
                "ontable": true
            },
            "E": {
                "clear": false,
                "on": "B",
                "under": "F",
                "ontable": false
            },
            "F": {
                "clear": true,
                "on": "E",
                "under": -1,
                "ontable": false
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": true,
                "on": "E",
                "under": -1,
                "ontable": false
            },
            "B": {
                "clear": false,
                "on": -1,
                "under": "F",
                "ontable": true
            },
            "C": {
                "clear": true,
                "on": -1,
                "under": -1,
                "ontable": true
            },
            "D": {
                "clear": false,
                "on": "F",
                "under": "E",
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": "D",
                "under": "A",
                "ontable": false
            },
            "F": {
                "clear": false,
                "on": "B",
                "under": "D",
                "ontable": false
            }
        },
        "plan_len": 8,
        "num_blocks": 6,
        "prompt": "The initial state:\nThe hand is empty.\nA is on the table. C is on A. B is on C. E is on B. F is on E. F is clear.\nD is on the table. D is clear.\n\nThe goal is:\nB is on the table. F is on B. D is on F. E is on D. A is on E. A is clear.\nC is on the table. C is clear.\n",
        "system1_plan": "Move F from E to table | Move E from B to table | Move B from C to table | Move C from A to table | Move F from table to B | Move D from table to F | Move E from table to D | Move A from table to E",
        "system1_states": 8,
        "system2_plan_v1": "Moved to state -> Stack 1: [A, C, B, E, F], Stack 2: [D] | Plan so far [] | Exploring action Move F from E to table | New state -> Stack 1: [A, C, B, E], Stack 2: [D], Stack 3: [F] | Exploring action Move F from E to D | New state -> Stack 1: [A, C, B, E], Stack 2: [D, F] | Exploring action Move C from A to table | New state -> Invalid | Exploring action Move D from table to F | New state -> Stack 1: [A, C, B, E, F, D] | Taking action Move F from E to table | Moved to state -> Stack 1: [A, C, B, E], Stack 2: [D], Stack 3: [F] | Plan so far [Move F from E to table] | Exploring action Move E from B to table | New state -> Stack 1: [A, C, B], Stack 2: [D], Stack 3: [E], Stack 4: [F] | Exploring action Move E from B to F | New state -> Stack 1: [A, C, B], Stack 2: [D], Stack 3: [F, E] | Exploring action Move A from table to F | New state -> Invalid | Exploring action Move E from B to D | New state -> Stack 1: [A, C, B], Stack 2: [D, E], Stack 3: [F] | Taking action Move E from B to table | Moved to state -> Stack 1: [A, C, B], Stack 2: [D], Stack 3: [E], Stack 4: [F] | Plan so far [Move F from E to table | Move E from B to table] | Exploring action Move A from table to E | New state -> Invalid | Exploring action Move B from C to E | New state -> Stack 1: [A, C], Stack 2: [D], Stack 3: [E, B], Stack 4: [F] | Exploring action Move C from A to E | New state -> Invalid | Exploring action Move B from C to D | New state -> Stack 1: [A, C], Stack 2: [D, B], Stack 3: [E], Stack 4: [F] | Exploring action Move B from C to table | New state -> Stack 1: [A, C], Stack 2: [B], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Taking action Move B from C to table | Moved to state -> Stack 1: [A, C], Stack 2: [B], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Plan so far [Move F from E to table | Move E from B to table | Move B from C to table] | Exploring action Move A from table to E | New state -> Invalid | Exploring action Move F from table to B | New state -> Stack 1: [A, C], Stack 2: [B, F], Stack 3: [D], Stack 4: [E] | Exploring action Move A from table to D | New state -> Invalid | Exploring action Move C from A to B | New state -> Stack 1: [A], Stack 2: [B, C], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Exploring action Move C from A to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Taking action Move C from A to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Plan so far [Move F from E to table | Move E from B to table | Move B from C to table | Move C from A to table] | Exploring action Move F from table to B | New state -> Stack 1: [A], Stack 2: [B, F], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Exploring action Move F from table to D | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D, F], Stack 5: [E] | Exploring action Move A from table to E | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D], Stack 4: [E, A], Stack 5: [F] | Taking action Move F from table to B | Moved to state -> Stack 1: [A], Stack 2: [B, F], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Plan so far [Move F from E to table | Move E from B to table | Move B from C to table | Move C from A to table | Move F from table to B] | Exploring action Move D from table to F | New state -> Stack 1: [A], Stack 2: [B, F, D], Stack 3: [C], Stack 4: [E] | Exploring action Move E from table to D | New state -> Stack 1: [A], Stack 2: [B, F], Stack 3: [C], Stack 4: [D, E] | Exploring action Move A from table to E | New state -> Stack 1: [B, F], Stack 2: [C], Stack 3: [D], Stack 4: [E, A] | Exploring action Move B from table to F | New state -> Invalid | Exploring action Move B from table to E | New state -> Invalid | Taking action Move D from table to F | Moved to state -> Stack 1: [A], Stack 2: [B, F, D], Stack 3: [C], Stack 4: [E] | Plan so far [Move F from E to table | Move E from B to table | Move B from C to table | Move C from A to table | Move F from table to B | Move D from table to F] | Exploring action Move A from table to E | New state -> Stack 1: [B, F, D], Stack 2: [C], Stack 3: [E, A] | Exploring action Move D from F to table | New state -> Stack 1: [A], Stack 2: [B, F], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Exploring action Move E from table to D | New state -> Stack 1: [A], Stack 2: [B, F, D, E], Stack 3: [C] | Exploring action Move F from B to D | New state -> Invalid | Taking action Move E from table to D | Moved to state -> Stack 1: [A], Stack 2: [B, F, D, E], Stack 3: [C] | Plan so far [Move F from E to table | Move E from B to table | Move B from C to table | Move C from A to table | Move F from table to B | Move D from table to F | Move E from table to D] | Exploring action Move E from D to table | New state -> Stack 1: [A], Stack 2: [B, F, D], Stack 3: [C], Stack 4: [E] | Exploring action Move B from table to A | New state -> Invalid | Exploring action Move A from table to E | New state -> Stack 1: [B, F, D, E, A], Stack 2: [C] | Exploring action Move C from table to A | New state -> Stack 1: [A, C], Stack 2: [B, F, D, E] | Taking action Move A from table to E | Moved to state -> Stack 1: [B, F, D, E, A], Stack 2: [C] | Plan so far [Move F from E to table | Move E from B to table | Move B from C to table | Move C from A to table | Move F from table to B | Move D from table to F | Move E from table to D | Move A from table to E] | Reached goal state!",
        "system2_states_v1": 34
    },
    {
        "idx": 689,
        "start": [
            [
                "table",
                "A",
                "B",
                "C",
                "D"
            ],
            [
                "table",
                "F",
                "E"
            ]
        ],
        "goal": [
            [
                "table",
                "C",
                "F"
            ],
            [
                "table",
                "E",
                "A",
                "B",
                "D"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": false,
                "on": -1,
                "under": "B",
                "ontable": true
            },
            "B": {
                "clear": false,
                "on": "A",
                "under": "C",
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": "B",
                "under": "D",
                "ontable": false
            },
            "D": {
                "clear": true,
                "on": "C",
                "under": -1,
                "ontable": false
            },
            "E": {
                "clear": true,
                "on": "F",
                "under": -1,
                "ontable": false
            },
            "F": {
                "clear": false,
                "on": -1,
                "under": "E",
                "ontable": true
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": false,
                "on": "E",
                "under": "B",
                "ontable": false
            },
            "B": {
                "clear": false,
                "on": "A",
                "under": "D",
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": -1,
                "under": "F",
                "ontable": true
            },
            "D": {
                "clear": true,
                "on": "B",
                "under": -1,
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": -1,
                "under": "A",
                "ontable": true
            },
            "F": {
                "clear": true,
                "on": "C",
                "under": -1,
                "ontable": false
            }
        },
        "plan_len": 8,
        "num_blocks": 6,
        "prompt": "The initial state:\nThe hand is empty.\nA is on the table. B is on A. C is on B. D is on C. D is clear.\nF is on the table. E is on F. E is clear.\n\nThe goal is:\nC is on the table. F is on C. F is clear.\nE is on the table. A is on E. B is on A. D is on B. D is clear.\n",
        "system1_plan": "Move D from C to table | Move C from B to table | Move E from F to table | Move F from table to C | Move B from A to table | Move A from table to E | Move B from table to A | Move D from table to B",
        "system1_states": 8,
        "system2_plan_v1": "Moved to state -> Stack 1: [A, B, C, D], Stack 2: [F, E] | Plan so far [] | Exploring action Move E from F to table | New state -> Stack 1: [A, B, C, D], Stack 2: [E], Stack 3: [F] | Exploring action Move C from B to table | New state -> Invalid | Exploring action Move D from C to table | New state -> Stack 1: [A, B, C], Stack 2: [D], Stack 3: [F, E] | Exploring action Move D from C to E | New state -> Stack 1: [A, B, C], Stack 2: [F, E, D] | Exploring action Move F from table to D | New state -> Invalid | Taking action Move D from C to table | Moved to state -> Stack 1: [A, B, C], Stack 2: [D], Stack 3: [F, E] | Plan so far [Move D from C to table] | Exploring action Move B from A to E | New state -> Invalid | Exploring action Move B from A to table | New state -> Invalid | Exploring action Move E from F to table | New state -> Stack 1: [A, B, C], Stack 2: [D], Stack 3: [E], Stack 4: [F] | Exploring action Move C from B to table | New state -> Stack 1: [A, B], Stack 2: [C], Stack 3: [D], Stack 4: [F, E] | Exploring action Move E from F to C | New state -> Stack 1: [A, B, C, E], Stack 2: [D], Stack 3: [F] | Taking action Move E from F to table | Moved to state -> Stack 1: [A, B, C, D], Stack 2: [E], Stack 3: [F] | Plan so far [Move E from F to table] | Exploring action Move D from C to table | New state -> Stack 1: [A, B, C], Stack 2: [D], Stack 3: [E], Stack 4: [F] | Exploring action Move B from A to table | New state -> Invalid | Exploring action Move D from C to F | New state -> Stack 1: [A, B, C], Stack 2: [E], Stack 3: [F, D] | Exploring action Move D from C to E | New state -> Stack 1: [A, B, C], Stack 2: [E, D], Stack 3: [F] | Exploring action Move A from table to D | New state -> Invalid | Taking action Move C from B to table | Moved to state -> Stack 1: [A, B], Stack 2: [C], Stack 3: [D], Stack 4: [F, E] | Plan so far [Move D from C to table | Move C from B to table] | Exploring action Move B from A to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [F, E] | Exploring action Move F from table to E | New state -> Invalid | Exploring action Move D from table to B | New state -> Stack 1: [A, B, D], Stack 2: [C], Stack 3: [F, E] | Exploring action Move E from F to table | New state -> Stack 1: [A, B], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Taking action Move D from table to B | Moved to state -> Stack 1: [A, B, D], Stack 2: [C], Stack 3: [F, E] | Plan so far [Move D from C to table | Move C from B to table | Move D from table to B] | Exploring action Move E from F to C | New state -> Stack 1: [A, B, D], Stack 2: [C, E], Stack 3: [F] | Exploring action Move E from F to table | New state -> Stack 1: [A, B, D], Stack 2: [C], Stack 3: [E], Stack 4: [F] | Exploring action Move C from table to E | New state -> Stack 1: [A, B, D], Stack 2: [F, E, C] | Exploring action Move A from table to E | New state -> Invalid | Exploring action Move A from table to D | New state -> Invalid | Taking action Move E from F to table | Moved to state -> Stack 1: [A, B, D], Stack 2: [C], Stack 3: [E], Stack 4: [F] | Plan so far [Move D from C to table | Move C from B to table | Move D from table to B | Move E from F to table] | Exploring action Move B from A to D | New state -> Invalid | Exploring action Move F from table to E | New state -> Stack 1: [A, B, D], Stack 2: [C], Stack 3: [E, F] | Exploring action Move B from A to C | New state -> Invalid | Exploring action Move F from table to C | New state -> Stack 1: [A, B, D], Stack 2: [C, F], Stack 3: [E] | Exploring action Move C from table to F | New state -> Stack 1: [A, B, D], Stack 2: [E], Stack 3: [F, C] | Taking action Move F from table to C | Moved to state -> Stack 1: [A, B, D], Stack 2: [C, F], Stack 3: [E] | Plan so far [Move D from C to table | Move C from B to table | Move D from table to B | Move E from F to table | Move F from table to C] | Exploring action Move B from A to table | New state -> Invalid | Exploring action Move F from C to table | New state -> Stack 1: [A, B, D], Stack 2: [C], Stack 3: [E], Stack 4: [F] | Exploring action Move B from A to F | New state -> Invalid | Exploring action Move D from B to table | New state -> Stack 1: [A, B], Stack 2: [C, F], Stack 3: [D], Stack 4: [E] | Exploring action Move E from table to D | New state -> Stack 1: [A, B, D, E], Stack 2: [C, F] | Taking action Move E from F to table | Moved to state -> Stack 1: [A, B], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Plan so far [Move D from C to table | Move C from B to table | Move E from F to table] | Exploring action Move B from A to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Exploring action Move A from table to B | New state -> Invalid | Exploring action Move F from table to C | New state -> Stack 1: [A, B], Stack 2: [C, F], Stack 3: [D], Stack 4: [E] | Exploring action Move D from table to B | New state -> Stack 1: [A, B, D], Stack 2: [C], Stack 3: [E], Stack 4: [F] | Taking action Move D from table to B | Moved to state -> Stack 1: [A, B, D], Stack 2: [C], Stack 3: [E], Stack 4: [F] | Plan so far [Move D from C to table | Move C from B to table | Move E from F to table | Move D from table to B] | Taking action Move F from table to C | Moved to state -> Stack 1: [A, B], Stack 2: [C, F], Stack 3: [D], Stack 4: [E] | Plan so far [Move D from C to table | Move C from B to table | Move E from F to table | Move F from table to C] | Exploring action Move A from table to D | New state -> Invalid | Exploring action Move B from A to E | New state -> Stack 1: [A], Stack 2: [C, F], Stack 3: [D], Stack 4: [E, B] | Exploring action Move B from A to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, F], Stack 4: [D], Stack 5: [E] | Exploring action Move D from table to B | New state -> Stack 1: [A, B, D], Stack 2: [C, F], Stack 3: [E] | Taking action Move D from table to B | Moved to state -> Stack 1: [A, B, D], Stack 2: [C, F], Stack 3: [E] | Plan so far [Move D from C to table | Move C from B to table | Move E from F to table | Move F from table to C | Move D from table to B] | Taking action Move B from A to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, F], Stack 4: [D], Stack 5: [E] | Plan so far [Move D from C to table | Move C from B to table | Move E from F to table | Move F from table to C | Move B from A to table] | Exploring action Move C from table to D | New state -> Invalid | Exploring action Move A from table to E | New state -> Stack 1: [B], Stack 2: [C, F], Stack 3: [D], Stack 4: [E, A] | Exploring action Move D from table to B | New state -> Stack 1: [A], Stack 2: [B, D], Stack 3: [C, F], Stack 4: [E] | Exploring action Move A from table to B | New state -> Stack 1: [B, A], Stack 2: [C, F], Stack 3: [D], Stack 4: [E] | Taking action Move A from table to E | Moved to state -> Stack 1: [B], Stack 2: [C, F], Stack 3: [D], Stack 4: [E, A] | Plan so far [Move D from C to table | Move C from B to table | Move E from F to table | Move F from table to C | Move B from A to table | Move A from table to E] | Exploring action Move E from table to F | New state -> Invalid | Exploring action Move E from table to B | New state -> Invalid | Exploring action Move D from table to B | New state -> Stack 1: [B, D], Stack 2: [C, F], Stack 3: [E, A] | Exploring action Move B from table to A | New state -> Stack 1: [C, F], Stack 2: [D], Stack 3: [E, A, B] | Exploring action Move B from table to D | New state -> Stack 1: [C, F], Stack 2: [D, B], Stack 3: [E, A] | Taking action Move B from table to A | Moved to state -> Stack 1: [C, F], Stack 2: [D], Stack 3: [E, A, B] | Plan so far [Move D from C to table | Move C from B to table | Move E from F to table | Move F from table to C | Move B from A to table | Move A from table to E | Move B from table to A] | Exploring action Move C from table to D | New state -> Invalid | Exploring action Move B from A to table | New state -> Stack 1: [B], Stack 2: [C, F], Stack 3: [D], Stack 4: [E, A] | Exploring action Move D from table to B | New state -> Stack 1: [C, F], Stack 2: [E, A, B, D] | Exploring action Move F from C to table | New state -> Stack 1: [C], Stack 2: [D], Stack 3: [E, A, B], Stack 4: [F] | Taking action Move D from table to B | Moved to state -> Stack 1: [C, F], Stack 2: [E, A, B, D] | Plan so far [Move D from C to table | Move C from B to table | Move E from F to table | Move F from table to C | Move B from A to table | Move A from table to E | Move B from table to A | Move D from table to B] | Reached goal state!",
        "system2_states_v1": 55
    },
    {
        "idx": 598,
        "start": [
            [
                "table",
                "D",
                "C"
            ],
            [
                "table",
                "E",
                "B",
                "A"
            ]
        ],
        "goal": [
            [
                "table",
                "C",
                "E",
                "D",
                "B",
                "A"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": true,
                "on": "B",
                "under": -1,
                "ontable": false
            },
            "B": {
                "clear": false,
                "on": "E",
                "under": "A",
                "ontable": false
            },
            "C": {
                "clear": true,
                "on": "D",
                "under": -1,
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": -1,
                "under": "C",
                "ontable": true
            },
            "E": {
                "clear": false,
                "on": -1,
                "under": "B",
                "ontable": true
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": true,
                "on": "B",
                "under": -1,
                "ontable": false
            },
            "B": {
                "clear": false,
                "on": "D",
                "under": "A",
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": -1,
                "under": "E",
                "ontable": true
            },
            "D": {
                "clear": false,
                "on": "E",
                "under": "B",
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": "C",
                "under": "D",
                "ontable": false
            }
        },
        "plan_len": 7,
        "num_blocks": 5,
        "prompt": "The initial state:\nThe hand is empty.\nD is on the table. C is on D. C is clear.\nE is on the table. B is on E. A is on B. A is clear.\n\nThe goal is:\nC is on the table. E is on C. D is on E. B is on D. A is on B. A is clear.\n",
        "system1_plan": "Move C from D to table | Move A from B to table | Move B from E to table | Move E from table to C | Move D from table to E | Move B from table to D | Move A from table to B",
        "system1_states": 7,
        "system2_plan_v1": "Moved to state -> Stack 1: [D, C], Stack 2: [E, B, A] | Plan so far [] | Exploring action Move B from E to C | New state -> Invalid | Exploring action Move C from D to table | New state -> Stack 1: [C], Stack 2: [D], Stack 3: [E, B, A] | Exploring action Move A from B to table | New state -> Stack 1: [A], Stack 2: [D, C], Stack 3: [E, B] | Exploring action Move A from B to C | New state -> Stack 1: [D, C, A], Stack 2: [E, B] | Taking action Move C from D to table | Moved to state -> Stack 1: [C], Stack 2: [D], Stack 3: [E, B, A] | Plan so far [Move C from D to table] | Exploring action Move E from table to C | New state -> Invalid | Exploring action Move B from E to D | New state -> Invalid | Exploring action Move A from B to table | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D], Stack 4: [E, B] | Exploring action Move A from B to D | New state -> Stack 1: [C], Stack 2: [D, A], Stack 3: [E, B] | Exploring action Move D from table to C | New state -> Stack 1: [C, D], Stack 2: [E, B, A] | Taking action Move A from B to table | Moved to state -> Stack 1: [A], Stack 2: [D, C], Stack 3: [E, B] | Plan so far [Move A from B to table] | Exploring action Move E from table to A | New state -> Invalid | Exploring action Move C from D to table | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D], Stack 4: [E, B] | Exploring action Move B from E to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, C], Stack 4: [E] | Exploring action Move C from D to A | New state -> Stack 1: [A, C], Stack 2: [D], Stack 3: [E, B] | Taking action Move A from B to table | Moved to state -> Stack 1: [A], Stack 2: [C], Stack 3: [D], Stack 4: [E, B] | Plan so far [Move C from D to table | Move A from B to table] | Exploring action Move E from table to A | New state -> Invalid | Exploring action Move E from table to B | New state -> Invalid | Exploring action Move B from E to D | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, B], Stack 4: [E] | Exploring action Move B from E to C | New state -> Stack 1: [A], Stack 2: [C, B], Stack 3: [D], Stack 4: [E] | Exploring action Move B from E to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Taking action Move B from E to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, C], Stack 4: [E] | Plan so far [Move A from B to table | Move B from E to table] | Exploring action Move D from table to E | New state -> Invalid | Exploring action Move C from D to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Exploring action Move C from D to A | New state -> Stack 1: [A, C], Stack 2: [B], Stack 3: [D], Stack 4: [E] | Exploring action Move A from table to B | New state -> Stack 1: [B, A], Stack 2: [D, C], Stack 3: [E] | Exploring action Move D from table to A | New state -> Invalid | Taking action Move C from D to table | Moved to state -> Stack 1: [A], Stack 2: [C], Stack 3: [D], Stack 4: [E, B] | Plan so far [Move A from B to table | Move C from D to table] | Taking action Move B from E to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Plan so far [Move C from D to table | Move A from B to table | Move B from E to table] | Exploring action Move A from table to D | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, A], Stack 4: [E] | Exploring action Move E from table to C | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, E], Stack 4: [D] | Exploring action Move A from table to B | New state -> Stack 1: [B, A], Stack 2: [C], Stack 3: [D], Stack 4: [E] | Taking action Move C from D to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Plan so far [Move A from B to table | Move B from E to table | Move C from D to table] | Taking action Move E from table to C | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, E], Stack 4: [D] | Plan so far [Move C from D to table | Move A from B to table | Move B from E to table | Move E from table to C] | Exploring action Move A from table to E | New state -> Stack 1: [B], Stack 2: [C, E, A], Stack 3: [D] | Exploring action Move A from table to B | New state -> Stack 1: [B, A], Stack 2: [C, E], Stack 3: [D] | Exploring action Move D from table to E | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, E, D] | Exploring action Move C from table to D | New state -> Invalid | Taking action Move D from table to E | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, E, D] | Plan so far [Move C from D to table | Move A from B to table | Move B from E to table | Move E from table to C | Move D from table to E] | Exploring action Move E from C to D | New state -> Invalid | Exploring action Move A from table to B | New state -> Stack 1: [B, A], Stack 2: [C, E, D] | Exploring action Move B from table to D | New state -> Stack 1: [A], Stack 2: [C, E, D, B] | Exploring action Move B from table to A | New state -> Stack 1: [A, B], Stack 2: [C, E, D] | Exploring action Move C from table to B | New state -> Invalid | Taking action Move B from table to D | Moved to state -> Stack 1: [A], Stack 2: [C, E, D, B] | Plan so far [Move C from D to table | Move A from B to table | Move B from E to table | Move E from table to C | Move D from table to E | Move B from table to D] | Exploring action Move A from table to B | New state -> Stack 1: [C, E, D, B, A] | Exploring action Move B from D to A | New state -> Stack 1: [A, B], Stack 2: [C, E, D] | Exploring action Move B from D to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, E, D] | Exploring action Move E from C to A | New state -> Invalid | Taking action Move A from table to B | Moved to state -> Stack 1: [C, E, D, B, A] | Plan so far [Move C from D to table | Move A from B to table | Move B from E to table | Move E from table to C | Move D from table to E | Move B from table to D | Move A from table to B] | Reached goal state!",
        "system2_states_v1": 39
    },
    {
        "idx": 686,
        "start": [
            [
                "table",
                "C",
                "E",
                "D",
                "A"
            ],
            [
                "table",
                "F",
                "B"
            ]
        ],
        "goal": [
            [
                "table",
                "C",
                "A",
                "E"
            ],
            [
                "table",
                "D",
                "F",
                "B"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": true,
                "on": "D",
                "under": -1,
                "ontable": false
            },
            "B": {
                "clear": true,
                "on": "F",
                "under": -1,
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": -1,
                "under": "E",
                "ontable": true
            },
            "D": {
                "clear": false,
                "on": "E",
                "under": "A",
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": "C",
                "under": "D",
                "ontable": false
            },
            "F": {
                "clear": false,
                "on": -1,
                "under": "B",
                "ontable": true
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": false,
                "on": "C",
                "under": "E",
                "ontable": false
            },
            "B": {
                "clear": true,
                "on": "F",
                "under": -1,
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": -1,
                "under": "A",
                "ontable": true
            },
            "D": {
                "clear": false,
                "on": -1,
                "under": "F",
                "ontable": true
            },
            "E": {
                "clear": true,
                "on": "A",
                "under": -1,
                "ontable": false
            },
            "F": {
                "clear": false,
                "on": "D",
                "under": "B",
                "ontable": false
            }
        },
        "plan_len": 8,
        "num_blocks": 6,
        "prompt": "The initial state:\nThe hand is empty.\nC is on the table. E is on C. D is on E. A is on D. A is clear.\nF is on the table. B is on F. B is clear.\n\nThe goal is:\nC is on the table. A is on C. E is on A. E is clear.\nD is on the table. F is on D. B is on F. B is clear.\n",
        "system1_plan": "Move A from D to table | Move D from E to table | Move E from C to table | Move A from table to C | Move E from table to A | Move B from F to table | Move F from table to D | Move B from table to F",
        "system1_states": 8,
        "system2_plan_v1": "Moved to state -> Stack 1: [C, E, D, A], Stack 2: [F, B] | Plan so far [] | Exploring action Move A from D to B | New state -> Stack 1: [C, E, D], Stack 2: [F, B, A] | Exploring action Move D from E to table | New state -> Invalid | Exploring action Move B from F to table | New state -> Stack 1: [B], Stack 2: [C, E, D, A], Stack 3: [F] | Exploring action Move A from D to table | New state -> Stack 1: [A], Stack 2: [C, E, D], Stack 3: [F, B] | Taking action Move A from D to table | Moved to state -> Stack 1: [A], Stack 2: [C, E, D], Stack 3: [F, B] | Plan so far [Move A from D to table] | Exploring action Move D from E to A | New state -> Stack 1: [A, D], Stack 2: [C, E], Stack 3: [F, B] | Exploring action Move D from E to table | New state -> Stack 1: [A], Stack 2: [C, E], Stack 3: [D], Stack 4: [F, B] | Exploring action Move B from F to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, E, D], Stack 4: [F] | Exploring action Move E from C to table | New state -> Invalid | Taking action Move D from E to table | Moved to state -> Stack 1: [A], Stack 2: [C, E], Stack 3: [D], Stack 4: [F, B] | Plan so far [Move A from D to table | Move D from E to table] | Exploring action Move E from C to table | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [F, B] | Exploring action Move C from table to E | New state -> Invalid | Exploring action Move E from C to D | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, E], Stack 4: [F, B] | Exploring action Move E from C to A | New state -> Stack 1: [A, E], Stack 2: [C], Stack 3: [D], Stack 4: [F, B] | Exploring action Move F from table to D | New state -> Invalid | Taking action Move E from C to table | Moved to state -> Stack 1: [A], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [F, B] | Plan so far [Move A from D to table | Move D from E to table | Move E from C to table] | Exploring action Move F from table to A | New state -> Invalid | Exploring action Move F from table to C | New state -> Invalid | Exploring action Move A from table to C | New state -> Stack 1: [C, A], Stack 2: [D], Stack 3: [E], Stack 4: [F, B] | Exploring action Move E from table to A | New state -> Stack 1: [A, E], Stack 2: [C], Stack 3: [D], Stack 4: [F, B] | Exploring action Move B from F to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Taking action Move E from C to A | Moved to state -> Stack 1: [A, E], Stack 2: [C], Stack 3: [D], Stack 4: [F, B] | Plan so far [Move A from D to table | Move D from E to table | Move E from C to A] | Exploring action Move B from F to table | New state -> Stack 1: [A, E], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [F] | Exploring action Move B from F to D | New state -> Stack 1: [A, E], Stack 2: [C], Stack 3: [D, B], Stack 4: [F] | Exploring action Move E from A to table | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [F, B] | Exploring action Move F from table to C | New state -> Invalid | Taking action Move A from table to C | Moved to state -> Stack 1: [C, A], Stack 2: [D], Stack 3: [E], Stack 4: [F, B] | Plan so far [Move A from D to table | Move D from E to table | Move E from C to table | Move A from table to C] | Exploring action Move B from F to D | New state -> Stack 1: [C, A], Stack 2: [D, B], Stack 3: [E], Stack 4: [F] | Exploring action Move E from table to A | New state -> Stack 1: [C, A, E], Stack 2: [D], Stack 3: [F, B] | Exploring action Move B from F to table | New state -> Stack 1: [B], Stack 2: [C, A], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Exploring action Move F from table to A | New state -> Invalid | Taking action Move E from table to A | Moved to state -> Stack 1: [C, A, E], Stack 2: [D], Stack 3: [F, B] | Plan so far [Move A from D to table | Move D from E to table | Move E from C to table | Move A from table to C | Move E from table to A] | Exploring action Move C from table to B | New state -> Invalid | Exploring action Move B from F to D | New state -> Stack 1: [C, A, E], Stack 2: [D, B], Stack 3: [F] | Exploring action Move B from F to table | New state -> Stack 1: [B], Stack 2: [C, A, E], Stack 3: [D], Stack 4: [F] | Exploring action Move B from F to E | New state -> Stack 1: [C, A, E, B], Stack 2: [D], Stack 3: [F] | Exploring action Move F from table to E | New state -> Invalid | Taking action Move B from F to table | Moved to state -> Stack 1: [B], Stack 2: [C, A, E], Stack 3: [D], Stack 4: [F] | Plan so far [Move A from D to table | Move D from E to table | Move E from C to table | Move A from table to C | Move E from table to A | Move B from F to table] | Exploring action Move B from table to D | New state -> Stack 1: [C, A, E], Stack 2: [D, B], Stack 3: [F] | Exploring action Move F from table to D | New state -> Stack 1: [B], Stack 2: [C, A, E], Stack 3: [D, F] | Exploring action Move B from table to F | New state -> Stack 1: [C, A, E], Stack 2: [D], Stack 3: [F, B] | Exploring action Move C from table to B | New state -> Invalid | Taking action Move F from table to D | Moved to state -> Stack 1: [B], Stack 2: [C, A, E], Stack 3: [D, F] | Plan so far [Move A from D to table | Move D from E to table | Move E from C to table | Move A from table to C | Move E from table to A | Move B from F to table | Move F from table to D] | Exploring action Move C from table to E | New state -> Invalid | Exploring action Move F from D to B | New state -> Stack 1: [B, F], Stack 2: [C, A, E], Stack 3: [D] | Exploring action Move B from table to F | New state -> Stack 1: [C, A, E], Stack 2: [D, F, B] | Exploring action Move F from D to table | New state -> Stack 1: [B], Stack 2: [C, A, E], Stack 3: [D], Stack 4: [F] | Taking action Move B from table to F | Moved to state -> Stack 1: [C, A, E], Stack 2: [D, F, B] | Plan so far [Move A from D to table | Move D from E to table | Move E from C to table | Move A from table to C | Move E from table to A | Move B from F to table | Move F from table to D | Move B from table to F] | Reached goal state!",
        "system2_states_v1": 39
    },
    {
        "idx": 706,
        "start": [
            [
                "table",
                "C",
                "A"
            ],
            [
                "table",
                "D",
                "F",
                "B",
                "E"
            ]
        ],
        "goal": [
            [
                "table",
                "A",
                "B",
                "E",
                "C",
                "D"
            ],
            [
                "table",
                "F"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": true,
                "on": "C",
                "under": -1,
                "ontable": false
            },
            "B": {
                "clear": false,
                "on": "F",
                "under": "E",
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": -1,
                "under": "A",
                "ontable": true
            },
            "D": {
                "clear": false,
                "on": -1,
                "under": "F",
                "ontable": true
            },
            "E": {
                "clear": true,
                "on": "B",
                "under": -1,
                "ontable": false
            },
            "F": {
                "clear": false,
                "on": "D",
                "under": "B",
                "ontable": false
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": false,
                "on": -1,
                "under": "B",
                "ontable": true
            },
            "B": {
                "clear": false,
                "on": "A",
                "under": "E",
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": "E",
                "under": "D",
                "ontable": false
            },
            "D": {
                "clear": true,
                "on": "C",
                "under": -1,
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": "B",
                "under": "C",
                "ontable": false
            },
            "F": {
                "clear": true,
                "on": -1,
                "under": -1,
                "ontable": true
            }
        },
        "plan_len": 8,
        "num_blocks": 6,
        "prompt": "The initial state:\nThe hand is empty.\nC is on the table. A is on C. A is clear.\nD is on the table. F is on D. B is on F. E is on B. E is clear.\n\nThe goal is:\nA is on the table. B is on A. E is on B. C is on E. D is on C. D is clear.\nF is on the table. F is clear.\n",
        "system1_plan": "Move E from B to table | Move B from F to table | Move F from D to table | Move A from C to table | Move B from table to A | Move E from table to B | Move C from table to E | Move D from table to C",
        "system1_states": 8,
        "system2_plan_v1": "Moved to state -> Stack 1: [C, A], Stack 2: [D, F, B, E] | Plan so far [] | Exploring action Move F from D to A | New state -> Invalid | Exploring action Move A from C to E | New state -> Stack 1: [C], Stack 2: [D, F, B, E, A] | Exploring action Move E from B to table | New state -> Stack 1: [C, A], Stack 2: [D, F, B], Stack 3: [E] | Exploring action Move A from C to table | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, F, B, E] | Taking action Move A from C to table | Moved to state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, F, B, E] | Plan so far [Move A from C to table] | Exploring action Move D from table to E | New state -> Invalid | Exploring action Move B from F to A | New state -> Invalid | Exploring action Move E from B to A | New state -> Stack 1: [A, E], Stack 2: [C], Stack 3: [D, F, B] | Exploring action Move E from B to table | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, F, B], Stack 4: [E] | Exploring action Move C from table to E | New state -> Stack 1: [A], Stack 2: [D, F, B, E, C] | Taking action Move E from B to table | Moved to state -> Stack 1: [C, A], Stack 2: [D, F, B], Stack 3: [E] | Plan so far [Move E from B to table] | Exploring action Move B from F to table | New state -> Stack 1: [B], Stack 2: [C, A], Stack 3: [D, F], Stack 4: [E] | Exploring action Move A from C to E | New state -> Stack 1: [C], Stack 2: [D, F, B], Stack 3: [E, A] | Exploring action Move C from table to E | New state -> Invalid | Exploring action Move A from C to table | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, F, B], Stack 4: [E] | Taking action Move C from table to E | Moved to state -> Stack 1: [A], Stack 2: [D, F, B, E, C] | Plan so far [Move A from C to table | Move C from table to E] | Exploring action Move C from E to table | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, F, B, E] | Exploring action Move C from E to A | New state -> Stack 1: [A, C], Stack 2: [D, F, B, E] | Exploring action Move B from F to A | New state -> Invalid | Exploring action Move A from table to C | New state -> Stack 1: [D, F, B, E, C, A] | Taking action Move B from F to table | Moved to state -> Stack 1: [B], Stack 2: [C, A], Stack 3: [D, F], Stack 4: [E] | Plan so far [Move E from B to table | Move B from F to table] | Exploring action Move A from C to E | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, F], Stack 4: [E, A] | Exploring action Move C from table to A | New state -> Invalid | Exploring action Move A from C to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D, F], Stack 5: [E] | Exploring action Move F from D to table | New state -> Stack 1: [B], Stack 2: [C, A], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Exploring action Move C from table to B | New state -> Invalid | Taking action Move F from D to table | Moved to state -> Stack 1: [B], Stack 2: [C, A], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Plan so far [Move E from B to table | Move B from F to table | Move F from D to table] | Exploring action Move A from C to D | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, A], Stack 4: [E], Stack 5: [F] | Exploring action Move A from C to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Exploring action Move C from table to D | New state -> Invalid | Exploring action Move A from C to B | New state -> Stack 1: [B, A], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Exploring action Move C from table to F | New state -> Invalid | Taking action Move A from C to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Plan so far [Move E from B to table | Move B from F to table | Move F from D to table | Move A from C to table] | Exploring action Move D from table to C | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, D], Stack 4: [E], Stack 5: [F] | Exploring action Move B from table to A | New state -> Stack 1: [A, B], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Exploring action Move A from table to B | New state -> Stack 1: [B, A], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Taking action Move B from table to A | Moved to state -> Stack 1: [A, B], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Plan so far [Move E from B to table | Move B from F to table | Move F from D to table | Move A from C to table | Move B from table to A] | Exploring action Move A from table to C | New state -> Invalid | Exploring action Move D from table to C | New state -> Stack 1: [A, B], Stack 2: [C, D], Stack 3: [E], Stack 4: [F] | Exploring action Move E from table to B | New state -> Stack 1: [A, B, E], Stack 2: [C], Stack 3: [D], Stack 4: [F] | Exploring action Move A from table to B | New state -> Invalid | Exploring action Move C from table to B | New state -> Stack 1: [A, B, C], Stack 2: [D], Stack 3: [E], Stack 4: [F] | Taking action Move E from table to B | Moved to state -> Stack 1: [A, B, E], Stack 2: [C], Stack 3: [D], Stack 4: [F] | Plan so far [Move E from B to table | Move B from F to table | Move F from D to table | Move A from C to table | Move B from table to A | Move E from table to B] | Exploring action Move D from table to C | New state -> Stack 1: [A, B, E], Stack 2: [C, D], Stack 3: [F] | Exploring action Move A from table to E | New state -> Invalid | Exploring action Move E from B to table | New state -> Stack 1: [A, B], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Exploring action Move C from table to E | New state -> Stack 1: [A, B, E, C], Stack 2: [D], Stack 3: [F] | Taking action Move C from table to E | Moved to state -> Stack 1: [A, B, E, C], Stack 2: [D], Stack 3: [F] | Plan so far [Move E from B to table | Move B from F to table | Move F from D to table | Move A from C to table | Move B from table to A | Move E from table to B | Move C from table to E] | Exploring action Move C from E to table | New state -> Stack 1: [A, B, E], Stack 2: [C], Stack 3: [D], Stack 4: [F] | Exploring action Move A from table to C | New state -> Invalid | Exploring action Move D from table to C | New state -> Stack 1: [A, B, E, C, D], Stack 2: [F] | Exploring action Move F from table to C | New state -> Stack 1: [A, B, E, C, F], Stack 2: [D] | Taking action Move D from table to C | Moved to state -> Stack 1: [A, B, E, C, D], Stack 2: [F] | Plan so far [Move E from B to table | Move B from F to table | Move F from D to table | Move A from C to table | Move B from table to A | Move E from table to B | Move C from table to E | Move D from table to C] | Reached goal state!",
        "system2_states_v1": 43
    },
    {
        "idx": 883,
        "start": [
            [
                "table",
                "C",
                "F",
                "D",
                "A"
            ],
            [
                "table",
                "G",
                "B",
                "E"
            ]
        ],
        "goal": [
            [
                "table",
                "E",
                "F",
                "C",
                "G",
                "D",
                "A",
                "B"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": true,
                "on": "D",
                "under": -1,
                "ontable": false
            },
            "B": {
                "clear": false,
                "on": "G",
                "under": "E",
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": -1,
                "under": "F",
                "ontable": true
            },
            "D": {
                "clear": false,
                "on": "F",
                "under": "A",
                "ontable": false
            },
            "E": {
                "clear": true,
                "on": "B",
                "under": -1,
                "ontable": false
            },
            "F": {
                "clear": false,
                "on": "C",
                "under": "D",
                "ontable": false
            },
            "G": {
                "clear": false,
                "on": -1,
                "under": "B",
                "ontable": true
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": false,
                "on": "D",
                "under": "B",
                "ontable": false
            },
            "B": {
                "clear": true,
                "on": "A",
                "under": -1,
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": "F",
                "under": "G",
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": "G",
                "under": "A",
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": -1,
                "under": "F",
                "ontable": true
            },
            "F": {
                "clear": false,
                "on": "E",
                "under": "C",
                "ontable": false
            },
            "G": {
                "clear": false,
                "on": "C",
                "under": "D",
                "ontable": false
            }
        },
        "plan_len": 10,
        "num_blocks": 7,
        "prompt": "The initial state:\nThe hand is empty.\nC is on the table. F is on C. D is on F. A is on D. A is clear.\nG is on the table. B is on G. E is on B. E is clear.\n\nThe goal is:\nE is on the table. F is on E. C is on F. G is on C. D is on G. A is on D. B is on A. B is clear.\n",
        "system1_plan": "Move A from D to table | Move D from F to table | Move E from B to table | Move F from C to E | Move B from G to table | Move C from table to F | Move G from table to C | Move D from table to G | Move A from table to D | Move B from table to A",
        "system1_states": 10,
        "system2_plan_v1": "Moved to state -> Stack 1: [C, F, D, A], Stack 2: [G, B, E] | Plan so far [] | Exploring action Move A from D to E | New state -> Stack 1: [C, F, D], Stack 2: [G, B, E, A] | Exploring action Move F from C to E | New state -> Invalid | Exploring action Move A from D to table | New state -> Stack 1: [A], Stack 2: [C, F, D], Stack 3: [G, B, E] | Exploring action Move E from B to table | New state -> Stack 1: [C, F, D, A], Stack 2: [E], Stack 3: [G, B] | Exploring action Move D from F to E | New state -> Invalid | Taking action Move A from D to table | Moved to state -> Stack 1: [A], Stack 2: [C, F, D], Stack 3: [G, B, E] | Plan so far [Move A from D to table] | Exploring action Move D from F to table | New state -> Stack 1: [A], Stack 2: [C, F], Stack 3: [D], Stack 4: [G, B, E] | Exploring action Move E from B to table | New state -> Stack 1: [A], Stack 2: [C, F, D], Stack 3: [E], Stack 4: [G, B] | Exploring action Move E from B to A | New state -> Stack 1: [A, E], Stack 2: [C, F, D], Stack 3: [G, B] | Exploring action Move B from G to A | New state -> Invalid | Taking action Move E from B to table | Moved to state -> Stack 1: [C, F, D, A], Stack 2: [E], Stack 3: [G, B] | Plan so far [Move E from B to table] | Exploring action Move A from D to table | New state -> Stack 1: [A], Stack 2: [C, F, D], Stack 3: [E], Stack 4: [G, B] | Exploring action Move F from C to A | New state -> Invalid | Exploring action Move B from G to A | New state -> Stack 1: [C, F, D, A, B], Stack 2: [E], Stack 3: [G] | Exploring action Move B from G to table | New state -> Stack 1: [B], Stack 2: [C, F, D, A], Stack 3: [E], Stack 4: [G] | Taking action Move B from G to A | Moved to state -> Stack 1: [C, F, D, A, B], Stack 2: [E], Stack 3: [G] | Plan so far [Move E from B to table | Move B from G to A] | Exploring action Move D from F to E | New state -> Invalid | Exploring action Move C from table to B | New state -> Invalid | Exploring action Move E from table to G | New state -> Stack 1: [C, F, D, A, B], Stack 2: [G, E] | Exploring action Move G from table to E | New state -> Stack 1: [C, F, D, A, B], Stack 2: [E, G] | Exploring action Move G from table to B | New state -> Stack 1: [C, F, D, A, B, G], Stack 2: [E] | Taking action Move D from F to table | Moved to state -> Stack 1: [A], Stack 2: [C, F], Stack 3: [D], Stack 4: [G, B, E] | Plan so far [Move A from D to table | Move D from F to table] | Exploring action Move F from C to A | New state -> Stack 1: [A, F], Stack 2: [C], Stack 3: [D], Stack 4: [G, B, E] | Exploring action Move G from table to E | New state -> Invalid | Exploring action Move F from C to table | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D], Stack 4: [F], Stack 5: [G, B, E] | Exploring action Move E from B to table | New state -> Stack 1: [A], Stack 2: [C, F], Stack 3: [D], Stack 4: [E], Stack 5: [G, B] | Exploring action Move C from table to F | New state -> Invalid | Taking action Move B from G to table | Moved to state -> Stack 1: [B], Stack 2: [C, F, D, A], Stack 3: [E], Stack 4: [G] | Plan so far [Move E from B to table | Move B from G to table] | Exploring action Move B from table to A | New state -> Stack 1: [C, F, D, A, B], Stack 2: [E], Stack 3: [G] | Exploring action Move C from table to E | New state -> Invalid | Exploring action Move D from F to B | New state -> Invalid | Exploring action Move A from D to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, F, D], Stack 4: [E], Stack 5: [G] | Exploring action Move A from D to E | New state -> Stack 1: [B], Stack 2: [C, F, D], Stack 3: [E, A], Stack 4: [G] | Taking action Move B from table to A | Moved to state -> Stack 1: [C, F, D, A, B], Stack 2: [E], Stack 3: [G] | Plan so far [Move E from B to table | Move B from G to table | Move B from table to A] | Taking action Move E from B to table | Moved to state -> Stack 1: [A], Stack 2: [C, F], Stack 3: [D], Stack 4: [E], Stack 5: [G, B] | Plan so far [Move A from D to table | Move D from F to table | Move E from B to table] | Exploring action Move B from G to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, F], Stack 4: [D], Stack 5: [E], Stack 6: [G] | Exploring action Move B from G to A | New state -> Stack 1: [A, B], Stack 2: [C, F], Stack 3: [D], Stack 4: [E], Stack 5: [G] | Exploring action Move G from table to E | New state -> Invalid | Exploring action Move F from C to E | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D], Stack 4: [E, F], Stack 5: [G, B] | Taking action Move F from C to E | Moved to state -> Stack 1: [A], Stack 2: [C], Stack 3: [D], Stack 4: [E, F], Stack 5: [G, B] | Plan so far [Move A from D to table | Move D from F to table | Move E from B to table | Move F from C to E] | Exploring action Move B from G to A | New state -> Stack 1: [A, B], Stack 2: [C], Stack 3: [D], Stack 4: [E, F], Stack 5: [G] | Exploring action Move B from G to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E, F], Stack 6: [G] | Exploring action Move E from table to C | New state -> Invalid | Exploring action Move C from table to F | New state -> Stack 1: [A], Stack 2: [D], Stack 3: [E, F, C], Stack 4: [G, B] | Taking action Move B from G to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E, F], Stack 6: [G] | Plan so far [Move A from D to table | Move D from F to table | Move E from B to table | Move F from C to E | Move B from G to table] | Exploring action Move C from table to F | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D], Stack 4: [E, F, C], Stack 5: [G] | Exploring action Move E from table to F | New state -> Invalid | Exploring action Move A from table to B | New state -> Stack 1: [B, A], Stack 2: [C], Stack 3: [D], Stack 4: [E, F], Stack 5: [G] | Exploring action Move E from table to A | New state -> Invalid | Exploring action Move B from table to A | New state -> Stack 1: [A, B], Stack 2: [C], Stack 3: [D], Stack 4: [E, F], Stack 5: [G] | Taking action Move B from G to A | Moved to state -> Stack 1: [A, B], Stack 2: [C], Stack 3: [D], Stack 4: [E, F], Stack 5: [G] | Plan so far [Move A from D to table | Move D from F to table | Move E from B to table | Move F from C to E | Move B from G to A] | Exploring action Move E from table to F | New state -> Invalid | Exploring action Move B from A to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E, F], Stack 6: [G] | Exploring action Move B from A to D | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, B], Stack 4: [E, F], Stack 5: [G] | Exploring action Move C from table to F | New state -> Stack 1: [A, B], Stack 2: [D], Stack 3: [E, F, C], Stack 4: [G] | Taking action Move C from table to F | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [D], Stack 4: [E, F, C], Stack 5: [G] | Plan so far [Move A from D to table | Move D from F to table | Move E from B to table | Move F from C to E | Move B from G to table | Move C from table to F] | Exploring action Move G from table to C | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D], Stack 4: [E, F, C, G] | Exploring action Move E from table to B | New state -> Invalid | Exploring action Move B from table to A | New state -> Stack 1: [A, B], Stack 2: [D], Stack 3: [E, F, C], Stack 4: [G] | Exploring action Move A from table to D | New state -> Stack 1: [B], Stack 2: [D, A], Stack 3: [E, F, C], Stack 4: [G] | Taking action Move C from table to F | Moved to state -> Stack 1: [A, B], Stack 2: [D], Stack 3: [E, F, C], Stack 4: [G] | Plan so far [Move A from D to table | Move D from F to table | Move E from B to table | Move F from C to E | Move B from G to A | Move C from table to F] | Exploring action Move E from table to C | New state -> Invalid | Exploring action Move G from table to C | New state -> Stack 1: [A, B], Stack 2: [D], Stack 3: [E, F, C, G] | Exploring action Move B from A to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D], Stack 4: [E, F, C], Stack 5: [G] | Exploring action Move G from table to D | New state -> Stack 1: [A, B], Stack 2: [D, G], Stack 3: [E, F, C] | Taking action Move C from table to F | Moved to state -> Stack 1: [A], Stack 2: [D], Stack 3: [E, F, C], Stack 4: [G, B] | Plan so far [Move A from D to table | Move D from F to table | Move E from B to table | Move F from C to E | Move C from table to F] | Exploring action Move B from G to A | New state -> Stack 1: [A, B], Stack 2: [D], Stack 3: [E, F, C], Stack 4: [G] | Exploring action Move F from E to table | New state -> Invalid | Exploring action Move B from G to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D], Stack 4: [E, F, C], Stack 5: [G] | Exploring action Move B from G to C | New state -> Stack 1: [A], Stack 2: [D], Stack 3: [E, F, C, B], Stack 4: [G] | Exploring action Move G from table to A | New state -> Invalid | Taking action Move G from table to C | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [D], Stack 4: [E, F, C, G] | Plan so far [Move A from D to table | Move D from F to table | Move E from B to table | Move F from C to E | Move B from G to table | Move C from table to F | Move G from table to C] | Exploring action Move D from table to G | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [E, F, C, G, D] | Exploring action Move B from table to A | New state -> Stack 1: [A, B], Stack 2: [D], Stack 3: [E, F, C, G] | Exploring action Move A from table to G | New state -> Stack 1: [B], Stack 2: [D], Stack 3: [E, F, C, G, A] | Exploring action Move E from table to B | New state -> Invalid | Exploring action Move E from table to G | New state -> Invalid | Taking action Move G from table to C | Moved to state -> Stack 1: [A, B], Stack 2: [D], Stack 3: [E, F, C, G] | Plan so far [Move A from D to table | Move D from F to table | Move E from B to table | Move F from C to E | Move B from G to A | Move C from table to F | Move G from table to C] | Exploring action Move D from table to G | New state -> Stack 1: [A, B], Stack 2: [E, F, C, G, D] | Exploring action Move C from F to B | New state -> Invalid | Exploring action Move B from A to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D], Stack 4: [E, F, C, G] | Exploring action Move B from A to G | New state -> Stack 1: [A], Stack 2: [D], Stack 3: [E, F, C, G, B] | Taking action Move D from table to G | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [E, F, C, G, D] | Plan so far [Move A from D to table | Move D from F to table | Move E from B to table | Move F from C to E | Move B from G to table | Move C from table to F | Move G from table to C | Move D from table to G] | Exploring action Move A from table to D | New state -> Stack 1: [B], Stack 2: [E, F, C, G, D, A] | Exploring action Move B from table to A | New state -> Stack 1: [A, B], Stack 2: [E, F, C, G, D] | Exploring action Move E from table to D | New state -> Invalid | Exploring action Move A from table to B | New state -> Stack 1: [B, A], Stack 2: [E, F, C, G, D] | Taking action Move D from table to G | Moved to state -> Stack 1: [A, B], Stack 2: [E, F, C, G, D] | Plan so far [Move A from D to table | Move D from F to table | Move E from B to table | Move F from C to E | Move B from G to A | Move C from table to F | Move G from table to C | Move D from table to G] | Exploring action Move E from table to B | New state -> Invalid | Exploring action Move C from F to table | New state -> Invalid | Exploring action Move B from A to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [E, F, C, G, D] | Exploring action Move B from A to D | New state -> Stack 1: [A], Stack 2: [E, F, C, G, D, B] | Exploring action Move D from G to table | New state -> Stack 1: [A, B], Stack 2: [D], Stack 3: [E, F, C, G] | Taking action Move A from table to D | Moved to state -> Stack 1: [B], Stack 2: [E, F, C, G, D, A] | Plan so far [Move A from D to table | Move D from F to table | Move E from B to table | Move F from C to E | Move B from G to table | Move C from table to F | Move G from table to C | Move D from table to G | Move A from table to D] | Exploring action Move C from F to B | New state -> Invalid | Exploring action Move A from D to B | New state -> Stack 1: [B, A], Stack 2: [E, F, C, G, D] | Exploring action Move B from table to A | New state -> Stack 1: [E, F, C, G, D, A, B] | Exploring action Move A from D to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [E, F, C, G, D] | Taking action Move B from table to A | Moved to state -> Stack 1: [E, F, C, G, D, A, B] | Plan so far [Move A from D to table | Move D from F to table | Move E from B to table | Move F from C to E | Move B from G to table | Move C from table to F | Move G from table to C | Move D from table to G | Move A from table to D | Move B from table to A] | Reached goal state!",
        "system2_states_v1": 80
    },
    {
        "idx": 889,
        "start": [
            [
                "table",
                "B",
                "C"
            ],
            [
                "table",
                "E",
                "G",
                "A"
            ],
            [
                "table",
                "F",
                "D"
            ]
        ],
        "goal": [
            [
                "table",
                "B",
                "F",
                "E",
                "G",
                "D",
                "A",
                "C"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": true,
                "on": "G",
                "under": -1,
                "ontable": false
            },
            "B": {
                "clear": false,
                "on": -1,
                "under": "C",
                "ontable": true
            },
            "C": {
                "clear": true,
                "on": "B",
                "under": -1,
                "ontable": false
            },
            "D": {
                "clear": true,
                "on": "F",
                "under": -1,
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": -1,
                "under": "G",
                "ontable": true
            },
            "F": {
                "clear": false,
                "on": -1,
                "under": "D",
                "ontable": true
            },
            "G": {
                "clear": false,
                "on": "E",
                "under": "A",
                "ontable": false
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": false,
                "on": "D",
                "under": "C",
                "ontable": false
            },
            "B": {
                "clear": false,
                "on": -1,
                "under": "F",
                "ontable": true
            },
            "C": {
                "clear": true,
                "on": "A",
                "under": -1,
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": "G",
                "under": "A",
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": "F",
                "under": "G",
                "ontable": false
            },
            "F": {
                "clear": false,
                "on": "B",
                "under": "E",
                "ontable": false
            },
            "G": {
                "clear": false,
                "on": "E",
                "under": "D",
                "ontable": false
            }
        },
        "plan_len": 10,
        "num_blocks": 7,
        "prompt": "The initial state:\nThe hand is empty.\nB is on the table. C is on B. C is clear.\nE is on the table. G is on E. A is on G. A is clear.\nF is on the table. D is on F. D is clear.\n\nThe goal is:\nB is on the table. F is on B. E is on F. G is on E. D is on G. A is on D. C is on A. C is clear.\n",
        "system1_plan": "Move A from G to table | Move G from E to table | Move D from F to table | Move C from B to table | Move F from table to B | Move E from table to F | Move G from table to E | Move D from table to G | Move A from table to D | Move C from table to A",
        "system1_states": 10,
        "system2_plan_v1": "Moved to state -> Stack 1: [B, C], Stack 2: [E, G, A], Stack 3: [F, D] | Plan so far [] | Exploring action Move B from table to C | New state -> Invalid | Exploring action Move C from B to table | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [E, G, A], Stack 4: [F, D] | Exploring action Move D from F to table | New state -> Stack 1: [B, C], Stack 2: [D], Stack 3: [E, G, A], Stack 4: [F] | Exploring action Move A from G to table | New state -> Stack 1: [A], Stack 2: [B, C], Stack 3: [E, G], Stack 4: [F, D] | Taking action Move A from G to table | Moved to state -> Stack 1: [A], Stack 2: [B, C], Stack 3: [E, G], Stack 4: [F, D] | Plan so far [Move A from G to table] | Exploring action Move F from table to G | New state -> Invalid | Exploring action Move C from B to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [E, G], Stack 5: [F, D] | Exploring action Move G from E to table | New state -> Stack 1: [A], Stack 2: [B, C], Stack 3: [E], Stack 4: [F, D], Stack 5: [G] | Exploring action Move D from F to G | New state -> Stack 1: [A], Stack 2: [B, C], Stack 3: [E, G, D], Stack 4: [F] | Taking action Move D from F to G | Moved to state -> Stack 1: [A], Stack 2: [B, C], Stack 3: [E, G, D], Stack 4: [F] | Plan so far [Move A from G to table | Move D from F to G] | Exploring action Move B from table to D | New state -> Invalid | Exploring action Move C from B to A | New state -> Stack 1: [A, C], Stack 2: [B], Stack 3: [E, G, D], Stack 4: [F] | Exploring action Move A from table to D | New state -> Stack 1: [B, C], Stack 2: [E, G, D, A], Stack 3: [F] | Exploring action Move C from B to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [E, G, D], Stack 5: [F] | Taking action Move A from table to D | Moved to state -> Stack 1: [B, C], Stack 2: [E, G, D, A], Stack 3: [F] | Plan so far [Move A from G to table | Move D from F to G | Move A from table to D] | Exploring action Move D from G to C | New state -> Invalid | Exploring action Move G from E to table | New state -> Invalid | Exploring action Move C from B to F | New state -> Stack 1: [B], Stack 2: [E, G, D, A], Stack 3: [F, C] | Exploring action Move C from B to table | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [E, G, D, A], Stack 4: [F] | Exploring action Move C from B to A | New state -> Stack 1: [B], Stack 2: [E, G, D, A, C], Stack 3: [F] | Taking action Move C from B to A | Moved to state -> Stack 1: [B], Stack 2: [E, G, D, A, C], Stack 3: [F] | Plan so far [Move A from G to table | Move D from F to G | Move A from table to D | Move C from B to A] | Exploring action Move G from E to F | New state -> Invalid | Exploring action Move F from table to B | New state -> Stack 1: [B, F], Stack 2: [E, G, D, A, C] | Exploring action Move D from G to B | New state -> Invalid | Exploring action Move C from A to table | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [E, G, D, A], Stack 4: [F] | Exploring action Move B from table to F | New state -> Stack 1: [E, G, D, A, C], Stack 2: [F, B] | Taking action Move F from table to B | Moved to state -> Stack 1: [B, F], Stack 2: [E, G, D, A, C] | Plan so far [Move A from G to table | Move D from F to G | Move A from table to D | Move C from B to A | Move F from table to B] | Exploring action Move C from A to table | New state -> Stack 1: [B, F], Stack 2: [C], Stack 3: [E, G, D, A] | Exploring action Move F from B to table | New state -> Stack 1: [B], Stack 2: [E, G, D, A, C], Stack 3: [F] | Exploring action Move D from G to C | New state -> Invalid | Exploring action Move C from A to F | New state -> Stack 1: [B, F, C], Stack 2: [E, G, D, A] | Taking action Move C from B to A | Moved to state -> Stack 1: [A, C], Stack 2: [B], Stack 3: [E, G, D], Stack 4: [F] | Plan so far [Move A from G to table | Move D from F to G | Move C from B to A] | Exploring action Move C from A to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [E, G, D], Stack 5: [F] | Exploring action Move F from table to B | New state -> Stack 1: [A, C], Stack 2: [B, F], Stack 3: [E, G, D] | Exploring action Move A from table to F | New state -> Invalid | Exploring action Move C from A to F | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [E, G, D], Stack 4: [F, C] | Taking action Move F from B to table | Moved to state -> Stack 1: [B], Stack 2: [E, G, D, A, C], Stack 3: [F] | Plan so far [Move A from G to table | Move D from F to G | Move A from table to D | Move C from B to A | Move F from table to B | Move F from B to table] | Taking action Move F from table to B | Moved to state -> Stack 1: [A, C], Stack 2: [B, F], Stack 3: [E, G, D] | Plan so far [Move A from G to table | Move D from F to G | Move C from B to A | Move F from table to B] | Exploring action Move F from B to table | New state -> Stack 1: [A, C], Stack 2: [B], Stack 3: [E, G, D], Stack 4: [F] | Exploring action Move C from A to table | New state -> Stack 1: [A], Stack 2: [B, F], Stack 3: [C], Stack 4: [E, G, D] | Exploring action Move C from A to F | New state -> Stack 1: [A], Stack 2: [B, F, C], Stack 3: [E, G, D] | Exploring action Move E from table to C | New state -> Invalid | Taking action Move C from B to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [E, G, D], Stack 5: [F] | Plan so far [Move A from G to table | Move D from F to G | Move C from B to table] | Exploring action Move F from table to B | New state -> Stack 1: [A], Stack 2: [B, F], Stack 3: [C], Stack 4: [E, G, D] | Exploring action Move E from table to B | New state -> Invalid | Exploring action Move C from table to A | New state -> Stack 1: [A, C], Stack 2: [B], Stack 3: [E, G, D], Stack 4: [F] | Exploring action Move G from E to F | New state -> Invalid | Exploring action Move A from table to D | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [E, G, D, A], Stack 4: [F] | Taking action Move C from B to table | Moved to state -> Stack 1: [B], Stack 2: [C], Stack 3: [E, G, D, A], Stack 4: [F] | Plan so far [Move A from G to table | Move D from F to G | Move A from table to D | Move C from B to table] | Exploring action Move G from E to F | New state -> Invalid | Exploring action Move C from table to A | New state -> Stack 1: [B], Stack 2: [E, G, D, A, C], Stack 3: [F] | Exploring action Move B from table to F | New state -> Stack 1: [C], Stack 2: [E, G, D, A], Stack 3: [F, B] | Exploring action Move D from G to table | New state -> Invalid | Exploring action Move F from table to B | New state -> Stack 1: [B, F], Stack 2: [C], Stack 3: [E, G, D, A] | Taking action Move C from table to A | Moved to state -> Stack 1: [B], Stack 2: [E, G, D, A, C], Stack 3: [F] | Plan so far [Move A from G to table | Move D from F to G | Move A from table to D | Move C from B to table | Move C from table to A] | Taking action Move B from table to F | Moved to state -> Stack 1: [E, G, D, A, C], Stack 2: [F, B] | Plan so far [Move A from G to table | Move D from F to G | Move A from table to D | Move C from B to A | Move B from table to F] | Exploring action Move D from G to table | New state -> Invalid | Exploring action Move B from F to table | New state -> Stack 1: [B], Stack 2: [E, G, D, A, C], Stack 3: [F] | Exploring action Move C from A to table | New state -> Stack 1: [C], Stack 2: [E, G, D, A], Stack 3: [F, B] | Exploring action Move B from F to C | New state -> Stack 1: [E, G, D, A, C, B], Stack 2: [F] | Taking action Move F from table to B | Moved to state -> Stack 1: [B, F], Stack 2: [C], Stack 3: [E, G, D, A] | Plan so far [Move A from G to table | Move D from F to G | Move A from table to D | Move C from B to table | Move F from table to B] | Exploring action Move F from B to table | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [E, G, D, A], Stack 4: [F] | Exploring action Move B from table to F | New state -> Invalid | Exploring action Move A from D to table | New state -> Stack 1: [A], Stack 2: [B, F], Stack 3: [C], Stack 4: [E, G, D] | Exploring action Move D from G to F | New state -> Invalid | Exploring action Move C from table to A | New state -> Stack 1: [B, F], Stack 2: [E, G, D, A, C] | Taking action Move C from table to A | Moved to state -> Stack 1: [B, F], Stack 2: [E, G, D, A, C] | Plan so far [Move A from G to table | Move D from F to G | Move A from table to D | Move C from B to table | Move F from table to B | Move C from table to A] | Taking action Move B from F to table | Moved to state -> Stack 1: [B], Stack 2: [E, G, D, A, C], Stack 3: [F] | Plan so far [Move A from G to table | Move D from F to G | Move A from table to D | Move C from B to A | Move B from table to F | Move B from F to table] | Taking action Move F from table to B | Moved to state -> Stack 1: [A], Stack 2: [B, F], Stack 3: [C], Stack 4: [E, G, D] | Plan so far [Move A from G to table | Move D from F to G | Move C from B to table | Move F from table to B] | Exploring action Move A from table to F | New state -> Stack 1: [B, F, A], Stack 2: [C], Stack 3: [E, G, D] | Exploring action Move A from table to D | New state -> Stack 1: [B, F], Stack 2: [C], Stack 3: [E, G, D, A] | Exploring action Move C from table to A | New state -> Stack 1: [A, C], Stack 2: [B, F], Stack 3: [E, G, D] | Exploring action Move G from E to F | New state -> Invalid | Taking action Move A from table to D | Moved to state -> Stack 1: [B], Stack 2: [C], Stack 3: [E, G, D, A], Stack 4: [F] | Plan so far [Move A from G to table | Move D from F to G | Move C from B to table | Move A from table to D] | Taking action Move A from table to D | Moved to state -> Stack 1: [B, F], Stack 2: [C], Stack 3: [E, G, D, A] | Plan so far [Move A from G to table | Move D from F to G | Move C from B to table | Move F from table to B | Move A from table to D] | Taking action Move C from A to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [E, G, D], Stack 5: [F] | Plan so far [Move A from G to table | Move D from F to G | Move C from B to A | Move C from A to table] | Taking action Move C from table to A | Moved to state -> Stack 1: [A, C], Stack 2: [B, F], Stack 3: [E, G, D] | Plan so far [Move A from G to table | Move D from F to G | Move C from B to table | Move F from table to B | Move C from table to A] | Taking action Move C from B to F | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [E, G, D], Stack 4: [F, C] | Plan so far [Move A from G to table | Move D from F to G | Move C from B to F] | Exploring action Move C from F to A | New state -> Stack 1: [A, C], Stack 2: [B], Stack 3: [E, G, D], Stack 4: [F] | Exploring action Move A from table to D | New state -> Stack 1: [B], Stack 2: [E, G, D, A], Stack 3: [F, C] | Exploring action Move C from F to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [E, G, D], Stack 5: [F] | Exploring action Move G from E to B | New state -> Invalid | Exploring action Move F from table to C | New state -> Invalid | Taking action Move C from B to A | Moved to state -> Stack 1: [A, C], Stack 2: [B], Stack 3: [E, G], Stack 4: [F, D] | Plan so far [Move A from G to table | Move C from B to A] | Exploring action Move D from F to G | New state -> Stack 1: [A, C], Stack 2: [B], Stack 3: [E, G, D], Stack 4: [F] | Exploring action Move D from F to table | New state -> Stack 1: [A, C], Stack 2: [B], Stack 3: [D], Stack 4: [E, G], Stack 5: [F] | Exploring action Move E from table to B | New state -> Invalid | Exploring action Move G from E to table | New state -> Stack 1: [A, C], Stack 2: [B], Stack 3: [E], Stack 4: [F, D], Stack 5: [G] | Exploring action Move E from table to G | New state -> Invalid | Taking action Move D from F to G | Moved to state -> Stack 1: [A, C], Stack 2: [B], Stack 3: [E, G, D], Stack 4: [F] | Plan so far [Move A from G to table | Move C from B to A | Move D from F to G] | Taking action Move A from table to D | Moved to state -> Stack 1: [B], Stack 2: [E, G, D, A], Stack 3: [F, C] | Plan so far [Move A from G to table | Move D from F to G | Move C from B to F | Move A from table to D] | Exploring action Move D from G to table | New state -> Invalid | Exploring action Move C from F to table | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [E, G, D, A], Stack 4: [F] | Exploring action Move C from F to B | New state -> Stack 1: [B, C], Stack 2: [E, G, D, A], Stack 3: [F] | Exploring action Move C from F to A | New state -> Stack 1: [B], Stack 2: [E, G, D, A, C], Stack 3: [F] | Exploring action Move G from E to C | New state -> Invalid | Taking action Move C from F to A | Moved to state -> Stack 1: [B], Stack 2: [E, G, D, A, C], Stack 3: [F] | Plan so far [Move A from G to table | Move D from F to G | Move C from B to F | Move A from table to D | Move C from F to A] | Taking action Move C from F to A | Moved to state -> Stack 1: [A, C], Stack 2: [B], Stack 3: [E, G, D], Stack 4: [F] | Plan so far [Move A from G to table | Move D from F to G | Move C from B to F | Move C from F to A] | Taking action Move C from B to D | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [E, G, D, C], Stack 4: [F] | Plan so far [Move A from G to table | Move D from F to G | Move C from B to D] | Exploring action Move C from D to A | New state -> Stack 1: [A, C], Stack 2: [B], Stack 3: [E, G, D], Stack 4: [F] | Exploring action Move F from table to B | New state -> Stack 1: [A], Stack 2: [B, F], Stack 3: [E, G, D, C] | Exploring action Move C from D to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [E, G, D], Stack 5: [F] | Exploring action Move E from table to A | New state -> Invalid | Taking action Move F from table to C | Moved to state -> Stack 1: [B], Stack 2: [E, G, D, A, C, F] | Plan so far [Move A from G to table | Move D from F to G | Move A from table to D | Move C from B to A | Move F from table to C] | Exploring action Move A from D to table | New state -> Invalid | Exploring action Move B from table to F | New state -> Stack 1: [E, G, D, A, C, F, B] | Exploring action Move F from C to table | New state -> Stack 1: [B], Stack 2: [E, G, D, A, C], Stack 3: [F] | Exploring action Move E from table to F | New state -> Invalid | Exploring action Move F from C to B | New state -> Stack 1: [B, F], Stack 2: [E, G, D, A, C] | Taking action Move F from C to B | Moved to state -> Stack 1: [B, F], Stack 2: [E, G, D, A, C] | Plan so far [Move A from G to table | Move D from F to G | Move A from table to D | Move C from B to A | Move F from table to C | Move F from C to B] | Taking action Move F from C to table | Moved to state -> Stack 1: [B], Stack 2: [E, G, D, A, C], Stack 3: [F] | Plan so far [Move A from G to table | Move D from F to G | Move A from table to D | Move C from B to A | Move F from table to C | Move F from C to table] | Taking action Move C from A to table | Moved to state -> Stack 1: [B, F], Stack 2: [C], Stack 3: [E, G, D, A] | Plan so far [Move A from G to table | Move D from F to G | Move A from table to D | Move C from B to A | Move F from table to B | Move C from A to table] | Taking action Move C from F to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [E, G, D], Stack 5: [F] | Plan so far [Move A from G to table | Move D from F to G | Move C from B to F | Move C from F to table] | Taking action Move C from B to A | Moved to state -> Stack 1: [B], Stack 2: [E, G, A, C], Stack 3: [F, D] | Plan so far [Move C from B to A] | Exploring action Move D from F to table | New state -> Stack 1: [B], Stack 2: [D], Stack 3: [E, G, A, C], Stack 4: [F] | Exploring action Move C from A to table | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [E, G, A], Stack 4: [F, D] | Exploring action Move D from F to B | New state -> Stack 1: [B, D], Stack 2: [E, G, A, C], Stack 3: [F] | Exploring action Move G from E to B | New state -> Invalid | Taking action Move B from table to C | Moved to state -> Stack 1: [E, G, D, A, C, B], Stack 2: [F] | Plan so far [Move A from G to table | Move D from F to G | Move A from table to D | Move C from B to A | Move B from table to C] | Exploring action Move B from C to F | New state -> Stack 1: [E, G, D, A, C], Stack 2: [F, B] | Exploring action Move D from G to table | New state -> Invalid | Exploring action Move F from table to B | New state -> Stack 1: [E, G, D, A, C, B, F] | Exploring action Move B from C to table | New state -> Stack 1: [B], Stack 2: [E, G, D, A, C], Stack 3: [F] | Taking action Move B from C to table | Moved to state -> Stack 1: [B], Stack 2: [E, G, D, A, C], Stack 3: [F] | Plan so far [Move A from G to table | Move D from F to G | Move A from table to D | Move C from B to A | Move B from table to C | Move B from C to table] | Taking action Move G from E to table | Moved to state -> Stack 1: [A], Stack 2: [B, C], Stack 3: [E], Stack 4: [F, D], Stack 5: [G] | Plan so far [Move A from G to table | Move G from E to table] | Exploring action Move C from B to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [E], Stack 5: [F, D], Stack 6: [G] | Exploring action Move D from F to table | New state -> Stack 1: [A], Stack 2: [B, C], Stack 3: [D], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Exploring action Move B from table to E | New state -> Invalid | Exploring action Move B from table to D | New state -> Invalid | Exploring action Move C from B to A | New state -> Stack 1: [A, C], Stack 2: [B], Stack 3: [E], Stack 4: [F, D], Stack 5: [G] | Taking action Move C from B to F | Moved to state -> Stack 1: [B], Stack 2: [E, G, D, A], Stack 3: [F, C] | Plan so far [Move A from G to table | Move D from F to G | Move A from table to D | Move C from B to F] | Taking action Move C from table to A | Moved to state -> Stack 1: [A, C], Stack 2: [B], Stack 3: [E, G, D], Stack 4: [F] | Plan so far [Move A from G to table | Move D from F to G | Move C from B to table | Move C from table to A] | Taking action Move F from table to B | Moved to state -> Stack 1: [A], Stack 2: [B, F], Stack 3: [E, G, D, C] | Plan so far [Move A from G to table | Move D from F to G | Move C from B to D | Move F from table to B] | Exploring action Move C from D to table | New state -> Stack 1: [A], Stack 2: [B, F], Stack 3: [C], Stack 4: [E, G, D] | Exploring action Move B from table to C | New state -> Invalid | Exploring action Move C from D to F | New state -> Stack 1: [A], Stack 2: [B, F, C], Stack 3: [E, G, D] | Exploring action Move C from D to A | New state -> Stack 1: [A, C], Stack 2: [B, F], Stack 3: [E, G, D] | Taking action Move D from F to table | Moved to state -> Stack 1: [A], Stack 2: [B, C], Stack 3: [D], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Plan so far [Move A from G to table | Move G from E to table | Move D from F to table] | Exploring action Move C from B to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F], Stack 7: [G] | Exploring action Move B from table to E | New state -> Invalid | Exploring action Move B from table to A | New state -> Invalid | Exploring action Move C from B to A | New state -> Stack 1: [A, C], Stack 2: [B], Stack 3: [D], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Exploring action Move C from B to D | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, C], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Taking action Move B from C to F | Moved to state -> Stack 1: [E, G, D, A, C], Stack 2: [F, B] | Plan so far [Move A from G to table | Move D from F to G | Move A from table to D | Move C from B to A | Move B from table to C | Move B from C to F] | Taking action Move C from B to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F], Stack 7: [G] | Plan so far [Move A from G to table | Move G from E to table | Move D from F to table | Move C from B to table] | Exploring action Move F from table to B | New state -> Stack 1: [A], Stack 2: [B, F], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [G] | Exploring action Move C from table to A | New state -> Stack 1: [A, C], Stack 2: [B], Stack 3: [D], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Exploring action Move A from table to B | New state -> Stack 1: [B, A], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Taking action Move C from B to A | Moved to state -> Stack 1: [A, C], Stack 2: [B], Stack 3: [D], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Plan so far [Move A from G to table | Move G from E to table | Move D from F to table | Move C from B to A] | Exploring action Move F from table to B | New state -> Stack 1: [A, C], Stack 2: [B, F], Stack 3: [D], Stack 4: [E], Stack 5: [G] | Exploring action Move C from A to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F], Stack 7: [G] | Exploring action Move A from table to G | New state -> Invalid | Exploring action Move B from table to D | New state -> Stack 1: [A, C], Stack 2: [D, B], Stack 3: [E], Stack 4: [F], Stack 5: [G] | Taking action Move F from table to B | Moved to state -> Stack 1: [A], Stack 2: [B, F], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [G] | Plan so far [Move A from G to table | Move G from E to table | Move D from F to table | Move C from B to table | Move F from table to B] | Exploring action Move E from table to F | New state -> Stack 1: [A], Stack 2: [B, F, E], Stack 3: [C], Stack 4: [D], Stack 5: [G] | Exploring action Move C from table to A | New state -> Stack 1: [A, C], Stack 2: [B, F], Stack 3: [D], Stack 4: [E], Stack 5: [G] | Exploring action Move A from table to C | New state -> Stack 1: [B, F], Stack 2: [C, A], Stack 3: [D], Stack 4: [E], Stack 5: [G] | Exploring action Move B from table to F | New state -> Invalid | Exploring action Move B from table to A | New state -> Invalid | Taking action Move C from B to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [E], Stack 5: [F, D], Stack 6: [G] | Plan so far [Move A from G to table | Move G from E to table | Move C from B to table] | Exploring action Move F from table to A | New state -> Invalid | Exploring action Move C from table to A | New state -> Stack 1: [A, C], Stack 2: [B], Stack 3: [E], Stack 4: [F, D], Stack 5: [G] | Exploring action Move D from F to E | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [E, D], Stack 5: [F], Stack 6: [G] | Exploring action Move D from F to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F], Stack 7: [G] | Taking action Move C from D to table | Moved to state -> Stack 1: [A], Stack 2: [B, F], Stack 3: [C], Stack 4: [E, G, D] | Plan so far [Move A from G to table | Move D from F to G | Move C from B to D | Move F from table to B | Move C from D to table] | Taking action Move C from D to A | Moved to state -> Stack 1: [A, C], Stack 2: [B, F], Stack 3: [E, G, D] | Plan so far [Move A from G to table | Move D from F to G | Move C from B to D | Move F from table to B | Move C from D to A] | Taking action Move C from B to A | Moved to state -> Stack 1: [A, C], Stack 2: [B], Stack 3: [E], Stack 4: [F, D], Stack 5: [G] | Plan so far [Move A from G to table | Move G from E to table | Move C from B to A] | Exploring action Move D from F to table | New state -> Stack 1: [A, C], Stack 2: [B], Stack 3: [D], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Exploring action Move D from F to G | New state -> Stack 1: [A, C], Stack 2: [B], Stack 3: [E], Stack 4: [F], Stack 5: [G, D] | Exploring action Move A from table to G | New state -> Invalid | Exploring action Move A from table to E | New state -> Invalid | Exploring action Move D from F to E | New state -> Stack 1: [A, C], Stack 2: [B], Stack 3: [E, D], Stack 4: [F], Stack 5: [G] | Taking action Move D from F to table | Moved to state -> Stack 1: [B], Stack 2: [D], Stack 3: [E, G, A, C], Stack 4: [F] | Plan so far [Move C from B to A | Move D from F to table] | Exploring action Move B from table to F | New state -> Stack 1: [D], Stack 2: [E, G, A, C], Stack 3: [F, B] | Exploring action Move C from A to table | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D], Stack 4: [E, G, A], Stack 5: [F] | Exploring action Move G from E to D | New state -> Invalid | Exploring action Move F from table to B | New state -> Stack 1: [B, F], Stack 2: [D], Stack 3: [E, G, A, C] | Taking action Move D from F to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F], Stack 7: [G] | Plan so far [Move A from G to table | Move G from E to table | Move C from B to table | Move D from F to table] | Taking action Move F from table to B | Moved to state -> Stack 1: [B, F], Stack 2: [D], Stack 3: [E, G, A, C] | Plan so far [Move C from B to A | Move D from F to table | Move F from table to B] | Exploring action Move C from A to table | New state -> Stack 1: [B, F], Stack 2: [C], Stack 3: [D], Stack 4: [E, G, A] | Exploring action Move B from table to C | New state -> Invalid | Exploring action Move C from A to F | New state -> Stack 1: [B, F, C], Stack 2: [D], Stack 3: [E, G, A] | Exploring action Move F from B to table | New state -> Stack 1: [B], Stack 2: [D], Stack 3: [E, G, A, C], Stack 4: [F] | Taking action Move D from F to table | Moved to state -> Stack 1: [A, C], Stack 2: [B], Stack 3: [D], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Plan so far [Move A from G to table | Move G from E to table | Move C from B to A | Move D from F to table] | Taking action Move C from B to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [E, G], Stack 5: [F, D] | Plan so far [Move A from G to table | Move C from B to table] | Exploring action Move F from table to D | New state -> Invalid | Exploring action Move D from F to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E, G], Stack 6: [F] | Exploring action Move E from table to G | New state -> Invalid | Exploring action Move D from F to G | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [E, G, D], Stack 5: [F] | Exploring action Move G from E to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [E], Stack 5: [F, D], Stack 6: [G] | Taking action Move D from F to G | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [E, G, D], Stack 5: [F] | Plan so far [Move A from G to table | Move C from B to table | Move D from F to G] | Taking action Move C from A to table | Moved to state -> Stack 1: [B], Stack 2: [C], Stack 3: [E, G, D, A], Stack 4: [F] | Plan so far [Move A from G to table | Move D from F to G | Move A from table to D | Move C from B to A | Move C from A to table] | Taking action Move D from F to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E, G], Stack 6: [F] | Plan so far [Move A from G to table | Move C from B to table | Move D from F to table] | Exploring action Move G from E to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F], Stack 7: [G] | Exploring action Move F from table to B | New state -> Stack 1: [A], Stack 2: [B, F], Stack 3: [C], Stack 4: [D], Stack 5: [E, G] | Exploring action Move D from table to G | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [E, G, D], Stack 5: [F] | Exploring action Move E from table to C | New state -> Invalid | Taking action Move G from E to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [E], Stack 5: [F, D], Stack 6: [G] | Plan so far [Move A from G to table | Move C from B to table | Move G from E to table] | Taking action Move D from table to G | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [E, G, D], Stack 5: [F] | Plan so far [Move A from G to table | Move C from B to table | Move D from F to table | Move D from table to G] | Taking action Move F from table to B | Moved to state -> Stack 1: [A], Stack 2: [B, F], Stack 3: [C], Stack 4: [D], Stack 5: [E, G] | Plan so far [Move A from G to table | Move C from B to table | Move D from F to table | Move F from table to B] | Exploring action Move C from table to A | New state -> Stack 1: [A, C], Stack 2: [B, F], Stack 3: [D], Stack 4: [E, G] | Exploring action Move B from table to C | New state -> Invalid | Exploring action Move G from E to table | New state -> Stack 1: [A], Stack 2: [B, F], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [G] | Exploring action Move D from table to G | New state -> Stack 1: [A], Stack 2: [B, F], Stack 3: [C], Stack 4: [E, G, D] | Exploring action Move E from table to D | New state -> Invalid | Taking action Move G from E to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F], Stack 7: [G] | Plan so far [Move A from G to table | Move C from B to table | Move D from F to table | Move G from E to table] | Taking action Move D from table to G | Moved to state -> Stack 1: [A], Stack 2: [B, F], Stack 3: [C], Stack 4: [E, G, D] | Plan so far [Move A from G to table | Move C from B to table | Move D from F to table | Move F from table to B | Move D from table to G] | Taking action Move G from E to table | Moved to state -> Stack 1: [A], Stack 2: [B, F], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [G] | Plan so far [Move A from G to table | Move C from B to table | Move D from F to table | Move F from table to B | Move G from E to table] | Taking action Move D from F to table | Moved to state -> Stack 1: [A], Stack 2: [B, C], Stack 3: [D], Stack 4: [E, G], Stack 5: [F] | Plan so far [Move A from G to table | Move D from F to table] | Exploring action Move C from B to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E, G], Stack 6: [F] | Exploring action Move C from B to A | New state -> Stack 1: [A, C], Stack 2: [B], Stack 3: [D], Stack 4: [E, G], Stack 5: [F] | Exploring action Move B from table to A | New state -> Invalid | Exploring action Move B from table to C | New state -> Invalid | Exploring action Move D from table to G | New state -> Stack 1: [A], Stack 2: [B, C], Stack 3: [E, G, D], Stack 4: [F] | Taking action Move C from D to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [E, G, D], Stack 5: [F] | Plan so far [Move A from G to table | Move D from F to G | Move C from B to D | Move C from D to table] | Taking action Move C from B to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E, G], Stack 6: [F] | Plan so far [Move A from G to table | Move D from F to table | Move C from B to table] | Taking action Move C from B to A | Moved to state -> Stack 1: [A, C], Stack 2: [B], Stack 3: [D], Stack 4: [E, G], Stack 5: [F] | Plan so far [Move A from G to table | Move D from F to table | Move C from B to A] | Exploring action Move D from table to G | New state -> Stack 1: [A, C], Stack 2: [B], Stack 3: [E, G, D], Stack 4: [F] | Exploring action Move F from table to B | New state -> Stack 1: [A, C], Stack 2: [B, F], Stack 3: [D], Stack 4: [E, G] | Exploring action Move G from E to table | New state -> Stack 1: [A, C], Stack 2: [B], Stack 3: [D], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Exploring action Move A from table to G | New state -> Invalid | Taking action Move D from table to G | Moved to state -> Stack 1: [A], Stack 2: [B, C], Stack 3: [E, G, D], Stack 4: [F] | Plan so far [Move A from G to table | Move D from F to table | Move D from table to G] | Taking action Move G from E to table | Moved to state -> Stack 1: [A], Stack 2: [B, C], Stack 3: [D], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Plan so far [Move A from G to table | Move D from F to table | Move G from E to table] | Taking action Move D from table to G | Moved to state -> Stack 1: [A, C], Stack 2: [B], Stack 3: [E, G, D], Stack 4: [F] | Plan so far [Move A from G to table | Move D from F to table | Move C from B to A | Move D from table to G] | Taking action Move F from table to B | Moved to state -> Stack 1: [A, C], Stack 2: [B, F], Stack 3: [D], Stack 4: [E, G] | Plan so far [Move A from G to table | Move D from F to table | Move C from B to A | Move F from table to B] | Exploring action Move G from E to table | New state -> Stack 1: [A, C], Stack 2: [B, F], Stack 3: [D], Stack 4: [E], Stack 5: [G] | Exploring action Move B from table to F | New state -> Invalid | Exploring action Move D from table to G | New state -> Stack 1: [A, C], Stack 2: [B, F], Stack 3: [E, G, D] | Exploring action Move G from E to D | New state -> Stack 1: [A, C], Stack 2: [B, F], Stack 3: [D, G], Stack 4: [E] | Exploring action Move E from table to F | New state -> Invalid | Taking action Move G from E to table | Moved to state -> Stack 1: [A, C], Stack 2: [B], Stack 3: [D], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Plan so far [Move A from G to table | Move D from F to table | Move C from B to A | Move G from E to table] | Taking action Move D from table to G | Moved to state -> Stack 1: [A, C], Stack 2: [B, F], Stack 3: [E, G, D] | Plan so far [Move A from G to table | Move D from F to table | Move C from B to A | Move F from table to B | Move D from table to G] | Taking action Move G from E to table | Moved to state -> Stack 1: [A, C], Stack 2: [B, F], Stack 3: [D], Stack 4: [E], Stack 5: [G] | Plan so far [Move A from G to table | Move D from F to table | Move C from B to A | Move F from table to B | Move G from E to table] | Exploring action Move E from table to F | New state -> Stack 1: [A, C], Stack 2: [B, F, E], Stack 3: [D], Stack 4: [G] | Exploring action Move C from A to table | New state -> Stack 1: [A], Stack 2: [B, F], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [G] | Exploring action Move D from table to E | New state -> Stack 1: [A, C], Stack 2: [B, F], Stack 3: [E, D], Stack 4: [G] | Exploring action Move B from table to D | New state -> Invalid | Taking action Move C from D to A | Moved to state -> Stack 1: [A, C], Stack 2: [B], Stack 3: [E, G, D], Stack 4: [F] | Plan so far [Move A from G to table | Move D from F to G | Move C from B to D | Move C from D to A] | Taking action Move E from table to F | Moved to state -> Stack 1: [A], Stack 2: [B, F, E], Stack 3: [C], Stack 4: [D], Stack 5: [G] | Plan so far [Move A from G to table | Move G from E to table | Move D from F to table | Move C from B to table | Move F from table to B | Move E from table to F] | Exploring action Move G from table to E | New state -> Stack 1: [A], Stack 2: [B, F, E, G], Stack 3: [C], Stack 4: [D] | Exploring action Move C from table to A | New state -> Stack 1: [A, C], Stack 2: [B, F, E], Stack 3: [D], Stack 4: [G] | Exploring action Move A from table to E | New state -> Stack 1: [B, F, E, A], Stack 2: [C], Stack 3: [D], Stack 4: [G] | Exploring action Move F from B to D | New state -> Invalid | Exploring action Move B from table to D | New state -> Invalid | Taking action Move C from B to table | Moved to state -> Stack 1: [B], Stack 2: [C], Stack 3: [E, G, A], Stack 4: [F, D] | Plan so far [Move C from B to table] | Exploring action Move A from G to C | New state -> Stack 1: [B], Stack 2: [C, A], Stack 3: [E, G], Stack 4: [F, D] | Exploring action Move E from table to C | New state -> Invalid | Exploring action Move F from table to A | New state -> Invalid | Exploring action Move A from G to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [E, G], Stack 5: [F, D] | Exploring action Move D from F to table | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D], Stack 4: [E, G, A], Stack 5: [F] | Taking action Move C from F to table | Moved to state -> Stack 1: [B], Stack 2: [C], Stack 3: [E, G, D, A], Stack 4: [F] | Plan so far [Move A from G to table | Move D from F to G | Move C from B to F | Move A from table to D | Move C from F to table] | Taking action Move G from E to table | Moved to state -> Stack 1: [A, C], Stack 2: [B], Stack 3: [E], Stack 4: [F, D], Stack 5: [G] | Plan so far [Move A from G to table | Move C from B to A | Move G from E to table] | Taking action Move D from F to table | Moved to state -> Stack 1: [B, C], Stack 2: [D], Stack 3: [E, G, A], Stack 4: [F] | Plan so far [Move D from F to table] | Exploring action Move C from B to A | New state -> Stack 1: [B], Stack 2: [D], Stack 3: [E, G, A, C], Stack 4: [F] | Exploring action Move A from G to table | New state -> Stack 1: [A], Stack 2: [B, C], Stack 3: [D], Stack 4: [E, G], Stack 5: [F] | Exploring action Move G from E to C | New state -> Invalid | Exploring action Move C from B to table | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D], Stack 4: [E, G, A], Stack 5: [F] | Taking action Move C from A to table | Moved to state -> Stack 1: [A], Stack 2: [B, F], Stack 3: [C], Stack 4: [E, G, D] | Plan so far [Move A from G to table | Move D from F to G | Move C from B to A | Move F from table to B | Move C from A to table] | Taking action Move D from F to table | Moved to state -> Stack 1: [A, C], Stack 2: [B], Stack 3: [D], Stack 4: [E, G], Stack 5: [F] | Plan so far [Move A from G to table | Move C from B to A | Move D from F to table] | Taking action Move F from table to B | Moved to state -> Stack 1: [A, C], Stack 2: [B, F], Stack 3: [D], Stack 4: [E], Stack 5: [G] | Plan so far [Move A from G to table | Move G from E to table | Move D from F to table | Move C from B to A | Move F from table to B] | Taking action Move G from table to E | Moved to state -> Stack 1: [A], Stack 2: [B, F, E, G], Stack 3: [C], Stack 4: [D] | Plan so far [Move A from G to table | Move G from E to table | Move D from F to table | Move C from B to table | Move F from table to B | Move E from table to F | Move G from table to E] | Exploring action Move D from table to G | New state -> Stack 1: [A], Stack 2: [B, F, E, G, D], Stack 3: [C] | Exploring action Move E from F to G | New state -> Invalid | Exploring action Move B from table to A | New state -> Invalid | Exploring action Move C from table to A | New state -> Stack 1: [A, C], Stack 2: [B, F, E, G], Stack 3: [D] | Exploring action Move A from table to G | New state -> Stack 1: [B, F, E, G, A], Stack 2: [C], Stack 3: [D] | Taking action Move D from F to table | Moved to state -> Stack 1: [B], Stack 2: [C], Stack 3: [D], Stack 4: [E, G, A], Stack 5: [F] | Plan so far [Move C from B to table | Move D from F to table] | Exploring action Move E from table to F | New state -> Invalid | Exploring action Move E from table to B | New state -> Invalid | Exploring action Move F from table to B | New state -> Stack 1: [B, F], Stack 2: [C], Stack 3: [D], Stack 4: [E, G, A] | Exploring action Move A from G to C | New state -> Stack 1: [B], Stack 2: [C, A], Stack 3: [D], Stack 4: [E, G], Stack 5: [F] | Exploring action Move A from G to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E, G], Stack 6: [F] | Taking action Move C from B to table | Moved to state -> Stack 1: [B], Stack 2: [C], Stack 3: [D], Stack 4: [E, G, A], Stack 5: [F] | Plan so far [Move D from F to table | Move C from B to table] | Taking action Move C from B to A | Moved to state -> Stack 1: [B], Stack 2: [D], Stack 3: [E, G, A, C], Stack 4: [F] | Plan so far [Move D from F to table | Move C from B to A] | Taking action Move A from G to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [E, G], Stack 5: [F, D] | Plan so far [Move C from B to table | Move A from G to table] | Taking action Move A from G to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E, G], Stack 6: [F] | Plan so far [Move C from B to table | Move D from F to table | Move A from G to table] | Taking action Move F from table to B | Moved to state -> Stack 1: [B, F], Stack 2: [C], Stack 3: [D], Stack 4: [E, G, A] | Plan so far [Move C from B to table | Move D from F to table | Move F from table to B] | Exploring action Move A from G to table | New state -> Stack 1: [A], Stack 2: [B, F], Stack 3: [C], Stack 4: [D], Stack 5: [E, G] | Exploring action Move A from G to C | New state -> Stack 1: [B, F], Stack 2: [C, A], Stack 3: [D], Stack 4: [E, G] | Exploring action Move A from G to D | New state -> Stack 1: [B, F], Stack 2: [C], Stack 3: [D, A], Stack 4: [E, G] | Exploring action Move E from table to F | New state -> Invalid | Taking action Move A from G to table | Moved to state -> Stack 1: [A], Stack 2: [B, C], Stack 3: [D], Stack 4: [E, G], Stack 5: [F] | Plan so far [Move D from F to table | Move A from G to table] | Taking action Move D from table to G | Moved to state -> Stack 1: [A], Stack 2: [B, F, E, G, D], Stack 3: [C] | Plan so far [Move A from G to table | Move G from E to table | Move D from F to table | Move C from B to table | Move F from table to B | Move E from table to F | Move G from table to E | Move D from table to G] | Exploring action Move A from table to D | New state -> Stack 1: [B, F, E, G, D, A], Stack 2: [C] | Exploring action Move C from table to A | New state -> Stack 1: [A, C], Stack 2: [B, F, E, G, D] | Exploring action Move A from table to C | New state -> Stack 1: [B, F, E, G, D], Stack 2: [C, A] | Exploring action Move E from F to D | New state -> Invalid | Taking action Move E from table to F | Moved to state -> Stack 1: [A, C], Stack 2: [B, F, E], Stack 3: [D], Stack 4: [G] | Plan so far [Move A from G to table | Move D from F to table | Move C from B to A | Move F from table to B | Move G from E to table | Move E from table to F] | Exploring action Move C from A to E | New state -> Stack 1: [A], Stack 2: [B, F, E, C], Stack 3: [D], Stack 4: [G] | Exploring action Move C from A to table | New state -> Stack 1: [A], Stack 2: [B, F, E], Stack 3: [C], Stack 4: [D], Stack 5: [G] | Exploring action Move G from table to E | New state -> Stack 1: [A, C], Stack 2: [B, F, E, G], Stack 3: [D] | Exploring action Move B from table to G | New state -> Invalid | Taking action Move A from G to table | Moved to state -> Stack 1: [A], Stack 2: [B, F], Stack 3: [C], Stack 4: [D], Stack 5: [E, G] | Plan so far [Move C from B to table | Move D from F to table | Move F from table to B | Move A from G to table] | Taking action Move A from table to D | Moved to state -> Stack 1: [B, F, E, G, D, A], Stack 2: [C] | Plan so far [Move A from G to table | Move G from E to table | Move D from F to table | Move C from B to table | Move F from table to B | Move E from table to F | Move G from table to E | Move D from table to G | Move A from table to D] | Exploring action Move C from table to A | New state -> Stack 1: [B, F, E, G, D, A, C] | Exploring action Move A from D to C | New state -> Stack 1: [B, F, E, G, D], Stack 2: [C, A] | Exploring action Move F from B to A | New state -> Invalid | Exploring action Move A from D to table | New state -> Stack 1: [A], Stack 2: [B, F, E, G, D], Stack 3: [C] | Taking action Move C from table to A | Moved to state -> Stack 1: [B, F, E, G, D, A, C] | Plan so far [Move A from G to table | Move G from E to table | Move D from F to table | Move C from B to table | Move F from table to B | Move E from table to F | Move G from table to E | Move D from table to G | Move A from table to D | Move C from table to A] | Reached goal state!",
        "system2_states_v1": 204
    },
    {
        "idx": 922,
        "start": [
            [
                "table",
                "B",
                "F",
                "C"
            ],
            [
                "table",
                "G",
                "E",
                "A",
                "D"
            ]
        ],
        "goal": [
            [
                "table",
                "D",
                "B"
            ],
            [
                "table",
                "G",
                "C",
                "F",
                "A",
                "E"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": false,
                "on": "E",
                "under": "D",
                "ontable": false
            },
            "B": {
                "clear": false,
                "on": -1,
                "under": "F",
                "ontable": true
            },
            "C": {
                "clear": true,
                "on": "F",
                "under": -1,
                "ontable": false
            },
            "D": {
                "clear": true,
                "on": "A",
                "under": -1,
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": "G",
                "under": "A",
                "ontable": false
            },
            "F": {
                "clear": false,
                "on": "B",
                "under": "C",
                "ontable": false
            },
            "G": {
                "clear": false,
                "on": -1,
                "under": "E",
                "ontable": true
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": false,
                "on": "F",
                "under": "E",
                "ontable": false
            },
            "B": {
                "clear": true,
                "on": "D",
                "under": -1,
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": "G",
                "under": "F",
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": -1,
                "under": "B",
                "ontable": true
            },
            "E": {
                "clear": true,
                "on": "A",
                "under": -1,
                "ontable": false
            },
            "F": {
                "clear": false,
                "on": "C",
                "under": "A",
                "ontable": false
            },
            "G": {
                "clear": false,
                "on": -1,
                "under": "C",
                "ontable": true
            }
        },
        "plan_len": 10,
        "num_blocks": 7,
        "prompt": "The initial state:\nThe hand is empty.\nB is on the table. F is on B. C is on F. C is clear.\nG is on the table. E is on G. A is on E. D is on A. D is clear.\n\nThe goal is:\nD is on the table. B is on D. B is clear.\nG is on the table. C is on G. F is on C. A is on F. E is on A. E is clear.\n",
        "system1_plan": "Move C from F to table | Move D from A to table | Move F from B to table | Move B from table to D | Move A from E to table | Move E from G to table | Move C from table to G | Move F from table to C | Move A from table to F | Move E from table to A",
        "system1_states": 10,
        "system2_plan_v1": "Moved to state -> Stack 1: [B, F, C], Stack 2: [G, E, A, D] | Plan so far [] | Exploring action Move C from F to D | New state -> Stack 1: [B, F], Stack 2: [G, E, A, D, C] | Exploring action Move C from F to table | New state -> Stack 1: [B, F], Stack 2: [C], Stack 3: [G, E, A, D] | Exploring action Move E from G to C | New state -> Invalid | Exploring action Move D from A to table | New state -> Stack 1: [B, F, C], Stack 2: [D], Stack 3: [G, E, A] | Taking action Move C from F to table | Moved to state -> Stack 1: [B, F], Stack 2: [C], Stack 3: [G, E, A, D] | Plan so far [Move C from F to table] | Exploring action Move A from E to table | New state -> Invalid | Exploring action Move F from B to C | New state -> Stack 1: [B], Stack 2: [C, F], Stack 3: [G, E, A, D] | Exploring action Move F from B to table | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [F], Stack 4: [G, E, A, D] | Exploring action Move A from E to D | New state -> Invalid | Exploring action Move D from A to table | New state -> Stack 1: [B, F], Stack 2: [C], Stack 3: [D], Stack 4: [G, E, A] | Taking action Move D from A to table | Moved to state -> Stack 1: [B, F, C], Stack 2: [D], Stack 3: [G, E, A] | Plan so far [Move D from A to table] | Exploring action Move C from F to table | New state -> Stack 1: [B, F], Stack 2: [C], Stack 3: [D], Stack 4: [G, E, A] | Exploring action Move A from E to table | New state -> Stack 1: [A], Stack 2: [B, F, C], Stack 3: [D], Stack 4: [G, E] | Exploring action Move A from E to D | New state -> Stack 1: [B, F, C], Stack 2: [D, A], Stack 3: [G, E] | Exploring action Move E from G to C | New state -> Invalid | Taking action Move D from A to table | Moved to state -> Stack 1: [B, F], Stack 2: [C], Stack 3: [D], Stack 4: [G, E, A] | Plan so far [Move C from F to table | Move D from A to table] | Exploring action Move A from E to D | New state -> Stack 1: [B, F], Stack 2: [C], Stack 3: [D, A], Stack 4: [G, E] | Exploring action Move G from table to D | New state -> Invalid | Exploring action Move A from E to table | New state -> Stack 1: [A], Stack 2: [B, F], Stack 3: [C], Stack 4: [D], Stack 5: [G, E] | Exploring action Move F from B to table | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D], Stack 4: [F], Stack 5: [G, E, A] | Taking action Move C from F to table | Moved to state -> Stack 1: [B, F], Stack 2: [C], Stack 3: [D], Stack 4: [G, E, A] | Plan so far [Move D from A to table | Move C from F to table] | Taking action Move F from B to table | Moved to state -> Stack 1: [B], Stack 2: [C], Stack 3: [D], Stack 4: [F], Stack 5: [G, E, A] | Plan so far [Move C from F to table | Move D from A to table | Move F from B to table] | Exploring action Move B from table to D | New state -> Stack 1: [C], Stack 2: [D, B], Stack 3: [F], Stack 4: [G, E, A] | Exploring action Move A from E to C | New state -> Stack 1: [B], Stack 2: [C, A], Stack 3: [D], Stack 4: [F], Stack 5: [G, E] | Exploring action Move E from G to table | New state -> Invalid | Exploring action Move A from E to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [F], Stack 6: [G, E] | Exploring action Move E from G to C | New state -> Invalid | Taking action Move B from table to D | Moved to state -> Stack 1: [C], Stack 2: [D, B], Stack 3: [F], Stack 4: [G, E, A] | Plan so far [Move C from F to table | Move D from A to table | Move F from B to table | Move B from table to D] | Exploring action Move A from E to C | New state -> Stack 1: [C, A], Stack 2: [D, B], Stack 3: [F], Stack 4: [G, E] | Exploring action Move A from E to F | New state -> Stack 1: [C], Stack 2: [D, B], Stack 3: [F, A], Stack 4: [G, E] | Exploring action Move E from G to C | New state -> Invalid | Exploring action Move A from E to table | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, B], Stack 4: [F], Stack 5: [G, E] | Taking action Move A from E to table | Moved to state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, B], Stack 4: [F], Stack 5: [G, E] | Plan so far [Move C from F to table | Move D from A to table | Move F from B to table | Move B from table to D | Move A from E to table] | Exploring action Move D from table to E | New state -> Invalid | Exploring action Move E from G to C | New state -> Stack 1: [A], Stack 2: [C, E], Stack 3: [D, B], Stack 4: [F], Stack 5: [G] | Exploring action Move E from G to A | New state -> Stack 1: [A, E], Stack 2: [C], Stack 3: [D, B], Stack 4: [F], Stack 5: [G] | Exploring action Move E from G to table | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, B], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Exploring action Move G from table to C | New state -> Invalid | Taking action Move E from G to table | Moved to state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, B], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Plan so far [Move C from F to table | Move D from A to table | Move F from B to table | Move B from table to D | Move A from E to table | Move E from G to table] | Exploring action Move A from table to E | New state -> Stack 1: [C], Stack 2: [D, B], Stack 3: [E, A], Stack 4: [F], Stack 5: [G] | Exploring action Move D from table to A | New state -> Invalid | Exploring action Move C from table to G | New state -> Stack 1: [A], Stack 2: [D, B], Stack 3: [E], Stack 4: [F], Stack 5: [G, C] | Exploring action Move E from table to A | New state -> Stack 1: [A, E], Stack 2: [C], Stack 3: [D, B], Stack 4: [F], Stack 5: [G] | Taking action Move E from G to A | Moved to state -> Stack 1: [A, E], Stack 2: [C], Stack 3: [D, B], Stack 4: [F], Stack 5: [G] | Plan so far [Move C from F to table | Move D from A to table | Move F from B to table | Move B from table to D | Move A from E to table | Move E from G to A] | Exploring action Move A from table to G | New state -> Invalid | Exploring action Move C from table to G | New state -> Stack 1: [A, E], Stack 2: [D, B], Stack 3: [F], Stack 4: [G, C] | Exploring action Move D from table to B | New state -> Invalid | Exploring action Move E from A to table | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, B], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Exploring action Move E from A to C | New state -> Stack 1: [A], Stack 2: [C, E], Stack 3: [D, B], Stack 4: [F], Stack 5: [G] | Taking action Move C from table to G | Moved to state -> Stack 1: [A], Stack 2: [D, B], Stack 3: [E], Stack 4: [F], Stack 5: [G, C] | Plan so far [Move C from F to table | Move D from A to table | Move F from B to table | Move B from table to D | Move A from E to table | Move E from G to table | Move C from table to G] | Exploring action Move G from table to A | New state -> Invalid | Exploring action Move A from table to C | New state -> Stack 1: [D, B], Stack 2: [E], Stack 3: [F], Stack 4: [G, C, A] | Exploring action Move F from table to C | New state -> Stack 1: [A], Stack 2: [D, B], Stack 3: [E], Stack 4: [G, C, F] | Exploring action Move E from table to A | New state -> Stack 1: [A, E], Stack 2: [D, B], Stack 3: [F], Stack 4: [G, C] | Taking action Move C from table to G | Moved to state -> Stack 1: [A, E], Stack 2: [D, B], Stack 3: [F], Stack 4: [G, C] | Plan so far [Move C from F to table | Move D from A to table | Move F from B to table | Move B from table to D | Move A from E to table | Move E from G to A | Move C from table to G] | Exploring action Move A from table to C | New state -> Invalid | Exploring action Move E from A to F | New state -> Stack 1: [A], Stack 2: [D, B], Stack 3: [F, E], Stack 4: [G, C] | Exploring action Move F from table to C | New state -> Stack 1: [A, E], Stack 2: [D, B], Stack 3: [G, C, F] | Exploring action Move D from table to C | New state -> Invalid | Exploring action Move E from A to table | New state -> Stack 1: [A], Stack 2: [D, B], Stack 3: [E], Stack 4: [F], Stack 5: [G, C] | Taking action Move F from table to C | Moved to state -> Stack 1: [A], Stack 2: [D, B], Stack 3: [E], Stack 4: [G, C, F] | Plan so far [Move C from F to table | Move D from A to table | Move F from B to table | Move B from table to D | Move A from E to table | Move E from G to table | Move C from table to G | Move F from table to C] | Exploring action Move A from table to E | New state -> Stack 1: [D, B], Stack 2: [E, A], Stack 3: [G, C, F] | Exploring action Move A from table to F | New state -> Stack 1: [D, B], Stack 2: [E], Stack 3: [G, C, F, A] | Exploring action Move E from table to A | New state -> Stack 1: [A, E], Stack 2: [D, B], Stack 3: [G, C, F] | Exploring action Move D from table to E | New state -> Invalid | Taking action Move F from table to C | Moved to state -> Stack 1: [A, E], Stack 2: [D, B], Stack 3: [G, C, F] | Plan so far [Move C from F to table | Move D from A to table | Move F from B to table | Move B from table to D | Move A from E to table | Move E from G to A | Move C from table to G | Move F from table to C] | Exploring action Move E from A to F | New state -> Stack 1: [A], Stack 2: [D, B], Stack 3: [G, C, F, E] | Exploring action Move D from table to E | New state -> Invalid | Exploring action Move E from A to table | New state -> Stack 1: [A], Stack 2: [D, B], Stack 3: [E], Stack 4: [G, C, F] | Exploring action Move G from table to F | New state -> Invalid | Exploring action Move F from C to table | New state -> Stack 1: [A, E], Stack 2: [D, B], Stack 3: [F], Stack 4: [G, C] | Taking action Move A from table to F | Moved to state -> Stack 1: [D, B], Stack 2: [E], Stack 3: [G, C, F, A] | Plan so far [Move C from F to table | Move D from A to table | Move F from B to table | Move B from table to D | Move A from E to table | Move E from G to table | Move C from table to G | Move F from table to C | Move A from table to F] | Exploring action Move A from F to table | New state -> Stack 1: [A], Stack 2: [D, B], Stack 3: [E], Stack 4: [G, C, F] | Exploring action Move A from F to E | New state -> Stack 1: [D, B], Stack 2: [E, A], Stack 3: [G, C, F] | Exploring action Move E from table to A | New state -> Stack 1: [D, B], Stack 2: [G, C, F, A, E] | Exploring action Move D from table to A | New state -> Invalid | Taking action Move E from table to A | Moved to state -> Stack 1: [D, B], Stack 2: [G, C, F, A, E] | Plan so far [Move C from F to table | Move D from A to table | Move F from B to table | Move B from table to D | Move A from E to table | Move E from G to table | Move C from table to G | Move F from table to C | Move A from table to F | Move E from table to A] | Reached goal state!",
        "system2_states_v1": 62
    },
    {
        "idx": 721,
        "start": [
            [
                "table",
                "E",
                "A",
                "D",
                "C"
            ],
            [
                "table",
                "F",
                "B"
            ]
        ],
        "goal": [
            [
                "table",
                "E",
                "D"
            ],
            [
                "table",
                "F",
                "A",
                "C",
                "B"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": false,
                "on": "E",
                "under": "D",
                "ontable": false
            },
            "B": {
                "clear": true,
                "on": "F",
                "under": -1,
                "ontable": false
            },
            "C": {
                "clear": true,
                "on": "D",
                "under": -1,
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": "A",
                "under": "C",
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": -1,
                "under": "A",
                "ontable": true
            },
            "F": {
                "clear": false,
                "on": -1,
                "under": "B",
                "ontable": true
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": false,
                "on": "F",
                "under": "C",
                "ontable": false
            },
            "B": {
                "clear": true,
                "on": "C",
                "under": -1,
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": "A",
                "under": "B",
                "ontable": false
            },
            "D": {
                "clear": true,
                "on": "E",
                "under": -1,
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": -1,
                "under": "D",
                "ontable": true
            },
            "F": {
                "clear": false,
                "on": -1,
                "under": "A",
                "ontable": true
            }
        },
        "plan_len": 8,
        "num_blocks": 6,
        "prompt": "The initial state:\nThe hand is empty.\nE is on the table. A is on E. D is on A. C is on D. C is clear.\nF is on the table. B is on F. B is clear.\n\nThe goal is:\nE is on the table. D is on E. D is clear.\nF is on the table. A is on F. C is on A. B is on C. B is clear.\n",
        "system1_plan": "Move C from D to table | Move D from A to table | Move A from E to table | Move D from table to E | Move B from F to table | Move A from table to F | Move C from table to A | Move B from table to C",
        "system1_states": 8,
        "system2_plan_v1": "Moved to state -> Stack 1: [E, A, D, C], Stack 2: [F, B] | Plan so far [] | Exploring action Move B from F to C | New state -> Stack 1: [E, A, D, C, B], Stack 2: [F] | Exploring action Move E from table to B | New state -> Invalid | Exploring action Move A from E to C | New state -> Invalid | Exploring action Move B from F to table | New state -> Stack 1: [B], Stack 2: [E, A, D, C], Stack 3: [F] | Exploring action Move C from D to table | New state -> Stack 1: [C], Stack 2: [E, A, D], Stack 3: [F, B] | Taking action Move B from F to table | Moved to state -> Stack 1: [B], Stack 2: [E, A, D, C], Stack 3: [F] | Plan so far [Move B from F to table] | Exploring action Move B from table to C | New state -> Stack 1: [E, A, D, C, B], Stack 2: [F] | Exploring action Move C from D to B | New state -> Stack 1: [B, C], Stack 2: [E, A, D], Stack 3: [F] | Exploring action Move A from E to table | New state -> Invalid | Exploring action Move C from D to table | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [E, A, D], Stack 4: [F] | Taking action Move C from D to table | Moved to state -> Stack 1: [C], Stack 2: [E, A, D], Stack 3: [F, B] | Plan so far [Move C from D to table] | Exploring action Move F from table to B | New state -> Invalid | Exploring action Move B from F to table | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [E, A, D], Stack 4: [F] | Exploring action Move B from F to C | New state -> Stack 1: [C, B], Stack 2: [E, A, D], Stack 3: [F] | Exploring action Move D from A to table | New state -> Stack 1: [C], Stack 2: [D], Stack 3: [E, A], Stack 4: [F, B] | Taking action Move C from D to table | Moved to state -> Stack 1: [B], Stack 2: [C], Stack 3: [E, A, D], Stack 4: [F] | Plan so far [Move B from F to table | Move C from D to table] | Exploring action Move D from A to table | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D], Stack 4: [E, A], Stack 5: [F] | Exploring action Move B from table to C | New state -> Stack 1: [C, B], Stack 2: [E, A, D], Stack 3: [F] | Exploring action Move A from E to B | New state -> Invalid | Exploring action Move D from A to B | New state -> Stack 1: [B, D], Stack 2: [C], Stack 3: [E, A], Stack 4: [F] | Exploring action Move A from E to D | New state -> Invalid | Taking action Move D from A to table | Moved to state -> Stack 1: [C], Stack 2: [D], Stack 3: [E, A], Stack 4: [F, B] | Plan so far [Move C from D to table | Move D from A to table] | Exploring action Move B from F to C | New state -> Stack 1: [C, B], Stack 2: [D], Stack 3: [E, A], Stack 4: [F] | Exploring action Move B from F to table | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D], Stack 4: [E, A], Stack 5: [F] | Exploring action Move A from E to table | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [F, B] | Exploring action Move F from table to A | New state -> Invalid | Taking action Move B from F to C | Moved to state -> Stack 1: [E, A, D, C, B], Stack 2: [F] | Plan so far [Move B from F to C] | Exploring action Move F from table to B | New state -> Stack 1: [E, A, D, C, B, F] | Exploring action Move B from C to table | New state -> Stack 1: [B], Stack 2: [E, A, D, C], Stack 3: [F] | Exploring action Move C from D to table | New state -> Invalid | Exploring action Move B from C to F | New state -> Stack 1: [E, A, D, C], Stack 2: [F, B] | Taking action Move A from E to table | Moved to state -> Stack 1: [A], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [F, B] | Plan so far [Move C from D to table | Move D from A to table | Move A from E to table] | Exploring action Move B from F to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Exploring action Move B from F to C | New state -> Stack 1: [A], Stack 2: [C, B], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Exploring action Move D from table to E | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [E, D], Stack 4: [F, B] | Exploring action Move F from table to C | New state -> Invalid | Exploring action Move F from table to B | New state -> Invalid | Taking action Move D from table to E | Moved to state -> Stack 1: [A], Stack 2: [C], Stack 3: [E, D], Stack 4: [F, B] | Plan so far [Move C from D to table | Move D from A to table | Move A from E to table | Move D from table to E] | Exploring action Move B from F to C | New state -> Stack 1: [A], Stack 2: [C, B], Stack 3: [E, D], Stack 4: [F] | Exploring action Move E from table to D | New state -> Invalid | Exploring action Move B from F to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [E, D], Stack 5: [F] | Exploring action Move B from F to A | New state -> Stack 1: [A, B], Stack 2: [C], Stack 3: [E, D], Stack 4: [F] | Taking action Move B from F to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [E, D], Stack 5: [F] | Plan so far [Move C from D to table | Move D from A to table | Move A from E to table | Move D from table to E | Move B from F to table] | Exploring action Move B from table to C | New state -> Stack 1: [A], Stack 2: [C, B], Stack 3: [E, D], Stack 4: [F] | Exploring action Move C from table to F | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [E, D], Stack 4: [F, C] | Exploring action Move A from table to F | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [E, D], Stack 4: [F, A] | Exploring action Move E from table to C | New state -> Invalid | Taking action Move B from F to C | Moved to state -> Stack 1: [A], Stack 2: [C, B], Stack 3: [E, D], Stack 4: [F] | Plan so far [Move C from D to table | Move D from A to table | Move A from E to table | Move D from table to E | Move B from F to C] | Exploring action Move B from C to F | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [E, D], Stack 4: [F, B] | Exploring action Move C from table to B | New state -> Invalid | Exploring action Move E from table to F | New state -> Invalid | Exploring action Move A from table to F | New state -> Stack 1: [C, B], Stack 2: [E, D], Stack 3: [F, A] | Exploring action Move B from C to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [E, D], Stack 5: [F] | Taking action Move A from table to F | Moved to state -> Stack 1: [B], Stack 2: [C], Stack 3: [E, D], Stack 4: [F, A] | Plan so far [Move C from D to table | Move D from A to table | Move A from E to table | Move D from table to E | Move B from F to table | Move A from table to F] | Exploring action Move B from table to C | New state -> Stack 1: [C, B], Stack 2: [E, D], Stack 3: [F, A] | Exploring action Move F from table to B | New state -> Invalid | Exploring action Move A from F to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [E, D], Stack 5: [F] | Exploring action Move C from table to A | New state -> Stack 1: [B], Stack 2: [E, D], Stack 3: [F, A, C] | Taking action Move A from table to F | Moved to state -> Stack 1: [C, B], Stack 2: [E, D], Stack 3: [F, A] | Plan so far [Move C from D to table | Move D from A to table | Move A from E to table | Move D from table to E | Move B from F to C | Move A from table to F] | Exploring action Move B from C to table | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [E, D], Stack 4: [F, A] | Exploring action Move B from C to A | New state -> Stack 1: [C], Stack 2: [E, D], Stack 3: [F, A, B] | Exploring action Move A from F to table | New state -> Stack 1: [A], Stack 2: [C, B], Stack 3: [E, D], Stack 4: [F] | Exploring action Move F from table to D | New state -> Invalid | Taking action Move C from table to A | Moved to state -> Stack 1: [B], Stack 2: [E, D], Stack 3: [F, A, C] | Plan so far [Move C from D to table | Move D from A to table | Move A from E to table | Move D from table to E | Move B from F to table | Move A from table to F | Move C from table to A] | Exploring action Move E from table to D | New state -> Invalid | Exploring action Move C from A to table | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [E, D], Stack 4: [F, A] | Exploring action Move F from table to C | New state -> Invalid | Exploring action Move D from E to table | New state -> Stack 1: [B], Stack 2: [D], Stack 3: [E], Stack 4: [F, A, C] | Exploring action Move B from table to C | New state -> Stack 1: [E, D], Stack 2: [F, A, C, B] | Taking action Move B from table to C | Moved to state -> Stack 1: [E, D], Stack 2: [F, A, C, B] | Plan so far [Move C from D to table | Move D from A to table | Move A from E to table | Move D from table to E | Move B from F to table | Move A from table to F | Move C from table to A | Move B from table to C] | Reached goal state!",
        "system2_states_v1": 57
    },
    {
        "idx": 695,
        "start": [
            [
                "table",
                "E",
                "A",
                "D",
                "C"
            ],
            [
                "table",
                "F",
                "B"
            ]
        ],
        "goal": [
            [
                "table",
                "A",
                "D",
                "C"
            ],
            [
                "table",
                "B",
                "E",
                "F"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": false,
                "on": "E",
                "under": "D",
                "ontable": false
            },
            "B": {
                "clear": true,
                "on": "F",
                "under": -1,
                "ontable": false
            },
            "C": {
                "clear": true,
                "on": "D",
                "under": -1,
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": "A",
                "under": "C",
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": -1,
                "under": "A",
                "ontable": true
            },
            "F": {
                "clear": false,
                "on": -1,
                "under": "B",
                "ontable": true
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": false,
                "on": -1,
                "under": "D",
                "ontable": true
            },
            "B": {
                "clear": false,
                "on": -1,
                "under": "E",
                "ontable": true
            },
            "C": {
                "clear": true,
                "on": "D",
                "under": -1,
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": "A",
                "under": "C",
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": "B",
                "under": "F",
                "ontable": false
            },
            "F": {
                "clear": true,
                "on": "E",
                "under": -1,
                "ontable": false
            }
        },
        "plan_len": 8,
        "num_blocks": 6,
        "prompt": "The initial state:\nThe hand is empty.\nE is on the table. A is on E. D is on A. C is on D. C is clear.\nF is on the table. B is on F. B is clear.\n\nThe goal is:\nA is on the table. D is on A. C is on D. C is clear.\nB is on the table. E is on B. F is on E. F is clear.\n",
        "system1_plan": "Move B from F to table | Move C from D to table | Move D from A to table | Move A from E to table | Move D from table to A | Move C from table to D | Move E from table to B | Move F from table to E",
        "system1_states": 8,
        "system2_plan_v1": "Moved to state -> Stack 1: [E, A, D, C], Stack 2: [F, B] | Plan so far [] | Exploring action Move B from F to C | New state -> Stack 1: [E, A, D, C, B], Stack 2: [F] | Exploring action Move F from table to B | New state -> Invalid | Exploring action Move B from F to table | New state -> Stack 1: [B], Stack 2: [E, A, D, C], Stack 3: [F] | Exploring action Move C from D to table | New state -> Stack 1: [C], Stack 2: [E, A, D], Stack 3: [F, B] | Exploring action Move E from table to B | New state -> Invalid | Taking action Move B from F to table | Moved to state -> Stack 1: [B], Stack 2: [E, A, D, C], Stack 3: [F] | Plan so far [Move B from F to table] | Exploring action Move E from table to C | New state -> Invalid | Exploring action Move B from table to F | New state -> Stack 1: [E, A, D, C], Stack 2: [F, B] | Exploring action Move F from table to B | New state -> Stack 1: [B, F], Stack 2: [E, A, D, C] | Exploring action Move E from table to F | New state -> Invalid | Exploring action Move C from D to table | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [E, A, D], Stack 4: [F] | Taking action Move B from F to C | Moved to state -> Stack 1: [E, A, D, C, B], Stack 2: [F] | Plan so far [Move B from F to C] | Exploring action Move F from table to B | New state -> Stack 1: [E, A, D, C, B, F] | Exploring action Move B from C to table | New state -> Stack 1: [B], Stack 2: [E, A, D, C], Stack 3: [F] | Exploring action Move B from C to F | New state -> Stack 1: [E, A, D, C], Stack 2: [F, B] | Exploring action Move D from A to B | New state -> Invalid | Taking action Move B from C to table | Moved to state -> Stack 1: [B], Stack 2: [E, A, D, C], Stack 3: [F] | Plan so far [Move B from F to C | Move B from C to table] | Moved to state -> Stack 1: [E, A, D, C], Stack 2: [F, B] | Plan so far [Move B from F to table | Move B from table to F] | Taking action Move F from table to B | Moved to state -> Stack 1: [B, F], Stack 2: [E, A, D, C] | Plan so far [Move B from F to table | Move F from table to B] | Exploring action Move F from B to C | New state -> Stack 1: [B], Stack 2: [E, A, D, C, F] | Exploring action Move C from D to table | New state -> Stack 1: [B, F], Stack 2: [C], Stack 3: [E, A, D] | Exploring action Move E from table to C | New state -> Invalid | Exploring action Move E from table to F | New state -> Invalid | Exploring action Move F from B to table | New state -> Stack 1: [B], Stack 2: [E, A, D, C], Stack 3: [F] | Moved to state -> Stack 1: [E, A, D, C], Stack 2: [F, B] | Plan so far [Move B from F to C | Move B from C to F] | Taking action Move F from B to table | Moved to state -> Stack 1: [B], Stack 2: [E, A, D, C], Stack 3: [F] | Plan so far [Move B from F to table | Move F from table to B | Move F from B to table] | Taking action Move C from D to table | Moved to state -> Stack 1: [C], Stack 2: [E, A, D], Stack 3: [F, B] | Plan so far [Move C from D to table] | Exploring action Move F from table to D | New state -> Invalid | Exploring action Move C from table to D | New state -> Stack 1: [E, A, D, C], Stack 2: [F, B] | Exploring action Move D from A to table | New state -> Stack 1: [C], Stack 2: [D], Stack 3: [E, A], Stack 4: [F, B] | Exploring action Move B from F to table | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [E, A, D], Stack 4: [F] | Moved to state -> Stack 1: [E, A, D, C], Stack 2: [F, B] | Plan so far [Move C from D to table | Move C from table to D] | Taking action Move C from D to table | Moved to state -> Stack 1: [B], Stack 2: [C], Stack 3: [E, A, D], Stack 4: [F] | Plan so far [Move B from F to table | Move C from D to table] | Exploring action Move D from A to B | New state -> Stack 1: [B, D], Stack 2: [C], Stack 3: [E, A], Stack 4: [F] | Exploring action Move C from table to D | New state -> Stack 1: [B], Stack 2: [E, A, D, C], Stack 3: [F] | Exploring action Move E from table to F | New state -> Invalid | Exploring action Move D from A to table | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D], Stack 4: [E, A], Stack 5: [F] | Taking action Move C from table to D | Moved to state -> Stack 1: [B], Stack 2: [E, A, D, C], Stack 3: [F] | Plan so far [Move B from F to table | Move C from D to table | Move C from table to D] | Taking action Move B from table to C | Moved to state -> Stack 1: [E, A, D, C, B], Stack 2: [F] | Plan so far [Move B from F to table | Move B from table to C] | Taking action Move B from F to table | Moved to state -> Stack 1: [B], Stack 2: [C], Stack 3: [E, A, D], Stack 4: [F] | Plan so far [Move C from D to table | Move B from F to table] | Taking action Move D from A to table | Moved to state -> Stack 1: [B], Stack 2: [C], Stack 3: [D], Stack 4: [E, A], Stack 5: [F] | Plan so far [Move B from F to table | Move C from D to table | Move D from A to table] | Exploring action Move E from table to B | New state -> Invalid | Exploring action Move A from E to C | New state -> Stack 1: [B], Stack 2: [C, A], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Exploring action Move C from table to D | New state -> Stack 1: [B], Stack 2: [D, C], Stack 3: [E, A], Stack 4: [F] | Exploring action Move A from E to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Taking action Move F from table to C | Moved to state -> Stack 1: [B], Stack 2: [E, A, D, C, F] | Plan so far [Move B from F to table | Move F from table to C] | Exploring action Move F from C to table | New state -> Stack 1: [B], Stack 2: [E, A, D, C], Stack 3: [F] | Exploring action Move B from table to F | New state -> Stack 1: [E, A, D, C, F, B] | Exploring action Move D from A to table | New state -> Invalid | Exploring action Move F from C to B | New state -> Stack 1: [B, F], Stack 2: [E, A, D, C] | Taking action Move F from C to table | Moved to state -> Stack 1: [B], Stack 2: [E, A, D, C], Stack 3: [F] | Plan so far [Move B from F to table | Move F from table to C | Move F from C to table] | Taking action Move F from C to B | Moved to state -> Stack 1: [B, F], Stack 2: [E, A, D, C] | Plan so far [Move B from F to table | Move F from table to C | Move F from C to B] | Taking action Move A from E to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Plan so far [Move B from F to table | Move C from D to table | Move D from A to table | Move A from E to table] | Exploring action Move F from table to E | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E, F] | Exploring action Move E from table to B | New state -> Stack 1: [A], Stack 2: [B, E], Stack 3: [C], Stack 4: [D], Stack 5: [F] | Exploring action Move D from table to A | New state -> Stack 1: [A, D], Stack 2: [B], Stack 3: [C], Stack 4: [E], Stack 5: [F] | Taking action Move D from A to table | Moved to state -> Stack 1: [C], Stack 2: [D], Stack 3: [E, A], Stack 4: [F, B] | Plan so far [Move C from D to table | Move D from A to table] | Exploring action Move B from F to table | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D], Stack 4: [E, A], Stack 5: [F] | Exploring action Move A from E to C | New state -> Stack 1: [C, A], Stack 2: [D], Stack 3: [E], Stack 4: [F, B] | Exploring action Move F from table to A | New state -> Invalid | Exploring action Move A from E to table | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [F, B] | Taking action Move D from table to A | Moved to state -> Stack 1: [A, D], Stack 2: [B], Stack 3: [C], Stack 4: [E], Stack 5: [F] | Plan so far [Move B from F to table | Move C from D to table | Move D from A to table | Move A from E to table | Move D from table to A] | Exploring action Move C from table to D | New state -> Stack 1: [A, D, C], Stack 2: [B], Stack 3: [E], Stack 4: [F] | Exploring action Move A from table to B | New state -> Invalid | Exploring action Move E from table to B | New state -> Stack 1: [A, D], Stack 2: [B, E], Stack 3: [C], Stack 4: [F] | Exploring action Move F from table to E | New state -> Stack 1: [A, D], Stack 2: [B], Stack 3: [C], Stack 4: [E, F] | Taking action Move C from table to D | Moved to state -> Stack 1: [A, D, C], Stack 2: [B], Stack 3: [E], Stack 4: [F] | Plan so far [Move B from F to table | Move C from D to table | Move D from A to table | Move A from E to table | Move D from table to A | Move C from table to D] | Exploring action Move A from table to F | New state -> Invalid | Exploring action Move E from table to B | New state -> Stack 1: [A, D, C], Stack 2: [B, E], Stack 3: [F] | Exploring action Move D from A to E | New state -> Invalid | Exploring action Move F from table to E | New state -> Stack 1: [A, D, C], Stack 2: [B], Stack 3: [E, F] | Exploring action Move B from table to F | New state -> Stack 1: [A, D, C], Stack 2: [E], Stack 3: [F, B] | Taking action Move E from table to B | Moved to state -> Stack 1: [A, D, C], Stack 2: [B, E], Stack 3: [F] | Plan so far [Move B from F to table | Move C from D to table | Move D from A to table | Move A from E to table | Move D from table to A | Move C from table to D | Move E from table to B] | Exploring action Move E from B to table | New state -> Stack 1: [A, D, C], Stack 2: [B], Stack 3: [E], Stack 4: [F] | Exploring action Move E from B to F | New state -> Stack 1: [A, D, C], Stack 2: [B], Stack 3: [F, E] | Exploring action Move F from table to E | New state -> Stack 1: [A, D, C], Stack 2: [B, E, F] | Exploring action Move A from table to E | New state -> Invalid | Exploring action Move B from table to E | New state -> Invalid | Taking action Move F from table to E | Moved to state -> Stack 1: [A, D, C], Stack 2: [B, E, F] | Plan so far [Move B from F to table | Move C from D to table | Move D from A to table | Move A from E to table | Move D from table to A | Move C from table to D | Move E from table to B | Move F from table to E] | Reached goal state!",
        "system2_states_v1": 56
    },
    {
        "idx": 902,
        "start": [
            [
                "table",
                "D",
                "F",
                "C"
            ],
            [
                "table",
                "G",
                "E",
                "B",
                "A"
            ]
        ],
        "goal": [
            [
                "table",
                "F"
            ],
            [
                "table",
                "G",
                "D",
                "A",
                "B",
                "C",
                "E"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": true,
                "on": "B",
                "under": -1,
                "ontable": false
            },
            "B": {
                "clear": false,
                "on": "E",
                "under": "A",
                "ontable": false
            },
            "C": {
                "clear": true,
                "on": "F",
                "under": -1,
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": -1,
                "under": "F",
                "ontable": true
            },
            "E": {
                "clear": false,
                "on": "G",
                "under": "B",
                "ontable": false
            },
            "F": {
                "clear": false,
                "on": "D",
                "under": "C",
                "ontable": false
            },
            "G": {
                "clear": false,
                "on": -1,
                "under": "E",
                "ontable": true
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": false,
                "on": "D",
                "under": "B",
                "ontable": false
            },
            "B": {
                "clear": false,
                "on": "A",
                "under": "C",
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": "B",
                "under": "E",
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": "G",
                "under": "A",
                "ontable": false
            },
            "E": {
                "clear": true,
                "on": "C",
                "under": -1,
                "ontable": false
            },
            "F": {
                "clear": true,
                "on": -1,
                "under": -1,
                "ontable": true
            },
            "G": {
                "clear": false,
                "on": -1,
                "under": "D",
                "ontable": true
            }
        },
        "plan_len": 10,
        "num_blocks": 7,
        "prompt": "The initial state:\nThe hand is empty.\nD is on the table. F is on D. C is on F. C is clear.\nG is on the table. E is on G. B is on E. A is on B. A is clear.\n\nThe goal is:\nF is on the table. F is clear.\nG is on the table. D is on G. A is on D. B is on A. C is on B. E is on C. E is clear.\n",
        "system1_plan": "Move C from F to table | Move F from D to table | Move A from B to table | Move B from E to table | Move E from G to table | Move D from table to G | Move A from table to D | Move B from table to A | Move C from table to B | Move E from table to C",
        "system1_states": 10,
        "system2_plan_v1": "Moved to state -> Stack 1: [D, F, C], Stack 2: [G, E, B, A] | Plan so far [] | Exploring action Move A from B to table | New state -> Stack 1: [A], Stack 2: [D, F, C], Stack 3: [G, E, B] | Exploring action Move C from F to table | New state -> Stack 1: [C], Stack 2: [D, F], Stack 3: [G, E, B, A] | Exploring action Move A from B to C | New state -> Stack 1: [D, F, C, A], Stack 2: [G, E, B] | Exploring action Move F from D to A | New state -> Invalid | Taking action Move A from B to table | Moved to state -> Stack 1: [A], Stack 2: [D, F, C], Stack 3: [G, E, B] | Plan so far [Move A from B to table] | Exploring action Move B from E to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, F, C], Stack 4: [G, E] | Exploring action Move C from F to A | New state -> Stack 1: [A, C], Stack 2: [D, F], Stack 3: [G, E, B] | Exploring action Move G from table to B | New state -> Invalid | Exploring action Move C from F to table | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, F], Stack 4: [G, E, B] | Exploring action Move G from table to A | New state -> Invalid | Taking action Move C from F to table | Moved to state -> Stack 1: [C], Stack 2: [D, F], Stack 3: [G, E, B, A] | Plan so far [Move C from F to table] | Exploring action Move F from D to A | New state -> Stack 1: [C], Stack 2: [D], Stack 3: [G, E, B, A, F] | Exploring action Move F from D to table | New state -> Stack 1: [C], Stack 2: [D], Stack 3: [F], Stack 4: [G, E, B, A] | Exploring action Move A from B to table | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, F], Stack 4: [G, E, B] | Exploring action Move E from G to table | New state -> Invalid | Exploring action Move D from table to C | New state -> Invalid | Taking action Move F from D to table | Moved to state -> Stack 1: [C], Stack 2: [D], Stack 3: [F], Stack 4: [G, E, B, A] | Plan so far [Move C from F to table | Move F from D to table] | Exploring action Move A from B to D | New state -> Stack 1: [C], Stack 2: [D, A], Stack 3: [F], Stack 4: [G, E, B] | Exploring action Move E from G to A | New state -> Invalid | Exploring action Move A from B to C | New state -> Stack 1: [C, A], Stack 2: [D], Stack 3: [F], Stack 4: [G, E, B] | Exploring action Move A from B to table | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D], Stack 4: [F], Stack 5: [G, E, B] | Taking action Move A from B to table | Moved to state -> Stack 1: [A], Stack 2: [C], Stack 3: [D], Stack 4: [F], Stack 5: [G, E, B] | Plan so far [Move C from F to table | Move F from D to table | Move A from B to table] | Exploring action Move B from E to A | New state -> Stack 1: [A, B], Stack 2: [C], Stack 3: [D], Stack 4: [F], Stack 5: [G, E] | Exploring action Move B from E to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [F], Stack 6: [G, E] | Exploring action Move B from E to C | New state -> Stack 1: [A], Stack 2: [C, B], Stack 3: [D], Stack 4: [F], Stack 5: [G, E] | Exploring action Move E from G to D | New state -> Invalid | Exploring action Move E from G to F | New state -> Invalid | Taking action Move B from E to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [F], Stack 6: [G, E] | Plan so far [Move C from F to table | Move F from D to table | Move A from B to table | Move B from E to table] | Exploring action Move G from table to A | New state -> Invalid | Exploring action Move E from G to D | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D, E], Stack 5: [F], Stack 6: [G] | Exploring action Move E from G to C | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, E], Stack 4: [D], Stack 5: [F], Stack 6: [G] | Exploring action Move G from table to B | New state -> Invalid | Exploring action Move E from G to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F], Stack 7: [G] | Taking action Move E from G to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F], Stack 7: [G] | Plan so far [Move C from F to table | Move F from D to table | Move A from B to table | Move B from E to table | Move E from G to table] | Exploring action Move B from table to A | New state -> Stack 1: [A, B], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Exploring action Move D from table to G | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [E], Stack 5: [F], Stack 6: [G, D] | Exploring action Move E from table to C | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, E], Stack 4: [D], Stack 5: [F], Stack 6: [G] | Taking action Move E from G to C | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, E], Stack 4: [D], Stack 5: [F], Stack 6: [G] | Plan so far [Move C from F to table | Move F from D to table | Move A from B to table | Move B from E to table | Move E from G to C] | Exploring action Move C from table to B | New state -> Invalid | Exploring action Move A from table to B | New state -> Stack 1: [B, A], Stack 2: [C, E], Stack 3: [D], Stack 4: [F], Stack 5: [G] | Exploring action Move D from table to G | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, E], Stack 4: [F], Stack 5: [G, D] | Exploring action Move E from C to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F], Stack 7: [G] | Exploring action Move C from table to G | New state -> Invalid | Taking action Move D from table to G | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [E], Stack 5: [F], Stack 6: [G, D] | Plan so far [Move C from F to table | Move F from D to table | Move A from B to table | Move B from E to table | Move E from G to table | Move D from table to G] | Exploring action Move G from table to B | New state -> Invalid | Exploring action Move B from table to C | New state -> Stack 1: [A], Stack 2: [C, B], Stack 3: [E], Stack 4: [F], Stack 5: [G, D] | Exploring action Move G from table to D | New state -> Invalid | Exploring action Move E from table to C | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, E], Stack 4: [F], Stack 5: [G, D] | Exploring action Move A from table to D | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [E], Stack 4: [F], Stack 5: [G, D, A] | Taking action Move D from table to G | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, E], Stack 4: [F], Stack 5: [G, D] | Plan so far [Move C from F to table | Move F from D to table | Move A from B to table | Move B from E to table | Move E from G to C | Move D from table to G] | Exploring action Move G from table to A | New state -> Invalid | Exploring action Move A from table to D | New state -> Stack 1: [B], Stack 2: [C, E], Stack 3: [F], Stack 4: [G, D, A] | Exploring action Move C from table to E | New state -> Invalid | Exploring action Move B from table to D | New state -> Stack 1: [A], Stack 2: [C, E], Stack 3: [F], Stack 4: [G, D, B] | Exploring action Move E from C to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [E], Stack 5: [F], Stack 6: [G, D] | Taking action Move A from table to D | Moved to state -> Stack 1: [B], Stack 2: [C], Stack 3: [E], Stack 4: [F], Stack 5: [G, D, A] | Plan so far [Move C from F to table | Move F from D to table | Move A from B to table | Move B from E to table | Move E from G to table | Move D from table to G | Move A from table to D] | Exploring action Move B from table to A | New state -> Stack 1: [C], Stack 2: [E], Stack 3: [F], Stack 4: [G, D, A, B] | Exploring action Move E from table to C | New state -> Stack 1: [B], Stack 2: [C, E], Stack 3: [F], Stack 4: [G, D, A] | Exploring action Move A from D to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [E], Stack 5: [F], Stack 6: [G, D] | Exploring action Move G from table to C | New state -> Invalid | Taking action Move A from table to D | Moved to state -> Stack 1: [B], Stack 2: [C, E], Stack 3: [F], Stack 4: [G, D, A] | Plan so far [Move C from F to table | Move F from D to table | Move A from B to table | Move B from E to table | Move E from G to C | Move D from table to G | Move A from table to D] | Exploring action Move E from C to B | New state -> Stack 1: [B, E], Stack 2: [C], Stack 3: [F], Stack 4: [G, D, A] | Exploring action Move E from C to table | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [E], Stack 4: [F], Stack 5: [G, D, A] | Exploring action Move D from G to table | New state -> Invalid | Exploring action Move C from table to B | New state -> Invalid | Exploring action Move B from table to A | New state -> Stack 1: [C, E], Stack 2: [F], Stack 3: [G, D, A, B] | Taking action Move B from table to A | Moved to state -> Stack 1: [C], Stack 2: [E], Stack 3: [F], Stack 4: [G, D, A, B] | Plan so far [Move C from F to table | Move F from D to table | Move A from B to table | Move B from E to table | Move E from G to table | Move D from table to G | Move A from table to D | Move B from table to A] | Exploring action Move C from table to E | New state -> Stack 1: [E, C], Stack 2: [F], Stack 3: [G, D, A, B] | Exploring action Move E from table to C | New state -> Stack 1: [C, E], Stack 2: [F], Stack 3: [G, D, A, B] | Exploring action Move D from G to C | New state -> Invalid | Exploring action Move C from table to B | New state -> Stack 1: [E], Stack 2: [F], Stack 3: [G, D, A, B, C] | Exploring action Move G from table to C | New state -> Invalid | Taking action Move B from table to A | Moved to state -> Stack 1: [C, E], Stack 2: [F], Stack 3: [G, D, A, B] | Plan so far [Move C from F to table | Move F from D to table | Move A from B to table | Move B from E to table | Move E from G to C | Move D from table to G | Move A from table to D | Move B from table to A] | Exploring action Move E from C to table | New state -> Stack 1: [C], Stack 2: [E], Stack 3: [F], Stack 4: [G, D, A, B] | Exploring action Move D from G to F | New state -> Invalid | Exploring action Move E from C to B | New state -> Stack 1: [C], Stack 2: [F], Stack 3: [G, D, A, B, E] | Exploring action Move A from D to F | New state -> Invalid | Exploring action Move B from A to table | New state -> Stack 1: [B], Stack 2: [C, E], Stack 3: [F], Stack 4: [G, D, A] | Taking action Move C from table to B | Moved to state -> Stack 1: [E], Stack 2: [F], Stack 3: [G, D, A, B, C] | Plan so far [Move C from F to table | Move F from D to table | Move A from B to table | Move B from E to table | Move E from G to table | Move D from table to G | Move A from table to D | Move B from table to A | Move C from table to B] | Exploring action Move E from table to C | New state -> Stack 1: [F], Stack 2: [G, D, A, B, C, E] | Exploring action Move G from table to E | New state -> Invalid | Exploring action Move F from table to C | New state -> Stack 1: [E], Stack 2: [G, D, A, B, C, F] | Exploring action Move C from B to table | New state -> Stack 1: [C], Stack 2: [E], Stack 3: [F], Stack 4: [G, D, A, B] | Exploring action Move D from G to F | New state -> Invalid | Taking action Move E from table to C | Moved to state -> Stack 1: [F], Stack 2: [G, D, A, B, C, E] | Plan so far [Move C from F to table | Move F from D to table | Move A from B to table | Move B from E to table | Move E from G to table | Move D from table to G | Move A from table to D | Move B from table to A | Move C from table to B | Move E from table to C] | Reached goal state!",
        "system2_states_v1": 70
    },
    {
        "idx": 621,
        "start": [
            [
                "table",
                "E",
                "C",
                "D",
                "A",
                "B"
            ]
        ],
        "goal": [
            [
                "table",
                "A",
                "E",
                "C",
                "B"
            ],
            [
                "table",
                "D"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": false,
                "on": "D",
                "under": "B",
                "ontable": false
            },
            "B": {
                "clear": true,
                "on": "A",
                "under": -1,
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": "E",
                "under": "D",
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": "C",
                "under": "A",
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": -1,
                "under": "C",
                "ontable": true
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": false,
                "on": -1,
                "under": "E",
                "ontable": true
            },
            "B": {
                "clear": true,
                "on": "C",
                "under": -1,
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": "E",
                "under": "B",
                "ontable": false
            },
            "D": {
                "clear": true,
                "on": -1,
                "under": -1,
                "ontable": true
            },
            "E": {
                "clear": false,
                "on": "A",
                "under": "C",
                "ontable": false
            }
        },
        "plan_len": 7,
        "num_blocks": 5,
        "prompt": "The initial state:\nThe hand is empty.\nE is on the table. C is on E. D is on C. A is on D. B is on A. B is clear.\n\nThe goal is:\nA is on the table. E is on A. C is on E. B is on C. B is clear.\nD is on the table. D is clear.\n",
        "system1_plan": "Move B from A to table | Move A from D to table | Move D from C to table | Move C from E to table | Move E from table to A | Move C from table to E | Move B from table to C",
        "system1_states": 7,
        "system2_plan_v1": "Moved to state -> Stack 1: [E, C, D, A, B] | Plan so far [] | Exploring action Move B from A to table | New state -> Stack 1: [B], Stack 2: [E, C, D, A] | Exploring action Move E from table to B | New state -> Invalid | Taking action Move B from A to table | Moved to state -> Stack 1: [B], Stack 2: [E, C, D, A] | Plan so far [Move B from A to table] | Exploring action Move C from E to A | New state -> Invalid | Exploring action Move E from table to B | New state -> Invalid | Exploring action Move B from table to A | New state -> Stack 1: [E, C, D, A, B] | Exploring action Move A from D to B | New state -> Stack 1: [B, A], Stack 2: [E, C, D] | Exploring action Move A from D to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [E, C, D] | Taking action Move A from D to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [E, C, D] | Plan so far [Move B from A to table | Move A from D to table] | Exploring action Move D from C to A | New state -> Stack 1: [A, D], Stack 2: [B], Stack 3: [E, C] | Exploring action Move C from E to B | New state -> Invalid | Exploring action Move D from C to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D], Stack 4: [E, C] | Exploring action Move D from C to B | New state -> Stack 1: [A], Stack 2: [B, D], Stack 3: [E, C] | Taking action Move D from C to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [D], Stack 4: [E, C] | Plan so far [Move B from A to table | Move A from D to table | Move D from C to table] | Exploring action Move C from E to A | New state -> Stack 1: [A, C], Stack 2: [B], Stack 3: [D], Stack 4: [E] | Exploring action Move B from table to C | New state -> Stack 1: [A], Stack 2: [D], Stack 3: [E, C, B] | Exploring action Move C from E to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Exploring action Move E from table to A | New state -> Invalid | Exploring action Move E from table to B | New state -> Invalid | Taking action Move B from table to C | Moved to state -> Stack 1: [A], Stack 2: [D], Stack 3: [E, C, B] | Plan so far [Move B from A to table | Move A from D to table | Move D from C to table | Move B from table to C] | Exploring action Move A from table to B | New state -> Stack 1: [D], Stack 2: [E, C, B, A] | Exploring action Move E from table to D | New state -> Invalid | Exploring action Move B from C to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D], Stack 4: [E, C] | Exploring action Move D from table to A | New state -> Stack 1: [A, D], Stack 2: [E, C, B] | Taking action Move C from E to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Plan so far [Move B from A to table | Move A from D to table | Move D from C to table | Move C from E to table] | Exploring action Move E from table to A | New state -> Stack 1: [A, E], Stack 2: [B], Stack 3: [C], Stack 4: [D] | Exploring action Move A from table to B | New state -> Stack 1: [B, A], Stack 2: [C], Stack 3: [D], Stack 4: [E] | Exploring action Move B from table to C | New state -> Stack 1: [A], Stack 2: [C, B], Stack 3: [D], Stack 4: [E] | Taking action Move E from table to A | Moved to state -> Stack 1: [A, E], Stack 2: [B], Stack 3: [C], Stack 4: [D] | Plan so far [Move B from A to table | Move A from D to table | Move D from C to table | Move C from E to table | Move E from table to A] | Exploring action Move C from table to E | New state -> Stack 1: [A, E, C], Stack 2: [B], Stack 3: [D] | Exploring action Move A from table to D | New state -> Invalid | Exploring action Move B from table to E | New state -> Stack 1: [A, E, B], Stack 2: [C], Stack 3: [D] | Exploring action Move B from table to C | New state -> Stack 1: [A, E], Stack 2: [C, B], Stack 3: [D] | Taking action Move C from table to E | Moved to state -> Stack 1: [A, E, C], Stack 2: [B], Stack 3: [D] | Plan so far [Move B from A to table | Move A from D to table | Move D from C to table | Move C from E to table | Move E from table to A | Move C from table to E] | Exploring action Move B from table to C | New state -> Stack 1: [A, E, C, B], Stack 2: [D] | Exploring action Move C from E to table | New state -> Stack 1: [A, E], Stack 2: [B], Stack 3: [C], Stack 4: [D] | Exploring action Move D from table to B | New state -> Stack 1: [A, E, C], Stack 2: [B, D] | Exploring action Move E from A to table | New state -> Invalid | Taking action Move B from table to C | Moved to state -> Stack 1: [A, E, C, B], Stack 2: [D] | Plan so far [Move B from A to table | Move A from D to table | Move D from C to table | Move C from E to table | Move E from table to A | Move C from table to E | Move B from table to C] | Reached goal state!",
        "system2_states_v1": 31
    },
    {
        "idx": 710,
        "start": [
            [
                "table",
                "B",
                "A",
                "F"
            ],
            [
                "table",
                "D",
                "C",
                "E"
            ]
        ],
        "goal": [
            [
                "table",
                "A",
                "D",
                "F",
                "C"
            ],
            [
                "table",
                "B",
                "E"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": false,
                "on": "B",
                "under": "F",
                "ontable": false
            },
            "B": {
                "clear": false,
                "on": -1,
                "under": "A",
                "ontable": true
            },
            "C": {
                "clear": false,
                "on": "D",
                "under": "E",
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": -1,
                "under": "C",
                "ontable": true
            },
            "E": {
                "clear": true,
                "on": "C",
                "under": -1,
                "ontable": false
            },
            "F": {
                "clear": true,
                "on": "A",
                "under": -1,
                "ontable": false
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": false,
                "on": -1,
                "under": "D",
                "ontable": true
            },
            "B": {
                "clear": false,
                "on": -1,
                "under": "E",
                "ontable": true
            },
            "C": {
                "clear": true,
                "on": "F",
                "under": -1,
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": "A",
                "under": "F",
                "ontable": false
            },
            "E": {
                "clear": true,
                "on": "B",
                "under": -1,
                "ontable": false
            },
            "F": {
                "clear": false,
                "on": "D",
                "under": "C",
                "ontable": false
            }
        },
        "plan_len": 8,
        "num_blocks": 6,
        "prompt": "The initial state:\nThe hand is empty.\nB is on the table. A is on B. F is on A. F is clear.\nD is on the table. C is on D. E is on C. E is clear.\n\nThe goal is:\nA is on the table. D is on A. F is on D. C is on F. C is clear.\nB is on the table. E is on B. E is clear.\n",
        "system1_plan": "Move F from A to table | Move E from C to table | Move A from B to table | Move E from table to B | Move C from D to table | Move D from table to A | Move F from table to D | Move C from table to F",
        "system1_states": 8,
        "system2_plan_v1": "Moved to state -> Stack 1: [B, A, F], Stack 2: [D, C, E] | Plan so far [] | Exploring action Move F from A to table | New state -> Stack 1: [B, A], Stack 2: [D, C, E], Stack 3: [F] | Exploring action Move E from C to F | New state -> Stack 1: [B, A, F, E], Stack 2: [D, C] | Exploring action Move A from B to F | New state -> Invalid | Exploring action Move E from C to table | New state -> Stack 1: [B, A, F], Stack 2: [D, C], Stack 3: [E] | Taking action Move E from C to table | Moved to state -> Stack 1: [B, A, F], Stack 2: [D, C], Stack 3: [E] | Plan so far [Move E from C to table] | Exploring action Move C from D to F | New state -> Stack 1: [B, A, F, C], Stack 2: [D], Stack 3: [E] | Exploring action Move C from D to table | New state -> Stack 1: [B, A, F], Stack 2: [C], Stack 3: [D], Stack 4: [E] | Exploring action Move F from A to table | New state -> Stack 1: [B, A], Stack 2: [D, C], Stack 3: [E], Stack 4: [F] | Exploring action Move A from B to E | New state -> Invalid | Taking action Move F from A to table | Moved to state -> Stack 1: [B, A], Stack 2: [D, C, E], Stack 3: [F] | Plan so far [Move F from A to table] | Exploring action Move B from table to A | New state -> Invalid | Exploring action Move A from B to F | New state -> Stack 1: [B], Stack 2: [D, C, E], Stack 3: [F, A] | Exploring action Move A from B to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, C, E], Stack 4: [F] | Exploring action Move E from C to table | New state -> Stack 1: [B, A], Stack 2: [D, C], Stack 3: [E], Stack 4: [F] | Taking action Move C from D to F | Moved to state -> Stack 1: [B, A, F, C], Stack 2: [D], Stack 3: [E] | Plan so far [Move E from C to table | Move C from D to F] | Exploring action Move C from F to table | New state -> Stack 1: [B, A, F], Stack 2: [C], Stack 3: [D], Stack 4: [E] | Exploring action Move B from table to C | New state -> Invalid | Exploring action Move C from F to E | New state -> Stack 1: [B, A, F], Stack 2: [D], Stack 3: [E, C] | Exploring action Move E from table to D | New state -> Stack 1: [B, A, F, C], Stack 2: [D, E] | Taking action Move E from C to table | Moved to state -> Stack 1: [B, A], Stack 2: [D, C], Stack 3: [E], Stack 4: [F] | Plan so far [Move F from A to table | Move E from C to table] | Exploring action Move B from table to C | New state -> Invalid | Exploring action Move A from B to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, C], Stack 4: [E], Stack 5: [F] | Exploring action Move C from D to F | New state -> Stack 1: [B, A], Stack 2: [D], Stack 3: [E], Stack 4: [F, C] | Exploring action Move C from D to table | New state -> Stack 1: [B, A], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Taking action Move C from D to table | Moved to state -> Stack 1: [B, A, F], Stack 2: [C], Stack 3: [D], Stack 4: [E] | Plan so far [Move E from C to table | Move C from D to table] | Exploring action Move F from A to E | New state -> Stack 1: [B, A], Stack 2: [C], Stack 3: [D], Stack 4: [E, F] | Exploring action Move F from A to table | New state -> Stack 1: [B, A], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Exploring action Move F from A to D | New state -> Stack 1: [B, A], Stack 2: [C], Stack 3: [D, F], Stack 4: [E] | Exploring action Move B from table to F | New state -> Invalid | Taking action Move A from B to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, C], Stack 4: [E], Stack 5: [F] | Plan so far [Move F from A to table | Move E from C to table | Move A from B to table] | Exploring action Move C from D to F | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D], Stack 4: [E], Stack 5: [F, C] | Exploring action Move E from table to B | New state -> Stack 1: [A], Stack 2: [B, E], Stack 3: [D, C], Stack 4: [F] | Exploring action Move D from table to C | New state -> Invalid | Exploring action Move C from D to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Exploring action Move D from table to A | New state -> Invalid | Taking action Move E from table to B | Moved to state -> Stack 1: [A], Stack 2: [B, E], Stack 3: [D, C], Stack 4: [F] | Plan so far [Move F from A to table | Move E from C to table | Move A from B to table | Move E from table to B] | Exploring action Move C from D to F | New state -> Stack 1: [A], Stack 2: [B, E], Stack 3: [D], Stack 4: [F, C] | Exploring action Move C from D to A | New state -> Stack 1: [A, C], Stack 2: [B, E], Stack 3: [D], Stack 4: [F] | Exploring action Move C from D to table | New state -> Stack 1: [A], Stack 2: [B, E], Stack 3: [C], Stack 4: [D], Stack 5: [F] | Exploring action Move D from table to E | New state -> Invalid | Taking action Move C from D to table | Moved to state -> Stack 1: [A], Stack 2: [B, E], Stack 3: [C], Stack 4: [D], Stack 5: [F] | Plan so far [Move F from A to table | Move E from C to table | Move A from B to table | Move E from table to B | Move C from D to table] | Exploring action Move B from table to F | New state -> Invalid | Exploring action Move B from table to D | New state -> Invalid | Exploring action Move C from table to D | New state -> Stack 1: [A], Stack 2: [B, E], Stack 3: [D, C], Stack 4: [F] | Exploring action Move D from table to A | New state -> Stack 1: [A, D], Stack 2: [B, E], Stack 3: [C], Stack 4: [F] | Exploring action Move C from table to F | New state -> Stack 1: [A], Stack 2: [B, E], Stack 3: [D], Stack 4: [F, C] | Taking action Move C from D to F | Moved to state -> Stack 1: [A], Stack 2: [B, E], Stack 3: [D], Stack 4: [F, C] | Plan so far [Move F from A to table | Move E from C to table | Move A from B to table | Move E from table to B | Move C from D to F] | Exploring action Move C from F to table | New state -> Stack 1: [A], Stack 2: [B, E], Stack 3: [C], Stack 4: [D], Stack 5: [F] | Exploring action Move C from F to D | New state -> Stack 1: [A], Stack 2: [B, E], Stack 3: [D, C], Stack 4: [F] | Exploring action Move B from table to D | New state -> Invalid | Exploring action Move D from table to A | New state -> Stack 1: [A, D], Stack 2: [B, E], Stack 3: [F, C] | Taking action Move D from table to A | Moved to state -> Stack 1: [A, D], Stack 2: [B, E], Stack 3: [C], Stack 4: [F] | Plan so far [Move F from A to table | Move E from C to table | Move A from B to table | Move E from table to B | Move C from D to table | Move D from table to A] | Exploring action Move F from table to D | New state -> Stack 1: [A, D, F], Stack 2: [B, E], Stack 3: [C] | Exploring action Move B from table to C | New state -> Invalid | Exploring action Move C from table to F | New state -> Stack 1: [A, D], Stack 2: [B, E], Stack 3: [F, C] | Exploring action Move C from table to D | New state -> Stack 1: [A, D, C], Stack 2: [B, E], Stack 3: [F] | Taking action Move D from table to A | Moved to state -> Stack 1: [A, D], Stack 2: [B, E], Stack 3: [F, C] | Plan so far [Move F from A to table | Move E from C to table | Move A from B to table | Move E from table to B | Move C from D to F | Move D from table to A] | Exploring action Move C from F to table | New state -> Stack 1: [A, D], Stack 2: [B, E], Stack 3: [C], Stack 4: [F] | Exploring action Move C from F to D | New state -> Stack 1: [A, D, C], Stack 2: [B, E], Stack 3: [F] | Exploring action Move D from A to table | New state -> Stack 1: [A], Stack 2: [B, E], Stack 3: [D], Stack 4: [F, C] | Exploring action Move A from table to D | New state -> Invalid | Exploring action Move A from table to E | New state -> Invalid | Taking action Move F from table to D | Moved to state -> Stack 1: [A, D, F], Stack 2: [B, E], Stack 3: [C] | Plan so far [Move F from A to table | Move E from C to table | Move A from B to table | Move E from table to B | Move C from D to table | Move D from table to A | Move F from table to D] | Exploring action Move F from D to C | New state -> Stack 1: [A, D], Stack 2: [B, E], Stack 3: [C, F] | Exploring action Move F from D to table | New state -> Stack 1: [A, D], Stack 2: [B, E], Stack 3: [C], Stack 4: [F] | Exploring action Move A from table to F | New state -> Invalid | Exploring action Move A from table to C | New state -> Invalid | Exploring action Move C from table to F | New state -> Stack 1: [A, D, F, C], Stack 2: [B, E] | Taking action Move C from table to F | Moved to state -> Stack 1: [A, D, F, C], Stack 2: [B, E] | Plan so far [Move F from A to table | Move E from C to table | Move A from B to table | Move E from table to B | Move C from D to table | Move D from table to A | Move F from table to D | Move C from table to F] | Reached goal state!",
        "system2_states_v1": 56
    },
    {
        "idx": 609,
        "start": [
            [
                "table",
                "B",
                "D",
                "A",
                "C",
                "E"
            ]
        ],
        "goal": [
            [
                "table",
                "B",
                "A",
                "E",
                "D"
            ],
            [
                "table",
                "C"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": false,
                "on": "D",
                "under": "C",
                "ontable": false
            },
            "B": {
                "clear": false,
                "on": -1,
                "under": "D",
                "ontable": true
            },
            "C": {
                "clear": false,
                "on": "A",
                "under": "E",
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": "B",
                "under": "A",
                "ontable": false
            },
            "E": {
                "clear": true,
                "on": "C",
                "under": -1,
                "ontable": false
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": false,
                "on": "B",
                "under": "E",
                "ontable": false
            },
            "B": {
                "clear": false,
                "on": -1,
                "under": "A",
                "ontable": true
            },
            "C": {
                "clear": true,
                "on": -1,
                "under": -1,
                "ontable": true
            },
            "D": {
                "clear": true,
                "on": "E",
                "under": -1,
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": "A",
                "under": "D",
                "ontable": false
            }
        },
        "plan_len": 7,
        "num_blocks": 5,
        "prompt": "The initial state:\nThe hand is empty.\nB is on the table. D is on B. A is on D. C is on A. E is on C. E is clear.\n\nThe goal is:\nB is on the table. A is on B. E is on A. D is on E. D is clear.\nC is on the table. C is clear.\n",
        "system1_plan": "Move E from C to table | Move C from A to table | Move A from D to table | Move D from B to table | Move A from table to B | Move E from table to A | Move D from table to E",
        "system1_states": 7,
        "system2_plan_v1": "Moved to state -> Stack 1: [B, D, A, C, E] | Plan so far [] | Exploring action Move D from B to E | New state -> Invalid | Exploring action Move E from C to table | New state -> Stack 1: [B, D, A, C], Stack 2: [E] | Exploring action Move C from A to E | New state -> Invalid | Taking action Move E from C to table | Moved to state -> Stack 1: [B, D, A, C], Stack 2: [E] | Plan so far [Move E from C to table] | Exploring action Move A from D to table | New state -> Invalid | Exploring action Move C from A to E | New state -> Stack 1: [B, D, A], Stack 2: [E, C] | Exploring action Move E from table to C | New state -> Stack 1: [B, D, A, C, E] | Exploring action Move C from A to table | New state -> Stack 1: [B, D, A], Stack 2: [C], Stack 3: [E] | Taking action Move C from A to table | Moved to state -> Stack 1: [B, D, A], Stack 2: [C], Stack 3: [E] | Plan so far [Move E from C to table | Move C from A to table] | Exploring action Move E from table to A | New state -> Stack 1: [B, D, A, E], Stack 2: [C] | Exploring action Move A from D to table | New state -> Stack 1: [A], Stack 2: [B, D], Stack 3: [C], Stack 4: [E] | Exploring action Move D from B to A | New state -> Invalid | Exploring action Move A from D to E | New state -> Stack 1: [B, D], Stack 2: [C], Stack 3: [E, A] | Taking action Move A from D to table | Moved to state -> Stack 1: [A], Stack 2: [B, D], Stack 3: [C], Stack 4: [E] | Plan so far [Move E from C to table | Move C from A to table | Move A from D to table] | Exploring action Move D from B to E | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [E, D] | Exploring action Move D from B to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Exploring action Move D from B to A | New state -> Stack 1: [A, D], Stack 2: [B], Stack 3: [C], Stack 4: [E] | Exploring action Move B from table to D | New state -> Invalid | Exploring action Move B from table to C | New state -> Invalid | Taking action Move D from B to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Plan so far [Move E from C to table | Move C from A to table | Move A from D to table | Move D from B to table] | Exploring action Move A from table to B | New state -> Stack 1: [B, A], Stack 2: [C], Stack 3: [D], Stack 4: [E] | Exploring action Move D from table to E | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [E, D] | Exploring action Move A from table to D | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, A], Stack 4: [E] | Taking action Move D from B to E | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [E, D] | Plan so far [Move E from C to table | Move C from A to table | Move A from D to table | Move D from B to E] | Exploring action Move A from table to B | New state -> Stack 1: [B, A], Stack 2: [C], Stack 3: [E, D] | Exploring action Move E from table to D | New state -> Invalid | Exploring action Move D from E to B | New state -> Stack 1: [A], Stack 2: [B, D], Stack 3: [C], Stack 4: [E] | Exploring action Move D from E to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Taking action Move A from table to B | Moved to state -> Stack 1: [B, A], Stack 2: [C], Stack 3: [D], Stack 4: [E] | Plan so far [Move E from C to table | Move C from A to table | Move A from D to table | Move D from B to table | Move A from table to B] | Exploring action Move B from table to E | New state -> Invalid | Exploring action Move B from table to C | New state -> Invalid | Exploring action Move E from table to A | New state -> Stack 1: [B, A, E], Stack 2: [C], Stack 3: [D] | Exploring action Move D from table to E | New state -> Stack 1: [B, A], Stack 2: [C], Stack 3: [E, D] | Exploring action Move E from table to D | New state -> Stack 1: [B, A], Stack 2: [C], Stack 3: [D, E] | Taking action Move A from table to B | Moved to state -> Stack 1: [B, A], Stack 2: [C], Stack 3: [E, D] | Plan so far [Move E from C to table | Move C from A to table | Move A from D to table | Move D from B to E | Move A from table to B] | Exploring action Move A from B to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [E, D] | Exploring action Move B from table to C | New state -> Invalid | Exploring action Move D from E to A | New state -> Stack 1: [B, A, D], Stack 2: [C], Stack 3: [E] | Exploring action Move D from E to table | New state -> Stack 1: [B, A], Stack 2: [C], Stack 3: [D], Stack 4: [E] | Taking action Move E from table to A | Moved to state -> Stack 1: [B, A, E], Stack 2: [C], Stack 3: [D] | Plan so far [Move E from C to table | Move C from A to table | Move A from D to table | Move D from B to table | Move A from table to B | Move E from table to A] | Exploring action Move D from table to C | New state -> Stack 1: [B, A, E], Stack 2: [C, D] | Exploring action Move D from table to E | New state -> Stack 1: [B, A, E, D], Stack 2: [C] | Exploring action Move A from B to E | New state -> Invalid | Exploring action Move E from A to table | New state -> Stack 1: [B, A], Stack 2: [C], Stack 3: [D], Stack 4: [E] | Exploring action Move B from table to E | New state -> Invalid | Taking action Move D from table to E | Moved to state -> Stack 1: [B, A, E, D], Stack 2: [C] | Plan so far [Move E from C to table | Move C from A to table | Move A from D to table | Move D from B to table | Move A from table to B | Move E from table to A | Move D from table to E] | Reached goal state!",
        "system2_states_v1": 37
    },
    {
        "idx": 708,
        "start": [
            [
                "table",
                "B",
                "F",
                "C"
            ],
            [
                "table",
                "E",
                "A",
                "D"
            ]
        ],
        "goal": [
            [
                "table",
                "A",
                "D",
                "E"
            ],
            [
                "table",
                "B",
                "C",
                "F"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": false,
                "on": "E",
                "under": "D",
                "ontable": false
            },
            "B": {
                "clear": false,
                "on": -1,
                "under": "F",
                "ontable": true
            },
            "C": {
                "clear": true,
                "on": "F",
                "under": -1,
                "ontable": false
            },
            "D": {
                "clear": true,
                "on": "A",
                "under": -1,
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": -1,
                "under": "A",
                "ontable": true
            },
            "F": {
                "clear": false,
                "on": "B",
                "under": "C",
                "ontable": false
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": false,
                "on": -1,
                "under": "D",
                "ontable": true
            },
            "B": {
                "clear": false,
                "on": -1,
                "under": "C",
                "ontable": true
            },
            "C": {
                "clear": false,
                "on": "B",
                "under": "F",
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": "A",
                "under": "E",
                "ontable": false
            },
            "E": {
                "clear": true,
                "on": "D",
                "under": -1,
                "ontable": false
            },
            "F": {
                "clear": true,
                "on": "C",
                "under": -1,
                "ontable": false
            }
        },
        "plan_len": 8,
        "num_blocks": 6,
        "prompt": "The initial state:\nThe hand is empty.\nB is on the table. F is on B. C is on F. C is clear.\nE is on the table. A is on E. D is on A. D is clear.\n\nThe goal is:\nA is on the table. D is on A. E is on D. E is clear.\nB is on the table. C is on B. F is on C. F is clear.\n",
        "system1_plan": "Move C from F to table | Move F from B to table | Move C from table to B | Move F from table to C | Move D from A to table | Move A from E to table | Move D from table to A | Move E from table to D",
        "system1_states": 8,
        "system2_plan_v1": "Moved to state -> Stack 1: [B, F, C], Stack 2: [E, A, D] | Plan so far [] | Exploring action Move A from E to C | New state -> Invalid | Exploring action Move C from F to D | New state -> Stack 1: [B, F], Stack 2: [E, A, D, C] | Exploring action Move C from F to table | New state -> Stack 1: [B, F], Stack 2: [C], Stack 3: [E, A, D] | Exploring action Move D from A to table | New state -> Stack 1: [B, F, C], Stack 2: [D], Stack 3: [E, A] | Exploring action Move E from table to D | New state -> Invalid | Taking action Move C from F to table | Moved to state -> Stack 1: [B, F], Stack 2: [C], Stack 3: [E, A, D] | Plan so far [Move C from F to table] | Exploring action Move B from table to F | New state -> Invalid | Exploring action Move A from E to C | New state -> Invalid | Exploring action Move F from B to table | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [E, A, D], Stack 4: [F] | Exploring action Move D from A to table | New state -> Stack 1: [B, F], Stack 2: [C], Stack 3: [D], Stack 4: [E, A] | Exploring action Move F from B to C | New state -> Stack 1: [B], Stack 2: [C, F], Stack 3: [E, A, D] | Taking action Move D from A to table | Moved to state -> Stack 1: [B, F, C], Stack 2: [D], Stack 3: [E, A] | Plan so far [Move D from A to table] | Exploring action Move C from F to table | New state -> Stack 1: [B, F], Stack 2: [C], Stack 3: [D], Stack 4: [E, A] | Exploring action Move A from E to table | New state -> Stack 1: [A], Stack 2: [B, F, C], Stack 3: [D], Stack 4: [E] | Exploring action Move E from table to D | New state -> Invalid | Exploring action Move A from E to D | New state -> Stack 1: [B, F, C], Stack 2: [D, A], Stack 3: [E] | Taking action Move D from A to table | Moved to state -> Stack 1: [B, F], Stack 2: [C], Stack 3: [D], Stack 4: [E, A] | Plan so far [Move C from F to table | Move D from A to table] | Exploring action Move E from table to A | New state -> Invalid | Exploring action Move F from B to C | New state -> Stack 1: [B], Stack 2: [C, F], Stack 3: [D], Stack 4: [E, A] | Exploring action Move A from E to table | New state -> Stack 1: [A], Stack 2: [B, F], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Exploring action Move F from B to table | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D], Stack 4: [E, A], Stack 5: [F] | Taking action Move C from F to table | Moved to state -> Stack 1: [B, F], Stack 2: [C], Stack 3: [D], Stack 4: [E, A] | Plan so far [Move D from A to table | Move C from F to table] | Taking action Move F from B to table | Moved to state -> Stack 1: [B], Stack 2: [C], Stack 3: [D], Stack 4: [E, A], Stack 5: [F] | Plan so far [Move C from F to table | Move D from A to table | Move F from B to table] | Exploring action Move E from table to F | New state -> Invalid | Exploring action Move C from table to B | New state -> Stack 1: [B, C], Stack 2: [D], Stack 3: [E, A], Stack 4: [F] | Exploring action Move A from E to C | New state -> Stack 1: [B], Stack 2: [C, A], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Exploring action Move E from table to D | New state -> Invalid | Exploring action Move A from E to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Taking action Move F from B to C | Moved to state -> Stack 1: [B], Stack 2: [C, F], Stack 3: [D], Stack 4: [E, A] | Plan so far [Move C from F to table | Move D from A to table | Move F from B to C] | Exploring action Move A from E to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, F], Stack 4: [D], Stack 5: [E] | Exploring action Move A from E to D | New state -> Stack 1: [B], Stack 2: [C, F], Stack 3: [D, A], Stack 4: [E] | Exploring action Move C from table to D | New state -> Invalid | Exploring action Move A from E to B | New state -> Stack 1: [B, A], Stack 2: [C, F], Stack 3: [D], Stack 4: [E] | Exploring action Move E from table to A | New state -> Invalid | Taking action Move A from E to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Plan so far [Move C from F to table | Move D from A to table | Move F from B to table | Move A from E to table] | Exploring action Move C from table to B | New state -> Stack 1: [A], Stack 2: [B, C], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Exploring action Move E from table to D | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D, E], Stack 5: [F] | Exploring action Move D from table to A | New state -> Stack 1: [A, D], Stack 2: [B], Stack 3: [C], Stack 4: [E], Stack 5: [F] | Taking action Move A from E to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, F], Stack 4: [D], Stack 5: [E] | Plan so far [Move C from F to table | Move D from A to table | Move F from B to C | Move A from E to table] | Exploring action Move F from C to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Exploring action Move C from table to E | New state -> Invalid | Exploring action Move D from table to A | New state -> Stack 1: [A, D], Stack 2: [B], Stack 3: [C, F], Stack 4: [E] | Exploring action Move C from table to F | New state -> Invalid | Exploring action Move E from table to D | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, F], Stack 4: [D, E] | Taking action Move F from B to table | Moved to state -> Stack 1: [B], Stack 2: [C], Stack 3: [E, A, D], Stack 4: [F] | Plan so far [Move C from F to table | Move F from B to table] | Exploring action Move C from table to B | New state -> Stack 1: [B, C], Stack 2: [E, A, D], Stack 3: [F] | Exploring action Move D from A to table | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D], Stack 4: [E, A], Stack 5: [F] | Exploring action Move F from table to C | New state -> Stack 1: [B], Stack 2: [C, F], Stack 3: [E, A, D] | Exploring action Move A from E to C | New state -> Invalid | Exploring action Move E from table to D | New state -> Invalid | Taking action Move D from table to A | Moved to state -> Stack 1: [A, D], Stack 2: [B], Stack 3: [C, F], Stack 4: [E] | Plan so far [Move C from F to table | Move D from A to table | Move F from B to C | Move A from E to table | Move D from table to A] | Exploring action Move C from table to F | New state -> Invalid | Exploring action Move E from table to D | New state -> Stack 1: [A, D, E], Stack 2: [B], Stack 3: [C, F] | Exploring action Move A from table to E | New state -> Invalid | Exploring action Move F from C to table | New state -> Stack 1: [A, D], Stack 2: [B], Stack 3: [C], Stack 4: [E], Stack 5: [F] | Exploring action Move F from C to B | New state -> Stack 1: [A, D], Stack 2: [B, F], Stack 3: [C], Stack 4: [E] | Taking action Move E from table to D | Moved to state -> Stack 1: [A, D, E], Stack 2: [B], Stack 3: [C, F] | Plan so far [Move C from F to table | Move D from A to table | Move F from B to C | Move A from E to table | Move D from table to A | Move E from table to D] | Exploring action Move D from A to E | New state -> Invalid | Exploring action Move F from C to B | New state -> Stack 1: [A, D, E], Stack 2: [B, F], Stack 3: [C] | Exploring action Move B from table to E | New state -> Stack 1: [A, D, E, B], Stack 2: [C, F] | Exploring action Move F from C to table | New state -> Stack 1: [A, D, E], Stack 2: [B], Stack 3: [C], Stack 4: [F] | Taking action Move D from A to table | Moved to state -> Stack 1: [B], Stack 2: [C], Stack 3: [D], Stack 4: [E, A], Stack 5: [F] | Plan so far [Move C from F to table | Move F from B to table | Move D from A to table] | Taking action Move C from table to B | Moved to state -> Stack 1: [B, C], Stack 2: [E, A, D], Stack 3: [F] | Plan so far [Move C from F to table | Move F from B to table | Move C from table to B] | Exploring action Move F from table to C | New state -> Stack 1: [B, C, F], Stack 2: [E, A, D] | Exploring action Move D from A to table | New state -> Stack 1: [B, C], Stack 2: [D], Stack 3: [E, A], Stack 4: [F] | Exploring action Move D from A to F | New state -> Stack 1: [B, C], Stack 2: [E, A], Stack 3: [F, D] | Exploring action Move B from table to C | New state -> Invalid | Taking action Move F from table to C | Moved to state -> Stack 1: [B, C, F], Stack 2: [E, A, D] | Plan so far [Move C from F to table | Move F from B to table | Move C from table to B | Move F from table to C] | Exploring action Move D from A to F | New state -> Stack 1: [B, C, F, D], Stack 2: [E, A] | Exploring action Move A from E to D | New state -> Invalid | Exploring action Move D from A to table | New state -> Stack 1: [B, C, F], Stack 2: [D], Stack 3: [E, A] | Exploring action Move F from C to table | New state -> Stack 1: [B, C], Stack 2: [E, A, D], Stack 3: [F] | Taking action Move D from A to table | Moved to state -> Stack 1: [B, C, F], Stack 2: [D], Stack 3: [E, A] | Plan so far [Move C from F to table | Move F from B to table | Move C from table to B | Move F from table to C | Move D from A to table] | Exploring action Move A from E to table | New state -> Stack 1: [A], Stack 2: [B, C, F], Stack 3: [D], Stack 4: [E] | Exploring action Move B from table to D | New state -> Invalid | Exploring action Move A from E to F | New state -> Stack 1: [B, C, F, A], Stack 2: [D], Stack 3: [E] | Exploring action Move A from E to D | New state -> Stack 1: [B, C, F], Stack 2: [D, A], Stack 3: [E] | Exploring action Move B from table to A | New state -> Invalid | Taking action Move A from E to table | Moved to state -> Stack 1: [A], Stack 2: [B, C, F], Stack 3: [D], Stack 4: [E] | Plan so far [Move C from F to table | Move F from B to table | Move C from table to B | Move F from table to C | Move D from A to table | Move A from E to table] | Exploring action Move E from table to A | New state -> Stack 1: [A, E], Stack 2: [B, C, F], Stack 3: [D] | Exploring action Move E from table to D | New state -> Stack 1: [A], Stack 2: [B, C, F], Stack 3: [D, E] | Exploring action Move C from B to F | New state -> Invalid | Exploring action Move D from table to A | New state -> Stack 1: [A, D], Stack 2: [B, C, F], Stack 3: [E] | Taking action Move D from table to A | Moved to state -> Stack 1: [A, D], Stack 2: [B, C, F], Stack 3: [E] | Plan so far [Move C from F to table | Move F from B to table | Move C from table to B | Move F from table to C | Move D from A to table | Move A from E to table | Move D from table to A] | Exploring action Move C from B to E | New state -> Invalid | Exploring action Move E from table to D | New state -> Stack 1: [A, D, E], Stack 2: [B, C, F] | Exploring action Move D from A to table | New state -> Stack 1: [A], Stack 2: [B, C, F], Stack 3: [D], Stack 4: [E] | Exploring action Move F from C to table | New state -> Stack 1: [A, D], Stack 2: [B, C], Stack 3: [E], Stack 4: [F] | Taking action Move E from table to D | Moved to state -> Stack 1: [A, D, E], Stack 2: [B, C, F] | Plan so far [Move C from F to table | Move F from B to table | Move C from table to B | Move F from table to C | Move D from A to table | Move A from E to table | Move D from table to A | Move E from table to D] | Reached goal state!",
        "system2_states_v1": 71
    },
    {
        "idx": 899,
        "start": [
            [
                "table",
                "C",
                "B",
                "G",
                "A",
                "E",
                "F",
                "D"
            ]
        ],
        "goal": [
            [
                "table",
                "E",
                "C"
            ],
            [
                "table",
                "G",
                "B",
                "A",
                "D",
                "F"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": false,
                "on": "G",
                "under": "E",
                "ontable": false
            },
            "B": {
                "clear": false,
                "on": "C",
                "under": "G",
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": -1,
                "under": "B",
                "ontable": true
            },
            "D": {
                "clear": true,
                "on": "F",
                "under": -1,
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": "A",
                "under": "F",
                "ontable": false
            },
            "F": {
                "clear": false,
                "on": "E",
                "under": "D",
                "ontable": false
            },
            "G": {
                "clear": false,
                "on": "B",
                "under": "A",
                "ontable": false
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": false,
                "on": "B",
                "under": "D",
                "ontable": false
            },
            "B": {
                "clear": false,
                "on": "G",
                "under": "A",
                "ontable": false
            },
            "C": {
                "clear": true,
                "on": "E",
                "under": -1,
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": "A",
                "under": "F",
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": -1,
                "under": "C",
                "ontable": true
            },
            "F": {
                "clear": true,
                "on": "D",
                "under": -1,
                "ontable": false
            },
            "G": {
                "clear": false,
                "on": -1,
                "under": "B",
                "ontable": true
            }
        },
        "plan_len": 10,
        "num_blocks": 7,
        "prompt": "The initial state:\nThe hand is empty.\nC is on the table. B is on C. G is on B. A is on G. E is on A. F is on E. D is on F. D is clear.\n\nThe goal is:\nE is on the table. C is on E. C is clear.\nG is on the table. B is on G. A is on B. D is on A. F is on D. F is clear.\n",
        "system1_plan": "Move D from F to table | Move F from E to table | Move E from A to table | Move A from G to table | Move G from B to table | Move B from C to G | Move C from table to E | Move A from table to B | Move D from table to A | Move F from table to D",
        "system1_states": 10,
        "system2_plan_v1": "Moved to state -> Stack 1: [C, B, G, A, E, F, D] | Plan so far [] | Exploring action Move D from F to table | New state -> Stack 1: [C, B, G, A, E, F], Stack 2: [D] | Exploring action Move C from table to D | New state -> Invalid | Taking action Move D from F to table | Moved to state -> Stack 1: [C, B, G, A, E, F], Stack 2: [D] | Plan so far [Move D from F to table] | Exploring action Move D from table to F | New state -> Stack 1: [C, B, G, A, E, F, D] | Exploring action Move F from E to D | New state -> Stack 1: [C, B, G, A, E], Stack 2: [D, F] | Exploring action Move F from E to table | New state -> Stack 1: [C, B, G, A, E], Stack 2: [D], Stack 3: [F] | Exploring action Move B from C to D | New state -> Invalid | Taking action Move F from E to table | Moved to state -> Stack 1: [C, B, G, A, E], Stack 2: [D], Stack 3: [F] | Plan so far [Move D from F to table | Move F from E to table] | Exploring action Move E from A to D | New state -> Stack 1: [C, B, G, A], Stack 2: [D, E], Stack 3: [F] | Exploring action Move F from table to D | New state -> Stack 1: [C, B, G, A, E], Stack 2: [D, F] | Exploring action Move G from B to D | New state -> Invalid | Exploring action Move E from A to table | New state -> Stack 1: [C, B, G, A], Stack 2: [D], Stack 3: [E], Stack 4: [F] | Taking action Move F from E to D | Moved to state -> Stack 1: [C, B, G, A, E], Stack 2: [D, F] | Plan so far [Move D from F to table | Move F from E to D] | Exploring action Move E from A to F | New state -> Stack 1: [C, B, G, A], Stack 2: [D, F, E] | Exploring action Move B from C to table | New state -> Invalid | Exploring action Move A from G to table | New state -> Invalid | Exploring action Move F from D to table | New state -> Stack 1: [C, B, G, A, E], Stack 2: [D], Stack 3: [F] | Exploring action Move E from A to table | New state -> Stack 1: [C, B, G, A], Stack 2: [D, F], Stack 3: [E] | Taking action Move E from A to table | Moved to state -> Stack 1: [C, B, G, A], Stack 2: [D], Stack 3: [E], Stack 4: [F] | Plan so far [Move D from F to table | Move F from E to table | Move E from A to table] | Exploring action Move A from G to table | New state -> Stack 1: [A], Stack 2: [C, B, G], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Exploring action Move A from G to E | New state -> Stack 1: [C, B, G], Stack 2: [D], Stack 3: [E, A], Stack 4: [F] | Exploring action Move B from C to A | New state -> Invalid | Exploring action Move C from table to D | New state -> Invalid | Exploring action Move F from table to D | New state -> Stack 1: [C, B, G, A], Stack 2: [D, F], Stack 3: [E] | Taking action Move E from A to table | Moved to state -> Stack 1: [C, B, G, A], Stack 2: [D, F], Stack 3: [E] | Plan so far [Move D from F to table | Move F from E to D | Move E from A to table] | Exploring action Move B from C to A | New state -> Invalid | Exploring action Move F from D to table | New state -> Stack 1: [C, B, G, A], Stack 2: [D], Stack 3: [E], Stack 4: [F] | Exploring action Move A from G to table | New state -> Stack 1: [A], Stack 2: [C, B, G], Stack 3: [D, F], Stack 4: [E] | Exploring action Move A from G to E | New state -> Stack 1: [C, B, G], Stack 2: [D, F], Stack 3: [E, A] | Taking action Move A from G to table | Moved to state -> Stack 1: [A], Stack 2: [C, B, G], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Plan so far [Move D from F to table | Move F from E to table | Move E from A to table | Move A from G to table] | Exploring action Move G from B to table | New state -> Stack 1: [A], Stack 2: [C, B], Stack 3: [D], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Exploring action Move G from B to E | New state -> Stack 1: [A], Stack 2: [C, B], Stack 3: [D], Stack 4: [E, G], Stack 5: [F] | Exploring action Move F from table to D | New state -> Stack 1: [A], Stack 2: [C, B, G], Stack 3: [D, F], Stack 4: [E] | Exploring action Move C from table to F | New state -> Invalid | Taking action Move A from G to table | Moved to state -> Stack 1: [A], Stack 2: [C, B, G], Stack 3: [D, F], Stack 4: [E] | Plan so far [Move D from F to table | Move F from E to D | Move E from A to table | Move A from G to table] | Exploring action Move G from B to A | New state -> Stack 1: [A, G], Stack 2: [C, B], Stack 3: [D, F], Stack 4: [E] | Exploring action Move G from B to table | New state -> Stack 1: [A], Stack 2: [C, B], Stack 3: [D, F], Stack 4: [E], Stack 5: [G] | Exploring action Move G from B to E | New state -> Stack 1: [A], Stack 2: [C, B], Stack 3: [D, F], Stack 4: [E, G] | Exploring action Move C from table to G | New state -> Invalid | Exploring action Move B from C to A | New state -> Invalid | Taking action Move G from B to table | Moved to state -> Stack 1: [A], Stack 2: [C, B], Stack 3: [D], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Plan so far [Move D from F to table | Move F from E to table | Move E from A to table | Move A from G to table | Move G from B to table] | Exploring action Move B from C to G | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [F], Stack 6: [G, B] | Exploring action Move C from table to A | New state -> Invalid | Exploring action Move B from C to A | New state -> Stack 1: [A, B], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Exploring action Move B from C to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F], Stack 7: [G] | Taking action Move B from C to G | Moved to state -> Stack 1: [A], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [F], Stack 6: [G, B] | Plan so far [Move D from F to table | Move F from E to table | Move E from A to table | Move A from G to table | Move G from B to table | Move B from C to G] | Exploring action Move C from table to E | New state -> Stack 1: [A], Stack 2: [D], Stack 3: [E, C], Stack 4: [F], Stack 5: [G, B] | Exploring action Move A from table to B | New state -> Stack 1: [C], Stack 2: [D], Stack 3: [E], Stack 4: [F], Stack 5: [G, B, A] | Exploring action Move F from table to D | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, F], Stack 4: [E], Stack 5: [G, B] | Exploring action Move G from table to D | New state -> Invalid | Exploring action Move G from table to B | New state -> Invalid | Taking action Move C from table to E | Moved to state -> Stack 1: [A], Stack 2: [D], Stack 3: [E, C], Stack 4: [F], Stack 5: [G, B] | Plan so far [Move D from F to table | Move F from E to table | Move E from A to table | Move A from G to table | Move G from B to table | Move B from C to G | Move C from table to E] | Exploring action Move G from table to A | New state -> Invalid | Exploring action Move A from table to B | New state -> Stack 1: [D], Stack 2: [E, C], Stack 3: [F], Stack 4: [G, B, A] | Exploring action Move E from table to A | New state -> Invalid | Exploring action Move F from table to D | New state -> Stack 1: [A], Stack 2: [D, F], Stack 3: [E, C], Stack 4: [G, B] | Exploring action Move A from table to D | New state -> Stack 1: [D, A], Stack 2: [E, C], Stack 3: [F], Stack 4: [G, B] | Taking action Move A from table to B | Moved to state -> Stack 1: [D], Stack 2: [E, C], Stack 3: [F], Stack 4: [G, B, A] | Plan so far [Move D from F to table | Move F from E to table | Move E from A to table | Move A from G to table | Move G from B to table | Move B from C to G | Move C from table to E | Move A from table to B] | Exploring action Move F from table to D | New state -> Stack 1: [D, F], Stack 2: [E, C], Stack 3: [G, B, A] | Exploring action Move F from table to A | New state -> Stack 1: [D], Stack 2: [E, C], Stack 3: [G, B, A, F] | Exploring action Move D from table to A | New state -> Stack 1: [E, C], Stack 2: [F], Stack 3: [G, B, A, D] | Exploring action Move B from G to C | New state -> Invalid | Taking action Move D from table to A | Moved to state -> Stack 1: [E, C], Stack 2: [F], Stack 3: [G, B, A, D] | Plan so far [Move D from F to table | Move F from E to table | Move E from A to table | Move A from G to table | Move G from B to table | Move B from C to G | Move C from table to E | Move A from table to B | Move D from table to A] | Exploring action Move B from G to F | New state -> Invalid | Exploring action Move F from table to D | New state -> Stack 1: [E, C], Stack 2: [G, B, A, D, F] | Exploring action Move B from G to C | New state -> Invalid | Exploring action Move D from A to F | New state -> Stack 1: [E, C], Stack 2: [F, D], Stack 3: [G, B, A] | Exploring action Move D from A to table | New state -> Stack 1: [D], Stack 2: [E, C], Stack 3: [F], Stack 4: [G, B, A] | Taking action Move F from table to D | Moved to state -> Stack 1: [E, C], Stack 2: [G, B, A, D, F] | Plan so far [Move D from F to table | Move F from E to table | Move E from A to table | Move A from G to table | Move G from B to table | Move B from C to G | Move C from table to E | Move A from table to B | Move D from table to A | Move F from table to D] | Reached goal state!",
        "system2_states_v1": 56
    },
    {
        "idx": 801,
        "start": [
            [
                "table",
                "D",
                "A",
                "C",
                "B",
                "E",
                "F"
            ]
        ],
        "goal": [
            [
                "table",
                "A",
                "D",
                "C",
                "E",
                "F"
            ],
            [
                "table",
                "B"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": false,
                "on": "D",
                "under": "C",
                "ontable": false
            },
            "B": {
                "clear": false,
                "on": "C",
                "under": "E",
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": "A",
                "under": "B",
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": -1,
                "under": "A",
                "ontable": true
            },
            "E": {
                "clear": false,
                "on": "B",
                "under": "F",
                "ontable": false
            },
            "F": {
                "clear": true,
                "on": "E",
                "under": -1,
                "ontable": false
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": false,
                "on": -1,
                "under": "D",
                "ontable": true
            },
            "B": {
                "clear": true,
                "on": -1,
                "under": -1,
                "ontable": true
            },
            "C": {
                "clear": false,
                "on": "D",
                "under": "E",
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": "A",
                "under": "C",
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": "C",
                "under": "F",
                "ontable": false
            },
            "F": {
                "clear": true,
                "on": "E",
                "under": -1,
                "ontable": false
            }
        },
        "plan_len": 9,
        "num_blocks": 6,
        "prompt": "The initial state:\nThe hand is empty.\nD is on the table. A is on D. C is on A. B is on C. E is on B. F is on E. F is clear.\n\nThe goal is:\nA is on the table. D is on A. C is on D. E is on C. F is on E. F is clear.\nB is on the table. B is clear.\n",
        "system1_plan": "Move F from E to table | Move E from B to table | Move B from C to table | Move C from A to table | Move A from D to table | Move D from table to A | Move C from table to D | Move E from table to C | Move F from table to E",
        "system1_states": 9,
        "system2_plan_v1": "Moved to state -> Stack 1: [D, A, C, B, E, F] | Plan so far [] | Exploring action Move E from B to F | New state -> Invalid | Exploring action Move F from E to table | New state -> Stack 1: [D, A, C, B, E], Stack 2: [F] | Taking action Move F from E to table | Moved to state -> Stack 1: [D, A, C, B, E], Stack 2: [F] | Plan so far [Move F from E to table] | Exploring action Move F from table to E | New state -> Stack 1: [D, A, C, B, E, F] | Exploring action Move E from B to table | New state -> Stack 1: [D, A, C, B], Stack 2: [E], Stack 3: [F] | Exploring action Move D from table to E | New state -> Invalid | Exploring action Move E from B to F | New state -> Stack 1: [D, A, C, B], Stack 2: [F, E] | Exploring action Move D from table to F | New state -> Invalid | Taking action Move E from B to table | Moved to state -> Stack 1: [D, A, C, B], Stack 2: [E], Stack 3: [F] | Plan so far [Move F from E to table | Move E from B to table] | Exploring action Move F from table to E | New state -> Stack 1: [D, A, C, B], Stack 2: [E, F] | Exploring action Move B from C to F | New state -> Stack 1: [D, A, C], Stack 2: [E], Stack 3: [F, B] | Exploring action Move C from A to table | New state -> Invalid | Exploring action Move D from table to B | New state -> Invalid | Exploring action Move B from C to table | New state -> Stack 1: [B], Stack 2: [D, A, C], Stack 3: [E], Stack 4: [F] | Taking action Move B from C to table | Moved to state -> Stack 1: [B], Stack 2: [D, A, C], Stack 3: [E], Stack 4: [F] | Plan so far [Move F from E to table | Move E from B to table | Move B from C to table] | Exploring action Move C from A to table | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, A], Stack 4: [E], Stack 5: [F] | Exploring action Move D from table to B | New state -> Invalid | Exploring action Move C from A to F | New state -> Stack 1: [B], Stack 2: [D, A], Stack 3: [E], Stack 4: [F, C] | Exploring action Move C from A to E | New state -> Stack 1: [B], Stack 2: [D, A], Stack 3: [E, C], Stack 4: [F] | Exploring action Move D from table to C | New state -> Invalid | Taking action Move C from A to table | Moved to state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, A], Stack 4: [E], Stack 5: [F] | Plan so far [Move F from E to table | Move E from B to table | Move B from C to table | Move C from A to table] | Exploring action Move D from table to E | New state -> Invalid | Exploring action Move A from D to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Exploring action Move D from table to A | New state -> Invalid | Exploring action Move A from D to C | New state -> Stack 1: [B], Stack 2: [C, A], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Exploring action Move A from D to E | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D], Stack 4: [E, A], Stack 5: [F] | Taking action Move A from D to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Plan so far [Move F from E to table | Move E from B to table | Move B from C to table | Move C from A to table | Move A from D to table] | Exploring action Move A from table to D | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, A], Stack 4: [E], Stack 5: [F] | Exploring action Move F from table to E | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E, F] | Exploring action Move D from table to A | New state -> Stack 1: [A, D], Stack 2: [B], Stack 3: [C], Stack 4: [E], Stack 5: [F] | Taking action Move D from table to A | Moved to state -> Stack 1: [A, D], Stack 2: [B], Stack 3: [C], Stack 4: [E], Stack 5: [F] | Plan so far [Move F from E to table | Move E from B to table | Move B from C to table | Move C from A to table | Move A from D to table | Move D from table to A] | Exploring action Move F from table to E | New state -> Stack 1: [A, D], Stack 2: [B], Stack 3: [C], Stack 4: [E, F] | Exploring action Move C from table to D | New state -> Stack 1: [A, D, C], Stack 2: [B], Stack 3: [E], Stack 4: [F] | Exploring action Move A from table to D | New state -> Invalid | Exploring action Move C from table to E | New state -> Stack 1: [A, D], Stack 2: [B], Stack 3: [E, C], Stack 4: [F] | Taking action Move C from table to D | Moved to state -> Stack 1: [A, D, C], Stack 2: [B], Stack 3: [E], Stack 4: [F] | Plan so far [Move F from E to table | Move E from B to table | Move B from C to table | Move C from A to table | Move A from D to table | Move D from table to A | Move C from table to D] | Exploring action Move E from table to C | New state -> Stack 1: [A, D, C, E], Stack 2: [B], Stack 3: [F] | Exploring action Move F from table to C | New state -> Stack 1: [A, D, C, F], Stack 2: [B], Stack 3: [E] | Exploring action Move D from A to F | New state -> Invalid | Exploring action Move F from table to E | New state -> Stack 1: [A, D, C], Stack 2: [B], Stack 3: [E, F] | Taking action Move E from table to C | Moved to state -> Stack 1: [A, D, C, E], Stack 2: [B], Stack 3: [F] | Plan so far [Move F from E to table | Move E from B to table | Move B from C to table | Move C from A to table | Move A from D to table | Move D from table to A | Move C from table to D | Move E from table to C] | Exploring action Move C from D to B | New state -> Invalid | Exploring action Move F from table to E | New state -> Stack 1: [A, D, C, E, F], Stack 2: [B] | Exploring action Move F from table to B | New state -> Stack 1: [A, D, C, E], Stack 2: [B, F] | Exploring action Move E from C to table | New state -> Stack 1: [A, D, C], Stack 2: [B], Stack 3: [E], Stack 4: [F] | Taking action Move F from table to E | Moved to state -> Stack 1: [A, D, C, E, F], Stack 2: [B] | Plan so far [Move F from E to table | Move E from B to table | Move B from C to table | Move C from A to table | Move A from D to table | Move D from table to A | Move C from table to D | Move E from table to C | Move F from table to E] | Reached goal state!",
        "system2_states_v1": 37
    },
    {
        "idx": 808,
        "start": [
            [
                "table",
                "C",
                "F",
                "B",
                "D",
                "E",
                "A"
            ]
        ],
        "goal": [
            [
                "table",
                "A"
            ],
            [
                "table",
                "F",
                "C",
                "E",
                "B",
                "D"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": true,
                "on": "E",
                "under": -1,
                "ontable": false
            },
            "B": {
                "clear": false,
                "on": "F",
                "under": "D",
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": -1,
                "under": "F",
                "ontable": true
            },
            "D": {
                "clear": false,
                "on": "B",
                "under": "E",
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": "D",
                "under": "A",
                "ontable": false
            },
            "F": {
                "clear": false,
                "on": "C",
                "under": "B",
                "ontable": false
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": true,
                "on": -1,
                "under": -1,
                "ontable": true
            },
            "B": {
                "clear": false,
                "on": "E",
                "under": "D",
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": "F",
                "under": "E",
                "ontable": false
            },
            "D": {
                "clear": true,
                "on": "B",
                "under": -1,
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": "C",
                "under": "B",
                "ontable": false
            },
            "F": {
                "clear": false,
                "on": -1,
                "under": "C",
                "ontable": true
            }
        },
        "plan_len": 9,
        "num_blocks": 6,
        "prompt": "The initial state:\nThe hand is empty.\nC is on the table. F is on C. B is on F. D is on B. E is on D. A is on E. A is clear.\n\nThe goal is:\nA is on the table. A is clear.\nF is on the table. C is on F. E is on C. B is on E. D is on B. D is clear.\n",
        "system1_plan": "Move A from E to table | Move E from D to table | Move D from B to table | Move B from F to table | Move F from C to table | Move C from table to F | Move E from table to C | Move B from table to E | Move D from table to B",
        "system1_states": 9,
        "system2_plan_v1": "Moved to state -> Stack 1: [C, F, B, D, E, A] | Plan so far [] | Exploring action Move B from F to A | New state -> Invalid | Exploring action Move A from E to table | New state -> Stack 1: [A], Stack 2: [C, F, B, D, E] | Taking action Move A from E to table | Moved to state -> Stack 1: [A], Stack 2: [C, F, B, D, E] | Plan so far [Move A from E to table] | Exploring action Move B from F to table | New state -> Invalid | Exploring action Move E from D to table | New state -> Stack 1: [A], Stack 2: [C, F, B, D], Stack 3: [E] | Exploring action Move A from table to E | New state -> Stack 1: [C, F, B, D, E, A] | Exploring action Move E from D to A | New state -> Stack 1: [A, E], Stack 2: [C, F, B, D] | Taking action Move E from D to table | Moved to state -> Stack 1: [A], Stack 2: [C, F, B, D], Stack 3: [E] | Plan so far [Move A from E to table | Move E from D to table] | Exploring action Move D from B to table | New state -> Stack 1: [A], Stack 2: [C, F, B], Stack 3: [D], Stack 4: [E] | Exploring action Move D from B to E | New state -> Stack 1: [A], Stack 2: [C, F, B], Stack 3: [E, D] | Exploring action Move C from table to E | New state -> Invalid | Exploring action Move C from table to D | New state -> Invalid | Exploring action Move A from table to E | New state -> Stack 1: [C, F, B, D], Stack 2: [E, A] | Taking action Move D from B to table | Moved to state -> Stack 1: [A], Stack 2: [C, F, B], Stack 3: [D], Stack 4: [E] | Plan so far [Move A from E to table | Move E from D to table | Move D from B to table] | Exploring action Move B from F to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, F], Stack 4: [D], Stack 5: [E] | Exploring action Move B from F to E | New state -> Stack 1: [A], Stack 2: [C, F], Stack 3: [D], Stack 4: [E, B] | Exploring action Move C from table to E | New state -> Invalid | Exploring action Move B from F to D | New state -> Stack 1: [A], Stack 2: [C, F], Stack 3: [D, B], Stack 4: [E] | Taking action Move B from F to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, F], Stack 4: [D], Stack 5: [E] | Plan so far [Move A from E to table | Move E from D to table | Move D from B to table | Move B from F to table] | Exploring action Move F from C to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Exploring action Move F from C to D | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D, F], Stack 5: [E] | Exploring action Move D from table to B | New state -> Stack 1: [A], Stack 2: [B, D], Stack 3: [C, F], Stack 4: [E] | Exploring action Move C from table to D | New state -> Invalid | Exploring action Move C from table to F | New state -> Invalid | Taking action Move F from C to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Plan so far [Move A from E to table | Move E from D to table | Move D from B to table | Move B from F to table | Move F from C to table] | Exploring action Move D from table to B | New state -> Stack 1: [A], Stack 2: [B, D], Stack 3: [C], Stack 4: [E], Stack 5: [F] | Exploring action Move C from table to F | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D], Stack 4: [E], Stack 5: [F, C] | Exploring action Move B from table to C | New state -> Stack 1: [A], Stack 2: [C, B], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Taking action Move C from table to F | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [D], Stack 4: [E], Stack 5: [F, C] | Plan so far [Move A from E to table | Move E from D to table | Move D from B to table | Move B from F to table | Move F from C to table | Move C from table to F] | Exploring action Move E from table to C | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D], Stack 4: [F, C, E] | Exploring action Move F from table to C | New state -> Invalid | Exploring action Move B from table to C | New state -> Stack 1: [A], Stack 2: [D], Stack 3: [E], Stack 4: [F, C, B] | Exploring action Move D from table to B | New state -> Stack 1: [A], Stack 2: [B, D], Stack 3: [E], Stack 4: [F, C] | Exploring action Move F from table to E | New state -> Invalid | Taking action Move E from table to C | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [D], Stack 4: [F, C, E] | Plan so far [Move A from E to table | Move E from D to table | Move D from B to table | Move B from F to table | Move F from C to table | Move C from table to F | Move E from table to C] | Exploring action Move F from table to D | New state -> Invalid | Exploring action Move B from table to D | New state -> Stack 1: [A], Stack 2: [D, B], Stack 3: [F, C, E] | Exploring action Move B from table to E | New state -> Stack 1: [A], Stack 2: [D], Stack 3: [F, C, E, B] | Exploring action Move C from F to D | New state -> Invalid | Exploring action Move D from table to B | New state -> Stack 1: [A], Stack 2: [B, D], Stack 3: [F, C, E] | Taking action Move B from table to E | Moved to state -> Stack 1: [A], Stack 2: [D], Stack 3: [F, C, E, B] | Plan so far [Move A from E to table | Move E from D to table | Move D from B to table | Move B from F to table | Move F from C to table | Move C from table to F | Move E from table to C | Move B from table to E] | Exploring action Move C from F to table | New state -> Invalid | Exploring action Move D from table to A | New state -> Stack 1: [A, D], Stack 2: [F, C, E, B] | Exploring action Move B from E to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D], Stack 4: [F, C, E] | Exploring action Move D from table to B | New state -> Stack 1: [A], Stack 2: [F, C, E, B, D] | Taking action Move D from table to B | Moved to state -> Stack 1: [A], Stack 2: [F, C, E, B, D] | Plan so far [Move A from E to table | Move E from D to table | Move D from B to table | Move B from F to table | Move F from C to table | Move C from table to F | Move E from table to C | Move B from table to E | Move D from table to B] | Reached goal state!",
        "system2_states_v1": 37
    },
    {
        "idx": 691,
        "start": [
            [
                "table",
                "C",
                "B",
                "E",
                "D",
                "A",
                "F"
            ]
        ],
        "goal": [
            [
                "table",
                "B"
            ],
            [
                "table",
                "C",
                "F",
                "A",
                "D"
            ],
            [
                "table",
                "E"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": false,
                "on": "D",
                "under": "F",
                "ontable": false
            },
            "B": {
                "clear": false,
                "on": "C",
                "under": "E",
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": -1,
                "under": "B",
                "ontable": true
            },
            "D": {
                "clear": false,
                "on": "E",
                "under": "A",
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": "B",
                "under": "D",
                "ontable": false
            },
            "F": {
                "clear": true,
                "on": "A",
                "under": -1,
                "ontable": false
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": false,
                "on": "F",
                "under": "D",
                "ontable": false
            },
            "B": {
                "clear": true,
                "on": -1,
                "under": -1,
                "ontable": true
            },
            "C": {
                "clear": false,
                "on": -1,
                "under": "F",
                "ontable": true
            },
            "D": {
                "clear": true,
                "on": "A",
                "under": -1,
                "ontable": false
            },
            "E": {
                "clear": true,
                "on": -1,
                "under": -1,
                "ontable": true
            },
            "F": {
                "clear": false,
                "on": "C",
                "under": "A",
                "ontable": false
            }
        },
        "plan_len": 8,
        "num_blocks": 6,
        "prompt": "The initial state:\nThe hand is empty.\nC is on the table. B is on C. E is on B. D is on E. A is on D. F is on A. F is clear.\n\nThe goal is:\nB is on the table. B is clear.\nC is on the table. F is on C. A is on F. D is on A. D is clear.\nE is on the table. E is clear.\n",
        "system1_plan": "Move F from A to table | Move A from D to table | Move D from E to table | Move E from B to table | Move B from C to table | Move F from table to C | Move A from table to F | Move D from table to A",
        "system1_states": 8,
        "system2_plan_v1": "Moved to state -> Stack 1: [C, B, E, D, A, F] | Plan so far [] | Exploring action Move E from B to F | New state -> Invalid | Exploring action Move F from A to table | New state -> Stack 1: [C, B, E, D, A], Stack 2: [F] | Taking action Move F from A to table | Moved to state -> Stack 1: [C, B, E, D, A], Stack 2: [F] | Plan so far [Move F from A to table] | Exploring action Move B from C to F | New state -> Invalid | Exploring action Move D from E to table | New state -> Invalid | Exploring action Move A from D to table | New state -> Stack 1: [A], Stack 2: [C, B, E, D], Stack 3: [F] | Exploring action Move F from table to A | New state -> Stack 1: [C, B, E, D, A, F] | Exploring action Move A from D to F | New state -> Stack 1: [C, B, E, D], Stack 2: [F, A] | Taking action Move A from D to table | Moved to state -> Stack 1: [A], Stack 2: [C, B, E, D], Stack 3: [F] | Plan so far [Move F from A to table | Move A from D to table] | Exploring action Move D from E to A | New state -> Stack 1: [A, D], Stack 2: [C, B, E], Stack 3: [F] | Exploring action Move D from E to table | New state -> Stack 1: [A], Stack 2: [C, B, E], Stack 3: [D], Stack 4: [F] | Exploring action Move B from C to A | New state -> Invalid | Exploring action Move D from E to F | New state -> Stack 1: [A], Stack 2: [C, B, E], Stack 3: [F, D] | Taking action Move D from E to table | Moved to state -> Stack 1: [A], Stack 2: [C, B, E], Stack 3: [D], Stack 4: [F] | Plan so far [Move F from A to table | Move A from D to table | Move D from E to table] | Exploring action Move E from B to A | New state -> Stack 1: [A, E], Stack 2: [C, B], Stack 3: [D], Stack 4: [F] | Exploring action Move D from table to A | New state -> Stack 1: [A, D], Stack 2: [C, B, E], Stack 3: [F] | Exploring action Move B from C to A | New state -> Invalid | Exploring action Move E from B to table | New state -> Stack 1: [A], Stack 2: [C, B], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Exploring action Move C from table to D | New state -> Invalid | Taking action Move E from B to table | Moved to state -> Stack 1: [A], Stack 2: [C, B], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Plan so far [Move F from A to table | Move A from D to table | Move D from E to table | Move E from B to table] | Exploring action Move C from table to E | New state -> Invalid | Exploring action Move C from table to A | New state -> Invalid | Exploring action Move B from C to D | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, B], Stack 4: [E], Stack 5: [F] | Exploring action Move B from C to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Exploring action Move B from C to A | New state -> Stack 1: [A, B], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Taking action Move B from C to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Plan so far [Move F from A to table | Move A from D to table | Move D from E to table | Move E from B to table | Move B from C to table] | Exploring action Move D from table to A | New state -> Stack 1: [A, D], Stack 2: [B], Stack 3: [C], Stack 4: [E], Stack 5: [F] | Exploring action Move F from table to C | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, F], Stack 4: [D], Stack 5: [E] | Exploring action Move A from table to D | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, A], Stack 4: [E], Stack 5: [F] | Taking action Move F from table to C | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, F], Stack 4: [D], Stack 5: [E] | Plan so far [Move F from A to table | Move A from D to table | Move D from E to table | Move E from B to table | Move B from C to table | Move F from table to C] | Exploring action Move A from table to F | New state -> Stack 1: [B], Stack 2: [C, F, A], Stack 3: [D], Stack 4: [E] | Exploring action Move D from table to A | New state -> Stack 1: [A, D], Stack 2: [B], Stack 3: [C, F], Stack 4: [E] | Exploring action Move C from table to E | New state -> Invalid | Exploring action Move D from table to F | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, F, D], Stack 4: [E] | Taking action Move A from table to F | Moved to state -> Stack 1: [B], Stack 2: [C, F, A], Stack 3: [D], Stack 4: [E] | Plan so far [Move F from A to table | Move A from D to table | Move D from E to table | Move E from B to table | Move B from C to table | Move F from table to C | Move A from table to F] | Exploring action Move C from table to E | New state -> Invalid | Exploring action Move A from F to D | New state -> Stack 1: [B], Stack 2: [C, F], Stack 3: [D, A], Stack 4: [E] | Exploring action Move D from table to A | New state -> Stack 1: [B], Stack 2: [C, F, A, D], Stack 3: [E] | Exploring action Move A from F to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, F], Stack 4: [D], Stack 5: [E] | Taking action Move D from table to A | Moved to state -> Stack 1: [B], Stack 2: [C, F, A, D], Stack 3: [E] | Plan so far [Move F from A to table | Move A from D to table | Move D from E to table | Move E from B to table | Move B from C to table | Move F from table to C | Move A from table to F | Move D from table to A] | Reached goal state!",
        "system2_states_v1": 32
    },
    {
        "idx": 901,
        "start": [
            [
                "table",
                "E"
            ],
            [
                "table",
                "G",
                "F",
                "B",
                "A",
                "C",
                "D"
            ]
        ],
        "goal": [
            [
                "table",
                "D",
                "E",
                "A"
            ],
            [
                "table",
                "F"
            ],
            [
                "table",
                "G",
                "B",
                "C"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": false,
                "on": "B",
                "under": "C",
                "ontable": false
            },
            "B": {
                "clear": false,
                "on": "F",
                "under": "A",
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": "A",
                "under": "D",
                "ontable": false
            },
            "D": {
                "clear": true,
                "on": "C",
                "under": -1,
                "ontable": false
            },
            "E": {
                "clear": true,
                "on": -1,
                "under": -1,
                "ontable": true
            },
            "F": {
                "clear": false,
                "on": "G",
                "under": "B",
                "ontable": false
            },
            "G": {
                "clear": false,
                "on": -1,
                "under": "F",
                "ontable": true
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": true,
                "on": "E",
                "under": -1,
                "ontable": false
            },
            "B": {
                "clear": false,
                "on": "G",
                "under": "C",
                "ontable": false
            },
            "C": {
                "clear": true,
                "on": "B",
                "under": -1,
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": -1,
                "under": "E",
                "ontable": true
            },
            "E": {
                "clear": false,
                "on": "D",
                "under": "A",
                "ontable": false
            },
            "F": {
                "clear": true,
                "on": -1,
                "under": -1,
                "ontable": true
            },
            "G": {
                "clear": false,
                "on": -1,
                "under": "B",
                "ontable": true
            }
        },
        "plan_len": 10,
        "num_blocks": 7,
        "prompt": "The initial state:\nThe hand is empty.\nE is on the table. E is clear.\nG is on the table. F is on G. B is on F. A is on B. C is on A. D is on C. D is clear.\n\nThe goal is:\nD is on the table. E is on D. A is on E. A is clear.\nF is on the table. F is clear.\nG is on the table. B is on G. C is on B. C is clear.\n",
        "system1_plan": "Move D from C to table | Move C from A to table | Move A from B to E | Move B from F to table | Move F from G to table | Move B from table to G | Move C from table to B | Move A from E to table | Move E from table to D | Move A from table to E",
        "system1_states": 10,
        "system2_plan_v1": "Moved to state -> Stack 1: [E], Stack 2: [G, F, B, A, C, D] | Plan so far [] | Exploring action Move D from C to table | New state -> Stack 1: [D], Stack 2: [E], Stack 3: [G, F, B, A, C] | Exploring action Move E from table to D | New state -> Stack 1: [G, F, B, A, C, D, E] | Exploring action Move A from B to table | New state -> Invalid | Exploring action Move D from C to E | New state -> Stack 1: [E, D], Stack 2: [G, F, B, A, C] | Exploring action Move C from A to E | New state -> Invalid | Taking action Move D from C to table | Moved to state -> Stack 1: [D], Stack 2: [E], Stack 3: [G, F, B, A, C] | Plan so far [Move D from C to table] | Exploring action Move C from A to table | New state -> Stack 1: [C], Stack 2: [D], Stack 3: [E], Stack 4: [G, F, B, A] | Exploring action Move C from A to E | New state -> Stack 1: [D], Stack 2: [E, C], Stack 3: [G, F, B, A] | Exploring action Move B from F to C | New state -> Invalid | Exploring action Move E from table to D | New state -> Stack 1: [D, E], Stack 2: [G, F, B, A, C] | Taking action Move C from A to table | Moved to state -> Stack 1: [C], Stack 2: [D], Stack 3: [E], Stack 4: [G, F, B, A] | Plan so far [Move D from C to table | Move C from A to table] | Exploring action Move B from F to E | New state -> Invalid | Exploring action Move A from B to table | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [G, F, B] | Exploring action Move E from table to D | New state -> Stack 1: [C], Stack 2: [D, E], Stack 3: [G, F, B, A] | Exploring action Move A from B to E | New state -> Stack 1: [C], Stack 2: [D], Stack 3: [E, A], Stack 4: [G, F, B] | Taking action Move E from table to D | Moved to state -> Stack 1: [D, E], Stack 2: [G, F, B, A, C] | Plan so far [Move D from C to table | Move E from table to D] | Exploring action Move C from A to table | New state -> Stack 1: [C], Stack 2: [D, E], Stack 3: [G, F, B, A] | Exploring action Move E from D to table | New state -> Stack 1: [D], Stack 2: [E], Stack 3: [G, F, B, A, C] | Exploring action Move C from A to E | New state -> Stack 1: [D, E, C], Stack 2: [G, F, B, A] | Exploring action Move A from B to C | New state -> Invalid | Taking action Move A from B to E | Moved to state -> Stack 1: [C], Stack 2: [D], Stack 3: [E, A], Stack 4: [G, F, B] | Plan so far [Move D from C to table | Move C from A to table | Move A from B to E] | Exploring action Move E from table to C | New state -> Invalid | Exploring action Move A from E to table | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [G, F, B] | Exploring action Move B from F to table | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D], Stack 4: [E, A], Stack 5: [G, F] | Exploring action Move B from F to C | New state -> Stack 1: [C, B], Stack 2: [D], Stack 3: [E, A], Stack 4: [G, F] | Taking action Move A from B to table | Moved to state -> Stack 1: [A], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [G, F, B] | Plan so far [Move D from C to table | Move C from A to table | Move A from B to table] | Exploring action Move F from G to D | New state -> Invalid | Exploring action Move E from table to D | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, E], Stack 4: [G, F, B] | Exploring action Move B from F to A | New state -> Stack 1: [A, B], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [G, F] | Exploring action Move B from F to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [G, F] | Taking action Move B from F to table | Moved to state -> Stack 1: [B], Stack 2: [C], Stack 3: [D], Stack 4: [E, A], Stack 5: [G, F] | Plan so far [Move D from C to table | Move C from A to table | Move A from B to E | Move B from F to table] | Exploring action Move E from table to C | New state -> Invalid | Exploring action Move A from E to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [G, F] | Exploring action Move F from G to table | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D], Stack 4: [E, A], Stack 5: [F], Stack 6: [G] | Exploring action Move F from G to B | New state -> Stack 1: [B, F], Stack 2: [C], Stack 3: [D], Stack 4: [E, A], Stack 5: [G] | Taking action Move F from G to table | Moved to state -> Stack 1: [B], Stack 2: [C], Stack 3: [D], Stack 4: [E, A], Stack 5: [F], Stack 6: [G] | Plan so far [Move D from C to table | Move C from A to table | Move A from B to E | Move B from F to table | Move F from G to table] | Exploring action Move C from table to B | New state -> Stack 1: [B, C], Stack 2: [D], Stack 3: [E, A], Stack 4: [F], Stack 5: [G] | Exploring action Move E from table to D | New state -> Invalid | Exploring action Move B from table to G | New state -> Stack 1: [C], Stack 2: [D], Stack 3: [E, A], Stack 4: [F], Stack 5: [G, B] | Exploring action Move E from table to C | New state -> Invalid | Exploring action Move A from E to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F], Stack 7: [G] | Taking action Move B from table to G | Moved to state -> Stack 1: [C], Stack 2: [D], Stack 3: [E, A], Stack 4: [F], Stack 5: [G, B] | Plan so far [Move D from C to table | Move C from A to table | Move A from B to E | Move B from F to table | Move F from G to table | Move B from table to G] | Exploring action Move C from table to B | New state -> Stack 1: [D], Stack 2: [E, A], Stack 3: [F], Stack 4: [G, B, C] | Exploring action Move G from table to A | New state -> Invalid | Exploring action Move A from E to C | New state -> Stack 1: [C, A], Stack 2: [D], Stack 3: [E], Stack 4: [F], Stack 5: [G, B] | Exploring action Move A from E to table | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [F], Stack 6: [G, B] | Taking action Move C from table to B | Moved to state -> Stack 1: [D], Stack 2: [E, A], Stack 3: [F], Stack 4: [G, B, C] | Plan so far [Move D from C to table | Move C from A to table | Move A from B to E | Move B from F to table | Move F from G to table | Move B from table to G | Move C from table to B] | Exploring action Move E from table to D | New state -> Invalid | Exploring action Move A from E to table | New state -> Stack 1: [A], Stack 2: [D], Stack 3: [E], Stack 4: [F], Stack 5: [G, B, C] | Exploring action Move G from table to F | New state -> Invalid | Exploring action Move F from table to D | New state -> Stack 1: [D, F], Stack 2: [E, A], Stack 3: [G, B, C] | Exploring action Move A from E to D | New state -> Stack 1: [D, A], Stack 2: [E], Stack 3: [F], Stack 4: [G, B, C] | Taking action Move A from E to table | Moved to state -> Stack 1: [A], Stack 2: [D], Stack 3: [E], Stack 4: [F], Stack 5: [G, B, C] | Plan so far [Move D from C to table | Move C from A to table | Move A from B to E | Move B from F to table | Move F from G to table | Move B from table to G | Move C from table to B | Move A from E to table] | Exploring action Move A from table to D | New state -> Stack 1: [D, A], Stack 2: [E], Stack 3: [F], Stack 4: [G, B, C] | Exploring action Move E from table to D | New state -> Stack 1: [A], Stack 2: [D, E], Stack 3: [F], Stack 4: [G, B, C] | Exploring action Move B from G to E | New state -> Invalid | Exploring action Move G from table to F | New state -> Invalid | Exploring action Move A from table to E | New state -> Stack 1: [D], Stack 2: [E, A], Stack 3: [F], Stack 4: [G, B, C] | Taking action Move E from table to D | Moved to state -> Stack 1: [A], Stack 2: [D, E], Stack 3: [F], Stack 4: [G, B, C] | Plan so far [Move D from C to table | Move C from A to table | Move A from B to E | Move B from F to table | Move F from G to table | Move B from table to G | Move C from table to B | Move A from E to table | Move E from table to D] | Exploring action Move B from G to A | New state -> Invalid | Exploring action Move E from D to table | New state -> Stack 1: [A], Stack 2: [D], Stack 3: [E], Stack 4: [F], Stack 5: [G, B, C] | Exploring action Move B from G to C | New state -> Invalid | Exploring action Move A from table to F | New state -> Stack 1: [D, E], Stack 2: [F, A], Stack 3: [G, B, C] | Exploring action Move A from table to E | New state -> Stack 1: [D, E, A], Stack 2: [F], Stack 3: [G, B, C] | Taking action Move A from table to E | Moved to state -> Stack 1: [D, E, A], Stack 2: [F], Stack 3: [G, B, C] | Plan so far [Move D from C to table | Move C from A to table | Move A from B to E | Move B from F to table | Move F from G to table | Move B from table to G | Move C from table to B | Move A from E to table | Move E from table to D | Move A from table to E] | Reached goal state!",
        "system2_states_v1": 53
    },
    {
        "idx": 778,
        "start": [
            [
                "table",
                "B",
                "E",
                "A",
                "D"
            ],
            [
                "table",
                "F",
                "C"
            ]
        ],
        "goal": [
            [
                "table",
                "E",
                "F",
                "A",
                "C",
                "D",
                "B"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": false,
                "on": "E",
                "under": "D",
                "ontable": false
            },
            "B": {
                "clear": false,
                "on": -1,
                "under": "E",
                "ontable": true
            },
            "C": {
                "clear": true,
                "on": "F",
                "under": -1,
                "ontable": false
            },
            "D": {
                "clear": true,
                "on": "A",
                "under": -1,
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": "B",
                "under": "A",
                "ontable": false
            },
            "F": {
                "clear": false,
                "on": -1,
                "under": "C",
                "ontable": true
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": false,
                "on": "F",
                "under": "C",
                "ontable": false
            },
            "B": {
                "clear": true,
                "on": "D",
                "under": -1,
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": "A",
                "under": "D",
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": "C",
                "under": "B",
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": -1,
                "under": "F",
                "ontable": true
            },
            "F": {
                "clear": false,
                "on": "E",
                "under": "A",
                "ontable": false
            }
        },
        "plan_len": 9,
        "num_blocks": 6,
        "prompt": "The initial state:\nThe hand is empty.\nB is on the table. E is on B. A is on E. D is on A. D is clear.\nF is on the table. C is on F. C is clear.\n\nThe goal is:\nE is on the table. F is on E. A is on F. C is on A. D is on C. B is on D. B is clear.\n",
        "system1_plan": "Move C from F to table | Move D from A to table | Move A from E to table | Move E from B to table | Move F from table to E | Move A from table to F | Move C from table to A | Move D from table to C | Move B from table to D",
        "system1_states": 9,
        "system2_plan_v1": "Moved to state -> Stack 1: [B, E, A, D], Stack 2: [F, C] | Plan so far [] | Exploring action Move D from A to table | New state -> Stack 1: [B, E, A], Stack 2: [D], Stack 3: [F, C] | Exploring action Move B from table to D | New state -> Invalid | Exploring action Move C from F to D | New state -> Stack 1: [B, E, A, D, C], Stack 2: [F] | Exploring action Move C from F to table | New state -> Stack 1: [B, E, A, D], Stack 2: [C], Stack 3: [F] | Taking action Move C from F to table | Moved to state -> Stack 1: [B, E, A, D], Stack 2: [C], Stack 3: [F] | Plan so far [Move C from F to table] | Exploring action Move E from B to table | New state -> Invalid | Exploring action Move D from A to F | New state -> Stack 1: [B, E, A], Stack 2: [C], Stack 3: [F, D] | Exploring action Move D from A to C | New state -> Stack 1: [B, E, A], Stack 2: [C, D], Stack 3: [F] | Exploring action Move B from table to C | New state -> Invalid | Exploring action Move D from A to table | New state -> Stack 1: [B, E, A], Stack 2: [C], Stack 3: [D], Stack 4: [F] | Taking action Move D from A to table | Moved to state -> Stack 1: [B, E, A], Stack 2: [D], Stack 3: [F, C] | Plan so far [Move D from A to table] | Exploring action Move C from F to table | New state -> Stack 1: [B, E, A], Stack 2: [C], Stack 3: [D], Stack 4: [F] | Exploring action Move A from E to table | New state -> Stack 1: [A], Stack 2: [B, E], Stack 3: [D], Stack 4: [F, C] | Exploring action Move F from table to C | New state -> Invalid | Exploring action Move A from E to D | New state -> Stack 1: [B, E], Stack 2: [D, A], Stack 3: [F, C] | Taking action Move D from A to table | Moved to state -> Stack 1: [B, E, A], Stack 2: [C], Stack 3: [D], Stack 4: [F] | Plan so far [Move C from F to table | Move D from A to table] | Exploring action Move E from B to C | New state -> Invalid | Exploring action Move E from B to A | New state -> Invalid | Exploring action Move A from E to table | New state -> Stack 1: [A], Stack 2: [B, E], Stack 3: [C], Stack 4: [D], Stack 5: [F] | Exploring action Move A from E to C | New state -> Stack 1: [B, E], Stack 2: [C, A], Stack 3: [D], Stack 4: [F] | Exploring action Move A from E to D | New state -> Stack 1: [B, E], Stack 2: [C], Stack 3: [D, A], Stack 4: [F] | Taking action Move C from F to table | Moved to state -> Stack 1: [B, E, A], Stack 2: [C], Stack 3: [D], Stack 4: [F] | Plan so far [Move D from A to table | Move C from F to table] | Taking action Move A from E to table | Moved to state -> Stack 1: [A], Stack 2: [B, E], Stack 3: [D], Stack 4: [F, C] | Plan so far [Move D from A to table | Move A from E to table] | Exploring action Move C from F to D | New state -> Stack 1: [A], Stack 2: [B, E], Stack 3: [D, C], Stack 4: [F] | Exploring action Move F from table to E | New state -> Invalid | Exploring action Move C from F to table | New state -> Stack 1: [A], Stack 2: [B, E], Stack 3: [C], Stack 4: [D], Stack 5: [F] | Exploring action Move E from B to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D], Stack 4: [E], Stack 5: [F, C] | Taking action Move A from E to table | Moved to state -> Stack 1: [A], Stack 2: [B, E], Stack 3: [C], Stack 4: [D], Stack 5: [F] | Plan so far [Move C from F to table | Move D from A to table | Move A from E to table] | Exploring action Move B from table to E | New state -> Invalid | Exploring action Move E from B to C | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, E], Stack 4: [D], Stack 5: [F] | Exploring action Move E from B to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Exploring action Move E from B to A | New state -> Stack 1: [A, E], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [F] | Taking action Move C from F to table | Moved to state -> Stack 1: [A], Stack 2: [B, E], Stack 3: [C], Stack 4: [D], Stack 5: [F] | Plan so far [Move D from A to table | Move A from E to table | Move C from F to table] | Taking action Move E from B to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Plan so far [Move C from F to table | Move D from A to table | Move A from E to table | Move E from B to table] | Exploring action Move A from table to D | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, A], Stack 4: [E], Stack 5: [F] | Exploring action Move B from table to D | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, B], Stack 4: [E], Stack 5: [F] | Exploring action Move F from table to E | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E, F] | Taking action Move E from B to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [D], Stack 4: [E], Stack 5: [F, C] | Plan so far [Move D from A to table | Move A from E to table | Move E from B to table] | Exploring action Move C from F to D | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, C], Stack 4: [E], Stack 5: [F] | Exploring action Move F from table to C | New state -> Invalid | Exploring action Move C from F to E | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D], Stack 4: [E, C], Stack 5: [F] | Exploring action Move F from table to D | New state -> Invalid | Exploring action Move C from F to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Taking action Move F from table to E | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E, F] | Plan so far [Move C from F to table | Move D from A to table | Move A from E to table | Move E from B to table | Move F from table to E] | Exploring action Move A from table to F | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D], Stack 4: [E, F, A] | Exploring action Move B from table to D | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, B], Stack 4: [E, F] | Exploring action Move E from table to F | New state -> Invalid | Exploring action Move A from table to D | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, A], Stack 4: [E, F] | Exploring action Move E from table to C | New state -> Invalid | Taking action Move C from F to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Plan so far [Move D from A to table | Move A from E to table | Move E from B to table | Move C from F to table] | Taking action Move A from table to F | Moved to state -> Stack 1: [B], Stack 2: [C], Stack 3: [D], Stack 4: [E, F, A] | Plan so far [Move C from F to table | Move D from A to table | Move A from E to table | Move E from B to table | Move F from table to E | Move A from table to F] | Exploring action Move C from table to A | New state -> Stack 1: [B], Stack 2: [D], Stack 3: [E, F, A, C] | Exploring action Move B from table to D | New state -> Stack 1: [C], Stack 2: [D, B], Stack 3: [E, F, A] | Exploring action Move F from E to C | New state -> Invalid | Exploring action Move A from F to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E, F] | Exploring action Move E from table to C | New state -> Invalid | Taking action Move C from table to A | Moved to state -> Stack 1: [B], Stack 2: [D], Stack 3: [E, F, A, C] | Plan so far [Move C from F to table | Move D from A to table | Move A from E to table | Move E from B to table | Move F from table to E | Move A from table to F | Move C from table to A] | Exploring action Move D from table to B | New state -> Stack 1: [B, D], Stack 2: [E, F, A, C] | Exploring action Move B from table to D | New state -> Stack 1: [D, B], Stack 2: [E, F, A, C] | Exploring action Move A from F to B | New state -> Invalid | Exploring action Move D from table to C | New state -> Stack 1: [B], Stack 2: [E, F, A, C, D] | Exploring action Move E from table to B | New state -> Invalid | Taking action Move D from table to C | Moved to state -> Stack 1: [B], Stack 2: [E, F, A, C, D] | Plan so far [Move C from F to table | Move D from A to table | Move A from E to table | Move E from B to table | Move F from table to E | Move A from table to F | Move C from table to A | Move D from table to C] | Exploring action Move F from E to table | New state -> Invalid | Exploring action Move D from C to table | New state -> Stack 1: [B], Stack 2: [D], Stack 3: [E, F, A, C] | Exploring action Move B from table to D | New state -> Stack 1: [E, F, A, C, D, B] | Exploring action Move D from C to B | New state -> Stack 1: [B, D], Stack 2: [E, F, A, C] | Exploring action Move F from E to D | New state -> Invalid | Taking action Move B from table to D | Moved to state -> Stack 1: [E, F, A, C, D, B] | Plan so far [Move C from F to table | Move D from A to table | Move A from E to table | Move E from B to table | Move F from table to E | Move A from table to F | Move C from table to A | Move D from table to C | Move B from table to D] | Reached goal state!",
        "system2_states_v1": 54
    },
    {
        "idx": 590,
        "start": [
            [
                "table",
                "C",
                "E",
                "D",
                "A",
                "B"
            ]
        ],
        "goal": [
            [
                "table",
                "C",
                "A"
            ],
            [
                "table",
                "E",
                "D",
                "B"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": false,
                "on": "D",
                "under": "B",
                "ontable": false
            },
            "B": {
                "clear": true,
                "on": "A",
                "under": -1,
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": -1,
                "under": "E",
                "ontable": true
            },
            "D": {
                "clear": false,
                "on": "E",
                "under": "A",
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": "C",
                "under": "D",
                "ontable": false
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": true,
                "on": "C",
                "under": -1,
                "ontable": false
            },
            "B": {
                "clear": true,
                "on": "D",
                "under": -1,
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": -1,
                "under": "A",
                "ontable": true
            },
            "D": {
                "clear": false,
                "on": "E",
                "under": "B",
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": -1,
                "under": "D",
                "ontable": true
            }
        },
        "plan_len": 7,
        "num_blocks": 5,
        "prompt": "The initial state:\nThe hand is empty.\nC is on the table. E is on C. D is on E. A is on D. B is on A. B is clear.\n\nThe goal is:\nC is on the table. A is on C. A is clear.\nE is on the table. D is on E. B is on D. B is clear.\n",
        "system1_plan": "Move B from A to table | Move A from D to table | Move D from E to table | Move E from C to table | Move A from table to C | Move D from table to E | Move B from table to D",
        "system1_states": 7,
        "system2_plan_v1": "Moved to state -> Stack 1: [C, E, D, A, B] | Plan so far [] | Exploring action Move C from table to B | New state -> Invalid | Exploring action Move B from A to table | New state -> Stack 1: [B], Stack 2: [C, E, D, A] | Exploring action Move A from D to B | New state -> Invalid | Taking action Move B from A to table | Moved to state -> Stack 1: [B], Stack 2: [C, E, D, A] | Plan so far [Move B from A to table] | Exploring action Move B from table to A | New state -> Stack 1: [C, E, D, A, B] | Exploring action Move A from D to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, E, D] | Exploring action Move A from D to B | New state -> Stack 1: [B, A], Stack 2: [C, E, D] | Exploring action Move D from E to B | New state -> Invalid | Taking action Move A from D to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, E, D] | Plan so far [Move B from A to table | Move A from D to table] | Exploring action Move D from E to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, E], Stack 4: [D] | Exploring action Move E from C to A | New state -> Invalid | Exploring action Move D from E to A | New state -> Stack 1: [A, D], Stack 2: [B], Stack 3: [C, E] | Exploring action Move B from table to D | New state -> Stack 1: [A], Stack 2: [C, E, D, B] | Taking action Move B from table to D | Moved to state -> Stack 1: [A], Stack 2: [C, E, D, B] | Plan so far [Move B from A to table | Move A from D to table | Move B from table to D] | Exploring action Move B from D to A | New state -> Stack 1: [A, B], Stack 2: [C, E, D] | Exploring action Move E from C to B | New state -> Invalid | Exploring action Move D from E to table | New state -> Invalid | Exploring action Move A from table to B | New state -> Stack 1: [C, E, D, B, A] | Exploring action Move B from D to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, E, D] | Taking action Move D from E to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, E], Stack 4: [D] | Plan so far [Move B from A to table | Move A from D to table | Move D from E to table] | Exploring action Move E from C to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Exploring action Move C from table to B | New state -> Invalid | Exploring action Move C from table to A | New state -> Invalid | Exploring action Move E from C to B | New state -> Stack 1: [A], Stack 2: [B, E], Stack 3: [C], Stack 4: [D] | Exploring action Move E from C to D | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D, E] | Taking action Move E from C to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Plan so far [Move B from A to table | Move A from D to table | Move D from E to table | Move E from C to table] | Exploring action Move A from table to C | New state -> Stack 1: [B], Stack 2: [C, A], Stack 3: [D], Stack 4: [E] | Exploring action Move D from table to E | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [E, D] | Exploring action Move B from table to D | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, B], Stack 4: [E] | Taking action Move A from table to C | Moved to state -> Stack 1: [B], Stack 2: [C, A], Stack 3: [D], Stack 4: [E] | Plan so far [Move B from A to table | Move A from D to table | Move D from E to table | Move E from C to table | Move A from table to C] | Exploring action Move D from table to E | New state -> Stack 1: [B], Stack 2: [C, A], Stack 3: [E, D] | Exploring action Move B from table to E | New state -> Stack 1: [C, A], Stack 2: [D], Stack 3: [E, B] | Exploring action Move B from table to D | New state -> Stack 1: [C, A], Stack 2: [D, B], Stack 3: [E] | Exploring action Move C from table to D | New state -> Invalid | Taking action Move D from table to E | Moved to state -> Stack 1: [B], Stack 2: [C, A], Stack 3: [E, D] | Plan so far [Move B from A to table | Move A from D to table | Move D from E to table | Move E from C to table | Move A from table to C | Move D from table to E] | Exploring action Move C from table to B | New state -> Invalid | Exploring action Move B from table to D | New state -> Stack 1: [C, A], Stack 2: [E, D, B] | Exploring action Move E from table to A | New state -> Invalid | Exploring action Move D from E to table | New state -> Stack 1: [B], Stack 2: [C, A], Stack 3: [D], Stack 4: [E] | Exploring action Move A from C to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [E, D] | Taking action Move B from table to D | Moved to state -> Stack 1: [C, A], Stack 2: [E, D, B] | Plan so far [Move B from A to table | Move A from D to table | Move D from E to table | Move E from C to table | Move A from table to C | Move D from table to E | Move B from table to D] | Reached goal state!",
        "system2_states_v1": 33
    },
    {
        "idx": 879,
        "start": [
            [
                "table",
                "C",
                "G",
                "B",
                "A",
                "F"
            ],
            [
                "table",
                "D",
                "E"
            ]
        ],
        "goal": [
            [
                "table",
                "B",
                "C",
                "E",
                "F",
                "G",
                "A"
            ],
            [
                "table",
                "D"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": false,
                "on": "B",
                "under": "F",
                "ontable": false
            },
            "B": {
                "clear": false,
                "on": "G",
                "under": "A",
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": -1,
                "under": "G",
                "ontable": true
            },
            "D": {
                "clear": false,
                "on": -1,
                "under": "E",
                "ontable": true
            },
            "E": {
                "clear": true,
                "on": "D",
                "under": -1,
                "ontable": false
            },
            "F": {
                "clear": true,
                "on": "A",
                "under": -1,
                "ontable": false
            },
            "G": {
                "clear": false,
                "on": "C",
                "under": "B",
                "ontable": false
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": true,
                "on": "G",
                "under": -1,
                "ontable": false
            },
            "B": {
                "clear": false,
                "on": -1,
                "under": "C",
                "ontable": true
            },
            "C": {
                "clear": false,
                "on": "B",
                "under": "E",
                "ontable": false
            },
            "D": {
                "clear": true,
                "on": -1,
                "under": -1,
                "ontable": true
            },
            "E": {
                "clear": false,
                "on": "C",
                "under": "F",
                "ontable": false
            },
            "F": {
                "clear": false,
                "on": "E",
                "under": "G",
                "ontable": false
            },
            "G": {
                "clear": false,
                "on": "F",
                "under": "A",
                "ontable": false
            }
        },
        "plan_len": 10,
        "num_blocks": 7,
        "prompt": "The initial state:\nThe hand is empty.\nC is on the table. G is on C. B is on G. A is on B. F is on A. F is clear.\nD is on the table. E is on D. E is clear.\n\nThe goal is:\nB is on the table. C is on B. E is on C. F is on E. G is on F. A is on G. A is clear.\nD is on the table. D is clear.\n",
        "system1_plan": "Move E from D to table | Move F from A to table | Move A from B to table | Move B from G to table | Move G from C to table | Move C from table to B | Move E from table to C | Move F from table to E | Move G from table to F | Move A from table to G",
        "system1_states": 10,
        "system2_plan_v1": "Moved to state -> Stack 1: [C, G, B, A, F], Stack 2: [D, E] | Plan so far [] | Exploring action Move E from D to F | New state -> Stack 1: [C, G, B, A, F, E], Stack 2: [D] | Exploring action Move E from D to table | New state -> Stack 1: [C, G, B, A, F], Stack 2: [D], Stack 3: [E] | Exploring action Move C from table to F | New state -> Invalid | Exploring action Move F from A to table | New state -> Stack 1: [C, G, B, A], Stack 2: [D, E], Stack 3: [F] | Taking action Move E from D to table | Moved to state -> Stack 1: [C, G, B, A, F], Stack 2: [D], Stack 3: [E] | Plan so far [Move E from D to table] | Exploring action Move F from A to table | New state -> Stack 1: [C, G, B, A], Stack 2: [D], Stack 3: [E], Stack 4: [F] | Exploring action Move A from B to table | New state -> Invalid | Exploring action Move F from A to E | New state -> Stack 1: [C, G, B, A], Stack 2: [D], Stack 3: [E, F] | Exploring action Move F from A to D | New state -> Stack 1: [C, G, B, A], Stack 2: [D, F], Stack 3: [E] | Taking action Move F from A to table | Moved to state -> Stack 1: [C, G, B, A], Stack 2: [D], Stack 3: [E], Stack 4: [F] | Plan so far [Move E from D to table | Move F from A to table] | Exploring action Move A from B to E | New state -> Stack 1: [C, G, B], Stack 2: [D], Stack 3: [E, A], Stack 4: [F] | Exploring action Move B from G to F | New state -> Invalid | Exploring action Move A from B to table | New state -> Stack 1: [A], Stack 2: [C, G, B], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Exploring action Move A from B to F | New state -> Stack 1: [C, G, B], Stack 2: [D], Stack 3: [E], Stack 4: [F, A] | Exploring action Move G from C to D | New state -> Invalid | Taking action Move A from B to table | Moved to state -> Stack 1: [A], Stack 2: [C, G, B], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Plan so far [Move E from D to table | Move F from A to table | Move A from B to table] | Exploring action Move C from table to F | New state -> Invalid | Exploring action Move G from C to A | New state -> Invalid | Exploring action Move B from G to E | New state -> Stack 1: [A], Stack 2: [C, G], Stack 3: [D], Stack 4: [E, B], Stack 5: [F] | Exploring action Move B from G to A | New state -> Stack 1: [A, B], Stack 2: [C, G], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Exploring action Move B from G to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, G], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Taking action Move B from G to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, G], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Plan so far [Move E from D to table | Move F from A to table | Move A from B to table | Move B from G to table] | Exploring action Move G from C to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F], Stack 7: [G] | Exploring action Move C from table to G | New state -> Invalid | Exploring action Move G from C to B | New state -> Stack 1: [A], Stack 2: [B, G], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Exploring action Move A from table to G | New state -> Stack 1: [B], Stack 2: [C, G, A], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Taking action Move G from C to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F], Stack 7: [G] | Plan so far [Move E from D to table | Move F from A to table | Move A from B to table | Move B from G to table | Move G from C to table] | Exploring action Move A from table to B | New state -> Stack 1: [B, A], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Exploring action Move C from table to B | New state -> Stack 1: [A], Stack 2: [B, C], Stack 3: [D], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Exploring action Move A from table to G | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [F], Stack 6: [G, A] | Taking action Move C from table to B | Moved to state -> Stack 1: [A], Stack 2: [B, C], Stack 3: [D], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Plan so far [Move E from D to table | Move F from A to table | Move A from B to table | Move B from G to table | Move G from C to table | Move C from table to B] | Exploring action Move B from table to C | New state -> Invalid | Exploring action Move A from table to G | New state -> Stack 1: [B, C], Stack 2: [D], Stack 3: [E], Stack 4: [F], Stack 5: [G, A] | Exploring action Move E from table to C | New state -> Stack 1: [A], Stack 2: [B, C, E], Stack 3: [D], Stack 4: [F], Stack 5: [G] | Exploring action Move A from table to E | New state -> Stack 1: [B, C], Stack 2: [D], Stack 3: [E, A], Stack 4: [F], Stack 5: [G] | Taking action Move E from table to C | Moved to state -> Stack 1: [A], Stack 2: [B, C, E], Stack 3: [D], Stack 4: [F], Stack 5: [G] | Plan so far [Move E from D to table | Move F from A to table | Move A from B to table | Move B from G to table | Move G from C to table | Move C from table to B | Move E from table to C] | Exploring action Move A from table to G | New state -> Stack 1: [B, C, E], Stack 2: [D], Stack 3: [F], Stack 4: [G, A] | Exploring action Move F from table to E | New state -> Stack 1: [A], Stack 2: [B, C, E, F], Stack 3: [D], Stack 4: [G] | Exploring action Move B from table to F | New state -> Invalid | Exploring action Move A from table to F | New state -> Stack 1: [B, C, E], Stack 2: [D], Stack 3: [F, A], Stack 4: [G] | Taking action Move F from table to E | Moved to state -> Stack 1: [A], Stack 2: [B, C, E, F], Stack 3: [D], Stack 4: [G] | Plan so far [Move E from D to table | Move F from A to table | Move A from B to table | Move B from G to table | Move G from C to table | Move C from table to B | Move E from table to C | Move F from table to E] | Exploring action Move F from E to table | New state -> Stack 1: [A], Stack 2: [B, C, E], Stack 3: [D], Stack 4: [F], Stack 5: [G] | Exploring action Move C from B to A | New state -> Invalid | Exploring action Move G from table to F | New state -> Stack 1: [A], Stack 2: [B, C, E, F, G], Stack 3: [D] | Exploring action Move A from table to G | New state -> Stack 1: [B, C, E, F], Stack 2: [D], Stack 3: [G, A] | Taking action Move G from table to F | Moved to state -> Stack 1: [A], Stack 2: [B, C, E, F, G], Stack 3: [D] | Plan so far [Move E from D to table | Move F from A to table | Move A from B to table | Move B from G to table | Move G from C to table | Move C from table to B | Move E from table to C | Move F from table to E | Move G from table to F] | Exploring action Move A from table to G | New state -> Stack 1: [B, C, E, F, G, A], Stack 2: [D] | Exploring action Move D from table to A | New state -> Stack 1: [A, D], Stack 2: [B, C, E, F, G] | Exploring action Move F from E to D | New state -> Invalid | Exploring action Move G from F to table | New state -> Stack 1: [A], Stack 2: [B, C, E, F], Stack 3: [D], Stack 4: [G] | Taking action Move A from table to G | Moved to state -> Stack 1: [B, C, E, F, G, A], Stack 2: [D] | Plan so far [Move E from D to table | Move F from A to table | Move A from B to table | Move B from G to table | Move G from C to table | Move C from table to B | Move E from table to C | Move F from table to E | Move G from table to F | Move A from table to G] | Reached goal state!",
        "system2_states_v1": 41
    },
    {
        "idx": 702,
        "start": [
            [
                "table",
                "A",
                "E",
                "F",
                "B",
                "D"
            ],
            [
                "table",
                "C"
            ]
        ],
        "goal": [
            [
                "table",
                "B",
                "A",
                "F",
                "E"
            ],
            [
                "table",
                "D",
                "C"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": false,
                "on": -1,
                "under": "E",
                "ontable": true
            },
            "B": {
                "clear": false,
                "on": "F",
                "under": "D",
                "ontable": false
            },
            "C": {
                "clear": true,
                "on": -1,
                "under": -1,
                "ontable": true
            },
            "D": {
                "clear": true,
                "on": "B",
                "under": -1,
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": "A",
                "under": "F",
                "ontable": false
            },
            "F": {
                "clear": false,
                "on": "E",
                "under": "B",
                "ontable": false
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": false,
                "on": "B",
                "under": "F",
                "ontable": false
            },
            "B": {
                "clear": false,
                "on": -1,
                "under": "A",
                "ontable": true
            },
            "C": {
                "clear": true,
                "on": "D",
                "under": -1,
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": -1,
                "under": "C",
                "ontable": true
            },
            "E": {
                "clear": true,
                "on": "F",
                "under": -1,
                "ontable": false
            },
            "F": {
                "clear": false,
                "on": "A",
                "under": "E",
                "ontable": false
            }
        },
        "plan_len": 8,
        "num_blocks": 6,
        "prompt": "The initial state:\nThe hand is empty.\nA is on the table. E is on A. F is on E. B is on F. D is on B. D is clear.\nC is on the table. C is clear.\n\nThe goal is:\nB is on the table. A is on B. F is on A. E is on F. E is clear.\nD is on the table. C is on D. C is clear.\n",
        "system1_plan": "Move D from B to table | Move C from table to D | Move B from F to table | Move F from E to table | Move E from A to table | Move A from table to B | Move F from table to A | Move E from table to F",
        "system1_states": 8,
        "system2_plan_v1": "Moved to state -> Stack 1: [A, E, F, B, D], Stack 2: [C] | Plan so far [] | Exploring action Move B from F to D | New state -> Invalid | Exploring action Move D from B to C | New state -> Stack 1: [A, E, F, B], Stack 2: [C, D] | Exploring action Move C from table to D | New state -> Stack 1: [A, E, F, B, D, C] | Exploring action Move D from B to table | New state -> Stack 1: [A, E, F, B], Stack 2: [C], Stack 3: [D] | Taking action Move D from B to table | Moved to state -> Stack 1: [A, E, F, B], Stack 2: [C], Stack 3: [D] | Plan so far [Move D from B to table] | Exploring action Move B from F to D | New state -> Stack 1: [A, E, F], Stack 2: [C], Stack 3: [D, B] | Exploring action Move F from E to C | New state -> Invalid | Exploring action Move F from E to table | New state -> Invalid | Exploring action Move B from F to table | New state -> Stack 1: [A, E, F], Stack 2: [B], Stack 3: [C], Stack 4: [D] | Exploring action Move C from table to D | New state -> Stack 1: [A, E, F, B], Stack 2: [D, C] | Taking action Move C from table to D | Moved to state -> Stack 1: [A, E, F, B], Stack 2: [D, C] | Plan so far [Move D from B to table | Move C from table to D] | Exploring action Move F from E to B | New state -> Invalid | Exploring action Move B from F to table | New state -> Stack 1: [A, E, F], Stack 2: [B], Stack 3: [D, C] | Exploring action Move E from A to B | New state -> Invalid | Exploring action Move B from F to C | New state -> Stack 1: [A, E, F], Stack 2: [D, C, B] | Exploring action Move C from D to table | New state -> Stack 1: [A, E, F, B], Stack 2: [C], Stack 3: [D] | Taking action Move B from F to table | Moved to state -> Stack 1: [A, E, F], Stack 2: [B], Stack 3: [D, C] | Plan so far [Move D from B to table | Move C from table to D | Move B from F to table] | Exploring action Move B from table to F | New state -> Stack 1: [A, E, F, B], Stack 2: [D, C] | Exploring action Move F from E to B | New state -> Stack 1: [A, E], Stack 2: [B, F], Stack 3: [D, C] | Exploring action Move F from E to table | New state -> Stack 1: [A, E], Stack 2: [B], Stack 3: [D, C], Stack 4: [F] | Exploring action Move A from table to C | New state -> Invalid | Exploring action Move E from A to C | New state -> Invalid | Taking action Move F from E to table | Moved to state -> Stack 1: [A, E], Stack 2: [B], Stack 3: [D, C], Stack 4: [F] | Plan so far [Move D from B to table | Move C from table to D | Move B from F to table | Move F from E to table] | Exploring action Move E from A to F | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, C], Stack 4: [F, E] | Exploring action Move A from table to C | New state -> Invalid | Exploring action Move E from A to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, C], Stack 4: [E], Stack 5: [F] | Exploring action Move E from A to B | New state -> Stack 1: [A], Stack 2: [B, E], Stack 3: [D, C], Stack 4: [F] | Exploring action Move D from table to C | New state -> Invalid | Taking action Move E from A to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, C], Stack 4: [E], Stack 5: [F] | Plan so far [Move D from B to table | Move C from table to D | Move B from F to table | Move F from E to table | Move E from A to table] | Exploring action Move A from table to B | New state -> Stack 1: [B, A], Stack 2: [D, C], Stack 3: [E], Stack 4: [F] | Exploring action Move E from table to F | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, C], Stack 4: [F, E] | Exploring action Move D from table to B | New state -> Invalid | Exploring action Move D from table to A | New state -> Invalid | Exploring action Move A from table to E | New state -> Stack 1: [B], Stack 2: [D, C], Stack 3: [E, A], Stack 4: [F] | Taking action Move E from A to F | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, C], Stack 4: [F, E] | Plan so far [Move D from B to table | Move C from table to D | Move B from F to table | Move F from E to table | Move E from A to F] | Exploring action Move E from F to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, C], Stack 4: [E], Stack 5: [F] | Exploring action Move D from table to E | New state -> Invalid | Exploring action Move E from F to A | New state -> Stack 1: [A, E], Stack 2: [B], Stack 3: [D, C], Stack 4: [F] | Exploring action Move A from table to B | New state -> Stack 1: [B, A], Stack 2: [D, C], Stack 3: [F, E] | Taking action Move A from table to B | Moved to state -> Stack 1: [B, A], Stack 2: [D, C], Stack 3: [E], Stack 4: [F] | Plan so far [Move D from B to table | Move C from table to D | Move B from F to table | Move F from E to table | Move E from A to table | Move A from table to B] | Exploring action Move F from table to A | New state -> Stack 1: [B, A, F], Stack 2: [D, C], Stack 3: [E] | Exploring action Move D from table to F | New state -> Invalid | Exploring action Move B from table to C | New state -> Invalid | Exploring action Move E from table to F | New state -> Stack 1: [B, A], Stack 2: [D, C], Stack 3: [F, E] | Exploring action Move F from table to E | New state -> Stack 1: [B, A], Stack 2: [D, C], Stack 3: [E, F] | Taking action Move A from table to B | Moved to state -> Stack 1: [B, A], Stack 2: [D, C], Stack 3: [F, E] | Plan so far [Move D from B to table | Move C from table to D | Move B from F to table | Move F from E to table | Move E from A to F | Move A from table to B] | Exploring action Move D from table to C | New state -> Invalid | Exploring action Move E from F to table | New state -> Stack 1: [B, A], Stack 2: [D, C], Stack 3: [E], Stack 4: [F] | Exploring action Move E from F to A | New state -> Stack 1: [B, A, E], Stack 2: [D, C], Stack 3: [F] | Exploring action Move A from B to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, C], Stack 4: [F, E] | Taking action Move F from table to A | Moved to state -> Stack 1: [B, A, F], Stack 2: [D, C], Stack 3: [E] | Plan so far [Move D from B to table | Move C from table to D | Move B from F to table | Move F from E to table | Move E from A to table | Move A from table to B | Move F from table to A] | Exploring action Move A from B to F | New state -> Invalid | Exploring action Move F from A to table | New state -> Stack 1: [B, A], Stack 2: [D, C], Stack 3: [E], Stack 4: [F] | Exploring action Move C from D to table | New state -> Stack 1: [B, A, F], Stack 2: [C], Stack 3: [D], Stack 4: [E] | Exploring action Move E from table to F | New state -> Stack 1: [B, A, F, E], Stack 2: [D, C] | Exploring action Move A from B to table | New state -> Invalid | Taking action Move E from table to F | Moved to state -> Stack 1: [B, A, F, E], Stack 2: [D, C] | Plan so far [Move D from B to table | Move C from table to D | Move B from F to table | Move F from E to table | Move E from A to table | Move A from table to B | Move F from table to A | Move E from table to F] | Reached goal state!",
        "system2_states_v1": 47
    },
    {
        "idx": 809,
        "start": [
            [
                "table",
                "D",
                "F",
                "A",
                "C",
                "E",
                "B"
            ]
        ],
        "goal": [
            [
                "table",
                "B",
                "F",
                "D",
                "A",
                "E",
                "C"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": false,
                "on": "F",
                "under": "C",
                "ontable": false
            },
            "B": {
                "clear": true,
                "on": "E",
                "under": -1,
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": "A",
                "under": "E",
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": -1,
                "under": "F",
                "ontable": true
            },
            "E": {
                "clear": false,
                "on": "C",
                "under": "B",
                "ontable": false
            },
            "F": {
                "clear": false,
                "on": "D",
                "under": "A",
                "ontable": false
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": false,
                "on": "D",
                "under": "E",
                "ontable": false
            },
            "B": {
                "clear": false,
                "on": -1,
                "under": "F",
                "ontable": true
            },
            "C": {
                "clear": true,
                "on": "E",
                "under": -1,
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": "F",
                "under": "A",
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": "A",
                "under": "C",
                "ontable": false
            },
            "F": {
                "clear": false,
                "on": "B",
                "under": "D",
                "ontable": false
            }
        },
        "plan_len": 9,
        "num_blocks": 6,
        "prompt": "The initial state:\nThe hand is empty.\nD is on the table. F is on D. A is on F. C is on A. E is on C. B is on E. B is clear.\n\nThe goal is:\nB is on the table. F is on B. D is on F. A is on D. E is on A. C is on E. C is clear.\n",
        "system1_plan": "Move B from E to table | Move E from C to table | Move C from A to table | Move A from F to table | Move F from D to B | Move D from table to F | Move A from table to D | Move E from table to A | Move C from table to E",
        "system1_states": 9,
        "system2_plan_v1": "Moved to state -> Stack 1: [D, F, A, C, E, B] | Plan so far [] | Exploring action Move B from E to table | New state -> Stack 1: [B], Stack 2: [D, F, A, C, E] | Exploring action Move D from table to B | New state -> Invalid | Taking action Move B from E to table | Moved to state -> Stack 1: [B], Stack 2: [D, F, A, C, E] | Plan so far [Move B from E to table] | Exploring action Move A from F to B | New state -> Invalid | Exploring action Move B from table to E | New state -> Stack 1: [D, F, A, C, E, B] | Exploring action Move E from C to table | New state -> Stack 1: [B], Stack 2: [D, F, A, C], Stack 3: [E] | Exploring action Move E from C to B | New state -> Stack 1: [B, E], Stack 2: [D, F, A, C] | Taking action Move E from C to table | Moved to state -> Stack 1: [B], Stack 2: [D, F, A, C], Stack 3: [E] | Plan so far [Move B from E to table | Move E from C to table] | Exploring action Move C from A to table | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, F, A], Stack 4: [E] | Exploring action Move F from D to table | New state -> Invalid | Exploring action Move C from A to E | New state -> Stack 1: [B], Stack 2: [D, F, A], Stack 3: [E, C] | Exploring action Move C from A to B | New state -> Stack 1: [B, C], Stack 2: [D, F, A], Stack 3: [E] | Exploring action Move A from F to C | New state -> Invalid | Taking action Move C from A to table | Moved to state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, F, A], Stack 4: [E] | Plan so far [Move B from E to table | Move E from C to table | Move C from A to table] | Exploring action Move A from F to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D, F], Stack 5: [E] | Exploring action Move F from D to table | New state -> Invalid | Exploring action Move A from F to C | New state -> Stack 1: [B], Stack 2: [C, A], Stack 3: [D, F], Stack 4: [E] | Exploring action Move A from F to B | New state -> Stack 1: [B, A], Stack 2: [C], Stack 3: [D, F], Stack 4: [E] | Exploring action Move F from D to E | New state -> Invalid | Taking action Move C from A to E | Moved to state -> Stack 1: [B], Stack 2: [D, F, A], Stack 3: [E, C] | Plan so far [Move B from E to table | Move E from C to table | Move C from A to E] | Exploring action Move A from F to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, F], Stack 4: [E, C] | Exploring action Move F from D to A | New state -> Invalid | Exploring action Move F from D to B | New state -> Invalid | Exploring action Move A from F to B | New state -> Stack 1: [B, A], Stack 2: [D, F], Stack 3: [E, C] | Exploring action Move C from E to table | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, F, A], Stack 4: [E] | Taking action Move A from F to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D, F], Stack 5: [E] | Plan so far [Move B from E to table | Move E from C to table | Move C from A to table | Move A from F to table] | Exploring action Move D from table to A | New state -> Invalid | Exploring action Move F from D to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Exploring action Move F from D to B | New state -> Stack 1: [A], Stack 2: [B, F], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Exploring action Move D from table to E | New state -> Invalid | Exploring action Move F from D to C | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, F], Stack 4: [D], Stack 5: [E] | Taking action Move F from D to B | Moved to state -> Stack 1: [A], Stack 2: [B, F], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Plan so far [Move B from E to table | Move E from C to table | Move C from A to table | Move A from F to table | Move F from D to B] | Exploring action Move D from table to F | New state -> Stack 1: [A], Stack 2: [B, F, D], Stack 3: [C], Stack 4: [E] | Exploring action Move B from table to E | New state -> Invalid | Exploring action Move C from table to E | New state -> Stack 1: [A], Stack 2: [B, F], Stack 3: [D], Stack 4: [E, C] | Exploring action Move A from table to E | New state -> Stack 1: [B, F], Stack 2: [C], Stack 3: [D], Stack 4: [E, A] | Taking action Move D from table to F | Moved to state -> Stack 1: [A], Stack 2: [B, F, D], Stack 3: [C], Stack 4: [E] | Plan so far [Move B from E to table | Move E from C to table | Move C from A to table | Move A from F to table | Move F from D to B | Move D from table to F] | Exploring action Move B from table to E | New state -> Invalid | Exploring action Move C from table to E | New state -> Stack 1: [A], Stack 2: [B, F, D], Stack 3: [E, C] | Exploring action Move D from F to table | New state -> Stack 1: [A], Stack 2: [B, F], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Exploring action Move A from table to D | New state -> Stack 1: [B, F, D, A], Stack 2: [C], Stack 3: [E] | Taking action Move A from table to D | Moved to state -> Stack 1: [B, F, D, A], Stack 2: [C], Stack 3: [E] | Plan so far [Move B from E to table | Move E from C to table | Move C from A to table | Move A from F to table | Move F from D to B | Move D from table to F | Move A from table to D] | Exploring action Move C from table to E | New state -> Stack 1: [B, F, D, A], Stack 2: [E, C] | Exploring action Move E from table to A | New state -> Stack 1: [B, F, D, A, E], Stack 2: [C] | Exploring action Move F from B to A | New state -> Invalid | Exploring action Move E from table to C | New state -> Stack 1: [B, F, D, A], Stack 2: [C, E] | Taking action Move E from table to A | Moved to state -> Stack 1: [B, F, D, A, E], Stack 2: [C] | Plan so far [Move B from E to table | Move E from C to table | Move C from A to table | Move A from F to table | Move F from D to B | Move D from table to F | Move A from table to D | Move E from table to A] | Exploring action Move E from A to C | New state -> Stack 1: [B, F, D, A], Stack 2: [C, E] | Exploring action Move E from A to table | New state -> Stack 1: [B, F, D, A], Stack 2: [C], Stack 3: [E] | Exploring action Move D from F to table | New state -> Invalid | Exploring action Move C from table to E | New state -> Stack 1: [B, F, D, A, E, C] | Taking action Move C from table to E | Moved to state -> Stack 1: [B, F, D, A, E, C] | Plan so far [Move B from E to table | Move E from C to table | Move C from A to table | Move A from F to table | Move F from D to B | Move D from table to F | Move A from table to D | Move E from table to A | Move C from table to E] | Reached goal state!",
        "system2_states_v1": 42
    },
    {
        "idx": 603,
        "start": [
            [
                "table",
                "B",
                "A",
                "E",
                "D"
            ],
            [
                "table",
                "C"
            ]
        ],
        "goal": [
            [
                "table",
                "E",
                "D",
                "B",
                "A",
                "C"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": false,
                "on": "B",
                "under": "E",
                "ontable": false
            },
            "B": {
                "clear": false,
                "on": -1,
                "under": "A",
                "ontable": true
            },
            "C": {
                "clear": true,
                "on": -1,
                "under": -1,
                "ontable": true
            },
            "D": {
                "clear": true,
                "on": "E",
                "under": -1,
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": "A",
                "under": "D",
                "ontable": false
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": false,
                "on": "B",
                "under": "C",
                "ontable": false
            },
            "B": {
                "clear": false,
                "on": "D",
                "under": "A",
                "ontable": false
            },
            "C": {
                "clear": true,
                "on": "A",
                "under": -1,
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": "E",
                "under": "B",
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": -1,
                "under": "D",
                "ontable": true
            }
        },
        "plan_len": 7,
        "num_blocks": 5,
        "prompt": "The initial state:\nThe hand is empty.\nB is on the table. A is on B. E is on A. D is on E. D is clear.\nC is on the table. C is clear.\n\nThe goal is:\nE is on the table. D is on E. B is on D. A is on B. C is on A. C is clear.\n",
        "system1_plan": "Move D from E to table | Move E from A to table | Move A from B to table | Move D from table to E | Move B from table to D | Move A from table to B | Move C from table to A",
        "system1_states": 7,
        "system2_plan_v1": "Moved to state -> Stack 1: [B, A, E, D], Stack 2: [C] | Plan so far [] | Exploring action Move D from E to table | New state -> Stack 1: [B, A, E], Stack 2: [C], Stack 3: [D] | Exploring action Move A from B to table | New state -> Invalid | Exploring action Move D from E to C | New state -> Stack 1: [B, A, E], Stack 2: [C, D] | Exploring action Move C from table to D | New state -> Stack 1: [B, A, E, D, C] | Taking action Move D from E to table | Moved to state -> Stack 1: [B, A, E], Stack 2: [C], Stack 3: [D] | Plan so far [Move D from E to table] | Exploring action Move A from B to C | New state -> Invalid | Exploring action Move E from A to table | New state -> Stack 1: [B, A], Stack 2: [C], Stack 3: [D], Stack 4: [E] | Exploring action Move E from A to C | New state -> Stack 1: [B, A], Stack 2: [C, E], Stack 3: [D] | Exploring action Move E from A to D | New state -> Stack 1: [B, A], Stack 2: [C], Stack 3: [D, E] | Exploring action Move B from table to D | New state -> Invalid | Taking action Move E from A to table | Moved to state -> Stack 1: [B, A], Stack 2: [C], Stack 3: [D], Stack 4: [E] | Plan so far [Move D from E to table | Move E from A to table] | Exploring action Move A from B to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Exploring action Move C from table to A | New state -> Stack 1: [B, A, C], Stack 2: [D], Stack 3: [E] | Exploring action Move D from table to E | New state -> Stack 1: [B, A], Stack 2: [C], Stack 3: [E, D] | Exploring action Move B from table to C | New state -> Invalid | Taking action Move C from table to A | Moved to state -> Stack 1: [B, A, C], Stack 2: [D], Stack 3: [E] | Plan so far [Move D from E to table | Move E from A to table | Move C from table to A] | Exploring action Move E from table to C | New state -> Stack 1: [B, A, C, E], Stack 2: [D] | Exploring action Move E from table to D | New state -> Stack 1: [B, A, C], Stack 2: [D, E] | Exploring action Move D from table to E | New state -> Stack 1: [B, A, C], Stack 2: [E, D] | Exploring action Move A from B to E | New state -> Invalid | Exploring action Move A from B to C | New state -> Invalid | Taking action Move D from table to E | Moved to state -> Stack 1: [B, A, C], Stack 2: [E, D] | Plan so far [Move D from E to table | Move E from A to table | Move C from table to A | Move D from table to E] | Exploring action Move A from B to D | New state -> Invalid | Exploring action Move D from E to table | New state -> Stack 1: [B, A, C], Stack 2: [D], Stack 3: [E] | Exploring action Move B from table to C | New state -> Invalid | Exploring action Move C from A to table | New state -> Stack 1: [B, A], Stack 2: [C], Stack 3: [E, D] | Exploring action Move C from A to D | New state -> Stack 1: [B, A], Stack 2: [E, D, C] | Taking action Move A from B to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Plan so far [Move D from E to table | Move E from A to table | Move A from B to table] | Exploring action Move A from table to D | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, A], Stack 4: [E] | Exploring action Move C from table to A | New state -> Stack 1: [A, C], Stack 2: [B], Stack 3: [D], Stack 4: [E] | Exploring action Move D from table to E | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [E, D] | Taking action Move D from table to E | Moved to state -> Stack 1: [B, A], Stack 2: [C], Stack 3: [E, D] | Plan so far [Move D from E to table | Move E from A to table | Move D from table to E] | Exploring action Move C from table to A | New state -> Stack 1: [B, A, C], Stack 2: [E, D] | Exploring action Move A from B to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [E, D] | Exploring action Move A from B to D | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [E, D, A] | Exploring action Move E from table to C | New state -> Invalid | Taking action Move C from table to A | Moved to state -> Stack 1: [B, A, C], Stack 2: [E, D] | Plan so far [Move D from E to table | Move E from A to table | Move D from table to E | Move C from table to A] | Taking action Move D from table to E | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [E, D] | Plan so far [Move D from E to table | Move E from A to table | Move A from B to table | Move D from table to E] | Exploring action Move E from table to A | New state -> Invalid | Exploring action Move C from table to A | New state -> Stack 1: [A, C], Stack 2: [B], Stack 3: [E, D] | Exploring action Move B from table to D | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [E, D, B] | Exploring action Move A from table to B | New state -> Stack 1: [B, A], Stack 2: [C], Stack 3: [E, D] | Taking action Move A from B to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [E, D] | Plan so far [Move D from E to table | Move E from A to table | Move D from table to E | Move A from B to table] | Taking action Move B from table to D | Moved to state -> Stack 1: [A], Stack 2: [C], Stack 3: [E, D, B] | Plan so far [Move D from E to table | Move E from A to table | Move A from B to table | Move D from table to E | Move B from table to D] | Exploring action Move B from D to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [E, D] | Exploring action Move A from table to B | New state -> Stack 1: [C], Stack 2: [E, D, B, A] | Exploring action Move C from table to A | New state -> Stack 1: [A, C], Stack 2: [E, D, B] | Exploring action Move D from E to B | New state -> Invalid | Taking action Move A from table to B | Moved to state -> Stack 1: [C], Stack 2: [E, D, B, A] | Plan so far [Move D from E to table | Move E from A to table | Move A from B to table | Move D from table to E | Move B from table to D | Move A from table to B] | Exploring action Move D from E to A | New state -> Invalid | Exploring action Move C from table to A | New state -> Stack 1: [E, D, B, A, C] | Exploring action Move A from B to table | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [E, D, B] | Exploring action Move A from B to C | New state -> Stack 1: [C, A], Stack 2: [E, D, B] | Taking action Move C from table to A | Moved to state -> Stack 1: [E, D, B, A, C] | Plan so far [Move D from E to table | Move E from A to table | Move A from B to table | Move D from table to E | Move B from table to D | Move A from table to B | Move C from table to A] | Reached goal state!",
        "system2_states_v1": 42
    },
    {
        "idx": 697,
        "start": [
            [
                "table",
                "D",
                "F",
                "E",
                "C",
                "A",
                "B"
            ]
        ],
        "goal": [
            [
                "table",
                "A",
                "F",
                "D",
                "B",
                "C"
            ],
            [
                "table",
                "E"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": false,
                "on": "C",
                "under": "B",
                "ontable": false
            },
            "B": {
                "clear": true,
                "on": "A",
                "under": -1,
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": "E",
                "under": "A",
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": -1,
                "under": "F",
                "ontable": true
            },
            "E": {
                "clear": false,
                "on": "F",
                "under": "C",
                "ontable": false
            },
            "F": {
                "clear": false,
                "on": "D",
                "under": "E",
                "ontable": false
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": false,
                "on": -1,
                "under": "F",
                "ontable": true
            },
            "B": {
                "clear": false,
                "on": "D",
                "under": "C",
                "ontable": false
            },
            "C": {
                "clear": true,
                "on": "B",
                "under": -1,
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": "F",
                "under": "B",
                "ontable": false
            },
            "E": {
                "clear": true,
                "on": -1,
                "under": -1,
                "ontable": true
            },
            "F": {
                "clear": false,
                "on": "A",
                "under": "D",
                "ontable": false
            }
        },
        "plan_len": 8,
        "num_blocks": 6,
        "prompt": "The initial state:\nThe hand is empty.\nD is on the table. F is on D. E is on F. C is on E. A is on C. B is on A. B is clear.\n\nThe goal is:\nA is on the table. F is on A. D is on F. B is on D. C is on B. C is clear.\nE is on the table. E is clear.\n",
        "system1_plan": "Move B from A to table | Move A from C to table | Move C from E to table | Move E from F to table | Move F from D to A | Move D from table to F | Move B from table to D | Move C from table to B",
        "system1_states": 8,
        "system2_plan_v1": "Moved to state -> Stack 1: [D, F, E, C, A, B] | Plan so far [] | Exploring action Move A from C to table | New state -> Invalid | Exploring action Move B from A to table | New state -> Stack 1: [B], Stack 2: [D, F, E, C, A] | Taking action Move B from A to table | Moved to state -> Stack 1: [B], Stack 2: [D, F, E, C, A] | Plan so far [Move B from A to table] | Exploring action Move A from C to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, F, E, C] | Exploring action Move D from table to A | New state -> Invalid | Exploring action Move E from F to B | New state -> Invalid | Exploring action Move A from C to B | New state -> Stack 1: [B, A], Stack 2: [D, F, E, C] | Exploring action Move B from table to A | New state -> Stack 1: [D, F, E, C, A, B] | Taking action Move A from C to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, F, E, C] | Plan so far [Move B from A to table | Move A from C to table] | Exploring action Move C from E to B | New state -> Stack 1: [A], Stack 2: [B, C], Stack 3: [D, F, E] | Exploring action Move E from F to C | New state -> Invalid | Exploring action Move D from table to C | New state -> Invalid | Exploring action Move C from E to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D, F, E] | Exploring action Move C from E to A | New state -> Stack 1: [A, C], Stack 2: [B], Stack 3: [D, F, E] | Taking action Move C from E to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D, F, E] | Plan so far [Move B from A to table | Move A from C to table | Move C from E to table] | Exploring action Move F from D to E | New state -> Invalid | Exploring action Move E from F to C | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, E], Stack 4: [D, F] | Exploring action Move E from F to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D, F], Stack 5: [E] | Exploring action Move E from F to B | New state -> Stack 1: [A], Stack 2: [B, E], Stack 3: [C], Stack 4: [D, F] | Taking action Move E from F to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D, F], Stack 5: [E] | Plan so far [Move B from A to table | Move A from C to table | Move C from E to table | Move E from F to table] | Exploring action Move D from table to C | New state -> Invalid | Exploring action Move F from D to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Exploring action Move F from D to A | New state -> Stack 1: [A, F], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Exploring action Move F from D to C | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, F], Stack 4: [D], Stack 5: [E] | Exploring action Move D from table to F | New state -> Invalid | Taking action Move F from D to A | Moved to state -> Stack 1: [A, F], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Plan so far [Move B from A to table | Move A from C to table | Move C from E to table | Move E from F to table | Move F from D to A] | Exploring action Move A from table to B | New state -> Invalid | Exploring action Move D from table to F | New state -> Stack 1: [A, F, D], Stack 2: [B], Stack 3: [C], Stack 4: [E] | Exploring action Move C from table to B | New state -> Stack 1: [A, F], Stack 2: [B, C], Stack 3: [D], Stack 4: [E] | Exploring action Move C from table to D | New state -> Stack 1: [A, F], Stack 2: [B], Stack 3: [D, C], Stack 4: [E] | Taking action Move D from table to F | Moved to state -> Stack 1: [A, F, D], Stack 2: [B], Stack 3: [C], Stack 4: [E] | Plan so far [Move B from A to table | Move A from C to table | Move C from E to table | Move E from F to table | Move F from D to A | Move D from table to F] | Exploring action Move B from table to D | New state -> Stack 1: [A, F, D, B], Stack 2: [C], Stack 3: [E] | Exploring action Move C from table to B | New state -> Stack 1: [A, F, D], Stack 2: [B, C], Stack 3: [E] | Exploring action Move D from F to table | New state -> Stack 1: [A, F], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Exploring action Move A from table to B | New state -> Invalid | Taking action Move B from table to D | Moved to state -> Stack 1: [A, F, D, B], Stack 2: [C], Stack 3: [E] | Plan so far [Move B from A to table | Move A from C to table | Move C from E to table | Move E from F to table | Move F from D to A | Move D from table to F | Move B from table to D] | Exploring action Move F from A to C | New state -> Invalid | Exploring action Move E from table to B | New state -> Stack 1: [A, F, D, B, E], Stack 2: [C] | Exploring action Move C from table to B | New state -> Stack 1: [A, F, D, B, C], Stack 2: [E] | Exploring action Move A from table to E | New state -> Invalid | Exploring action Move B from D to table | New state -> Stack 1: [A, F, D], Stack 2: [B], Stack 3: [C], Stack 4: [E] | Taking action Move C from table to B | Moved to state -> Stack 1: [A, F, D, B, C], Stack 2: [E] | Plan so far [Move B from A to table | Move A from C to table | Move C from E to table | Move E from F to table | Move F from D to A | Move D from table to F | Move B from table to D | Move C from table to B] | Reached goal state!",
        "system2_states_v1": 34
    },
    {
        "idx": 789,
        "start": [
            [
                "table",
                "B",
                "F",
                "A"
            ],
            [
                "table",
                "D",
                "C",
                "E"
            ]
        ],
        "goal": [
            [
                "table",
                "F",
                "B",
                "D",
                "A",
                "C",
                "E"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": true,
                "on": "F",
                "under": -1,
                "ontable": false
            },
            "B": {
                "clear": false,
                "on": -1,
                "under": "F",
                "ontable": true
            },
            "C": {
                "clear": false,
                "on": "D",
                "under": "E",
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": -1,
                "under": "C",
                "ontable": true
            },
            "E": {
                "clear": true,
                "on": "C",
                "under": -1,
                "ontable": false
            },
            "F": {
                "clear": false,
                "on": "B",
                "under": "A",
                "ontable": false
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": false,
                "on": "D",
                "under": "C",
                "ontable": false
            },
            "B": {
                "clear": false,
                "on": "F",
                "under": "D",
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": "A",
                "under": "E",
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": "B",
                "under": "A",
                "ontable": false
            },
            "E": {
                "clear": true,
                "on": "C",
                "under": -1,
                "ontable": false
            },
            "F": {
                "clear": false,
                "on": -1,
                "under": "B",
                "ontable": true
            }
        },
        "plan_len": 9,
        "num_blocks": 6,
        "prompt": "The initial state:\nThe hand is empty.\nB is on the table. F is on B. A is on F. A is clear.\nD is on the table. C is on D. E is on C. E is clear.\n\nThe goal is:\nF is on the table. B is on F. D is on B. A is on D. C is on A. E is on C. E is clear.\n",
        "system1_plan": "Move A from F to table | Move F from B to table | Move B from table to F | Move E from C to table | Move C from D to table | Move D from table to B | Move A from table to D | Move C from table to A | Move E from table to C",
        "system1_states": 9,
        "system2_plan_v1": "Moved to state -> Stack 1: [B, F, A], Stack 2: [D, C, E] | Plan so far [] | Exploring action Move A from F to table | New state -> Stack 1: [A], Stack 2: [B, F], Stack 3: [D, C, E] | Exploring action Move F from B to E | New state -> Invalid | Exploring action Move E from C to table | New state -> Stack 1: [B, F, A], Stack 2: [D, C], Stack 3: [E] | Exploring action Move A from F to E | New state -> Stack 1: [B, F], Stack 2: [D, C, E, A] | Taking action Move A from F to table | Moved to state -> Stack 1: [A], Stack 2: [B, F], Stack 3: [D, C, E] | Plan so far [Move A from F to table] | Exploring action Move D from table to F | New state -> Invalid | Exploring action Move F from B to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, C, E], Stack 4: [F] | Exploring action Move E from C to table | New state -> Stack 1: [A], Stack 2: [B, F], Stack 3: [D, C], Stack 4: [E] | Exploring action Move F from B to A | New state -> Stack 1: [A, F], Stack 2: [B], Stack 3: [D, C, E] | Taking action Move F from B to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, C, E], Stack 4: [F] | Plan so far [Move A from F to table | Move F from B to table] | Exploring action Move D from table to B | New state -> Invalid | Exploring action Move B from table to F | New state -> Stack 1: [A], Stack 2: [D, C, E], Stack 3: [F, B] | Exploring action Move E from C to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, C], Stack 4: [E], Stack 5: [F] | Exploring action Move A from table to B | New state -> Stack 1: [B, A], Stack 2: [D, C, E], Stack 3: [F] | Taking action Move B from table to F | Moved to state -> Stack 1: [A], Stack 2: [D, C, E], Stack 3: [F, B] | Plan so far [Move A from F to table | Move F from B to table | Move B from table to F] | Exploring action Move E from C to table | New state -> Stack 1: [A], Stack 2: [D, C], Stack 3: [E], Stack 4: [F, B] | Exploring action Move F from table to A | New state -> Invalid | Exploring action Move E from C to A | New state -> Stack 1: [A, E], Stack 2: [D, C], Stack 3: [F, B] | Exploring action Move A from table to B | New state -> Stack 1: [D, C, E], Stack 2: [F, B, A] | Taking action Move E from C to table | Moved to state -> Stack 1: [A], Stack 2: [B, F], Stack 3: [D, C], Stack 4: [E] | Plan so far [Move A from F to table | Move E from C to table] | Exploring action Move C from D to table | New state -> Stack 1: [A], Stack 2: [B, F], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Exploring action Move D from table to E | New state -> Invalid | Exploring action Move C from D to E | New state -> Stack 1: [A], Stack 2: [B, F], Stack 3: [D], Stack 4: [E, C] | Exploring action Move F from B to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, C], Stack 4: [E], Stack 5: [F] | Taking action Move E from C to table | Moved to state -> Stack 1: [A], Stack 2: [D, C], Stack 3: [E], Stack 4: [F, B] | Plan so far [Move A from F to table | Move F from B to table | Move B from table to F | Move E from C to table] | Exploring action Move E from table to C | New state -> Stack 1: [A], Stack 2: [D, C, E], Stack 3: [F, B] | Exploring action Move D from table to B | New state -> Invalid | Exploring action Move C from D to table | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [F, B] | Exploring action Move F from table to A | New state -> Invalid | Exploring action Move C from D to A | New state -> Stack 1: [A, C], Stack 2: [D], Stack 3: [E], Stack 4: [F, B] | Taking action Move F from B to A | Moved to state -> Stack 1: [A, F], Stack 2: [B], Stack 3: [D, C, E] | Plan so far [Move A from F to table | Move F from B to A] | Exploring action Move F from A to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, C, E], Stack 4: [F] | Exploring action Move E from C to table | New state -> Stack 1: [A, F], Stack 2: [B], Stack 3: [D, C], Stack 4: [E] | Exploring action Move F from A to B | New state -> Stack 1: [A], Stack 2: [B, F], Stack 3: [D, C, E] | Exploring action Move C from D to F | New state -> Invalid | Taking action Move C from D to table | Moved to state -> Stack 1: [A], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [F, B] | Plan so far [Move A from F to table | Move F from B to table | Move B from table to F | Move E from C to table | Move C from D to table] | Exploring action Move F from table to A | New state -> Invalid | Exploring action Move F from table to B | New state -> Invalid | Exploring action Move E from table to C | New state -> Stack 1: [A], Stack 2: [C, E], Stack 3: [D], Stack 4: [F, B] | Exploring action Move A from table to B | New state -> Stack 1: [C], Stack 2: [D], Stack 3: [E], Stack 4: [F, B, A] | Exploring action Move D from table to B | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [E], Stack 4: [F, B, D] | Taking action Move F from A to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, C, E], Stack 4: [F] | Plan so far [Move A from F to table | Move F from B to A | Move F from A to table] | Taking action Move F from B to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, C], Stack 4: [E], Stack 5: [F] | Plan so far [Move A from F to table | Move E from C to table | Move F from B to table] | Exploring action Move C from D to E | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D], Stack 4: [E, C], Stack 5: [F] | Exploring action Move D from table to A | New state -> Invalid | Exploring action Move C from D to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Exploring action Move D from table to C | New state -> Invalid | Exploring action Move B from table to F | New state -> Stack 1: [A], Stack 2: [D, C], Stack 3: [E], Stack 4: [F, B] | Taking action Move E from C to table | Moved to state -> Stack 1: [B, F, A], Stack 2: [D, C], Stack 3: [E] | Plan so far [Move E from C to table] | Exploring action Move A from F to E | New state -> Stack 1: [B, F], Stack 2: [D, C], Stack 3: [E, A] | Exploring action Move A from F to table | New state -> Stack 1: [A], Stack 2: [B, F], Stack 3: [D, C], Stack 4: [E] | Exploring action Move C from D to table | New state -> Stack 1: [B, F, A], Stack 2: [C], Stack 3: [D], Stack 4: [E] | Exploring action Move F from B to table | New state -> Invalid | Taking action Move D from table to B | Moved to state -> Stack 1: [A], Stack 2: [C], Stack 3: [E], Stack 4: [F, B, D] | Plan so far [Move A from F to table | Move F from B to table | Move B from table to F | Move E from C to table | Move C from D to table | Move D from table to B] | Exploring action Move E from table to C | New state -> Stack 1: [A], Stack 2: [C, E], Stack 3: [F, B, D] | Exploring action Move D from B to table | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [F, B] | Exploring action Move B from F to table | New state -> Invalid | Exploring action Move A from table to D | New state -> Stack 1: [C], Stack 2: [E], Stack 3: [F, B, D, A] | Exploring action Move B from F to E | New state -> Invalid | Taking action Move A from F to table | Moved to state -> Stack 1: [A], Stack 2: [B, F], Stack 3: [D, C], Stack 4: [E] | Plan so far [Move E from C to table | Move A from F to table] | Taking action Move C from D to table | Moved to state -> Stack 1: [B, F, A], Stack 2: [C], Stack 3: [D], Stack 4: [E] | Plan so far [Move E from C to table | Move C from D to table] | Exploring action Move A from F to table | New state -> Stack 1: [A], Stack 2: [B, F], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Exploring action Move A from F to D | New state -> Stack 1: [B, F], Stack 2: [C], Stack 3: [D, A], Stack 4: [E] | Exploring action Move E from table to C | New state -> Stack 1: [B, F, A], Stack 2: [C, E], Stack 3: [D] | Exploring action Move B from table to E | New state -> Invalid | Taking action Move A from table to D | Moved to state -> Stack 1: [C], Stack 2: [E], Stack 3: [F, B, D, A] | Plan so far [Move A from F to table | Move F from B to table | Move B from table to F | Move E from C to table | Move C from D to table | Move D from table to B | Move A from table to D] | Exploring action Move E from table to C | New state -> Stack 1: [C, E], Stack 2: [F, B, D, A] | Exploring action Move C from table to A | New state -> Stack 1: [E], Stack 2: [F, B, D, A, C] | Exploring action Move E from table to A | New state -> Stack 1: [C], Stack 2: [F, B, D, A, E] | Exploring action Move B from F to table | New state -> Invalid | Taking action Move A from F to table | Moved to state -> Stack 1: [A], Stack 2: [B, F], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Plan so far [Move E from C to table | Move C from D to table | Move A from F to table] | Exploring action Move F from B to D | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D, F], Stack 5: [E] | Exploring action Move B from table to C | New state -> Invalid | Exploring action Move E from table to C | New state -> Stack 1: [A], Stack 2: [B, F], Stack 3: [C, E], Stack 4: [D] | Exploring action Move F from B to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Exploring action Move B from table to D | New state -> Invalid | Taking action Move B from table to F | Moved to state -> Stack 1: [A], Stack 2: [D, C], Stack 3: [E], Stack 4: [F, B] | Plan so far [Move A from F to table | Move E from C to table | Move F from B to table | Move B from table to F] | Taking action Move C from D to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Plan so far [Move A from F to table | Move E from C to table | Move F from B to table | Move C from D to table] | Exploring action Move B from table to F | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [F, B] | Exploring action Move A from table to D | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, A], Stack 4: [E], Stack 5: [F] | Exploring action Move E from table to C | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, E], Stack 4: [D], Stack 5: [F] | Taking action Move E from C to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, C], Stack 4: [E], Stack 5: [F] | Plan so far [Move A from F to table | Move F from B to table | Move E from C to table] | Taking action Move F from B to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Plan so far [Move E from C to table | Move C from D to table | Move A from F to table | Move F from B to table] | Taking action Move B from table to F | Moved to state -> Stack 1: [A], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [F, B] | Plan so far [Move A from F to table | Move E from C to table | Move F from B to table | Move C from D to table | Move B from table to F] | Taking action Move C from D to table | Moved to state -> Stack 1: [A], Stack 2: [B, F], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Plan so far [Move A from F to table | Move E from C to table | Move C from D to table] | Taking action Move C from table to A | Moved to state -> Stack 1: [E], Stack 2: [F, B, D, A, C] | Plan so far [Move A from F to table | Move F from B to table | Move B from table to F | Move E from C to table | Move C from D to table | Move D from table to B | Move A from table to D | Move C from table to A] | Exploring action Move A from D to table | New state -> Invalid | Exploring action Move C from A to table | New state -> Stack 1: [C], Stack 2: [E], Stack 3: [F, B, D, A] | Exploring action Move A from D to C | New state -> Invalid | Exploring action Move C from A to E | New state -> Stack 1: [E, C], Stack 2: [F, B, D, A] | Exploring action Move E from table to C | New state -> Stack 1: [F, B, D, A, C, E] | Taking action Move E from table to C | Moved to state -> Stack 1: [F, B, D, A, C, E] | Plan so far [Move A from F to table | Move F from B to table | Move B from table to F | Move E from C to table | Move C from D to table | Move D from table to B | Move A from table to D | Move C from table to A | Move E from table to C] | Reached goal state!",
        "system2_states_v1": 69
    },
    {
        "idx": 911,
        "start": [
            [
                "table",
                "E"
            ],
            [
                "table",
                "F",
                "G",
                "C",
                "A",
                "D",
                "B"
            ]
        ],
        "goal": [
            [
                "table",
                "C",
                "A",
                "D",
                "E",
                "G",
                "B"
            ],
            [
                "table",
                "F"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": false,
                "on": "C",
                "under": "D",
                "ontable": false
            },
            "B": {
                "clear": true,
                "on": "D",
                "under": -1,
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": "G",
                "under": "A",
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": "A",
                "under": "B",
                "ontable": false
            },
            "E": {
                "clear": true,
                "on": -1,
                "under": -1,
                "ontable": true
            },
            "F": {
                "clear": false,
                "on": -1,
                "under": "G",
                "ontable": true
            },
            "G": {
                "clear": false,
                "on": "F",
                "under": "C",
                "ontable": false
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": false,
                "on": "C",
                "under": "D",
                "ontable": false
            },
            "B": {
                "clear": true,
                "on": "G",
                "under": -1,
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": -1,
                "under": "A",
                "ontable": true
            },
            "D": {
                "clear": false,
                "on": "A",
                "under": "E",
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": "D",
                "under": "G",
                "ontable": false
            },
            "F": {
                "clear": true,
                "on": -1,
                "under": -1,
                "ontable": true
            },
            "G": {
                "clear": false,
                "on": "E",
                "under": "B",
                "ontable": false
            }
        },
        "plan_len": 10,
        "num_blocks": 7,
        "prompt": "The initial state:\nThe hand is empty.\nE is on the table. E is clear.\nF is on the table. G is on F. C is on G. A is on C. D is on A. B is on D. B is clear.\n\nThe goal is:\nC is on the table. A is on C. D is on A. E is on D. G is on E. B is on G. B is clear.\nF is on the table. F is clear.\n",
        "system1_plan": "Move B from D to table | Move D from A to table | Move A from C to table | Move C from G to table | Move G from F to table | Move A from table to C | Move D from table to A | Move E from table to D | Move G from table to E | Move B from table to G",
        "system1_states": 10,
        "system2_plan_v1": "Moved to state -> Stack 1: [E], Stack 2: [F, G, C, A, D, B] | Plan so far [] | Exploring action Move B from D to table | New state -> Stack 1: [B], Stack 2: [E], Stack 3: [F, G, C, A, D] | Exploring action Move B from D to E | New state -> Stack 1: [E, B], Stack 2: [F, G, C, A, D] | Exploring action Move E from table to B | New state -> Stack 1: [F, G, C, A, D, B, E] | Exploring action Move G from F to table | New state -> Invalid | Taking action Move B from D to table | Moved to state -> Stack 1: [B], Stack 2: [E], Stack 3: [F, G, C, A, D] | Plan so far [Move B from D to table] | Exploring action Move C from G to B | New state -> Invalid | Exploring action Move E from table to D | New state -> Stack 1: [B], Stack 2: [F, G, C, A, D, E] | Exploring action Move E from table to B | New state -> Stack 1: [B, E], Stack 2: [F, G, C, A, D] | Exploring action Move B from table to D | New state -> Stack 1: [E], Stack 2: [F, G, C, A, D, B] | Taking action Move E from table to D | Moved to state -> Stack 1: [B], Stack 2: [F, G, C, A, D, E] | Plan so far [Move B from D to table | Move E from table to D] | Exploring action Move E from D to B | New state -> Stack 1: [B, E], Stack 2: [F, G, C, A, D] | Exploring action Move B from table to E | New state -> Stack 1: [F, G, C, A, D, E, B] | Exploring action Move D from A to E | New state -> Invalid | Exploring action Move E from D to table | New state -> Stack 1: [B], Stack 2: [E], Stack 3: [F, G, C, A, D] | Taking action Move B from D to E | Moved to state -> Stack 1: [E, B], Stack 2: [F, G, C, A, D] | Plan so far [Move B from D to E] | Exploring action Move F from table to D | New state -> Invalid | Exploring action Move B from E to table | New state -> Stack 1: [B], Stack 2: [E], Stack 3: [F, G, C, A, D] | Exploring action Move B from E to D | New state -> Stack 1: [E], Stack 2: [F, G, C, A, D, B] | Exploring action Move A from C to B | New state -> Invalid | Exploring action Move D from A to table | New state -> Stack 1: [D], Stack 2: [E, B], Stack 3: [F, G, C, A] | Taking action Move B from E to table | Moved to state -> Stack 1: [B], Stack 2: [E], Stack 3: [F, G, C, A, D] | Plan so far [Move B from D to E | Move B from E to table] | Moved to state -> Stack 1: [E], Stack 2: [F, G, C, A, D, B] | Plan so far [Move B from D to E | Move B from E to D] | Moved to state -> Stack 1: [E], Stack 2: [F, G, C, A, D, B] | Plan so far [Move B from D to table | Move B from table to D] | Taking action Move D from A to table | Moved to state -> Stack 1: [B], Stack 2: [D], Stack 3: [E], Stack 4: [F, G, C, A] | Plan so far [Move B from D to table | Move D from A to table] | Exploring action Move A from C to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D], Stack 4: [E], Stack 5: [F, G, C] | Exploring action Move C from G to B | New state -> Invalid | Exploring action Move C from G to D | New state -> Invalid | Exploring action Move D from table to A | New state -> Stack 1: [B], Stack 2: [E], Stack 3: [F, G, C, A, D] | Exploring action Move A from C to D | New state -> Stack 1: [B], Stack 2: [D, A], Stack 3: [E], Stack 4: [F, G, C] | Taking action Move B from table to E | Moved to state -> Stack 1: [E, B], Stack 2: [F, G, C, A, D] | Plan so far [Move B from D to table | Move B from table to E] | Taking action Move E from D to table | Moved to state -> Stack 1: [B], Stack 2: [E], Stack 3: [F, G, C, A, D] | Plan so far [Move B from D to table | Move E from table to D | Move E from D to table] | Taking action Move A from C to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [D], Stack 4: [E], Stack 5: [F, G, C] | Plan so far [Move B from D to table | Move D from A to table | Move A from C to table] | Exploring action Move C from G to E | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D], Stack 4: [E, C], Stack 5: [F, G] | Exploring action Move G from F to E | New state -> Invalid | Exploring action Move G from F to A | New state -> Invalid | Exploring action Move C from G to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F, G] | Exploring action Move C from G to D | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, C], Stack 4: [E], Stack 5: [F, G] | Taking action Move E from table to B | Moved to state -> Stack 1: [F, G, C, A, D, B, E] | Plan so far [Move E from table to B] | Exploring action Move B from D to table | New state -> Invalid | Exploring action Move E from B to table | New state -> Stack 1: [E], Stack 2: [F, G, C, A, D, B] | Taking action Move C from G to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F, G] | Plan so far [Move B from D to table | Move D from A to table | Move A from C to table | Move C from G to table] | Exploring action Move F from table to A | New state -> Invalid | Exploring action Move A from table to C | New state -> Stack 1: [B], Stack 2: [C, A], Stack 3: [D], Stack 4: [E], Stack 5: [F, G] | Exploring action Move G from F to B | New state -> Stack 1: [A], Stack 2: [B, G], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Exploring action Move G from F to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F], Stack 7: [G] | Taking action Move G from F to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F], Stack 7: [G] | Plan so far [Move B from D to table | Move D from A to table | Move A from C to table | Move C from G to table | Move G from F to table] | Exploring action Move B from table to A | New state -> Stack 1: [A, B], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Exploring action Move B from table to G | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [F], Stack 6: [G, B] | Exploring action Move A from table to C | New state -> Stack 1: [B], Stack 2: [C, A], Stack 3: [D], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Taking action Move A from table to C | Moved to state -> Stack 1: [B], Stack 2: [C, A], Stack 3: [D], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Plan so far [Move B from D to table | Move D from A to table | Move A from C to table | Move C from G to table | Move G from F to table | Move A from table to C] | Exploring action Move D from table to A | New state -> Stack 1: [B], Stack 2: [C, A, D], Stack 3: [E], Stack 4: [F], Stack 5: [G] | Exploring action Move C from table to B | New state -> Invalid | Exploring action Move C from table to E | New state -> Invalid | Exploring action Move B from table to G | New state -> Stack 1: [C, A], Stack 2: [D], Stack 3: [E], Stack 4: [F], Stack 5: [G, B] | Exploring action Move D from table to E | New state -> Stack 1: [B], Stack 2: [C, A], Stack 3: [E, D], Stack 4: [F], Stack 5: [G] | Taking action Move D from table to A | Moved to state -> Stack 1: [B], Stack 2: [C, A, D], Stack 3: [E], Stack 4: [F], Stack 5: [G] | Plan so far [Move B from D to table | Move D from A to table | Move A from C to table | Move C from G to table | Move G from F to table | Move A from table to C | Move D from table to A] | Exploring action Move B from table to G | New state -> Stack 1: [C, A, D], Stack 2: [E], Stack 3: [F], Stack 4: [G, B] | Exploring action Move E from table to G | New state -> Stack 1: [B], Stack 2: [C, A, D], Stack 3: [F], Stack 4: [G, E] | Exploring action Move A from C to D | New state -> Invalid | Exploring action Move E from table to D | New state -> Stack 1: [B], Stack 2: [C, A, D, E], Stack 3: [F], Stack 4: [G] | Taking action Move E from table to D | Moved to state -> Stack 1: [B], Stack 2: [C, A, D, E], Stack 3: [F], Stack 4: [G] | Plan so far [Move B from D to table | Move D from A to table | Move A from C to table | Move C from G to table | Move G from F to table | Move A from table to C | Move D from table to A | Move E from table to D] | Exploring action Move A from C to table | New state -> Invalid | Exploring action Move B from table to G | New state -> Stack 1: [C, A, D, E], Stack 2: [F], Stack 3: [G, B] | Exploring action Move G from table to E | New state -> Stack 1: [B], Stack 2: [C, A, D, E, G], Stack 3: [F] | Exploring action Move B from table to E | New state -> Stack 1: [C, A, D, E, B], Stack 2: [F], Stack 3: [G] | Exploring action Move D from A to E | New state -> Invalid | Taking action Move G from table to E | Moved to state -> Stack 1: [B], Stack 2: [C, A, D, E, G], Stack 3: [F] | Plan so far [Move B from D to table | Move D from A to table | Move A from C to table | Move C from G to table | Move G from F to table | Move A from table to C | Move D from table to A | Move E from table to D | Move G from table to E] | Exploring action Move A from C to B | New state -> Invalid | Exploring action Move G from E to table | New state -> Stack 1: [B], Stack 2: [C, A, D, E], Stack 3: [F], Stack 4: [G] | Exploring action Move B from table to G | New state -> Stack 1: [C, A, D, E, G, B], Stack 2: [F] | Exploring action Move F from table to B | New state -> Stack 1: [B, F], Stack 2: [C, A, D, E, G] | Taking action Move B from table to G | Moved to state -> Stack 1: [C, A, D, E, G, B], Stack 2: [F] | Plan so far [Move B from D to table | Move D from A to table | Move A from C to table | Move C from G to table | Move G from F to table | Move A from table to C | Move D from table to A | Move E from table to D | Move G from table to E | Move B from table to G] | Reached goal state!",
        "system2_states_v1": 54
    },
    {
        "idx": 803,
        "start": [
            [
                "table",
                "A"
            ],
            [
                "table",
                "D",
                "E",
                "B",
                "F",
                "C"
            ]
        ],
        "goal": [
            [
                "table",
                "E",
                "D",
                "B",
                "A",
                "C",
                "F"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": true,
                "on": -1,
                "under": -1,
                "ontable": true
            },
            "B": {
                "clear": false,
                "on": "E",
                "under": "F",
                "ontable": false
            },
            "C": {
                "clear": true,
                "on": "F",
                "under": -1,
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": -1,
                "under": "E",
                "ontable": true
            },
            "E": {
                "clear": false,
                "on": "D",
                "under": "B",
                "ontable": false
            },
            "F": {
                "clear": false,
                "on": "B",
                "under": "C",
                "ontable": false
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": false,
                "on": "B",
                "under": "C",
                "ontable": false
            },
            "B": {
                "clear": false,
                "on": "D",
                "under": "A",
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": "A",
                "under": "F",
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": "E",
                "under": "B",
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": -1,
                "under": "D",
                "ontable": true
            },
            "F": {
                "clear": true,
                "on": "C",
                "under": -1,
                "ontable": false
            }
        },
        "plan_len": 9,
        "num_blocks": 6,
        "prompt": "The initial state:\nThe hand is empty.\nA is on the table. A is clear.\nD is on the table. E is on D. B is on E. F is on B. C is on F. C is clear.\n\nThe goal is:\nE is on the table. D is on E. B is on D. A is on B. C is on A. F is on C. F is clear.\n",
        "system1_plan": "Move C from F to table | Move F from B to table | Move B from E to table | Move E from D to table | Move D from table to E | Move B from table to D | Move A from table to B | Move C from table to A | Move F from table to C",
        "system1_states": 9,
        "system2_plan_v1": "Moved to state -> Stack 1: [A], Stack 2: [D, E, B, F, C] | Plan so far [] | Exploring action Move C from F to table | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, E, B, F] | Exploring action Move C from F to A | New state -> Stack 1: [A, C], Stack 2: [D, E, B, F] | Exploring action Move E from D to table | New state -> Invalid | Exploring action Move A from table to C | New state -> Stack 1: [D, E, B, F, C, A] | Exploring action Move B from E to A | New state -> Invalid | Taking action Move C from F to table | Moved to state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, E, B, F] | Plan so far [Move C from F to table] | Exploring action Move F from B to C | New state -> Stack 1: [A], Stack 2: [C, F], Stack 3: [D, E, B] | Exploring action Move F from B to A | New state -> Stack 1: [A, F], Stack 2: [C], Stack 3: [D, E, B] | Exploring action Move E from D to F | New state -> Invalid | Exploring action Move F from B to table | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, E, B], Stack 4: [F] | Taking action Move F from B to table | Moved to state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, E, B], Stack 4: [F] | Plan so far [Move C from F to table | Move F from B to table] | Exploring action Move D from table to B | New state -> Invalid | Exploring action Move B from E to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D, E], Stack 5: [F] | Exploring action Move B from E to C | New state -> Stack 1: [A], Stack 2: [C, B], Stack 3: [D, E], Stack 4: [F] | Exploring action Move B from E to F | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, E], Stack 4: [F, B] | Exploring action Move D from table to F | New state -> Invalid | Taking action Move F from B to C | Moved to state -> Stack 1: [A], Stack 2: [C, F], Stack 3: [D, E, B] | Plan so far [Move C from F to table | Move F from B to C] | Exploring action Move D from table to A | New state -> Invalid | Exploring action Move B from E to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, F], Stack 4: [D, E] | Exploring action Move B from E to A | New state -> Stack 1: [A, B], Stack 2: [C, F], Stack 3: [D, E] | Exploring action Move E from D to A | New state -> Invalid | Exploring action Move F from C to table | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, E, B], Stack 4: [F] | Taking action Move B from E to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D, E], Stack 5: [F] | Plan so far [Move C from F to table | Move F from B to table | Move B from E to table] | Exploring action Move E from D to B | New state -> Stack 1: [A], Stack 2: [B, E], Stack 3: [C], Stack 4: [D], Stack 5: [F] | Exploring action Move D from table to F | New state -> Invalid | Exploring action Move E from D to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Exploring action Move D from table to A | New state -> Invalid | Exploring action Move E from D to A | New state -> Stack 1: [A, E], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [F] | Taking action Move B from E to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, F], Stack 4: [D, E] | Plan so far [Move C from F to table | Move F from B to C | Move B from E to table] | Exploring action Move E from D to A | New state -> Stack 1: [A, E], Stack 2: [B], Stack 3: [C, F], Stack 4: [D] | Exploring action Move F from C to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D, E], Stack 5: [F] | Exploring action Move E from D to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, F], Stack 4: [D], Stack 5: [E] | Exploring action Move C from table to B | New state -> Invalid | Taking action Move E from D to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Plan so far [Move C from F to table | Move F from B to table | Move B from E to table | Move E from D to table] | Exploring action Move F from table to C | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, F], Stack 4: [D], Stack 5: [E] | Exploring action Move A from table to D | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, A], Stack 4: [E], Stack 5: [F] | Exploring action Move D from table to E | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [E, D], Stack 5: [F] | Taking action Move E from D to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, F], Stack 4: [D], Stack 5: [E] | Plan so far [Move C from F to table | Move F from B to C | Move B from E to table | Move E from D to table] | Exploring action Move A from table to E | New state -> Stack 1: [B], Stack 2: [C, F], Stack 3: [D], Stack 4: [E, A] | Exploring action Move C from table to F | New state -> Invalid | Exploring action Move C from table to B | New state -> Invalid | Exploring action Move D from table to E | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, F], Stack 4: [E, D] | Exploring action Move F from C to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Taking action Move D from table to E | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [E, D], Stack 5: [F] | Plan so far [Move C from F to table | Move F from B to table | Move B from E to table | Move E from D to table | Move D from table to E] | Exploring action Move E from table to D | New state -> Invalid | Exploring action Move F from table to C | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, F], Stack 4: [E, D] | Exploring action Move A from table to B | New state -> Stack 1: [B, A], Stack 2: [C], Stack 3: [E, D], Stack 4: [F] | Exploring action Move E from table to C | New state -> Invalid | Exploring action Move B from table to D | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [E, D, B], Stack 4: [F] | Taking action Move D from table to E | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, F], Stack 4: [E, D] | Plan so far [Move C from F to table | Move F from B to C | Move B from E to table | Move E from D to table | Move D from table to E] | Exploring action Move F from C to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [E, D], Stack 5: [F] | Exploring action Move C from table to A | New state -> Invalid | Exploring action Move E from table to A | New state -> Invalid | Exploring action Move D from E to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, F], Stack 4: [D], Stack 5: [E] | Exploring action Move B from table to D | New state -> Stack 1: [A], Stack 2: [C, F], Stack 3: [E, D, B] | Taking action Move B from table to D | Moved to state -> Stack 1: [A], Stack 2: [C], Stack 3: [E, D, B], Stack 4: [F] | Plan so far [Move C from F to table | Move F from B to table | Move B from E to table | Move E from D to table | Move D from table to E | Move B from table to D] | Exploring action Move D from E to C | New state -> Invalid | Exploring action Move F from table to C | New state -> Stack 1: [A], Stack 2: [C, F], Stack 3: [E, D, B] | Exploring action Move A from table to B | New state -> Stack 1: [C], Stack 2: [E, D, B, A], Stack 3: [F] | Exploring action Move A from table to F | New state -> Stack 1: [C], Stack 2: [E, D, B], Stack 3: [F, A] | Exploring action Move E from table to A | New state -> Invalid | Taking action Move B from table to D | Moved to state -> Stack 1: [A], Stack 2: [C, F], Stack 3: [E, D, B] | Plan so far [Move C from F to table | Move F from B to C | Move B from E to table | Move E from D to table | Move D from table to E | Move B from table to D] | Exploring action Move C from table to F | New state -> Invalid | Exploring action Move F from C to table | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [E, D, B], Stack 4: [F] | Exploring action Move F from C to A | New state -> Stack 1: [A, F], Stack 2: [C], Stack 3: [E, D, B] | Exploring action Move A from table to B | New state -> Stack 1: [C, F], Stack 2: [E, D, B, A] | Taking action Move A from table to B | Moved to state -> Stack 1: [C], Stack 2: [E, D, B, A], Stack 3: [F] | Plan so far [Move C from F to table | Move F from B to table | Move B from E to table | Move E from D to table | Move D from table to E | Move B from table to D | Move A from table to B] | Exploring action Move F from table to A | New state -> Stack 1: [C], Stack 2: [E, D, B, A, F] | Exploring action Move F from table to C | New state -> Stack 1: [C, F], Stack 2: [E, D, B, A] | Exploring action Move B from D to table | New state -> Invalid | Exploring action Move D from E to table | New state -> Invalid | Exploring action Move C from table to A | New state -> Stack 1: [E, D, B, A, C], Stack 2: [F] | Taking action Move A from table to B | Moved to state -> Stack 1: [C, F], Stack 2: [E, D, B, A] | Plan so far [Move C from F to table | Move F from B to C | Move B from E to table | Move E from D to table | Move D from table to E | Move B from table to D | Move A from table to B] | Exploring action Move F from C to table | New state -> Stack 1: [C], Stack 2: [E, D, B, A], Stack 3: [F] | Exploring action Move A from B to table | New state -> Stack 1: [A], Stack 2: [C, F], Stack 3: [E, D, B] | Exploring action Move E from table to F | New state -> Invalid | Exploring action Move C from table to A | New state -> Invalid | Exploring action Move F from C to A | New state -> Stack 1: [C], Stack 2: [E, D, B, A, F] | Taking action Move C from table to A | Moved to state -> Stack 1: [E, D, B, A, C], Stack 2: [F] | Plan so far [Move C from F to table | Move F from B to table | Move B from E to table | Move E from D to table | Move D from table to E | Move B from table to D | Move A from table to B | Move C from table to A] | Exploring action Move C from A to F | New state -> Stack 1: [E, D, B, A], Stack 2: [F, C] | Exploring action Move F from table to C | New state -> Stack 1: [E, D, B, A, C, F] | Exploring action Move A from B to C | New state -> Invalid | Exploring action Move D from E to F | New state -> Invalid | Exploring action Move C from A to table | New state -> Stack 1: [C], Stack 2: [E, D, B, A], Stack 3: [F] | Taking action Move F from table to C | Moved to state -> Stack 1: [E, D, B, A, C, F] | Plan so far [Move C from F to table | Move F from B to table | Move B from E to table | Move E from D to table | Move D from table to E | Move B from table to D | Move A from table to B | Move C from table to A | Move F from table to C] | Reached goal state!",
        "system2_states_v1": 70
    },
    {
        "idx": 703,
        "start": [
            [
                "table",
                "B",
                "F"
            ],
            [
                "table",
                "C"
            ],
            [
                "table",
                "E",
                "D",
                "A"
            ]
        ],
        "goal": [
            [
                "table",
                "D",
                "E",
                "C",
                "B",
                "A",
                "F"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": true,
                "on": "D",
                "under": -1,
                "ontable": false
            },
            "B": {
                "clear": false,
                "on": -1,
                "under": "F",
                "ontable": true
            },
            "C": {
                "clear": true,
                "on": -1,
                "under": -1,
                "ontable": true
            },
            "D": {
                "clear": false,
                "on": "E",
                "under": "A",
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": -1,
                "under": "D",
                "ontable": true
            },
            "F": {
                "clear": true,
                "on": "B",
                "under": -1,
                "ontable": false
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": false,
                "on": "B",
                "under": "F",
                "ontable": false
            },
            "B": {
                "clear": false,
                "on": "C",
                "under": "A",
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": "E",
                "under": "B",
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": -1,
                "under": "E",
                "ontable": true
            },
            "E": {
                "clear": false,
                "on": "D",
                "under": "C",
                "ontable": false
            },
            "F": {
                "clear": true,
                "on": "A",
                "under": -1,
                "ontable": false
            }
        },
        "plan_len": 8,
        "num_blocks": 6,
        "prompt": "The initial state:\nThe hand is empty.\nB is on the table. F is on B. F is clear.\nC is on the table. C is clear.\nE is on the table. D is on E. A is on D. A is clear.\n\nThe goal is:\nD is on the table. E is on D. C is on E. B is on C. A is on B. F is on A. F is clear.\n",
        "system1_plan": "Move A from D to table | Move D from E to table | Move E from table to D | Move F from B to table | Move C from table to E | Move B from table to C | Move A from table to B | Move F from table to A",
        "system1_states": 8,
        "system2_plan_v1": "Moved to state -> Stack 1: [B, F], Stack 2: [C], Stack 3: [E, D, A] | Plan so far [] | Exploring action Move A from D to table | New state -> Stack 1: [A], Stack 2: [B, F], Stack 3: [C], Stack 4: [E, D] | Exploring action Move F from B to A | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [E, D, A, F] | Exploring action Move E from table to F | New state -> Invalid | Exploring action Move F from B to table | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [E, D, A], Stack 4: [F] | Taking action Move A from D to table | Moved to state -> Stack 1: [A], Stack 2: [B, F], Stack 3: [C], Stack 4: [E, D] | Plan so far [Move A from D to table] | Exploring action Move D from E to table | New state -> Stack 1: [A], Stack 2: [B, F], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Exploring action Move B from table to D | New state -> Invalid | Exploring action Move F from B to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [E, D], Stack 5: [F] | Exploring action Move F from B to A | New state -> Stack 1: [A, F], Stack 2: [B], Stack 3: [C], Stack 4: [E, D] | Taking action Move F from B to table | Moved to state -> Stack 1: [B], Stack 2: [C], Stack 3: [E, D, A], Stack 4: [F] | Plan so far [Move F from B to table] | Exploring action Move A from D to C | New state -> Stack 1: [B], Stack 2: [C, A], Stack 3: [E, D], Stack 4: [F] | Exploring action Move A from D to B | New state -> Stack 1: [B, A], Stack 2: [C], Stack 3: [E, D], Stack 4: [F] | Exploring action Move D from E to B | New state -> Invalid | Exploring action Move D from E to C | New state -> Invalid | Exploring action Move A from D to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [E, D], Stack 5: [F] | Taking action Move F from B to A | Moved to state -> Stack 1: [B], Stack 2: [C], Stack 3: [E, D, A, F] | Plan so far [Move F from B to A] | Exploring action Move F from A to B | New state -> Stack 1: [B, F], Stack 2: [C], Stack 3: [E, D, A] | Exploring action Move D from E to C | New state -> Invalid | Exploring action Move F from A to table | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [E, D, A], Stack 4: [F] | Exploring action Move C from table to B | New state -> Stack 1: [B, C], Stack 2: [E, D, A, F] | Exploring action Move D from E to F | New state -> Invalid | Taking action Move D from E to table | Moved to state -> Stack 1: [A], Stack 2: [B, F], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Plan so far [Move A from D to table | Move D from E to table] | Exploring action Move F from B to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Exploring action Move B from table to E | New state -> Invalid | Exploring action Move B from table to C | New state -> Invalid | Exploring action Move F from B to A | New state -> Stack 1: [A, F], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Exploring action Move E from table to D | New state -> Stack 1: [A], Stack 2: [B, F], Stack 3: [C], Stack 4: [D, E] | Taking action Move F from B to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [E, D], Stack 5: [F] | Plan so far [Move A from D to table | Move F from B to table] | Exploring action Move D from E to B | New state -> Stack 1: [A], Stack 2: [B, D], Stack 3: [C], Stack 4: [E], Stack 5: [F] | Exploring action Move D from E to A | New state -> Stack 1: [A, D], Stack 2: [B], Stack 3: [C], Stack 4: [E], Stack 5: [F] | Exploring action Move D from E to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Exploring action Move E from table to B | New state -> Invalid | Taking action Move E from table to D | Moved to state -> Stack 1: [A], Stack 2: [B, F], Stack 3: [C], Stack 4: [D, E] | Plan so far [Move A from D to table | Move D from E to table | Move E from table to D] | Exploring action Move F from B to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D, E], Stack 5: [F] | Exploring action Move D from table to F | New state -> Invalid | Exploring action Move F from B to A | New state -> Stack 1: [A, F], Stack 2: [B], Stack 3: [C], Stack 4: [D, E] | Exploring action Move C from table to E | New state -> Stack 1: [A], Stack 2: [B, F], Stack 3: [D, E, C] | Exploring action Move B from table to A | New state -> Invalid | Taking action Move F from B to A | Moved to state -> Stack 1: [A, F], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Plan so far [Move A from D to table | Move D from E to table | Move F from B to A] | Exploring action Move B from table to C | New state -> Stack 1: [A, F], Stack 2: [C, B], Stack 3: [D], Stack 4: [E] | Exploring action Move A from table to F | New state -> Invalid | Exploring action Move E from table to D | New state -> Stack 1: [A, F], Stack 2: [B], Stack 3: [C], Stack 4: [D, E] | Exploring action Move A from table to B | New state -> Invalid | Exploring action Move F from A to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Taking action Move F from B to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Plan so far [Move A from D to table | Move D from E to table | Move F from B to table] | Exploring action Move B from table to C | New state -> Stack 1: [A], Stack 2: [C, B], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Exploring action Move E from table to D | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D, E], Stack 5: [F] | Exploring action Move F from table to A | New state -> Stack 1: [A, F], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Taking action Move E from table to D | Moved to state -> Stack 1: [A, F], Stack 2: [B], Stack 3: [C], Stack 4: [D, E] | Plan so far [Move A from D to table | Move D from E to table | Move F from B to A | Move E from table to D] | Exploring action Move F from A to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D, E], Stack 5: [F] | Exploring action Move E from D to table | New state -> Stack 1: [A, F], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Exploring action Move C from table to E | New state -> Stack 1: [A, F], Stack 2: [B], Stack 3: [D, E, C] | Exploring action Move A from table to E | New state -> Invalid | Taking action Move A from D to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [E, D], Stack 5: [F] | Plan so far [Move F from B to table | Move A from D to table] | Taking action Move C from table to E | Moved to state -> Stack 1: [A], Stack 2: [B, F], Stack 3: [D, E, C] | Plan so far [Move A from D to table | Move D from E to table | Move E from table to D | Move C from table to E] | Exploring action Move F from B to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, E, C], Stack 4: [F] | Exploring action Move B from table to F | New state -> Invalid | Exploring action Move F from B to A | New state -> Stack 1: [A, F], Stack 2: [B], Stack 3: [D, E, C] | Exploring action Move F from B to C | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, E, C, F] | Taking action Move F from B to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D, E], Stack 5: [F] | Plan so far [Move A from D to table | Move D from E to table | Move E from table to D | Move F from B to table] | Exploring action Move F from table to A | New state -> Stack 1: [A, F], Stack 2: [B], Stack 3: [C], Stack 4: [D, E] | Exploring action Move C from table to E | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, E, C], Stack 4: [F] | Exploring action Move D from table to E | New state -> Invalid | Exploring action Move A from table to E | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, E, A], Stack 4: [F] | Taking action Move F from B to A | Moved to state -> Stack 1: [A, F], Stack 2: [B], Stack 3: [C], Stack 4: [D, E] | Plan so far [Move A from D to table | Move D from E to table | Move E from table to D | Move F from B to A] | Taking action Move F from B to A | Moved to state -> Stack 1: [A, F], Stack 2: [B], Stack 3: [C], Stack 4: [E, D] | Plan so far [Move A from D to table | Move F from B to A] | Exploring action Move F from A to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [E, D], Stack 5: [F] | Exploring action Move D from E to B | New state -> Stack 1: [A, F], Stack 2: [B, D], Stack 3: [C], Stack 4: [E] | Exploring action Move D from E to table | New state -> Stack 1: [A, F], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Exploring action Move E from table to B | New state -> Invalid | Exploring action Move A from table to C | New state -> Invalid | Taking action Move C from table to E | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, E, C], Stack 4: [F] | Plan so far [Move A from D to table | Move D from E to table | Move E from table to D | Move F from B to table | Move C from table to E] | Exploring action Move E from D to B | New state -> Invalid | Exploring action Move A from table to F | New state -> Stack 1: [B], Stack 2: [D, E, C], Stack 3: [F, A] | Exploring action Move F from table to A | New state -> Stack 1: [A, F], Stack 2: [B], Stack 3: [D, E, C] | Exploring action Move B from table to C | New state -> Stack 1: [A], Stack 2: [D, E, C, B], Stack 3: [F] | Taking action Move C from table to E | Moved to state -> Stack 1: [A, F], Stack 2: [B], Stack 3: [D, E, C] | Plan so far [Move A from D to table | Move D from E to table | Move F from B to A | Move E from table to D | Move C from table to E] | Exploring action Move E from D to F | New state -> Invalid | Exploring action Move E from D to B | New state -> Invalid | Exploring action Move F from A to B | New state -> Stack 1: [A], Stack 2: [B, F], Stack 3: [D, E, C] | Exploring action Move F from A to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, E, C], Stack 4: [F] | Exploring action Move B from table to C | New state -> Stack 1: [A, F], Stack 2: [D, E, C, B] | Taking action Move B from table to C | Moved to state -> Stack 1: [A], Stack 2: [D, E, C, B], Stack 3: [F] | Plan so far [Move A from D to table | Move D from E to table | Move E from table to D | Move F from B to table | Move C from table to E | Move B from table to C] | Exploring action Move E from D to A | New state -> Invalid | Exploring action Move B from C to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, E, C], Stack 4: [F] | Exploring action Move A from table to B | New state -> Stack 1: [D, E, C, B, A], Stack 2: [F] | Exploring action Move F from table to A | New state -> Stack 1: [A, F], Stack 2: [D, E, C, B] | Taking action Move B from table to C | Moved to state -> Stack 1: [A, F], Stack 2: [D, E, C, B] | Plan so far [Move A from D to table | Move D from E to table | Move F from B to A | Move E from table to D | Move C from table to E | Move B from table to C] | Exploring action Move F from A to table | New state -> Stack 1: [A], Stack 2: [D, E, C, B], Stack 3: [F] | Exploring action Move F from A to B | New state -> Stack 1: [A], Stack 2: [D, E, C, B, F] | Exploring action Move B from C to table | New state -> Stack 1: [A, F], Stack 2: [B], Stack 3: [D, E, C] | Exploring action Move C from E to table | New state -> Invalid | Taking action Move A from table to B | Moved to state -> Stack 1: [D, E, C, B, A], Stack 2: [F] | Plan so far [Move A from D to table | Move D from E to table | Move E from table to D | Move F from B to table | Move C from table to E | Move B from table to C | Move A from table to B] | Exploring action Move A from B to F | New state -> Stack 1: [D, E, C, B], Stack 2: [F, A] | Exploring action Move E from D to A | New state -> Invalid | Exploring action Move F from table to A | New state -> Stack 1: [D, E, C, B, A, F] | Exploring action Move A from B to table | New state -> Stack 1: [A], Stack 2: [D, E, C, B], Stack 3: [F] | Taking action Move F from table to A | Moved to state -> Stack 1: [D, E, C, B, A, F] | Plan so far [Move A from D to table | Move D from E to table | Move E from table to D | Move F from B to table | Move C from table to E | Move B from table to C | Move A from table to B | Move F from table to A] | Reached goal state!",
        "system2_states_v1": 78
    },
    {
        "idx": 607,
        "start": [
            [
                "table",
                "E",
                "C",
                "D",
                "A",
                "B"
            ]
        ],
        "goal": [
            [
                "table",
                "C",
                "D",
                "B",
                "A"
            ],
            [
                "table",
                "E"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": false,
                "on": "D",
                "under": "B",
                "ontable": false
            },
            "B": {
                "clear": true,
                "on": "A",
                "under": -1,
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": "E",
                "under": "D",
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": "C",
                "under": "A",
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": -1,
                "under": "C",
                "ontable": true
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": true,
                "on": "B",
                "under": -1,
                "ontable": false
            },
            "B": {
                "clear": false,
                "on": "D",
                "under": "A",
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": -1,
                "under": "D",
                "ontable": true
            },
            "D": {
                "clear": false,
                "on": "C",
                "under": "B",
                "ontable": false
            },
            "E": {
                "clear": true,
                "on": -1,
                "under": -1,
                "ontable": true
            }
        },
        "plan_len": 7,
        "num_blocks": 5,
        "prompt": "The initial state:\nThe hand is empty.\nE is on the table. C is on E. D is on C. A is on D. B is on A. B is clear.\n\nThe goal is:\nC is on the table. D is on C. B is on D. A is on B. A is clear.\nE is on the table. E is clear.\n",
        "system1_plan": "Move B from A to table | Move A from D to table | Move D from C to table | Move C from E to table | Move D from table to C | Move B from table to D | Move A from table to B",
        "system1_states": 7,
        "system2_plan_v1": "Moved to state -> Stack 1: [E, C, D, A, B] | Plan so far [] | Exploring action Move C from E to table | New state -> Invalid | Exploring action Move B from A to table | New state -> Stack 1: [B], Stack 2: [E, C, D, A] | Exploring action Move C from E to B | New state -> Invalid | Taking action Move B from A to table | Moved to state -> Stack 1: [B], Stack 2: [E, C, D, A] | Plan so far [Move B from A to table] | Exploring action Move A from D to B | New state -> Stack 1: [B, A], Stack 2: [E, C, D] | Exploring action Move A from D to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [E, C, D] | Exploring action Move C from E to A | New state -> Invalid | Exploring action Move B from table to A | New state -> Stack 1: [E, C, D, A, B] | Exploring action Move E from table to B | New state -> Invalid | Taking action Move A from D to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [E, C, D] | Plan so far [Move B from A to table | Move A from D to table] | Exploring action Move E from table to A | New state -> Invalid | Exploring action Move D from C to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D], Stack 4: [E, C] | Exploring action Move B from table to D | New state -> Stack 1: [A], Stack 2: [E, C, D, B] | Exploring action Move C from E to A | New state -> Invalid | Exploring action Move D from C to A | New state -> Stack 1: [A, D], Stack 2: [B], Stack 3: [E, C] | Taking action Move A from D to B | Moved to state -> Stack 1: [B, A], Stack 2: [E, C, D] | Plan so far [Move B from A to table | Move A from D to B] | Exploring action Move A from B to D | New state -> Stack 1: [B], Stack 2: [E, C, D, A] | Exploring action Move B from table to A | New state -> Invalid | Exploring action Move A from B to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [E, C, D] | Exploring action Move D from C to table | New state -> Stack 1: [B, A], Stack 2: [D], Stack 3: [E, C] | Taking action Move B from table to D | Moved to state -> Stack 1: [A], Stack 2: [E, C, D, B] | Plan so far [Move B from A to table | Move A from D to table | Move B from table to D] | Exploring action Move A from table to B | New state -> Stack 1: [E, C, D, B, A] | Exploring action Move D from C to A | New state -> Invalid | Exploring action Move B from D to A | New state -> Stack 1: [A, B], Stack 2: [E, C, D] | Exploring action Move B from D to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [E, C, D] | Taking action Move A from table to B | Moved to state -> Stack 1: [E, C, D, B, A] | Plan so far [Move B from A to table | Move A from D to table | Move B from table to D | Move A from table to B] | Exploring action Move E from table to A | New state -> Invalid | Exploring action Move A from B to table | New state -> Stack 1: [A], Stack 2: [E, C, D, B] | Exploring action Move B from D to table | New state -> Invalid | Taking action Move D from C to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [D], Stack 4: [E, C] | Plan so far [Move B from A to table | Move A from D to table | Move D from C to table] | Exploring action Move C from E to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Exploring action Move C from E to D | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, C], Stack 4: [E] | Exploring action Move E from table to C | New state -> Invalid | Exploring action Move E from table to A | New state -> Invalid | Exploring action Move C from E to A | New state -> Stack 1: [A, C], Stack 2: [B], Stack 3: [D], Stack 4: [E] | Taking action Move C from E to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Plan so far [Move B from A to table | Move A from D to table | Move D from C to table | Move C from E to table] | Exploring action Move A from table to D | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, A], Stack 4: [E] | Exploring action Move A from table to B | New state -> Stack 1: [B, A], Stack 2: [C], Stack 3: [D], Stack 4: [E] | Exploring action Move D from table to C | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, D], Stack 4: [E] | Taking action Move D from table to C | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, D], Stack 4: [E] | Plan so far [Move B from A to table | Move A from D to table | Move D from C to table | Move C from E to table | Move D from table to C] | Exploring action Move C from table to E | New state -> Invalid | Exploring action Move D from C to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Exploring action Move A from table to B | New state -> Stack 1: [B, A], Stack 2: [C, D], Stack 3: [E] | Exploring action Move B from table to D | New state -> Stack 1: [A], Stack 2: [C, D, B], Stack 3: [E] | Taking action Move B from table to D | Moved to state -> Stack 1: [A], Stack 2: [C, D, B], Stack 3: [E] | Plan so far [Move B from A to table | Move A from D to table | Move D from C to table | Move C from E to table | Move D from table to C | Move B from table to D] | Exploring action Move B from D to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, D], Stack 4: [E] | Exploring action Move D from C to A | New state -> Invalid | Exploring action Move A from table to B | New state -> Stack 1: [C, D, B, A], Stack 2: [E] | Exploring action Move E from table to A | New state -> Stack 1: [A, E], Stack 2: [C, D, B] | Exploring action Move D from C to E | New state -> Invalid | Taking action Move A from table to B | Moved to state -> Stack 1: [C, D, B, A], Stack 2: [E] | Plan so far [Move B from A to table | Move A from D to table | Move D from C to table | Move C from E to table | Move D from table to C | Move B from table to D | Move A from table to B] | Reached goal state!",
        "system2_states_v1": 41
    },
    {
        "idx": 707,
        "start": [
            [
                "table",
                "A",
                "D"
            ],
            [
                "table",
                "C",
                "B",
                "E",
                "F"
            ]
        ],
        "goal": [
            [
                "table",
                "D",
                "C"
            ],
            [
                "table",
                "E",
                "A",
                "F",
                "B"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": false,
                "on": -1,
                "under": "D",
                "ontable": true
            },
            "B": {
                "clear": false,
                "on": "C",
                "under": "E",
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": -1,
                "under": "B",
                "ontable": true
            },
            "D": {
                "clear": true,
                "on": "A",
                "under": -1,
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": "B",
                "under": "F",
                "ontable": false
            },
            "F": {
                "clear": true,
                "on": "E",
                "under": -1,
                "ontable": false
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": false,
                "on": "E",
                "under": "F",
                "ontable": false
            },
            "B": {
                "clear": true,
                "on": "F",
                "under": -1,
                "ontable": false
            },
            "C": {
                "clear": true,
                "on": "D",
                "under": -1,
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": -1,
                "under": "C",
                "ontable": true
            },
            "E": {
                "clear": false,
                "on": -1,
                "under": "A",
                "ontable": true
            },
            "F": {
                "clear": false,
                "on": "A",
                "under": "B",
                "ontable": false
            }
        },
        "plan_len": 8,
        "num_blocks": 6,
        "prompt": "The initial state:\nThe hand is empty.\nA is on the table. D is on A. D is clear.\nC is on the table. B is on C. E is on B. F is on E. F is clear.\n\nThe goal is:\nD is on the table. C is on D. C is clear.\nE is on the table. A is on E. F is on A. B is on F. B is clear.\n",
        "system1_plan": "Move F from E to table | Move E from B to table | Move B from C to table | Move D from A to table | Move C from table to D | Move A from table to E | Move F from table to A | Move B from table to F",
        "system1_states": 8,
        "system2_plan_v1": "Moved to state -> Stack 1: [A, D], Stack 2: [C, B, E, F] | Plan so far [] | Exploring action Move D from A to F | New state -> Stack 1: [A], Stack 2: [C, B, E, F, D] | Exploring action Move C from table to F | New state -> Invalid | Exploring action Move F from E to table | New state -> Stack 1: [A, D], Stack 2: [C, B, E], Stack 3: [F] | Exploring action Move D from A to table | New state -> Stack 1: [A], Stack 2: [C, B, E, F], Stack 3: [D] | Taking action Move D from A to table | Moved to state -> Stack 1: [A], Stack 2: [C, B, E, F], Stack 3: [D] | Plan so far [Move D from A to table] | Exploring action Move F from E to D | New state -> Stack 1: [A], Stack 2: [C, B, E], Stack 3: [D, F] | Exploring action Move B from C to F | New state -> Invalid | Exploring action Move F from E to A | New state -> Stack 1: [A, F], Stack 2: [C, B, E], Stack 3: [D] | Exploring action Move F from E to table | New state -> Stack 1: [A], Stack 2: [C, B, E], Stack 3: [D], Stack 4: [F] | Taking action Move F from E to table | Moved to state -> Stack 1: [A, D], Stack 2: [C, B, E], Stack 3: [F] | Plan so far [Move F from E to table] | Exploring action Move D from A to table | New state -> Stack 1: [A], Stack 2: [C, B, E], Stack 3: [D], Stack 4: [F] | Exploring action Move B from C to E | New state -> Invalid | Exploring action Move E from B to table | New state -> Stack 1: [A, D], Stack 2: [C, B], Stack 3: [E], Stack 4: [F] | Exploring action Move D from A to F | New state -> Stack 1: [A], Stack 2: [C, B, E], Stack 3: [F, D] | Taking action Move F from E to table | Moved to state -> Stack 1: [A], Stack 2: [C, B, E], Stack 3: [D], Stack 4: [F] | Plan so far [Move D from A to table | Move F from E to table] | Exploring action Move C from table to E | New state -> Invalid | Exploring action Move E from B to A | New state -> Stack 1: [A, E], Stack 2: [C, B], Stack 3: [D], Stack 4: [F] | Exploring action Move E from B to F | New state -> Stack 1: [A], Stack 2: [C, B], Stack 3: [D], Stack 4: [F, E] | Exploring action Move B from C to E | New state -> Invalid | Exploring action Move E from B to table | New state -> Stack 1: [A], Stack 2: [C, B], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Taking action Move E from B to table | Moved to state -> Stack 1: [A, D], Stack 2: [C, B], Stack 3: [E], Stack 4: [F] | Plan so far [Move F from E to table | Move E from B to table] | Exploring action Move B from C to F | New state -> Stack 1: [A, D], Stack 2: [C], Stack 3: [E], Stack 4: [F, B] | Exploring action Move A from table to F | New state -> Invalid | Exploring action Move D from A to table | New state -> Stack 1: [A], Stack 2: [C, B], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Exploring action Move B from C to table | New state -> Stack 1: [A, D], Stack 2: [B], Stack 3: [C], Stack 4: [E], Stack 5: [F] | Taking action Move D from A to table | Moved to state -> Stack 1: [A], Stack 2: [C, B, E], Stack 3: [D], Stack 4: [F] | Plan so far [Move F from E to table | Move D from A to table] | Taking action Move B from C to table | Moved to state -> Stack 1: [A, D], Stack 2: [B], Stack 3: [C], Stack 4: [E], Stack 5: [F] | Plan so far [Move F from E to table | Move E from B to table | Move B from C to table] | Exploring action Move A from table to C | New state -> Invalid | Exploring action Move D from A to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Exploring action Move A from table to B | New state -> Invalid | Exploring action Move D from A to E | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [E, D], Stack 5: [F] | Exploring action Move C from table to D | New state -> Stack 1: [A, D, C], Stack 2: [B], Stack 3: [E], Stack 4: [F] | Taking action Move E from B to table | Moved to state -> Stack 1: [A], Stack 2: [C, B], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Plan so far [Move D from A to table | Move F from E to table | Move E from B to table] | Exploring action Move B from C to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Exploring action Move C from table to A | New state -> Invalid | Exploring action Move B from C to F | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [F, B] | Exploring action Move A from table to E | New state -> Stack 1: [C, B], Stack 2: [D], Stack 3: [E, A], Stack 4: [F] | Taking action Move D from A to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Plan so far [Move F from E to table | Move E from B to table | Move B from C to table | Move D from A to table] | Exploring action Move C from table to D | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, C], Stack 4: [E], Stack 5: [F] | Exploring action Move B from table to F | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [F, B] | Exploring action Move A from table to E | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D], Stack 4: [E, A], Stack 5: [F] | Taking action Move C from table to D | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, C], Stack 4: [E], Stack 5: [F] | Plan so far [Move F from E to table | Move E from B to table | Move B from C to table | Move D from A to table | Move C from table to D] | Exploring action Move B from table to F | New state -> Stack 1: [A], Stack 2: [D, C], Stack 3: [E], Stack 4: [F, B] | Exploring action Move A from table to B | New state -> Stack 1: [B, A], Stack 2: [D, C], Stack 3: [E], Stack 4: [F] | Exploring action Move D from table to E | New state -> Invalid | Exploring action Move D from table to C | New state -> Invalid | Exploring action Move A from table to E | New state -> Stack 1: [B], Stack 2: [D, C], Stack 3: [E, A], Stack 4: [F] | Taking action Move A from table to E | Moved to state -> Stack 1: [B], Stack 2: [D, C], Stack 3: [E, A], Stack 4: [F] | Plan so far [Move F from E to table | Move E from B to table | Move B from C to table | Move D from A to table | Move C from table to D | Move A from table to E] | Exploring action Move D from table to A | New state -> Invalid | Exploring action Move B from table to F | New state -> Stack 1: [D, C], Stack 2: [E, A], Stack 3: [F, B] | Exploring action Move E from table to F | New state -> Invalid | Exploring action Move A from E to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, C], Stack 4: [E], Stack 5: [F] | Exploring action Move F from table to A | New state -> Stack 1: [B], Stack 2: [D, C], Stack 3: [E, A, F] | Taking action Move F from table to A | Moved to state -> Stack 1: [B], Stack 2: [D, C], Stack 3: [E, A, F] | Plan so far [Move F from E to table | Move E from B to table | Move B from C to table | Move D from A to table | Move C from table to D | Move A from table to E | Move F from table to A] | Exploring action Move B from table to F | New state -> Stack 1: [D, C], Stack 2: [E, A, F, B] | Exploring action Move F from A to table | New state -> Stack 1: [B], Stack 2: [D, C], Stack 3: [E, A], Stack 4: [F] | Exploring action Move F from A to B | New state -> Stack 1: [B, F], Stack 2: [D, C], Stack 3: [E, A] | Exploring action Move A from E to F | New state -> Invalid | Taking action Move B from table to F | Moved to state -> Stack 1: [D, C], Stack 2: [E, A, F, B] | Plan so far [Move F from E to table | Move E from B to table | Move B from C to table | Move D from A to table | Move C from table to D | Move A from table to E | Move F from table to A | Move B from table to F] | Reached goal state!",
        "system2_states_v1": 47
    },
    {
        "idx": 681,
        "start": [
            [
                "table",
                "A",
                "B",
                "D",
                "F"
            ],
            [
                "table",
                "E",
                "C"
            ]
        ],
        "goal": [
            [
                "table",
                "B",
                "E",
                "F",
                "A",
                "C"
            ],
            [
                "table",
                "D"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": false,
                "on": -1,
                "under": "B",
                "ontable": true
            },
            "B": {
                "clear": false,
                "on": "A",
                "under": "D",
                "ontable": false
            },
            "C": {
                "clear": true,
                "on": "E",
                "under": -1,
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": "B",
                "under": "F",
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": -1,
                "under": "C",
                "ontable": true
            },
            "F": {
                "clear": true,
                "on": "D",
                "under": -1,
                "ontable": false
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": false,
                "on": "F",
                "under": "C",
                "ontable": false
            },
            "B": {
                "clear": false,
                "on": -1,
                "under": "E",
                "ontable": true
            },
            "C": {
                "clear": true,
                "on": "A",
                "under": -1,
                "ontable": false
            },
            "D": {
                "clear": true,
                "on": -1,
                "under": -1,
                "ontable": true
            },
            "E": {
                "clear": false,
                "on": "B",
                "under": "F",
                "ontable": false
            },
            "F": {
                "clear": false,
                "on": "E",
                "under": "A",
                "ontable": false
            }
        },
        "plan_len": 8,
        "num_blocks": 6,
        "prompt": "The initial state:\nThe hand is empty.\nA is on the table. B is on A. D is on B. F is on D. F is clear.\nE is on the table. C is on E. C is clear.\n\nThe goal is:\nB is on the table. E is on B. F is on E. A is on F. C is on A. C is clear.\nD is on the table. D is clear.\n",
        "system1_plan": "Move F from D to table | Move D from B to table | Move B from A to table | Move C from E to table | Move E from table to B | Move F from table to E | Move A from table to F | Move C from table to A",
        "system1_states": 8,
        "system2_plan_v1": "Moved to state -> Stack 1: [A, B, D, F], Stack 2: [E, C] | Plan so far [] | Exploring action Move D from B to F | New state -> Invalid | Exploring action Move F from D to table | New state -> Stack 1: [A, B, D], Stack 2: [E, C], Stack 3: [F] | Exploring action Move C from E to table | New state -> Stack 1: [A, B, D, F], Stack 2: [C], Stack 3: [E] | Exploring action Move C from E to F | New state -> Stack 1: [A, B, D, F, C], Stack 2: [E] | Taking action Move C from E to table | Moved to state -> Stack 1: [A, B, D, F], Stack 2: [C], Stack 3: [E] | Plan so far [Move C from E to table] | Exploring action Move F from D to table | New state -> Stack 1: [A, B, D], Stack 2: [C], Stack 3: [E], Stack 4: [F] | Exploring action Move F from D to E | New state -> Stack 1: [A, B, D], Stack 2: [C], Stack 3: [E, F] | Exploring action Move F from D to C | New state -> Stack 1: [A, B, D], Stack 2: [C, F], Stack 3: [E] | Exploring action Move D from B to E | New state -> Invalid | Taking action Move F from D to table | Moved to state -> Stack 1: [A, B, D], Stack 2: [E, C], Stack 3: [F] | Plan so far [Move F from D to table] | Exploring action Move C from E to table | New state -> Stack 1: [A, B, D], Stack 2: [C], Stack 3: [E], Stack 4: [F] | Exploring action Move D from B to table | New state -> Stack 1: [A, B], Stack 2: [D], Stack 3: [E, C], Stack 4: [F] | Exploring action Move B from A to D | New state -> Invalid | Exploring action Move B from A to F | New state -> Invalid | Exploring action Move C from E to F | New state -> Stack 1: [A, B, D], Stack 2: [E], Stack 3: [F, C] | Taking action Move D from B to table | Moved to state -> Stack 1: [A, B], Stack 2: [D], Stack 3: [E, C], Stack 4: [F] | Plan so far [Move F from D to table | Move D from B to table] | Exploring action Move C from E to table | New state -> Stack 1: [A, B], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Exploring action Move B from A to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D], Stack 4: [E, C], Stack 5: [F] | Exploring action Move E from table to D | New state -> Invalid | Exploring action Move A from table to C | New state -> Invalid | Exploring action Move C from E to B | New state -> Stack 1: [A, B, C], Stack 2: [D], Stack 3: [E], Stack 4: [F] | Taking action Move B from A to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [D], Stack 4: [E, C], Stack 5: [F] | Plan so far [Move F from D to table | Move D from B to table | Move B from A to table] | Exploring action Move C from E to F | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D], Stack 4: [E], Stack 5: [F, C] | Exploring action Move C from E to A | New state -> Stack 1: [A, C], Stack 2: [B], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Exploring action Move C from E to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Exploring action Move E from table to F | New state -> Invalid | Taking action Move C from E to table | Moved to state -> Stack 1: [A, B], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Plan so far [Move F from D to table | Move D from B to table | Move C from E to table] | Exploring action Move A from table to E | New state -> Invalid | Exploring action Move B from A to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Exploring action Move B from A to F | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [F, B] | Exploring action Move B from A to C | New state -> Stack 1: [A], Stack 2: [C, B], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Taking action Move C from E to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Plan so far [Move F from D to table | Move D from B to table | Move B from A to table | Move C from E to table] | Exploring action Move E from table to B | New state -> Stack 1: [A], Stack 2: [B, E], Stack 3: [C], Stack 4: [D], Stack 5: [F] | Exploring action Move C from table to A | New state -> Stack 1: [A, C], Stack 2: [B], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Exploring action Move B from table to A | New state -> Stack 1: [A, B], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Taking action Move B from A to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Plan so far [Move F from D to table | Move D from B to table | Move C from E to table | Move B from A to table] | Taking action Move C from E to A | Moved to state -> Stack 1: [A, C], Stack 2: [B], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Plan so far [Move F from D to table | Move D from B to table | Move B from A to table | Move C from E to A] | Exploring action Move E from table to B | New state -> Stack 1: [A, C], Stack 2: [B, E], Stack 3: [D], Stack 4: [F] | Exploring action Move C from A to B | New state -> Stack 1: [A], Stack 2: [B, C], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Exploring action Move C from A to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Exploring action Move A from table to D | New state -> Invalid | Taking action Move E from table to B | Moved to state -> Stack 1: [A], Stack 2: [B, E], Stack 3: [C], Stack 4: [D], Stack 5: [F] | Plan so far [Move F from D to table | Move D from B to table | Move B from A to table | Move C from E to table | Move E from table to B] | Exploring action Move C from table to A | New state -> Stack 1: [A, C], Stack 2: [B, E], Stack 3: [D], Stack 4: [F] | Exploring action Move A from table to E | New state -> Stack 1: [B, E, A], Stack 2: [C], Stack 3: [D], Stack 4: [F] | Exploring action Move B from table to C | New state -> Invalid | Exploring action Move F from table to E | New state -> Stack 1: [A], Stack 2: [B, E, F], Stack 3: [C], Stack 4: [D] | Exploring action Move B from table to E | New state -> Invalid | Taking action Move E from table to B | Moved to state -> Stack 1: [A, C], Stack 2: [B, E], Stack 3: [D], Stack 4: [F] | Plan so far [Move F from D to table | Move D from B to table | Move B from A to table | Move C from E to A | Move E from table to B] | Exploring action Move B from table to D | New state -> Invalid | Exploring action Move C from A to E | New state -> Stack 1: [A], Stack 2: [B, E, C], Stack 3: [D], Stack 4: [F] | Exploring action Move C from A to table | New state -> Stack 1: [A], Stack 2: [B, E], Stack 3: [C], Stack 4: [D], Stack 5: [F] | Exploring action Move F from table to E | New state -> Stack 1: [A, C], Stack 2: [B, E, F], Stack 3: [D] | Exploring action Move A from table to D | New state -> Invalid | Taking action Move F from table to E | Moved to state -> Stack 1: [A], Stack 2: [B, E, F], Stack 3: [C], Stack 4: [D] | Plan so far [Move F from D to table | Move D from B to table | Move B from A to table | Move C from E to table | Move E from table to B | Move F from table to E] | Exploring action Move C from table to A | New state -> Stack 1: [A, C], Stack 2: [B, E, F], Stack 3: [D] | Exploring action Move E from B to A | New state -> Invalid | Exploring action Move A from table to C | New state -> Stack 1: [B, E, F], Stack 2: [C, A], Stack 3: [D] | Exploring action Move A from table to F | New state -> Stack 1: [B, E, F, A], Stack 2: [C], Stack 3: [D] | Taking action Move F from table to E | Moved to state -> Stack 1: [A, C], Stack 2: [B, E, F], Stack 3: [D] | Plan so far [Move F from D to table | Move D from B to table | Move B from A to table | Move C from E to A | Move E from table to B | Move F from table to E] | Exploring action Move F from E to table | New state -> Stack 1: [A, C], Stack 2: [B, E], Stack 3: [D], Stack 4: [F] | Exploring action Move A from table to D | New state -> Invalid | Exploring action Move C from A to table | New state -> Stack 1: [A], Stack 2: [B, E, F], Stack 3: [C], Stack 4: [D] | Exploring action Move C from A to F | New state -> Stack 1: [A], Stack 2: [B, E, F, C], Stack 3: [D] | Taking action Move A from table to F | Moved to state -> Stack 1: [B, E, F, A], Stack 2: [C], Stack 3: [D] | Plan so far [Move F from D to table | Move D from B to table | Move B from A to table | Move C from E to table | Move E from table to B | Move F from table to E | Move A from table to F] | Exploring action Move F from E to table | New state -> Invalid | Exploring action Move A from F to table | New state -> Stack 1: [A], Stack 2: [B, E, F], Stack 3: [C], Stack 4: [D] | Exploring action Move D from table to A | New state -> Stack 1: [B, E, F, A, D], Stack 2: [C] | Exploring action Move C from table to A | New state -> Stack 1: [B, E, F, A, C], Stack 2: [D] | Taking action Move C from table to A | Moved to state -> Stack 1: [B, E, F, A, C], Stack 2: [D] | Plan so far [Move F from D to table | Move D from B to table | Move B from A to table | Move C from E to table | Move E from table to B | Move F from table to E | Move A from table to F | Move C from table to A] | Reached goal state!",
        "system2_states_v1": 55
    },
    {
        "idx": 718,
        "start": [
            [
                "table",
                "E",
                "A",
                "D",
                "F",
                "B",
                "C"
            ]
        ],
        "goal": [
            [
                "table",
                "A"
            ],
            [
                "table",
                "D",
                "C",
                "F",
                "B"
            ],
            [
                "table",
                "E"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": false,
                "on": "E",
                "under": "D",
                "ontable": false
            },
            "B": {
                "clear": false,
                "on": "F",
                "under": "C",
                "ontable": false
            },
            "C": {
                "clear": true,
                "on": "B",
                "under": -1,
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": "A",
                "under": "F",
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": -1,
                "under": "A",
                "ontable": true
            },
            "F": {
                "clear": false,
                "on": "D",
                "under": "B",
                "ontable": false
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": true,
                "on": -1,
                "under": -1,
                "ontable": true
            },
            "B": {
                "clear": true,
                "on": "F",
                "under": -1,
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": "D",
                "under": "F",
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": -1,
                "under": "C",
                "ontable": true
            },
            "E": {
                "clear": true,
                "on": -1,
                "under": -1,
                "ontable": true
            },
            "F": {
                "clear": false,
                "on": "C",
                "under": "B",
                "ontable": false
            }
        },
        "plan_len": 8,
        "num_blocks": 6,
        "prompt": "The initial state:\nThe hand is empty.\nE is on the table. A is on E. D is on A. F is on D. B is on F. C is on B. C is clear.\n\nThe goal is:\nA is on the table. A is clear.\nD is on the table. C is on D. F is on C. B is on F. B is clear.\nE is on the table. E is clear.\n",
        "system1_plan": "Move C from B to table | Move B from F to table | Move F from D to table | Move D from A to table | Move A from E to table | Move C from table to D | Move F from table to C | Move B from table to F",
        "system1_states": 8,
        "system2_plan_v1": "Moved to state -> Stack 1: [E, A, D, F, B, C] | Plan so far [] | Exploring action Move E from table to C | New state -> Invalid | Exploring action Move C from B to table | New state -> Stack 1: [C], Stack 2: [E, A, D, F, B] | Taking action Move C from B to table | Moved to state -> Stack 1: [C], Stack 2: [E, A, D, F, B] | Plan so far [Move C from B to table] | Exploring action Move C from table to B | New state -> Stack 1: [E, A, D, F, B, C] | Exploring action Move D from A to table | New state -> Invalid | Exploring action Move B from F to C | New state -> Stack 1: [C, B], Stack 2: [E, A, D, F] | Exploring action Move B from F to table | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [E, A, D, F] | Exploring action Move F from D to B | New state -> Invalid | Taking action Move B from F to table | Moved to state -> Stack 1: [B], Stack 2: [C], Stack 3: [E, A, D, F] | Plan so far [Move C from B to table | Move B from F to table] | Exploring action Move F from D to table | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [E, A, D], Stack 4: [F] | Exploring action Move F from D to C | New state -> Stack 1: [B], Stack 2: [C, F], Stack 3: [E, A, D] | Exploring action Move D from A to B | New state -> Invalid | Exploring action Move F from D to B | New state -> Stack 1: [B, F], Stack 2: [C], Stack 3: [E, A, D] | Taking action Move F from D to table | Moved to state -> Stack 1: [B], Stack 2: [C], Stack 3: [E, A, D], Stack 4: [F] | Plan so far [Move C from B to table | Move B from F to table | Move F from D to table] | Exploring action Move D from A to table | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D], Stack 4: [E, A], Stack 5: [F] | Exploring action Move E from table to C | New state -> Invalid | Exploring action Move B from table to F | New state -> Stack 1: [C], Stack 2: [E, A, D], Stack 3: [F, B] | Exploring action Move D from A to B | New state -> Stack 1: [B, D], Stack 2: [C], Stack 3: [E, A], Stack 4: [F] | Taking action Move D from A to table | Moved to state -> Stack 1: [B], Stack 2: [C], Stack 3: [D], Stack 4: [E, A], Stack 5: [F] | Plan so far [Move C from B to table | Move B from F to table | Move F from D to table | Move D from A to table] | Exploring action Move A from E to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Exploring action Move A from E to C | New state -> Stack 1: [B], Stack 2: [C, A], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Exploring action Move C from table to D | New state -> Stack 1: [B], Stack 2: [D, C], Stack 3: [E, A], Stack 4: [F] | Exploring action Move E from table to B | New state -> Invalid | Taking action Move A from E to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Plan so far [Move C from B to table | Move B from F to table | Move F from D to table | Move D from A to table | Move A from E to table] | Exploring action Move C from table to F | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D], Stack 4: [E], Stack 5: [F, C] | Exploring action Move B from table to F | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [F, B] | Exploring action Move C from table to D | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, C], Stack 4: [E], Stack 5: [F] | Taking action Move C from table to D | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, C], Stack 4: [E], Stack 5: [F] | Plan so far [Move C from B to table | Move B from F to table | Move F from D to table | Move D from A to table | Move A from E to table | Move C from table to D] | Exploring action Move B from table to C | New state -> Stack 1: [A], Stack 2: [D, C, B], Stack 3: [E], Stack 4: [F] | Exploring action Move D from table to E | New state -> Invalid | Exploring action Move D from table to A | New state -> Invalid | Exploring action Move B from table to F | New state -> Stack 1: [A], Stack 2: [D, C], Stack 3: [E], Stack 4: [F, B] | Exploring action Move F from table to C | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, C, F], Stack 4: [E] | Taking action Move F from table to C | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, C, F], Stack 4: [E] | Plan so far [Move C from B to table | Move B from F to table | Move F from D to table | Move D from A to table | Move A from E to table | Move C from table to D | Move F from table to C] | Exploring action Move F from C to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, C], Stack 4: [E], Stack 5: [F] | Exploring action Move A from table to B | New state -> Stack 1: [B, A], Stack 2: [D, C, F], Stack 3: [E] | Exploring action Move C from D to E | New state -> Invalid | Exploring action Move B from table to F | New state -> Stack 1: [A], Stack 2: [D, C, F, B], Stack 3: [E] | Taking action Move B from table to F | Moved to state -> Stack 1: [A], Stack 2: [D, C, F, B], Stack 3: [E] | Plan so far [Move C from B to table | Move B from F to table | Move F from D to table | Move D from A to table | Move A from E to table | Move C from table to D | Move F from table to C | Move B from table to F] | Reached goal state!",
        "system2_states_v1": 31
    },
    {
        "idx": 719,
        "start": [
            [
                "table",
                "E",
                "C",
                "B",
                "A",
                "D"
            ],
            [
                "table",
                "F"
            ]
        ],
        "goal": [
            [
                "table",
                "D",
                "F"
            ],
            [
                "table",
                "E",
                "B",
                "C",
                "A"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": false,
                "on": "B",
                "under": "D",
                "ontable": false
            },
            "B": {
                "clear": false,
                "on": "C",
                "under": "A",
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": "E",
                "under": "B",
                "ontable": false
            },
            "D": {
                "clear": true,
                "on": "A",
                "under": -1,
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": -1,
                "under": "C",
                "ontable": true
            },
            "F": {
                "clear": true,
                "on": -1,
                "under": -1,
                "ontable": true
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": true,
                "on": "C",
                "under": -1,
                "ontable": false
            },
            "B": {
                "clear": false,
                "on": "E",
                "under": "C",
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": "B",
                "under": "A",
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": -1,
                "under": "F",
                "ontable": true
            },
            "E": {
                "clear": false,
                "on": -1,
                "under": "B",
                "ontable": true
            },
            "F": {
                "clear": true,
                "on": "D",
                "under": -1,
                "ontable": false
            }
        },
        "plan_len": 8,
        "num_blocks": 6,
        "prompt": "The initial state:\nThe hand is empty.\nE is on the table. C is on E. B is on C. A is on B. D is on A. D is clear.\nF is on the table. F is clear.\n\nThe goal is:\nD is on the table. F is on D. F is clear.\nE is on the table. B is on E. C is on B. A is on C. A is clear.\n",
        "system1_plan": "Move D from A to table | Move F from table to D | Move A from B to table | Move B from C to table | Move C from E to table | Move B from table to E | Move C from table to B | Move A from table to C",
        "system1_states": 8,
        "system2_plan_v1": "Moved to state -> Stack 1: [E, C, B, A, D], Stack 2: [F] | Plan so far [] | Exploring action Move D from A to F | New state -> Stack 1: [E, C, B, A], Stack 2: [F, D] | Exploring action Move D from A to table | New state -> Stack 1: [D], Stack 2: [E, C, B, A], Stack 3: [F] | Exploring action Move F from table to D | New state -> Stack 1: [E, C, B, A, D, F] | Exploring action Move B from C to table | New state -> Invalid | Taking action Move D from A to table | Moved to state -> Stack 1: [D], Stack 2: [E, C, B, A], Stack 3: [F] | Plan so far [Move D from A to table] | Exploring action Move A from B to table | New state -> Stack 1: [A], Stack 2: [D], Stack 3: [E, C, B], Stack 4: [F] | Exploring action Move A from B to F | New state -> Stack 1: [D], Stack 2: [E, C, B], Stack 3: [F, A] | Exploring action Move C from E to D | New state -> Invalid | Exploring action Move C from E to table | New state -> Invalid | Exploring action Move F from table to D | New state -> Stack 1: [D, F], Stack 2: [E, C, B, A] | Taking action Move F from table to D | Moved to state -> Stack 1: [D, F], Stack 2: [E, C, B, A] | Plan so far [Move D from A to table | Move F from table to D] | Exploring action Move A from B to F | New state -> Stack 1: [D, F, A], Stack 2: [E, C, B] | Exploring action Move F from D to table | New state -> Stack 1: [D], Stack 2: [E, C, B, A], Stack 3: [F] | Exploring action Move A from B to table | New state -> Stack 1: [A], Stack 2: [D, F], Stack 3: [E, C, B] | Exploring action Move B from C to table | New state -> Invalid | Taking action Move A from B to table | Moved to state -> Stack 1: [A], Stack 2: [D, F], Stack 3: [E, C, B] | Plan so far [Move D from A to table | Move F from table to D | Move A from B to table] | Exploring action Move E from table to F | New state -> Invalid | Exploring action Move B from C to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, F], Stack 4: [E, C] | Exploring action Move B from C to A | New state -> Stack 1: [A, B], Stack 2: [D, F], Stack 3: [E, C] | Exploring action Move C from E to B | New state -> Invalid | Exploring action Move A from table to B | New state -> Stack 1: [D, F], Stack 2: [E, C, B, A] | Taking action Move B from C to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, F], Stack 4: [E, C] | Plan so far [Move D from A to table | Move F from table to D | Move A from B to table | Move B from C to table] | Exploring action Move C from E to A | New state -> Stack 1: [A, C], Stack 2: [B], Stack 3: [D, F], Stack 4: [E] | Exploring action Move E from table to C | New state -> Invalid | Exploring action Move C from E to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D, F], Stack 5: [E] | Exploring action Move A from table to C | New state -> Stack 1: [B], Stack 2: [D, F], Stack 3: [E, C, A] | Taking action Move C from E to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D, F], Stack 5: [E] | Plan so far [Move D from A to table | Move F from table to D | Move A from B to table | Move B from C to table | Move C from E to table] | Exploring action Move D from table to C | New state -> Invalid | Exploring action Move D from table to F | New state -> Invalid | Exploring action Move B from table to E | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, F], Stack 4: [E, B] | Exploring action Move A from table to E | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, F], Stack 4: [E, A] | Exploring action Move A from table to C | New state -> Stack 1: [B], Stack 2: [C, A], Stack 3: [D, F], Stack 4: [E] | Taking action Move B from table to E | Moved to state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, F], Stack 4: [E, B] | Plan so far [Move D from A to table | Move F from table to D | Move A from B to table | Move B from C to table | Move C from E to table | Move B from table to E] | Exploring action Move A from table to B | New state -> Stack 1: [C], Stack 2: [D, F], Stack 3: [E, B, A] | Exploring action Move A from table to C | New state -> Stack 1: [C, A], Stack 2: [D, F], Stack 3: [E, B] | Exploring action Move E from table to B | New state -> Invalid | Exploring action Move E from table to F | New state -> Invalid | Exploring action Move C from table to B | New state -> Stack 1: [A], Stack 2: [D, F], Stack 3: [E, B, C] | Taking action Move C from table to B | Moved to state -> Stack 1: [A], Stack 2: [D, F], Stack 3: [E, B, C] | Plan so far [Move D from A to table | Move F from table to D | Move A from B to table | Move B from C to table | Move C from E to table | Move B from table to E | Move C from table to B] | Exploring action Move E from table to A | New state -> Invalid | Exploring action Move F from D to table | New state -> Stack 1: [A], Stack 2: [D], Stack 3: [E, B, C], Stack 4: [F] | Exploring action Move C from B to table | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, F], Stack 4: [E, B] | Exploring action Move A from table to C | New state -> Stack 1: [D, F], Stack 2: [E, B, C, A] | Exploring action Move D from table to A | New state -> Invalid | Taking action Move A from table to C | Moved to state -> Stack 1: [D, F], Stack 2: [E, B, C, A] | Plan so far [Move D from A to table | Move F from table to D | Move A from B to table | Move B from C to table | Move C from E to table | Move B from table to E | Move C from table to B | Move A from table to C] | Reached goal state!",
        "system2_states_v1": 37
    },
    {
        "idx": 882,
        "start": [
            [
                "table",
                "D",
                "B",
                "A",
                "E",
                "F",
                "C"
            ],
            [
                "table",
                "G"
            ]
        ],
        "goal": [
            [
                "table",
                "A",
                "E",
                "C",
                "F",
                "D",
                "G"
            ],
            [
                "table",
                "B"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": false,
                "on": "B",
                "under": "E",
                "ontable": false
            },
            "B": {
                "clear": false,
                "on": "D",
                "under": "A",
                "ontable": false
            },
            "C": {
                "clear": true,
                "on": "F",
                "under": -1,
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": -1,
                "under": "B",
                "ontable": true
            },
            "E": {
                "clear": false,
                "on": "A",
                "under": "F",
                "ontable": false
            },
            "F": {
                "clear": false,
                "on": "E",
                "under": "C",
                "ontable": false
            },
            "G": {
                "clear": true,
                "on": -1,
                "under": -1,
                "ontable": true
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": false,
                "on": -1,
                "under": "E",
                "ontable": true
            },
            "B": {
                "clear": true,
                "on": -1,
                "under": -1,
                "ontable": true
            },
            "C": {
                "clear": false,
                "on": "E",
                "under": "F",
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": "F",
                "under": "G",
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": "A",
                "under": "C",
                "ontable": false
            },
            "F": {
                "clear": false,
                "on": "C",
                "under": "D",
                "ontable": false
            },
            "G": {
                "clear": true,
                "on": "D",
                "under": -1,
                "ontable": false
            }
        },
        "plan_len": 10,
        "num_blocks": 7,
        "prompt": "The initial state:\nThe hand is empty.\nD is on the table. B is on D. A is on B. E is on A. F is on E. C is on F. C is clear.\nG is on the table. G is clear.\n\nThe goal is:\nA is on the table. E is on A. C is on E. F is on C. D is on F. G is on D. G is clear.\nB is on the table. B is clear.\n",
        "system1_plan": "Move C from F to table | Move F from E to table | Move E from A to table | Move A from B to table | Move B from D to table | Move E from table to A | Move C from table to E | Move F from table to C | Move D from table to F | Move G from table to D",
        "system1_states": 10,
        "system2_plan_v1": "Moved to state -> Stack 1: [D, B, A, E, F, C], Stack 2: [G] | Plan so far [] | Exploring action Move F from E to table | New state -> Invalid | Exploring action Move C from F to G | New state -> Stack 1: [D, B, A, E, F], Stack 2: [G, C] | Exploring action Move C from F to table | New state -> Stack 1: [C], Stack 2: [D, B, A, E, F], Stack 3: [G] | Exploring action Move G from table to C | New state -> Stack 1: [D, B, A, E, F, C, G] | Taking action Move C from F to table | Moved to state -> Stack 1: [C], Stack 2: [D, B, A, E, F], Stack 3: [G] | Plan so far [Move C from F to table] | Exploring action Move F from E to table | New state -> Stack 1: [C], Stack 2: [D, B, A, E], Stack 3: [F], Stack 4: [G] | Exploring action Move A from B to C | New state -> Invalid | Exploring action Move F from E to G | New state -> Stack 1: [C], Stack 2: [D, B, A, E], Stack 3: [G, F] | Exploring action Move F from E to C | New state -> Stack 1: [C, F], Stack 2: [D, B, A, E], Stack 3: [G] | Taking action Move F from E to table | Moved to state -> Stack 1: [C], Stack 2: [D, B, A, E], Stack 3: [F], Stack 4: [G] | Plan so far [Move C from F to table | Move F from E to table] | Exploring action Move D from table to F | New state -> Invalid | Exploring action Move E from A to table | New state -> Stack 1: [C], Stack 2: [D, B, A], Stack 3: [E], Stack 4: [F], Stack 5: [G] | Exploring action Move E from A to F | New state -> Stack 1: [C], Stack 2: [D, B, A], Stack 3: [F, E], Stack 4: [G] | Exploring action Move C from table to E | New state -> Stack 1: [D, B, A, E, C], Stack 2: [F], Stack 3: [G] | Taking action Move C from table to E | Moved to state -> Stack 1: [D, B, A, E, C], Stack 2: [F], Stack 3: [G] | Plan so far [Move C from F to table | Move F from E to table | Move C from table to E] | Exploring action Move F from table to C | New state -> Stack 1: [D, B, A, E, C, F], Stack 2: [G] | Exploring action Move E from A to F | New state -> Invalid | Exploring action Move G from table to C | New state -> Stack 1: [D, B, A, E, C, G], Stack 2: [F] | Exploring action Move G from table to F | New state -> Stack 1: [D, B, A, E, C], Stack 2: [F, G] | Taking action Move E from A to table | Moved to state -> Stack 1: [C], Stack 2: [D, B, A], Stack 3: [E], Stack 4: [F], Stack 5: [G] | Plan so far [Move C from F to table | Move F from E to table | Move E from A to table] | Exploring action Move D from table to E | New state -> Invalid | Exploring action Move A from B to E | New state -> Stack 1: [C], Stack 2: [D, B], Stack 3: [E, A], Stack 4: [F], Stack 5: [G] | Exploring action Move A from B to table | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, B], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Exploring action Move A from B to C | New state -> Stack 1: [C, A], Stack 2: [D, B], Stack 3: [E], Stack 4: [F], Stack 5: [G] | Taking action Move F from table to C | Moved to state -> Stack 1: [D, B, A, E, C, F], Stack 2: [G] | Plan so far [Move C from F to table | Move F from E to table | Move C from table to E | Move F from table to C] | Exploring action Move C from E to G | New state -> Invalid | Exploring action Move F from C to table | New state -> Stack 1: [D, B, A, E, C], Stack 2: [F], Stack 3: [G] | Exploring action Move G from table to F | New state -> Stack 1: [D, B, A, E, C, F, G] | Exploring action Move F from C to G | New state -> Stack 1: [D, B, A, E, C], Stack 2: [G, F] | Taking action Move A from B to table | Moved to state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, B], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Plan so far [Move C from F to table | Move F from E to table | Move E from A to table | Move A from B to table] | Exploring action Move B from D to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F], Stack 7: [G] | Exploring action Move E from table to A | New state -> Stack 1: [A, E], Stack 2: [C], Stack 3: [D, B], Stack 4: [F], Stack 5: [G] | Exploring action Move D from table to F | New state -> Invalid | Exploring action Move D from table to B | New state -> Invalid | Exploring action Move B from D to A | New state -> Stack 1: [A, B], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Taking action Move B from D to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F], Stack 7: [G] | Plan so far [Move C from F to table | Move F from E to table | Move E from A to table | Move A from B to table | Move B from D to table] | Exploring action Move G from table to D | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D, G], Stack 5: [E], Stack 6: [F] | Exploring action Move A from table to C | New state -> Stack 1: [B], Stack 2: [C, A], Stack 3: [D], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Exploring action Move E from table to A | New state -> Stack 1: [A, E], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [F], Stack 6: [G] | Taking action Move E from table to A | Moved to state -> Stack 1: [A, E], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [F], Stack 6: [G] | Plan so far [Move C from F to table | Move F from E to table | Move E from A to table | Move A from B to table | Move B from D to table | Move E from table to A] | Exploring action Move D from table to C | New state -> Stack 1: [A, E], Stack 2: [B], Stack 3: [C, D], Stack 4: [F], Stack 5: [G] | Exploring action Move C from table to E | New state -> Stack 1: [A, E, C], Stack 2: [B], Stack 3: [D], Stack 4: [F], Stack 5: [G] | Exploring action Move G from table to D | New state -> Stack 1: [A, E], Stack 2: [B], Stack 3: [C], Stack 4: [D, G], Stack 5: [F] | Exploring action Move A from table to B | New state -> Invalid | Taking action Move C from table to E | Moved to state -> Stack 1: [A, E, C], Stack 2: [B], Stack 3: [D], Stack 4: [F], Stack 5: [G] | Plan so far [Move C from F to table | Move F from E to table | Move E from A to table | Move A from B to table | Move B from D to table | Move E from table to A | Move C from table to E] | Exploring action Move C from E to table | New state -> Stack 1: [A, E], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [F], Stack 6: [G] | Exploring action Move G from table to D | New state -> Stack 1: [A, E, C], Stack 2: [B], Stack 3: [D, G], Stack 4: [F] | Exploring action Move E from A to table | New state -> Invalid | Exploring action Move F from table to C | New state -> Stack 1: [A, E, C, F], Stack 2: [B], Stack 3: [D], Stack 4: [G] | Taking action Move F from table to C | Moved to state -> Stack 1: [A, E, C, F], Stack 2: [B], Stack 3: [D], Stack 4: [G] | Plan so far [Move C from F to table | Move F from E to table | Move E from A to table | Move A from B to table | Move B from D to table | Move E from table to A | Move C from table to E | Move F from table to C] | Exploring action Move F from C to table | New state -> Stack 1: [A, E, C], Stack 2: [B], Stack 3: [D], Stack 4: [F], Stack 5: [G] | Exploring action Move D from table to F | New state -> Stack 1: [A, E, C, F, D], Stack 2: [B], Stack 3: [G] | Exploring action Move E from A to F | New state -> Invalid | Exploring action Move G from table to D | New state -> Stack 1: [A, E, C, F], Stack 2: [B], Stack 3: [D, G] | Taking action Move D from table to F | Moved to state -> Stack 1: [A, E, C, F, D], Stack 2: [B], Stack 3: [G] | Plan so far [Move C from F to table | Move F from E to table | Move E from A to table | Move A from B to table | Move B from D to table | Move E from table to A | Move C from table to E | Move F from table to C | Move D from table to F] | Exploring action Move G from table to B | New state -> Stack 1: [A, E, C, F, D], Stack 2: [B, G] | Exploring action Move D from F to table | New state -> Stack 1: [A, E, C, F], Stack 2: [B], Stack 3: [D], Stack 4: [G] | Exploring action Move C from E to B | New state -> Invalid | Exploring action Move G from table to D | New state -> Stack 1: [A, E, C, F, D, G], Stack 2: [B] | Exploring action Move E from A to D | New state -> Invalid | Taking action Move G from table to D | Moved to state -> Stack 1: [A, E, C, F, D, G], Stack 2: [B] | Plan so far [Move C from F to table | Move F from E to table | Move E from A to table | Move A from B to table | Move B from D to table | Move E from table to A | Move C from table to E | Move F from table to C | Move D from table to F | Move G from table to D] | Reached goal state!",
        "system2_states_v1": 49
    },
    {
        "idx": 709,
        "start": [
            [
                "table",
                "A",
                "C",
                "E"
            ],
            [
                "table",
                "B"
            ],
            [
                "table",
                "F",
                "D"
            ]
        ],
        "goal": [
            [
                "table",
                "A",
                "B",
                "C",
                "E",
                "F",
                "D"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": false,
                "on": -1,
                "under": "C",
                "ontable": true
            },
            "B": {
                "clear": true,
                "on": -1,
                "under": -1,
                "ontable": true
            },
            "C": {
                "clear": false,
                "on": "A",
                "under": "E",
                "ontable": false
            },
            "D": {
                "clear": true,
                "on": "F",
                "under": -1,
                "ontable": false
            },
            "E": {
                "clear": true,
                "on": "C",
                "under": -1,
                "ontable": false
            },
            "F": {
                "clear": false,
                "on": -1,
                "under": "D",
                "ontable": true
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": false,
                "on": -1,
                "under": "B",
                "ontable": true
            },
            "B": {
                "clear": false,
                "on": "A",
                "under": "C",
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": "B",
                "under": "E",
                "ontable": false
            },
            "D": {
                "clear": true,
                "on": "F",
                "under": -1,
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": "C",
                "under": "F",
                "ontable": false
            },
            "F": {
                "clear": false,
                "on": "E",
                "under": "D",
                "ontable": false
            }
        },
        "plan_len": 8,
        "num_blocks": 6,
        "prompt": "The initial state:\nThe hand is empty.\nA is on the table. C is on A. E is on C. E is clear.\nB is on the table. B is clear.\nF is on the table. D is on F. D is clear.\n\nThe goal is:\nA is on the table. B is on A. C is on B. E is on C. F is on E. D is on F. D is clear.\n",
        "system1_plan": "Move E from C to table | Move C from A to table | Move B from table to A | Move C from table to B | Move E from table to C | Move D from F to table | Move F from table to E | Move D from table to F",
        "system1_states": 8,
        "system2_plan_v1": "Moved to state -> Stack 1: [A, C, E], Stack 2: [B], Stack 3: [F, D] | Plan so far [] | Exploring action Move E from C to table | New state -> Stack 1: [A, C], Stack 2: [B], Stack 3: [E], Stack 4: [F, D] | Exploring action Move C from A to table | New state -> Invalid | Exploring action Move D from F to table | New state -> Stack 1: [A, C, E], Stack 2: [B], Stack 3: [D], Stack 4: [F] | Exploring action Move C from A to B | New state -> Invalid | Exploring action Move E from C to B | New state -> Stack 1: [A, C], Stack 2: [B, E], Stack 3: [F, D] | Taking action Move E from C to table | Moved to state -> Stack 1: [A, C], Stack 2: [B], Stack 3: [E], Stack 4: [F, D] | Plan so far [Move E from C to table] | Exploring action Move C from A to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [E], Stack 5: [F, D] | Exploring action Move F from table to B | New state -> Invalid | Exploring action Move C from A to B | New state -> Stack 1: [A], Stack 2: [B, C], Stack 3: [E], Stack 4: [F, D] | Exploring action Move C from A to E | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [E, C], Stack 4: [F, D] | Exploring action Move A from table to B | New state -> Invalid | Taking action Move C from A to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [E], Stack 5: [F, D] | Plan so far [Move E from C to table | Move C from A to table] | Exploring action Move D from F to A | New state -> Stack 1: [A, D], Stack 2: [B], Stack 3: [C], Stack 4: [E], Stack 5: [F] | Exploring action Move D from F to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Exploring action Move F from table to D | New state -> Invalid | Exploring action Move F from table to C | New state -> Invalid | Exploring action Move B from table to A | New state -> Stack 1: [A, B], Stack 2: [C], Stack 3: [E], Stack 4: [F, D] | Taking action Move B from table to A | Moved to state -> Stack 1: [A, B], Stack 2: [C], Stack 3: [E], Stack 4: [F, D] | Plan so far [Move E from C to table | Move C from A to table | Move B from table to A] | Exploring action Move C from table to B | New state -> Stack 1: [A, B, C], Stack 2: [E], Stack 3: [F, D] | Exploring action Move C from table to E | New state -> Stack 1: [A, B], Stack 2: [E, C], Stack 3: [F, D] | Exploring action Move A from table to B | New state -> Invalid | Exploring action Move D from F to table | New state -> Stack 1: [A, B], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Taking action Move C from table to B | Moved to state -> Stack 1: [A, B, C], Stack 2: [E], Stack 3: [F, D] | Plan so far [Move E from C to table | Move C from A to table | Move B from table to A | Move C from table to B] | Exploring action Move D from F to table | New state -> Stack 1: [A, B, C], Stack 2: [D], Stack 3: [E], Stack 4: [F] | Exploring action Move D from F to E | New state -> Stack 1: [A, B, C], Stack 2: [E, D], Stack 3: [F] | Exploring action Move A from table to D | New state -> Invalid | Exploring action Move E from table to C | New state -> Stack 1: [A, B, C, E], Stack 2: [F, D] | Taking action Move E from table to C | Moved to state -> Stack 1: [A, B, C, E], Stack 2: [F, D] | Plan so far [Move E from C to table | Move C from A to table | Move B from table to A | Move C from table to B | Move E from table to C] | Exploring action Move C from B to E | New state -> Invalid | Exploring action Move D from F to E | New state -> Stack 1: [A, B, C, E, D], Stack 2: [F] | Exploring action Move E from C to table | New state -> Stack 1: [A, B, C], Stack 2: [E], Stack 3: [F, D] | Exploring action Move D from F to table | New state -> Stack 1: [A, B, C, E], Stack 2: [D], Stack 3: [F] | Exploring action Move B from A to E | New state -> Invalid | Taking action Move D from F to table | Moved to state -> Stack 1: [A, C], Stack 2: [B], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Plan so far [Move E from C to table | Move D from F to table] | Exploring action Move C from A to D | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, C], Stack 4: [E], Stack 5: [F] | Exploring action Move C from A to B | New state -> Stack 1: [A], Stack 2: [B, C], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Exploring action Move A from table to E | New state -> Invalid | Exploring action Move C from A to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Exploring action Move A from table to B | New state -> Invalid | Taking action Move C from A to E | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [E, C], Stack 4: [F, D] | Plan so far [Move E from C to table | Move C from A to E] | Exploring action Move F from table to A | New state -> Invalid | Exploring action Move B from table to A | New state -> Stack 1: [A, B], Stack 2: [E, C], Stack 3: [F, D] | Exploring action Move C from E to A | New state -> Stack 1: [A, C], Stack 2: [B], Stack 3: [E], Stack 4: [F, D] | Exploring action Move C from E to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [E], Stack 5: [F, D] | Taking action Move D from F to table | Moved to state -> Stack 1: [A, B, C], Stack 2: [D], Stack 3: [E], Stack 4: [F] | Plan so far [Move E from C to table | Move C from A to table | Move B from table to A | Move C from table to B | Move D from F to table] | Exploring action Move B from A to C | New state -> Invalid | Exploring action Move B from A to D | New state -> Invalid | Exploring action Move D from table to F | New state -> Stack 1: [A, B, C], Stack 2: [E], Stack 3: [F, D] | Exploring action Move E from table to C | New state -> Stack 1: [A, B, C, E], Stack 2: [D], Stack 3: [F] | Exploring action Move C from B to table | New state -> Stack 1: [A, B], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Taking action Move D from F to table | Moved to state -> Stack 1: [A, B, C, E], Stack 2: [D], Stack 3: [F] | Plan so far [Move E from C to table | Move C from A to table | Move B from table to A | Move C from table to B | Move E from table to C | Move D from F to table] | Exploring action Move D from table to F | New state -> Stack 1: [A, B, C, E], Stack 2: [F, D] | Exploring action Move F from table to D | New state -> Stack 1: [A, B, C, E], Stack 2: [D, F] | Exploring action Move F from table to E | New state -> Stack 1: [A, B, C, E, F], Stack 2: [D] | Exploring action Move B from A to F | New state -> Invalid | Taking action Move C from A to B | Moved to state -> Stack 1: [A], Stack 2: [B, C], Stack 3: [E], Stack 4: [F, D] | Plan so far [Move E from C to table | Move C from A to B] | Exploring action Move C from B to E | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [E, C], Stack 4: [F, D] | Exploring action Move F from table to A | New state -> Invalid | Exploring action Move C from B to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [E], Stack 5: [F, D] | Exploring action Move E from table to C | New state -> Stack 1: [A], Stack 2: [B, C, E], Stack 3: [F, D] | Taking action Move D from F to table | Moved to state -> Stack 1: [A, B], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Plan so far [Move E from C to table | Move C from A to table | Move B from table to A | Move D from F to table] | Exploring action Move A from table to F | New state -> Invalid | Exploring action Move D from table to F | New state -> Stack 1: [A, B], Stack 2: [C], Stack 3: [E], Stack 4: [F, D] | Exploring action Move C from table to D | New state -> Stack 1: [A, B], Stack 2: [D, C], Stack 3: [E], Stack 4: [F] | Exploring action Move C from table to B | New state -> Stack 1: [A, B, C], Stack 2: [D], Stack 3: [E], Stack 4: [F] | Exploring action Move A from table to D | New state -> Invalid | Taking action Move F from table to E | Moved to state -> Stack 1: [A, B, C, E, F], Stack 2: [D] | Plan so far [Move E from C to table | Move C from A to table | Move B from table to A | Move C from table to B | Move E from table to C | Move D from F to table | Move F from table to E] | Exploring action Move B from A to F | New state -> Invalid | Exploring action Move E from C to D | New state -> Invalid | Exploring action Move F from E to table | New state -> Stack 1: [A, B, C, E], Stack 2: [D], Stack 3: [F] | Exploring action Move F from E to D | New state -> Stack 1: [A, B, C, E], Stack 2: [D, F] | Exploring action Move D from table to F | New state -> Stack 1: [A, B, C, E, F, D] | Taking action Move D from table to F | Moved to state -> Stack 1: [A, B, C, E, F, D] | Plan so far [Move E from C to table | Move C from A to table | Move B from table to A | Move C from table to B | Move E from table to C | Move D from F to table | Move F from table to E | Move D from table to F] | Reached goal state!",
        "system2_states_v1": 60
    },
    {
        "idx": 608,
        "start": [
            [
                "table",
                "C",
                "B",
                "E",
                "D",
                "A"
            ]
        ],
        "goal": [
            [
                "table",
                "B",
                "D",
                "E"
            ],
            [
                "table",
                "C",
                "A"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": true,
                "on": "D",
                "under": -1,
                "ontable": false
            },
            "B": {
                "clear": false,
                "on": "C",
                "under": "E",
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": -1,
                "under": "B",
                "ontable": true
            },
            "D": {
                "clear": false,
                "on": "E",
                "under": "A",
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": "B",
                "under": "D",
                "ontable": false
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": true,
                "on": "C",
                "under": -1,
                "ontable": false
            },
            "B": {
                "clear": false,
                "on": -1,
                "under": "D",
                "ontable": true
            },
            "C": {
                "clear": false,
                "on": -1,
                "under": "A",
                "ontable": true
            },
            "D": {
                "clear": false,
                "on": "B",
                "under": "E",
                "ontable": false
            },
            "E": {
                "clear": true,
                "on": "D",
                "under": -1,
                "ontable": false
            }
        },
        "plan_len": 7,
        "num_blocks": 5,
        "prompt": "The initial state:\nThe hand is empty.\nC is on the table. B is on C. E is on B. D is on E. A is on D. A is clear.\n\nThe goal is:\nB is on the table. D is on B. E is on D. E is clear.\nC is on the table. A is on C. A is clear.\n",
        "system1_plan": "Move A from D to table | Move D from E to table | Move E from B to table | Move B from C to table | Move A from table to C | Move D from table to B | Move E from table to D",
        "system1_states": 7,
        "system2_plan_v1": "Moved to state -> Stack 1: [C, B, E, D, A] | Plan so far [] | Exploring action Move A from D to table | New state -> Stack 1: [A], Stack 2: [C, B, E, D] | Exploring action Move D from E to A | New state -> Invalid | Exploring action Move C from table to A | New state -> Invalid | Taking action Move A from D to table | Moved to state -> Stack 1: [A], Stack 2: [C, B, E, D] | Plan so far [Move A from D to table] | Exploring action Move A from table to D | New state -> Stack 1: [C, B, E, D, A] | Exploring action Move D from E to A | New state -> Stack 1: [A, D], Stack 2: [C, B, E] | Exploring action Move D from E to table | New state -> Stack 1: [A], Stack 2: [C, B, E], Stack 3: [D] | Exploring action Move E from B to table | New state -> Invalid | Taking action Move D from E to table | Moved to state -> Stack 1: [A], Stack 2: [C, B, E], Stack 3: [D] | Plan so far [Move A from D to table | Move D from E to table] | Exploring action Move E from B to table | New state -> Stack 1: [A], Stack 2: [C, B], Stack 3: [D], Stack 4: [E] | Exploring action Move B from C to D | New state -> Invalid | Exploring action Move B from C to E | New state -> Invalid | Exploring action Move E from B to D | New state -> Stack 1: [A], Stack 2: [C, B], Stack 3: [D, E] | Exploring action Move E from B to A | New state -> Stack 1: [A, E], Stack 2: [C, B], Stack 3: [D] | Taking action Move E from B to table | Moved to state -> Stack 1: [A], Stack 2: [C, B], Stack 3: [D], Stack 4: [E] | Plan so far [Move A from D to table | Move D from E to table | Move E from B to table] | Exploring action Move C from table to A | New state -> Invalid | Exploring action Move B from C to D | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, B], Stack 4: [E] | Exploring action Move B from C to E | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D], Stack 4: [E, B] | Exploring action Move B from C to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Exploring action Move C from table to B | New state -> Invalid | Taking action Move E from B to D | Moved to state -> Stack 1: [A], Stack 2: [C, B], Stack 3: [D, E] | Plan so far [Move A from D to table | Move D from E to table | Move E from B to D] | Exploring action Move B from C to A | New state -> Stack 1: [A, B], Stack 2: [C], Stack 3: [D, E] | Exploring action Move E from D to table | New state -> Stack 1: [A], Stack 2: [C, B], Stack 3: [D], Stack 4: [E] | Exploring action Move D from table to E | New state -> Invalid | Exploring action Move B from C to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D, E] | Taking action Move B from C to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Plan so far [Move A from D to table | Move D from E to table | Move E from B to table | Move B from C to table] | Exploring action Move A from table to C | New state -> Stack 1: [B], Stack 2: [C, A], Stack 3: [D], Stack 4: [E] | Exploring action Move E from table to D | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D, E] | Exploring action Move D from table to B | New state -> Stack 1: [A], Stack 2: [B, D], Stack 3: [C], Stack 4: [E] | Taking action Move A from table to C | Moved to state -> Stack 1: [B], Stack 2: [C, A], Stack 3: [D], Stack 4: [E] | Plan so far [Move A from D to table | Move D from E to table | Move E from B to table | Move B from C to table | Move A from table to C] | Exploring action Move B from table to E | New state -> Stack 1: [C, A], Stack 2: [D], Stack 3: [E, B] | Exploring action Move D from table to B | New state -> Stack 1: [B, D], Stack 2: [C, A], Stack 3: [E] | Exploring action Move E from table to D | New state -> Stack 1: [B], Stack 2: [C, A], Stack 3: [D, E] | Exploring action Move C from table to D | New state -> Invalid | Exploring action Move C from table to B | New state -> Invalid | Taking action Move D from table to B | Moved to state -> Stack 1: [B, D], Stack 2: [C, A], Stack 3: [E] | Plan so far [Move A from D to table | Move D from E to table | Move E from B to table | Move B from C to table | Move A from table to C | Move D from table to B] | Exploring action Move B from table to E | New state -> Invalid | Exploring action Move D from B to E | New state -> Stack 1: [B], Stack 2: [C, A], Stack 3: [E, D] | Exploring action Move C from table to A | New state -> Invalid | Exploring action Move D from B to table | New state -> Stack 1: [B], Stack 2: [C, A], Stack 3: [D], Stack 4: [E] | Exploring action Move E from table to D | New state -> Stack 1: [B, D, E], Stack 2: [C, A] | Taking action Move E from table to D | Moved to state -> Stack 1: [B, D, E], Stack 2: [C, A] | Plan so far [Move A from D to table | Move D from E to table | Move E from B to table | Move B from C to table | Move A from table to C | Move D from table to B | Move E from table to D] | Reached goal state!",
        "system2_states_v1": 34
    },
    {
        "idx": 577,
        "start": [
            [
                "table",
                "A",
                "E",
                "D"
            ],
            [
                "table",
                "C",
                "B"
            ]
        ],
        "goal": [
            [
                "table",
                "D",
                "C",
                "B",
                "A",
                "E"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": false,
                "on": -1,
                "under": "E",
                "ontable": true
            },
            "B": {
                "clear": true,
                "on": "C",
                "under": -1,
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": -1,
                "under": "B",
                "ontable": true
            },
            "D": {
                "clear": true,
                "on": "E",
                "under": -1,
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": "A",
                "under": "D",
                "ontable": false
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": false,
                "on": "B",
                "under": "E",
                "ontable": false
            },
            "B": {
                "clear": false,
                "on": "C",
                "under": "A",
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": "D",
                "under": "B",
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": -1,
                "under": "C",
                "ontable": true
            },
            "E": {
                "clear": true,
                "on": "A",
                "under": -1,
                "ontable": false
            }
        },
        "plan_len": 7,
        "num_blocks": 5,
        "prompt": "The initial state:\nThe hand is empty.\nA is on the table. E is on A. D is on E. D is clear.\nC is on the table. B is on C. B is clear.\n\nThe goal is:\nD is on the table. C is on D. B is on C. A is on B. E is on A. E is clear.\n",
        "system1_plan": "Move D from E to table | Move B from C to table | Move C from table to D | Move E from A to table | Move B from table to C | Move A from table to B | Move E from table to A",
        "system1_states": 7,
        "system2_plan_v1": "Moved to state -> Stack 1: [A, E, D], Stack 2: [C, B] | Plan so far [] | Exploring action Move D from E to table | New state -> Stack 1: [A, E], Stack 2: [C, B], Stack 3: [D] | Exploring action Move D from E to B | New state -> Stack 1: [A, E], Stack 2: [C, B, D] | Exploring action Move B from C to table | New state -> Stack 1: [A, E, D], Stack 2: [B], Stack 3: [C] | Exploring action Move E from A to D | New state -> Invalid | Exploring action Move C from table to B | New state -> Invalid | Taking action Move D from E to table | Moved to state -> Stack 1: [A, E], Stack 2: [C, B], Stack 3: [D] | Plan so far [Move D from E to table] | Exploring action Move C from table to B | New state -> Invalid | Exploring action Move B from C to table | New state -> Stack 1: [A, E], Stack 2: [B], Stack 3: [C], Stack 4: [D] | Exploring action Move B from C to D | New state -> Stack 1: [A, E], Stack 2: [C], Stack 3: [D, B] | Exploring action Move E from A to table | New state -> Stack 1: [A], Stack 2: [C, B], Stack 3: [D], Stack 4: [E] | Exploring action Move C from table to E | New state -> Invalid | Taking action Move B from C to table | Moved to state -> Stack 1: [A, E], Stack 2: [B], Stack 3: [C], Stack 4: [D] | Plan so far [Move D from E to table | Move B from C to table] | Exploring action Move E from A to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Exploring action Move C from table to D | New state -> Stack 1: [A, E], Stack 2: [B], Stack 3: [D, C] | Exploring action Move D from table to B | New state -> Stack 1: [A, E], Stack 2: [B, D], Stack 3: [C] | Exploring action Move A from table to D | New state -> Invalid | Taking action Move C from table to D | Moved to state -> Stack 1: [A, E], Stack 2: [B], Stack 3: [D, C] | Plan so far [Move D from E to table | Move B from C to table | Move C from table to D] | Exploring action Move D from table to C | New state -> Invalid | Exploring action Move E from A to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, C], Stack 4: [E] | Exploring action Move E from A to B | New state -> Stack 1: [A], Stack 2: [B, E], Stack 3: [D, C] | Exploring action Move B from table to C | New state -> Stack 1: [A, E], Stack 2: [D, C, B] | Taking action Move B from table to C | Moved to state -> Stack 1: [A, E], Stack 2: [D, C, B] | Plan so far [Move D from E to table | Move B from C to table | Move C from table to D | Move B from table to C] | Exploring action Move C from D to B | New state -> Invalid | Exploring action Move E from A to B | New state -> Stack 1: [A], Stack 2: [D, C, B, E] | Exploring action Move B from C to table | New state -> Stack 1: [A, E], Stack 2: [B], Stack 3: [D, C] | Exploring action Move E from A to table | New state -> Stack 1: [A], Stack 2: [D, C, B], Stack 3: [E] | Taking action Move E from A to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, C], Stack 4: [E] | Plan so far [Move D from E to table | Move B from C to table | Move C from table to D | Move E from A to table] | Exploring action Move D from table to B | New state -> Invalid | Exploring action Move E from table to A | New state -> Stack 1: [A, E], Stack 2: [B], Stack 3: [D, C] | Exploring action Move B from table to C | New state -> Stack 1: [A], Stack 2: [D, C, B], Stack 3: [E] | Exploring action Move A from table to E | New state -> Stack 1: [B], Stack 2: [D, C], Stack 3: [E, A] | Taking action Move B from C to table | Moved to state -> Stack 1: [A, E, D], Stack 2: [B], Stack 3: [C] | Plan so far [Move B from C to table] | Exploring action Move E from A to B | New state -> Invalid | Exploring action Move D from E to B | New state -> Stack 1: [A, E], Stack 2: [B, D], Stack 3: [C] | Exploring action Move D from E to C | New state -> Stack 1: [A, E], Stack 2: [B], Stack 3: [C, D] | Exploring action Move D from E to table | New state -> Stack 1: [A, E], Stack 2: [B], Stack 3: [C], Stack 4: [D] | Taking action Move D from E to table | Moved to state -> Stack 1: [A, E], Stack 2: [B], Stack 3: [C], Stack 4: [D] | Plan so far [Move B from C to table | Move D from E to table] | Taking action Move B from C to D | Moved to state -> Stack 1: [A, E], Stack 2: [C], Stack 3: [D, B] | Plan so far [Move D from E to table | Move B from C to D] | Exploring action Move B from D to C | New state -> Stack 1: [A, E], Stack 2: [C, B], Stack 3: [D] | Exploring action Move E from A to table | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, B], Stack 4: [E] | Exploring action Move A from table to B | New state -> Invalid | Exploring action Move D from table to B | New state -> Invalid | Exploring action Move B from D to table | New state -> Stack 1: [A, E], Stack 2: [B], Stack 3: [C], Stack 4: [D] | Taking action Move D from E to B | Moved to state -> Stack 1: [A, E], Stack 2: [B, D], Stack 3: [C] | Plan so far [Move B from C to table | Move D from E to B] | Exploring action Move B from table to D | New state -> Invalid | Exploring action Move E from A to table | New state -> Stack 1: [A], Stack 2: [B, D], Stack 3: [C], Stack 4: [E] | Exploring action Move D from B to table | New state -> Stack 1: [A, E], Stack 2: [B], Stack 3: [C], Stack 4: [D] | Exploring action Move A from table to C | New state -> Invalid | Exploring action Move D from B to C | New state -> Stack 1: [A, E], Stack 2: [B], Stack 3: [C, D] | Taking action Move D from E to C | Moved to state -> Stack 1: [A, E], Stack 2: [B], Stack 3: [C, D] | Plan so far [Move B from C to table | Move D from E to C] | Exploring action Move E from A to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, D], Stack 4: [E] | Exploring action Move C from table to E | New state -> Invalid | Exploring action Move D from C to B | New state -> Stack 1: [A, E], Stack 2: [B, D], Stack 3: [C] | Exploring action Move D from C to table | New state -> Stack 1: [A, E], Stack 2: [B], Stack 3: [C], Stack 4: [D] | Taking action Move B from D to table | Moved to state -> Stack 1: [A, E], Stack 2: [B], Stack 3: [C], Stack 4: [D] | Plan so far [Move D from E to table | Move B from C to D | Move B from D to table] | Taking action Move D from B to table | Moved to state -> Stack 1: [A, E], Stack 2: [B], Stack 3: [C], Stack 4: [D] | Plan so far [Move B from C to table | Move D from E to B | Move D from B to table] | Taking action Move E from A to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Plan so far [Move D from E to table | Move B from C to table | Move E from A to table] | Exploring action Move E from table to A | New state -> Stack 1: [A, E], Stack 2: [B], Stack 3: [C], Stack 4: [D] | Exploring action Move A from table to D | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, A], Stack 4: [E] | Exploring action Move C from table to D | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, C], Stack 4: [E] | Taking action Move D from E to B | Moved to state -> Stack 1: [A, E], Stack 2: [C, B, D] | Plan so far [Move D from E to B] | Exploring action Move B from C to table | New state -> Invalid | Exploring action Move D from B to table | New state -> Stack 1: [A, E], Stack 2: [C, B], Stack 3: [D] | Exploring action Move D from B to E | New state -> Stack 1: [A, E, D], Stack 2: [C, B] | Exploring action Move E from A to table | New state -> Stack 1: [A], Stack 2: [C, B, D], Stack 3: [E] | Taking action Move E from A to table | Moved to state -> Stack 1: [A], Stack 2: [C, B], Stack 3: [D], Stack 4: [E] | Plan so far [Move D from E to table | Move E from A to table] | Exploring action Move B from C to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Exploring action Move A from table to B | New state -> Stack 1: [C, B, A], Stack 2: [D], Stack 3: [E] | Exploring action Move B from C to D | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, B], Stack 4: [E] | Exploring action Move C from table to D | New state -> Invalid | Exploring action Move C from table to A | New state -> Invalid | Taking action Move B from table to C | Moved to state -> Stack 1: [A], Stack 2: [D, C, B], Stack 3: [E] | Plan so far [Move D from E to table | Move B from C to table | Move C from table to D | Move E from A to table | Move B from table to C] | Exploring action Move D from table to B | New state -> Invalid | Exploring action Move A from table to B | New state -> Stack 1: [D, C, B, A], Stack 2: [E] | Exploring action Move C from D to A | New state -> Invalid | Exploring action Move E from table to A | New state -> Stack 1: [A, E], Stack 2: [D, C, B] | Exploring action Move B from C to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, C], Stack 4: [E] | Taking action Move D from B to table | Moved to state -> Stack 1: [A, E], Stack 2: [C, B], Stack 3: [D] | Plan so far [Move D from E to B | Move D from B to table] | Taking action Move A from table to B | Moved to state -> Stack 1: [D, C, B, A], Stack 2: [E] | Plan so far [Move D from E to table | Move B from C to table | Move C from table to D | Move E from A to table | Move B from table to C | Move A from table to B] | Exploring action Move A from B to E | New state -> Stack 1: [D, C, B], Stack 2: [E, A] | Exploring action Move E from table to A | New state -> Stack 1: [D, C, B, A, E] | Exploring action Move A from B to table | New state -> Stack 1: [A], Stack 2: [D, C, B], Stack 3: [E] | Exploring action Move B from C to E | New state -> Invalid | Exploring action Move D from table to A | New state -> Invalid | Taking action Move E from table to A | Moved to state -> Stack 1: [D, C, B, A, E] | Plan so far [Move D from E to table | Move B from C to table | Move C from table to D | Move E from A to table | Move B from table to C | Move A from table to B | Move E from table to A] | Reached goal state!",
        "system2_states_v1": 66
    },
    {
        "idx": 784,
        "start": [
            [
                "table",
                "D",
                "A",
                "C",
                "F",
                "B"
            ],
            [
                "table",
                "E"
            ]
        ],
        "goal": [
            [
                "table",
                "D",
                "F",
                "A",
                "E",
                "B",
                "C"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": false,
                "on": "D",
                "under": "C",
                "ontable": false
            },
            "B": {
                "clear": true,
                "on": "F",
                "under": -1,
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": "A",
                "under": "F",
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": -1,
                "under": "A",
                "ontable": true
            },
            "E": {
                "clear": true,
                "on": -1,
                "under": -1,
                "ontable": true
            },
            "F": {
                "clear": false,
                "on": "C",
                "under": "B",
                "ontable": false
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": false,
                "on": "F",
                "under": "E",
                "ontable": false
            },
            "B": {
                "clear": false,
                "on": "E",
                "under": "C",
                "ontable": false
            },
            "C": {
                "clear": true,
                "on": "B",
                "under": -1,
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": -1,
                "under": "F",
                "ontable": true
            },
            "E": {
                "clear": false,
                "on": "A",
                "under": "B",
                "ontable": false
            },
            "F": {
                "clear": false,
                "on": "D",
                "under": "A",
                "ontable": false
            }
        },
        "plan_len": 9,
        "num_blocks": 6,
        "prompt": "The initial state:\nThe hand is empty.\nD is on the table. A is on D. C is on A. F is on C. B is on F. B is clear.\nE is on the table. E is clear.\n\nThe goal is:\nD is on the table. F is on D. A is on F. E is on A. B is on E. C is on B. C is clear.\n",
        "system1_plan": "Move B from F to table | Move F from C to table | Move C from A to table | Move A from D to table | Move F from table to D | Move A from table to F | Move E from table to A | Move B from table to E | Move C from table to B",
        "system1_states": 9,
        "system2_plan_v1": "Moved to state -> Stack 1: [D, A, C, F, B], Stack 2: [E] | Plan so far [] | Exploring action Move B from F to E | New state -> Stack 1: [D, A, C, F], Stack 2: [E, B] | Exploring action Move A from D to B | New state -> Invalid | Exploring action Move E from table to B | New state -> Stack 1: [D, A, C, F, B, E] | Exploring action Move C from A to table | New state -> Invalid | Exploring action Move B from F to table | New state -> Stack 1: [B], Stack 2: [D, A, C, F], Stack 3: [E] | Taking action Move B from F to table | Moved to state -> Stack 1: [B], Stack 2: [D, A, C, F], Stack 3: [E] | Plan so far [Move B from F to table] | Exploring action Move F from C to E | New state -> Stack 1: [B], Stack 2: [D, A, C], Stack 3: [E, F] | Exploring action Move F from C to B | New state -> Stack 1: [B, F], Stack 2: [D, A, C], Stack 3: [E] | Exploring action Move D from table to B | New state -> Invalid | Exploring action Move F from C to table | New state -> Stack 1: [B], Stack 2: [D, A, C], Stack 3: [E], Stack 4: [F] | Exploring action Move D from table to F | New state -> Invalid | Taking action Move F from C to table | Moved to state -> Stack 1: [B], Stack 2: [D, A, C], Stack 3: [E], Stack 4: [F] | Plan so far [Move B from F to table | Move F from C to table] | Exploring action Move C from A to B | New state -> Stack 1: [B, C], Stack 2: [D, A], Stack 3: [E], Stack 4: [F] | Exploring action Move A from D to F | New state -> Invalid | Exploring action Move A from D to C | New state -> Invalid | Exploring action Move C from A to table | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, A], Stack 4: [E], Stack 5: [F] | Exploring action Move C from A to E | New state -> Stack 1: [B], Stack 2: [D, A], Stack 3: [E, C], Stack 4: [F] | Taking action Move C from A to table | Moved to state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, A], Stack 4: [E], Stack 5: [F] | Plan so far [Move B from F to table | Move F from C to table | Move C from A to table] | Exploring action Move A from D to B | New state -> Stack 1: [B, A], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Exploring action Move A from D to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Exploring action Move D from table to B | New state -> Invalid | Exploring action Move A from D to C | New state -> Stack 1: [B], Stack 2: [C, A], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Taking action Move C from A to B | Moved to state -> Stack 1: [B, C], Stack 2: [D, A], Stack 3: [E], Stack 4: [F] | Plan so far [Move B from F to table | Move F from C to table | Move C from A to B] | Exploring action Move D from table to F | New state -> Invalid | Exploring action Move D from table to E | New state -> Invalid | Exploring action Move A from D to E | New state -> Stack 1: [B, C], Stack 2: [D], Stack 3: [E, A], Stack 4: [F] | Exploring action Move A from D to table | New state -> Stack 1: [A], Stack 2: [B, C], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Exploring action Move A from D to F | New state -> Stack 1: [B, C], Stack 2: [D], Stack 3: [E], Stack 4: [F, A] | Taking action Move A from D to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Plan so far [Move B from F to table | Move F from C to table | Move C from A to table | Move A from D to table] | Exploring action Move C from table to B | New state -> Stack 1: [A], Stack 2: [B, C], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Exploring action Move A from table to B | New state -> Stack 1: [B, A], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Exploring action Move F from table to D | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D, F], Stack 5: [E] | Taking action Move A from D to table | Moved to state -> Stack 1: [A], Stack 2: [B, C], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Plan so far [Move B from F to table | Move F from C to table | Move C from A to B | Move A from D to table] | Exploring action Move C from B to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Exploring action Move F from table to D | New state -> Stack 1: [A], Stack 2: [B, C], Stack 3: [D, F], Stack 4: [E] | Exploring action Move B from table to A | New state -> Invalid | Exploring action Move A from table to E | New state -> Stack 1: [B, C], Stack 2: [D], Stack 3: [E, A], Stack 4: [F] | Taking action Move F from table to D | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D, F], Stack 5: [E] | Plan so far [Move B from F to table | Move F from C to table | Move C from A to table | Move A from D to table | Move F from table to D] | Exploring action Move A from table to F | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, F, A], Stack 4: [E] | Exploring action Move D from table to F | New state -> Invalid | Exploring action Move C from table to B | New state -> Stack 1: [A], Stack 2: [B, C], Stack 3: [D, F], Stack 4: [E] | Exploring action Move A from table to E | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, F], Stack 4: [E, A] | Taking action Move F from table to D | Moved to state -> Stack 1: [A], Stack 2: [B, C], Stack 3: [D, F], Stack 4: [E] | Plan so far [Move B from F to table | Move F from C to table | Move C from A to B | Move A from D to table | Move F from table to D] | Exploring action Move A from table to E | New state -> Stack 1: [B, C], Stack 2: [D, F], Stack 3: [E, A] | Exploring action Move A from table to F | New state -> Stack 1: [B, C], Stack 2: [D, F, A], Stack 3: [E] | Exploring action Move C from B to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D, F], Stack 5: [E] | Exploring action Move D from table to C | New state -> Invalid | Taking action Move A from table to F | Moved to state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, F, A], Stack 4: [E] | Plan so far [Move B from F to table | Move F from C to table | Move C from A to table | Move A from D to table | Move F from table to D | Move A from table to F] | Exploring action Move F from D to B | New state -> Invalid | Exploring action Move D from table to E | New state -> Invalid | Exploring action Move E from table to A | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, F, A, E] | Exploring action Move C from table to B | New state -> Stack 1: [B, C], Stack 2: [D, F, A], Stack 3: [E] | Exploring action Move B from table to C | New state -> Stack 1: [C, B], Stack 2: [D, F, A], Stack 3: [E] | Taking action Move A from table to F | Moved to state -> Stack 1: [B, C], Stack 2: [D, F, A], Stack 3: [E] | Plan so far [Move B from F to table | Move F from C to table | Move C from A to B | Move A from D to table | Move F from table to D | Move A from table to F] | Exploring action Move C from B to table | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, F, A], Stack 4: [E] | Exploring action Move E from table to A | New state -> Stack 1: [B, C], Stack 2: [D, F, A, E] | Exploring action Move C from B to E | New state -> Stack 1: [B], Stack 2: [D, F, A], Stack 3: [E, C] | Exploring action Move F from D to A | New state -> Invalid | Taking action Move E from table to A | Moved to state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, F, A, E] | Plan so far [Move B from F to table | Move F from C to table | Move C from A to table | Move A from D to table | Move F from table to D | Move A from table to F | Move E from table to A] | Exploring action Move B from table to C | New state -> Stack 1: [C, B], Stack 2: [D, F, A, E] | Exploring action Move D from table to C | New state -> Invalid | Exploring action Move A from F to table | New state -> Invalid | Exploring action Move B from table to E | New state -> Stack 1: [C], Stack 2: [D, F, A, E, B] | Exploring action Move C from table to B | New state -> Stack 1: [B, C], Stack 2: [D, F, A, E] | Taking action Move E from table to A | Moved to state -> Stack 1: [B, C], Stack 2: [D, F, A, E] | Plan so far [Move B from F to table | Move F from C to table | Move C from A to B | Move A from D to table | Move F from table to D | Move A from table to F | Move E from table to A] | Exploring action Move C from B to E | New state -> Stack 1: [B], Stack 2: [D, F, A, E, C] | Exploring action Move C from B to table | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, F, A, E] | Exploring action Move E from A to table | New state -> Stack 1: [B, C], Stack 2: [D, F, A], Stack 3: [E] | Exploring action Move D from table to E | New state -> Invalid | Exploring action Move D from table to C | New state -> Invalid | Taking action Move B from table to E | Moved to state -> Stack 1: [C], Stack 2: [D, F, A, E, B] | Plan so far [Move B from F to table | Move F from C to table | Move C from A to table | Move A from D to table | Move F from table to D | Move A from table to F | Move E from table to A | Move B from table to E] | Exploring action Move B from E to C | New state -> Stack 1: [C, B], Stack 2: [D, F, A, E] | Exploring action Move B from E to table | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, F, A, E] | Exploring action Move C from table to B | New state -> Stack 1: [D, F, A, E, B, C] | Exploring action Move F from D to B | New state -> Invalid | Taking action Move C from table to B | Moved to state -> Stack 1: [D, F, A, E, B, C] | Plan so far [Move B from F to table | Move F from C to table | Move C from A to table | Move A from D to table | Move F from table to D | Move A from table to F | Move E from table to A | Move B from table to E | Move C from table to B] | Reached goal state!",
        "system2_states_v1": 62
    },
    {
        "idx": 612,
        "start": [
            [
                "table",
                "A",
                "D",
                "B",
                "E",
                "C"
            ]
        ],
        "goal": [
            [
                "table",
                "A",
                "C"
            ],
            [
                "table",
                "B",
                "E",
                "D"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": false,
                "on": -1,
                "under": "D",
                "ontable": true
            },
            "B": {
                "clear": false,
                "on": "D",
                "under": "E",
                "ontable": false
            },
            "C": {
                "clear": true,
                "on": "E",
                "under": -1,
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": "A",
                "under": "B",
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": "B",
                "under": "C",
                "ontable": false
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": false,
                "on": -1,
                "under": "C",
                "ontable": true
            },
            "B": {
                "clear": false,
                "on": -1,
                "under": "E",
                "ontable": true
            },
            "C": {
                "clear": true,
                "on": "A",
                "under": -1,
                "ontable": false
            },
            "D": {
                "clear": true,
                "on": "E",
                "under": -1,
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": "B",
                "under": "D",
                "ontable": false
            }
        },
        "plan_len": 7,
        "num_blocks": 5,
        "prompt": "The initial state:\nThe hand is empty.\nA is on the table. D is on A. B is on D. E is on B. C is on E. C is clear.\n\nThe goal is:\nA is on the table. C is on A. C is clear.\nB is on the table. E is on B. D is on E. D is clear.\n",
        "system1_plan": "Move C from E to table | Move E from B to table | Move B from D to table | Move D from A to table | Move C from table to A | Move E from table to B | Move D from table to E",
        "system1_states": 7,
        "system2_plan_v1": "Moved to state -> Stack 1: [A, D, B, E, C] | Plan so far [] | Exploring action Move D from A to table | New state -> Invalid | Exploring action Move C from E to table | New state -> Stack 1: [A, D, B, E], Stack 2: [C] | Exploring action Move E from B to table | New state -> Invalid | Taking action Move C from E to table | Moved to state -> Stack 1: [A, D, B, E], Stack 2: [C] | Plan so far [Move C from E to table] | Exploring action Move E from B to C | New state -> Stack 1: [A, D, B], Stack 2: [C, E] | Exploring action Move C from table to E | New state -> Stack 1: [A, D, B, E, C] | Exploring action Move D from A to E | New state -> Invalid | Exploring action Move E from B to table | New state -> Stack 1: [A, D, B], Stack 2: [C], Stack 3: [E] | Exploring action Move B from D to C | New state -> Invalid | Taking action Move E from B to table | Moved to state -> Stack 1: [A, D, B], Stack 2: [C], Stack 3: [E] | Plan so far [Move C from E to table | Move E from B to table] | Exploring action Move D from A to E | New state -> Invalid | Exploring action Move B from D to E | New state -> Stack 1: [A, D], Stack 2: [C], Stack 3: [E, B] | Exploring action Move B from D to table | New state -> Stack 1: [A, D], Stack 2: [B], Stack 3: [C], Stack 4: [E] | Exploring action Move B from D to C | New state -> Stack 1: [A, D], Stack 2: [C, B], Stack 3: [E] | Taking action Move B from D to table | Moved to state -> Stack 1: [A, D], Stack 2: [B], Stack 3: [C], Stack 4: [E] | Plan so far [Move C from E to table | Move E from B to table | Move B from D to table] | Exploring action Move E from table to B | New state -> Stack 1: [A, D], Stack 2: [B, E], Stack 3: [C] | Exploring action Move A from table to C | New state -> Invalid | Exploring action Move D from A to E | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [E, D] | Exploring action Move D from A to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Exploring action Move A from table to B | New state -> Invalid | Taking action Move D from A to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Plan so far [Move C from E to table | Move E from B to table | Move B from D to table | Move D from A to table] | Exploring action Move C from table to A | New state -> Stack 1: [A, C], Stack 2: [B], Stack 3: [D], Stack 4: [E] | Exploring action Move E from table to B | New state -> Stack 1: [A], Stack 2: [B, E], Stack 3: [C], Stack 4: [D] | Exploring action Move D from table to E | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [E, D] | Taking action Move C from table to A | Moved to state -> Stack 1: [A, C], Stack 2: [B], Stack 3: [D], Stack 4: [E] | Plan so far [Move C from E to table | Move E from B to table | Move B from D to table | Move D from A to table | Move C from table to A] | Exploring action Move D from table to E | New state -> Stack 1: [A, C], Stack 2: [B], Stack 3: [E, D] | Exploring action Move A from table to C | New state -> Invalid | Exploring action Move E from table to B | New state -> Stack 1: [A, C], Stack 2: [B, E], Stack 3: [D] | Exploring action Move B from table to E | New state -> Stack 1: [A, C], Stack 2: [D], Stack 3: [E, B] | Exploring action Move A from table to E | New state -> Invalid | Taking action Move E from table to B | Moved to state -> Stack 1: [A, C], Stack 2: [B, E], Stack 3: [D] | Plan so far [Move C from E to table | Move E from B to table | Move B from D to table | Move D from A to table | Move C from table to A | Move E from table to B] | Exploring action Move E from B to table | New state -> Stack 1: [A, C], Stack 2: [B], Stack 3: [D], Stack 4: [E] | Exploring action Move A from table to C | New state -> Invalid | Exploring action Move A from table to E | New state -> Invalid | Exploring action Move D from table to E | New state -> Stack 1: [A, C], Stack 2: [B, E, D] | Exploring action Move C from A to table | New state -> Stack 1: [A], Stack 2: [B, E], Stack 3: [C], Stack 4: [D] | Taking action Move D from table to E | Moved to state -> Stack 1: [A, C], Stack 2: [B, E, D] | Plan so far [Move C from E to table | Move E from B to table | Move B from D to table | Move D from A to table | Move C from table to A | Move E from table to B | Move D from table to E] | Reached goal state!",
        "system2_states_v1": 30
    },
    {
        "idx": 617,
        "start": [
            [
                "table",
                "C",
                "E",
                "A"
            ],
            [
                "table",
                "D",
                "B"
            ]
        ],
        "goal": [
            [
                "table",
                "E",
                "C",
                "A",
                "B",
                "D"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": true,
                "on": "E",
                "under": -1,
                "ontable": false
            },
            "B": {
                "clear": true,
                "on": "D",
                "under": -1,
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": -1,
                "under": "E",
                "ontable": true
            },
            "D": {
                "clear": false,
                "on": -1,
                "under": "B",
                "ontable": true
            },
            "E": {
                "clear": false,
                "on": "C",
                "under": "A",
                "ontable": false
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": false,
                "on": "C",
                "under": "B",
                "ontable": false
            },
            "B": {
                "clear": false,
                "on": "A",
                "under": "D",
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": "E",
                "under": "A",
                "ontable": false
            },
            "D": {
                "clear": true,
                "on": "B",
                "under": -1,
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": -1,
                "under": "C",
                "ontable": true
            }
        },
        "plan_len": 7,
        "num_blocks": 5,
        "prompt": "The initial state:\nThe hand is empty.\nC is on the table. E is on C. A is on E. A is clear.\nD is on the table. B is on D. B is clear.\n\nThe goal is:\nE is on the table. C is on E. A is on C. B is on A. D is on B. D is clear.\n",
        "system1_plan": "Move A from E to table | Move B from D to table | Move E from C to table | Move C from table to E | Move A from table to C | Move B from table to A | Move D from table to B",
        "system1_states": 7,
        "system2_plan_v1": "Moved to state -> Stack 1: [C, E, A], Stack 2: [D, B] | Plan so far [] | Exploring action Move E from C to A | New state -> Invalid | Exploring action Move D from table to B | New state -> Invalid | Exploring action Move A from E to B | New state -> Stack 1: [C, E], Stack 2: [D, B, A] | Exploring action Move A from E to table | New state -> Stack 1: [A], Stack 2: [C, E], Stack 3: [D, B] | Exploring action Move B from D to table | New state -> Stack 1: [B], Stack 2: [C, E, A], Stack 3: [D] | Taking action Move A from E to table | Moved to state -> Stack 1: [A], Stack 2: [C, E], Stack 3: [D, B] | Plan so far [Move A from E to table] | Exploring action Move B from D to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, E], Stack 4: [D] | Exploring action Move D from table to B | New state -> Invalid | Exploring action Move E from C to A | New state -> Stack 1: [A, E], Stack 2: [C], Stack 3: [D, B] | Exploring action Move C from table to B | New state -> Invalid | Exploring action Move E from C to table | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, B], Stack 4: [E] | Taking action Move B from D to table | Moved to state -> Stack 1: [B], Stack 2: [C, E, A], Stack 3: [D] | Plan so far [Move B from D to table] | Exploring action Move D from table to B | New state -> Stack 1: [B, D], Stack 2: [C, E, A] | Exploring action Move A from E to D | New state -> Stack 1: [B], Stack 2: [C, E], Stack 3: [D, A] | Exploring action Move A from E to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, E], Stack 4: [D] | Exploring action Move E from C to A | New state -> Invalid | Taking action Move B from D to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, E], Stack 4: [D] | Plan so far [Move A from E to table | Move B from D to table] | Exploring action Move E from C to B | New state -> Stack 1: [A], Stack 2: [B, E], Stack 3: [C], Stack 4: [D] | Exploring action Move E from C to D | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D, E] | Exploring action Move E from C to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Exploring action Move C from table to D | New state -> Invalid | Taking action Move E from C to table | Moved to state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, B], Stack 4: [E] | Plan so far [Move A from E to table | Move E from C to table] | Exploring action Move D from table to E | New state -> Invalid | Exploring action Move C from table to E | New state -> Stack 1: [A], Stack 2: [D, B], Stack 3: [E, C] | Exploring action Move B from D to C | New state -> Stack 1: [A], Stack 2: [C, B], Stack 3: [D], Stack 4: [E] | Exploring action Move B from D to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Exploring action Move D from table to C | New state -> Invalid | Taking action Move E from C to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Plan so far [Move A from E to table | Move B from D to table | Move E from C to table] | Exploring action Move A from table to B | New state -> Stack 1: [B, A], Stack 2: [C], Stack 3: [D], Stack 4: [E] | Exploring action Move C from table to E | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D], Stack 4: [E, C] | Exploring action Move D from table to B | New state -> Stack 1: [A], Stack 2: [B, D], Stack 3: [C], Stack 4: [E] | Taking action Move A from E to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, E], Stack 4: [D] | Plan so far [Move B from D to table | Move A from E to table] | Taking action Move C from table to E | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [D], Stack 4: [E, C] | Plan so far [Move A from E to table | Move B from D to table | Move E from C to table | Move C from table to E] | Exploring action Move D from table to B | New state -> Stack 1: [A], Stack 2: [B, D], Stack 3: [E, C] | Exploring action Move E from table to C | New state -> Invalid | Exploring action Move C from E to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Exploring action Move A from table to C | New state -> Stack 1: [B], Stack 2: [D], Stack 3: [E, C, A] | Taking action Move B from D to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Plan so far [Move A from E to table | Move E from C to table | Move B from D to table] | Taking action Move A from table to C | Moved to state -> Stack 1: [B], Stack 2: [D], Stack 3: [E, C, A] | Plan so far [Move A from E to table | Move B from D to table | Move E from C to table | Move C from table to E | Move A from table to C] | Exploring action Move E from table to A | New state -> Invalid | Exploring action Move B from table to A | New state -> Stack 1: [D], Stack 2: [E, C, A, B] | Exploring action Move D from table to A | New state -> Stack 1: [B], Stack 2: [E, C, A, D] | Exploring action Move D from table to B | New state -> Stack 1: [B, D], Stack 2: [E, C, A] | Taking action Move C from table to E | Moved to state -> Stack 1: [A], Stack 2: [D, B], Stack 3: [E, C] | Plan so far [Move A from E to table | Move E from C to table | Move C from table to E] | Exploring action Move A from table to C | New state -> Stack 1: [D, B], Stack 2: [E, C, A] | Exploring action Move B from D to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D], Stack 4: [E, C] | Exploring action Move D from table to A | New state -> Invalid | Exploring action Move B from D to A | New state -> Stack 1: [A, B], Stack 2: [D], Stack 3: [E, C] | Taking action Move B from table to A | Moved to state -> Stack 1: [D], Stack 2: [E, C, A, B] | Plan so far [Move A from E to table | Move B from D to table | Move E from C to table | Move C from table to E | Move A from table to C | Move B from table to A] | Exploring action Move B from A to table | New state -> Stack 1: [B], Stack 2: [D], Stack 3: [E, C, A] | Exploring action Move E from table to B | New state -> Invalid | Exploring action Move B from A to D | New state -> Stack 1: [D, B], Stack 2: [E, C, A] | Exploring action Move D from table to B | New state -> Stack 1: [E, C, A, B, D] | Taking action Move D from table to B | Moved to state -> Stack 1: [E, C, A, B, D] | Plan so far [Move A from E to table | Move B from D to table | Move E from C to table | Move C from table to E | Move A from table to C | Move B from table to A | Move D from table to B] | Reached goal state!",
        "system2_states_v1": 42
    },
    {
        "idx": 613,
        "start": [
            [
                "table",
                "A",
                "B",
                "C",
                "D",
                "E"
            ]
        ],
        "goal": [
            [
                "table",
                "B",
                "C",
                "A",
                "D"
            ],
            [
                "table",
                "E"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": false,
                "on": -1,
                "under": "B",
                "ontable": true
            },
            "B": {
                "clear": false,
                "on": "A",
                "under": "C",
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": "B",
                "under": "D",
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": "C",
                "under": "E",
                "ontable": false
            },
            "E": {
                "clear": true,
                "on": "D",
                "under": -1,
                "ontable": false
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": false,
                "on": "C",
                "under": "D",
                "ontable": false
            },
            "B": {
                "clear": false,
                "on": -1,
                "under": "C",
                "ontable": true
            },
            "C": {
                "clear": false,
                "on": "B",
                "under": "A",
                "ontable": false
            },
            "D": {
                "clear": true,
                "on": "A",
                "under": -1,
                "ontable": false
            },
            "E": {
                "clear": true,
                "on": -1,
                "under": -1,
                "ontable": true
            }
        },
        "plan_len": 7,
        "num_blocks": 5,
        "prompt": "The initial state:\nThe hand is empty.\nA is on the table. B is on A. C is on B. D is on C. E is on D. E is clear.\n\nThe goal is:\nB is on the table. C is on B. A is on C. D is on A. D is clear.\nE is on the table. E is clear.\n",
        "system1_plan": "Move E from D to table | Move D from C to table | Move C from B to table | Move B from A to table | Move C from table to B | Move A from table to C | Move D from table to A",
        "system1_states": 7,
        "system2_plan_v1": "Moved to state -> Stack 1: [A, B, C, D, E] | Plan so far [] | Exploring action Move B from A to table | New state -> Invalid | Exploring action Move E from D to table | New state -> Stack 1: [A, B, C, D], Stack 2: [E] | Taking action Move E from D to table | Moved to state -> Stack 1: [A, B, C, D], Stack 2: [E] | Plan so far [Move E from D to table] | Exploring action Move D from C to E | New state -> Stack 1: [A, B, C], Stack 2: [E, D] | Exploring action Move A from table to D | New state -> Invalid | Exploring action Move C from B to E | New state -> Invalid | Exploring action Move D from C to table | New state -> Stack 1: [A, B, C], Stack 2: [D], Stack 3: [E] | Exploring action Move E from table to D | New state -> Stack 1: [A, B, C, D, E] | Taking action Move D from C to table | Moved to state -> Stack 1: [A, B, C], Stack 2: [D], Stack 3: [E] | Plan so far [Move E from D to table | Move D from C to table] | Exploring action Move C from B to E | New state -> Stack 1: [A, B], Stack 2: [D], Stack 3: [E, C] | Exploring action Move C from B to table | New state -> Stack 1: [A, B], Stack 2: [C], Stack 3: [D], Stack 4: [E] | Exploring action Move A from table to E | New state -> Invalid | Exploring action Move C from B to D | New state -> Stack 1: [A, B], Stack 2: [D, C], Stack 3: [E] | Taking action Move C from B to table | Moved to state -> Stack 1: [A, B], Stack 2: [C], Stack 3: [D], Stack 4: [E] | Plan so far [Move E from D to table | Move D from C to table | Move C from B to table] | Exploring action Move B from A to D | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, B], Stack 4: [E] | Exploring action Move B from A to C | New state -> Stack 1: [A], Stack 2: [C, B], Stack 3: [D], Stack 4: [E] | Exploring action Move A from table to E | New state -> Invalid | Exploring action Move B from A to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Taking action Move B from A to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Plan so far [Move E from D to table | Move D from C to table | Move C from B to table | Move B from A to table] | Exploring action Move D from table to A | New state -> Stack 1: [A, D], Stack 2: [B], Stack 3: [C], Stack 4: [E] | Exploring action Move C from table to B | New state -> Stack 1: [A], Stack 2: [B, C], Stack 3: [D], Stack 4: [E] | Exploring action Move B from table to D | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, B], Stack 4: [E] | Taking action Move C from table to B | Moved to state -> Stack 1: [A], Stack 2: [B, C], Stack 3: [D], Stack 4: [E] | Plan so far [Move E from D to table | Move D from C to table | Move C from B to table | Move B from A to table | Move C from table to B] | Exploring action Move B from table to C | New state -> Invalid | Exploring action Move D from table to A | New state -> Stack 1: [A, D], Stack 2: [B, C], Stack 3: [E] | Exploring action Move A from table to D | New state -> Stack 1: [B, C], Stack 2: [D, A], Stack 3: [E] | Exploring action Move B from table to A | New state -> Invalid | Exploring action Move A from table to C | New state -> Stack 1: [B, C, A], Stack 2: [D], Stack 3: [E] | Taking action Move A from table to C | Moved to state -> Stack 1: [B, C, A], Stack 2: [D], Stack 3: [E] | Plan so far [Move E from D to table | Move D from C to table | Move C from B to table | Move B from A to table | Move C from table to B | Move A from table to C] | Exploring action Move E from table to A | New state -> Stack 1: [B, C, A, E], Stack 2: [D] | Exploring action Move C from B to A | New state -> Invalid | Exploring action Move C from B to table | New state -> Invalid | Exploring action Move A from C to table | New state -> Stack 1: [A], Stack 2: [B, C], Stack 3: [D], Stack 4: [E] | Exploring action Move D from table to A | New state -> Stack 1: [B, C, A, D], Stack 2: [E] | Taking action Move D from table to A | Moved to state -> Stack 1: [B, C, A, D], Stack 2: [E] | Plan so far [Move E from D to table | Move D from C to table | Move C from B to table | Move B from A to table | Move C from table to B | Move A from table to C | Move D from table to A] | Reached goal state!",
        "system2_states_v1": 28
    },
    {
        "idx": 701,
        "start": [
            [
                "table",
                "A",
                "B",
                "D",
                "E",
                "F",
                "C"
            ]
        ],
        "goal": [
            [
                "table",
                "A",
                "E",
                "F",
                "D"
            ],
            [
                "table",
                "B"
            ],
            [
                "table",
                "C"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": false,
                "on": -1,
                "under": "B",
                "ontable": true
            },
            "B": {
                "clear": false,
                "on": "A",
                "under": "D",
                "ontable": false
            },
            "C": {
                "clear": true,
                "on": "F",
                "under": -1,
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": "B",
                "under": "E",
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": "D",
                "under": "F",
                "ontable": false
            },
            "F": {
                "clear": false,
                "on": "E",
                "under": "C",
                "ontable": false
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": false,
                "on": -1,
                "under": "E",
                "ontable": true
            },
            "B": {
                "clear": true,
                "on": -1,
                "under": -1,
                "ontable": true
            },
            "C": {
                "clear": true,
                "on": -1,
                "under": -1,
                "ontable": true
            },
            "D": {
                "clear": true,
                "on": "F",
                "under": -1,
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": "A",
                "under": "F",
                "ontable": false
            },
            "F": {
                "clear": false,
                "on": "E",
                "under": "D",
                "ontable": false
            }
        },
        "plan_len": 8,
        "num_blocks": 6,
        "prompt": "The initial state:\nThe hand is empty.\nA is on the table. B is on A. D is on B. E is on D. F is on E. C is on F. C is clear.\n\nThe goal is:\nA is on the table. E is on A. F is on E. D is on F. D is clear.\nB is on the table. B is clear.\nC is on the table. C is clear.\n",
        "system1_plan": "Move C from F to table | Move F from E to table | Move E from D to table | Move D from B to table | Move B from A to table | Move E from table to A | Move F from table to E | Move D from table to F",
        "system1_states": 8,
        "system2_plan_v1": "Moved to state -> Stack 1: [A, B, D, E, F, C] | Plan so far [] | Exploring action Move C from F to table | New state -> Stack 1: [A, B, D, E, F], Stack 2: [C] | Exploring action Move A from table to C | New state -> Invalid | Exploring action Move D from B to table | New state -> Invalid | Taking action Move C from F to table | Moved to state -> Stack 1: [A, B, D, E, F], Stack 2: [C] | Plan so far [Move C from F to table] | Exploring action Move F from E to C | New state -> Stack 1: [A, B, D, E], Stack 2: [C, F] | Exploring action Move C from table to F | New state -> Stack 1: [A, B, D, E, F, C] | Exploring action Move F from E to table | New state -> Stack 1: [A, B, D, E], Stack 2: [C], Stack 3: [F] | Exploring action Move D from B to C | New state -> Invalid | Taking action Move F from E to table | Moved to state -> Stack 1: [A, B, D, E], Stack 2: [C], Stack 3: [F] | Plan so far [Move C from F to table | Move F from E to table] | Exploring action Move D from B to F | New state -> Invalid | Exploring action Move E from D to table | New state -> Stack 1: [A, B, D], Stack 2: [C], Stack 3: [E], Stack 4: [F] | Exploring action Move E from D to F | New state -> Stack 1: [A, B, D], Stack 2: [C], Stack 3: [F, E] | Exploring action Move F from table to E | New state -> Stack 1: [A, B, D, E, F], Stack 2: [C] | Taking action Move E from D to table | Moved to state -> Stack 1: [A, B, D], Stack 2: [C], Stack 3: [E], Stack 4: [F] | Plan so far [Move C from F to table | Move F from E to table | Move E from D to table] | Exploring action Move D from B to E | New state -> Stack 1: [A, B], Stack 2: [C], Stack 3: [E, D], Stack 4: [F] | Exploring action Move D from B to F | New state -> Stack 1: [A, B], Stack 2: [C], Stack 3: [E], Stack 4: [F, D] | Exploring action Move A from table to F | New state -> Invalid | Exploring action Move D from B to table | New state -> Stack 1: [A, B], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Taking action Move D from B to table | Moved to state -> Stack 1: [A, B], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Plan so far [Move C from F to table | Move F from E to table | Move E from D to table | Move D from B to table] | Exploring action Move D from table to F | New state -> Stack 1: [A, B], Stack 2: [C], Stack 3: [E], Stack 4: [F, D] | Exploring action Move A from table to E | New state -> Invalid | Exploring action Move B from A to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Exploring action Move B from A to D | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, B], Stack 4: [E], Stack 5: [F] | Taking action Move B from A to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Plan so far [Move C from F to table | Move F from E to table | Move E from D to table | Move D from B to table | Move B from A to table] | Exploring action Move E from table to A | New state -> Stack 1: [A, E], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [F] | Exploring action Move D from table to F | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [E], Stack 5: [F, D] | Exploring action Move E from table to D | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D, E], Stack 5: [F] | Taking action Move E from table to A | Moved to state -> Stack 1: [A, E], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [F] | Plan so far [Move C from F to table | Move F from E to table | Move E from D to table | Move D from B to table | Move B from A to table | Move E from table to A] | Exploring action Move F from table to E | New state -> Stack 1: [A, E, F], Stack 2: [B], Stack 3: [C], Stack 4: [D] | Exploring action Move D from table to F | New state -> Stack 1: [A, E], Stack 2: [B], Stack 3: [C], Stack 4: [F, D] | Exploring action Move A from table to F | New state -> Invalid | Exploring action Move A from table to C | New state -> Invalid | Exploring action Move D from table to E | New state -> Stack 1: [A, E, D], Stack 2: [B], Stack 3: [C], Stack 4: [F] | Taking action Move F from table to E | Moved to state -> Stack 1: [A, E, F], Stack 2: [B], Stack 3: [C], Stack 4: [D] | Plan so far [Move C from F to table | Move F from E to table | Move E from D to table | Move D from B to table | Move B from A to table | Move E from table to A | Move F from table to E] | Exploring action Move F from E to table | New state -> Stack 1: [A, E], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [F] | Exploring action Move B from table to F | New state -> Stack 1: [A, E, F, B], Stack 2: [C], Stack 3: [D] | Exploring action Move D from table to F | New state -> Stack 1: [A, E, F, D], Stack 2: [B], Stack 3: [C] | Exploring action Move E from A to D | New state -> Invalid | Taking action Move D from table to F | Moved to state -> Stack 1: [A, E, F, D], Stack 2: [B], Stack 3: [C] | Plan so far [Move C from F to table | Move F from E to table | Move E from D to table | Move D from B to table | Move B from A to table | Move E from table to A | Move F from table to E | Move D from table to F] | Reached goal state!",
        "system2_states_v1": 31
    },
    {
        "idx": 604,
        "start": [
            [
                "table",
                "A",
                "D",
                "C"
            ],
            [
                "table",
                "B",
                "E"
            ]
        ],
        "goal": [
            [
                "table",
                "E",
                "A",
                "B",
                "C",
                "D"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": false,
                "on": -1,
                "under": "D",
                "ontable": true
            },
            "B": {
                "clear": false,
                "on": -1,
                "under": "E",
                "ontable": true
            },
            "C": {
                "clear": true,
                "on": "D",
                "under": -1,
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": "A",
                "under": "C",
                "ontable": false
            },
            "E": {
                "clear": true,
                "on": "B",
                "under": -1,
                "ontable": false
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": false,
                "on": "E",
                "under": "B",
                "ontable": false
            },
            "B": {
                "clear": false,
                "on": "A",
                "under": "C",
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": "B",
                "under": "D",
                "ontable": false
            },
            "D": {
                "clear": true,
                "on": "C",
                "under": -1,
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": -1,
                "under": "A",
                "ontable": true
            }
        },
        "plan_len": 7,
        "num_blocks": 5,
        "prompt": "The initial state:\nThe hand is empty.\nA is on the table. D is on A. C is on D. C is clear.\nB is on the table. E is on B. E is clear.\n\nThe goal is:\nE is on the table. A is on E. B is on A. C is on B. D is on C. D is clear.\n",
        "system1_plan": "Move C from D to table | Move D from A to table | Move E from B to table | Move A from table to E | Move B from table to A | Move C from table to B | Move D from table to C",
        "system1_states": 7,
        "system2_plan_v1": "Moved to state -> Stack 1: [A, D, C], Stack 2: [B, E] | Plan so far [] | Exploring action Move D from A to E | New state -> Invalid | Exploring action Move D from A to C | New state -> Invalid | Exploring action Move E from B to table | New state -> Stack 1: [A, D, C], Stack 2: [B], Stack 3: [E] | Exploring action Move C from D to E | New state -> Stack 1: [A, D], Stack 2: [B, E, C] | Exploring action Move C from D to table | New state -> Stack 1: [A, D], Stack 2: [B, E], Stack 3: [C] | Taking action Move C from D to table | Moved to state -> Stack 1: [A, D], Stack 2: [B, E], Stack 3: [C] | Plan so far [Move C from D to table] | Exploring action Move D from A to C | New state -> Stack 1: [A], Stack 2: [B, E], Stack 3: [C, D] | Exploring action Move A from table to E | New state -> Invalid | Exploring action Move D from A to table | New state -> Stack 1: [A], Stack 2: [B, E], Stack 3: [C], Stack 4: [D] | Exploring action Move B from table to E | New state -> Invalid | Exploring action Move E from B to table | New state -> Stack 1: [A, D], Stack 2: [B], Stack 3: [C], Stack 4: [E] | Taking action Move E from B to table | Moved to state -> Stack 1: [A, D, C], Stack 2: [B], Stack 3: [E] | Plan so far [Move E from B to table] | Exploring action Move C from D to B | New state -> Stack 1: [A, D], Stack 2: [B, C], Stack 3: [E] | Exploring action Move C from D to E | New state -> Stack 1: [A, D], Stack 2: [B], Stack 3: [E, C] | Exploring action Move A from table to E | New state -> Invalid | Exploring action Move C from D to table | New state -> Stack 1: [A, D], Stack 2: [B], Stack 3: [C], Stack 4: [E] | Exploring action Move A from table to B | New state -> Invalid | Taking action Move D from A to table | Moved to state -> Stack 1: [A], Stack 2: [B, E], Stack 3: [C], Stack 4: [D] | Plan so far [Move C from D to table | Move D from A to table] | Exploring action Move E from B to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Exploring action Move E from B to C | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, E], Stack 4: [D] | Exploring action Move E from B to D | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D, E] | Exploring action Move B from table to C | New state -> Invalid | Taking action Move D from A to C | Moved to state -> Stack 1: [A], Stack 2: [B, E], Stack 3: [C, D] | Plan so far [Move C from D to table | Move D from A to C] | Exploring action Move D from C to table | New state -> Stack 1: [A], Stack 2: [B, E], Stack 3: [C], Stack 4: [D] | Exploring action Move E from B to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, D], Stack 4: [E] | Exploring action Move B from table to E | New state -> Invalid | Exploring action Move C from table to D | New state -> Invalid | Exploring action Move E from B to A | New state -> Stack 1: [A, E], Stack 2: [B], Stack 3: [C, D] | Taking action Move C from D to table | Moved to state -> Stack 1: [A, D], Stack 2: [B], Stack 3: [C], Stack 4: [E] | Plan so far [Move E from B to table | Move C from D to table] | Exploring action Move D from A to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Exploring action Move D from A to E | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [E, D] | Exploring action Move A from table to E | New state -> Invalid | Exploring action Move A from table to C | New state -> Invalid | Exploring action Move D from A to C | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, D], Stack 4: [E] | Taking action Move E from B to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Plan so far [Move C from D to table | Move D from A to table | Move E from B to table] | Exploring action Move A from table to E | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D], Stack 4: [E, A] | Exploring action Move A from table to D | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, A], Stack 4: [E] | Exploring action Move D from table to C | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, D], Stack 4: [E] | Taking action Move E from B to table | Moved to state -> Stack 1: [A, D], Stack 2: [B], Stack 3: [C], Stack 4: [E] | Plan so far [Move C from D to table | Move E from B to table] | Taking action Move A from table to E | Moved to state -> Stack 1: [B], Stack 2: [C], Stack 3: [D], Stack 4: [E, A] | Plan so far [Move C from D to table | Move D from A to table | Move E from B to table | Move A from table to E] | Exploring action Move E from table to B | New state -> Invalid | Exploring action Move D from table to C | New state -> Stack 1: [B], Stack 2: [C, D], Stack 3: [E, A] | Exploring action Move B from table to D | New state -> Stack 1: [C], Stack 2: [D, B], Stack 3: [E, A] | Exploring action Move B from table to A | New state -> Stack 1: [C], Stack 2: [D], Stack 3: [E, A, B] | Exploring action Move E from table to C | New state -> Invalid | Taking action Move D from A to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Plan so far [Move E from B to table | Move C from D to table | Move D from A to table] | Taking action Move D from A to C | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, D], Stack 4: [E] | Plan so far [Move E from B to table | Move C from D to table | Move D from A to C] | Exploring action Move A from table to E | New state -> Stack 1: [B], Stack 2: [C, D], Stack 3: [E, A] | Exploring action Move C from table to A | New state -> Invalid | Exploring action Move A from table to B | New state -> Stack 1: [B, A], Stack 2: [C, D], Stack 3: [E] | Exploring action Move D from C to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Taking action Move E from B to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, D], Stack 4: [E] | Plan so far [Move C from D to table | Move D from A to C | Move E from B to table] | Taking action Move B from table to A | Moved to state -> Stack 1: [C], Stack 2: [D], Stack 3: [E, A, B] | Plan so far [Move C from D to table | Move D from A to table | Move E from B to table | Move A from table to E | Move B from table to A] | Exploring action Move A from E to B | New state -> Invalid | Exploring action Move C from table to B | New state -> Stack 1: [D], Stack 2: [E, A, B, C] | Exploring action Move D from table to C | New state -> Stack 1: [C, D], Stack 2: [E, A, B] | Exploring action Move D from table to B | New state -> Stack 1: [C], Stack 2: [E, A, B, D] | Taking action Move A from table to E | Moved to state -> Stack 1: [B], Stack 2: [C, D], Stack 3: [E, A] | Plan so far [Move E from B to table | Move C from D to table | Move D from A to C | Move A from table to E] | Exploring action Move D from C to A | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [E, A, D] | Exploring action Move D from C to table | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D], Stack 4: [E, A] | Exploring action Move B from table to A | New state -> Stack 1: [C, D], Stack 2: [E, A, B] | Exploring action Move C from table to B | New state -> Invalid | Exploring action Move E from table to D | New state -> Invalid | Taking action Move C from table to B | Moved to state -> Stack 1: [D], Stack 2: [E, A, B, C] | Plan so far [Move C from D to table | Move D from A to table | Move E from B to table | Move A from table to E | Move B from table to A | Move C from table to B] | Exploring action Move C from B to table | New state -> Stack 1: [C], Stack 2: [D], Stack 3: [E, A, B] | Exploring action Move D from table to C | New state -> Stack 1: [E, A, B, C, D] | Exploring action Move C from B to D | New state -> Stack 1: [D, C], Stack 2: [E, A, B] | Exploring action Move B from A to table | New state -> Invalid | Exploring action Move A from E to C | New state -> Invalid | Taking action Move D from table to C | Moved to state -> Stack 1: [E, A, B, C, D] | Plan so far [Move C from D to table | Move D from A to table | Move E from B to table | Move A from table to E | Move B from table to A | Move C from table to B | Move D from table to C] | Reached goal state!",
        "system2_states_v1": 55
    },
    {
        "idx": 776,
        "start": [
            [
                "table",
                "F",
                "A",
                "B",
                "C",
                "E",
                "D"
            ]
        ],
        "goal": [
            [
                "table",
                "A",
                "D",
                "C",
                "B",
                "F"
            ],
            [
                "table",
                "E"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": false,
                "on": "F",
                "under": "B",
                "ontable": false
            },
            "B": {
                "clear": false,
                "on": "A",
                "under": "C",
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": "B",
                "under": "E",
                "ontable": false
            },
            "D": {
                "clear": true,
                "on": "E",
                "under": -1,
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": "C",
                "under": "D",
                "ontable": false
            },
            "F": {
                "clear": false,
                "on": -1,
                "under": "A",
                "ontable": true
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": false,
                "on": -1,
                "under": "D",
                "ontable": true
            },
            "B": {
                "clear": false,
                "on": "C",
                "under": "F",
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": "D",
                "under": "B",
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": "A",
                "under": "C",
                "ontable": false
            },
            "E": {
                "clear": true,
                "on": -1,
                "under": -1,
                "ontable": true
            },
            "F": {
                "clear": true,
                "on": "B",
                "under": -1,
                "ontable": false
            }
        },
        "plan_len": 9,
        "num_blocks": 6,
        "prompt": "The initial state:\nThe hand is empty.\nF is on the table. A is on F. B is on A. C is on B. E is on C. D is on E. D is clear.\n\nThe goal is:\nA is on the table. D is on A. C is on D. B is on C. F is on B. F is clear.\nE is on the table. E is clear.\n",
        "system1_plan": "Move D from E to table | Move E from C to table | Move C from B to table | Move B from A to table | Move A from F to table | Move D from table to A | Move C from table to D | Move B from table to C | Move F from table to B",
        "system1_states": 9,
        "system2_plan_v1": "Moved to state -> Stack 1: [F, A, B, C, E, D] | Plan so far [] | Exploring action Move C from B to D | New state -> Invalid | Exploring action Move D from E to table | New state -> Stack 1: [D], Stack 2: [F, A, B, C, E] | Exploring action Move C from B to table | New state -> Invalid | Taking action Move D from E to table | Moved to state -> Stack 1: [D], Stack 2: [F, A, B, C, E] | Plan so far [Move D from E to table] | Exploring action Move E from C to D | New state -> Stack 1: [D, E], Stack 2: [F, A, B, C] | Exploring action Move C from B to table | New state -> Invalid | Exploring action Move D from table to E | New state -> Stack 1: [F, A, B, C, E, D] | Exploring action Move E from C to table | New state -> Stack 1: [D], Stack 2: [E], Stack 3: [F, A, B, C] | Taking action Move E from C to table | Moved to state -> Stack 1: [D], Stack 2: [E], Stack 3: [F, A, B, C] | Plan so far [Move D from E to table | Move E from C to table] | Exploring action Move C from B to E | New state -> Stack 1: [D], Stack 2: [E, C], Stack 3: [F, A, B] | Exploring action Move C from B to D | New state -> Stack 1: [D, C], Stack 2: [E], Stack 3: [F, A, B] | Exploring action Move C from B to table | New state -> Stack 1: [C], Stack 2: [D], Stack 3: [E], Stack 4: [F, A, B] | Exploring action Move F from table to C | New state -> Invalid | Taking action Move C from B to table | Moved to state -> Stack 1: [C], Stack 2: [D], Stack 3: [E], Stack 4: [F, A, B] | Plan so far [Move D from E to table | Move E from C to table | Move C from B to table] | Exploring action Move F from table to E | New state -> Invalid | Exploring action Move B from A to table | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [F, A] | Exploring action Move A from F to E | New state -> Invalid | Exploring action Move B from A to D | New state -> Stack 1: [C], Stack 2: [D, B], Stack 3: [E], Stack 4: [F, A] | Exploring action Move B from A to C | New state -> Stack 1: [C, B], Stack 2: [D], Stack 3: [E], Stack 4: [F, A] | Taking action Move B from A to table | Moved to state -> Stack 1: [B], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [F, A] | Plan so far [Move D from E to table | Move E from C to table | Move C from B to table | Move B from A to table] | Exploring action Move A from F to B | New state -> Stack 1: [B, A], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Exploring action Move F from table to A | New state -> Invalid | Exploring action Move F from table to E | New state -> Invalid | Exploring action Move A from F to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Exploring action Move A from F to C | New state -> Stack 1: [B], Stack 2: [C, A], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Taking action Move A from F to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Plan so far [Move D from E to table | Move E from C to table | Move C from B to table | Move B from A to table | Move A from F to table] | Exploring action Move B from table to C | New state -> Stack 1: [A], Stack 2: [C, B], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Exploring action Move D from table to A | New state -> Stack 1: [A, D], Stack 2: [B], Stack 3: [C], Stack 4: [E], Stack 5: [F] | Exploring action Move F from table to B | New state -> Stack 1: [A], Stack 2: [B, F], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Taking action Move D from table to A | Moved to state -> Stack 1: [A, D], Stack 2: [B], Stack 3: [C], Stack 4: [E], Stack 5: [F] | Plan so far [Move D from E to table | Move E from C to table | Move C from B to table | Move B from A to table | Move A from F to table | Move D from table to A] | Exploring action Move B from table to C | New state -> Stack 1: [A, D], Stack 2: [C, B], Stack 3: [E], Stack 4: [F] | Exploring action Move C from table to D | New state -> Stack 1: [A, D, C], Stack 2: [B], Stack 3: [E], Stack 4: [F] | Exploring action Move F from table to B | New state -> Stack 1: [A, D], Stack 2: [B, F], Stack 3: [C], Stack 4: [E] | Exploring action Move A from table to B | New state -> Invalid | Exploring action Move A from table to E | New state -> Invalid | Taking action Move C from table to D | Moved to state -> Stack 1: [A, D, C], Stack 2: [B], Stack 3: [E], Stack 4: [F] | Plan so far [Move D from E to table | Move E from C to table | Move C from B to table | Move B from A to table | Move A from F to table | Move D from table to A | Move C from table to D] | Exploring action Move B from table to C | New state -> Stack 1: [A, D, C, B], Stack 2: [E], Stack 3: [F] | Exploring action Move A from table to E | New state -> Invalid | Exploring action Move F from table to B | New state -> Stack 1: [A, D, C], Stack 2: [B, F], Stack 3: [E] | Exploring action Move B from table to F | New state -> Stack 1: [A, D, C], Stack 2: [E], Stack 3: [F, B] | Exploring action Move D from A to E | New state -> Invalid | Taking action Move B from table to C | Moved to state -> Stack 1: [A, D, C, B], Stack 2: [E], Stack 3: [F] | Plan so far [Move D from E to table | Move E from C to table | Move C from B to table | Move B from A to table | Move A from F to table | Move D from table to A | Move C from table to D | Move B from table to C] | Exploring action Move B from C to F | New state -> Stack 1: [A, D, C], Stack 2: [E], Stack 3: [F, B] | Exploring action Move A from table to F | New state -> Invalid | Exploring action Move F from table to B | New state -> Stack 1: [A, D, C, B, F], Stack 2: [E] | Exploring action Move B from C to table | New state -> Stack 1: [A, D, C], Stack 2: [B], Stack 3: [E], Stack 4: [F] | Exploring action Move C from D to E | New state -> Invalid | Taking action Move F from table to B | Moved to state -> Stack 1: [A, D, C, B, F], Stack 2: [E] | Plan so far [Move D from E to table | Move E from C to table | Move C from B to table | Move B from A to table | Move A from F to table | Move D from table to A | Move C from table to D | Move B from table to C | Move F from table to B] | Reached goal state!",
        "system2_states_v1": 39
    },
    {
        "idx": 785,
        "start": [
            [
                "table",
                "D",
                "A",
                "F",
                "C",
                "E",
                "B"
            ]
        ],
        "goal": [
            [
                "table",
                "A",
                "B",
                "E",
                "D",
                "F"
            ],
            [
                "table",
                "C"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": false,
                "on": "D",
                "under": "F",
                "ontable": false
            },
            "B": {
                "clear": true,
                "on": "E",
                "under": -1,
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": "F",
                "under": "E",
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": -1,
                "under": "A",
                "ontable": true
            },
            "E": {
                "clear": false,
                "on": "C",
                "under": "B",
                "ontable": false
            },
            "F": {
                "clear": false,
                "on": "A",
                "under": "C",
                "ontable": false
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": false,
                "on": -1,
                "under": "B",
                "ontable": true
            },
            "B": {
                "clear": false,
                "on": "A",
                "under": "E",
                "ontable": false
            },
            "C": {
                "clear": true,
                "on": -1,
                "under": -1,
                "ontable": true
            },
            "D": {
                "clear": false,
                "on": "E",
                "under": "F",
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": "B",
                "under": "D",
                "ontable": false
            },
            "F": {
                "clear": true,
                "on": "D",
                "under": -1,
                "ontable": false
            }
        },
        "plan_len": 9,
        "num_blocks": 6,
        "prompt": "The initial state:\nThe hand is empty.\nD is on the table. A is on D. F is on A. C is on F. E is on C. B is on E. B is clear.\n\nThe goal is:\nA is on the table. B is on A. E is on B. D is on E. F is on D. F is clear.\nC is on the table. C is clear.\n",
        "system1_plan": "Move B from E to table | Move E from C to table | Move C from F to table | Move F from A to table | Move A from D to table | Move B from table to A | Move E from table to B | Move D from table to E | Move F from table to D",
        "system1_states": 9,
        "system2_plan_v1": "Moved to state -> Stack 1: [D, A, F, C, E, B] | Plan so far [] | Exploring action Move C from F to B | New state -> Invalid | Exploring action Move B from E to table | New state -> Stack 1: [B], Stack 2: [D, A, F, C, E] | Taking action Move B from E to table | Moved to state -> Stack 1: [B], Stack 2: [D, A, F, C, E] | Plan so far [Move B from E to table] | Exploring action Move F from A to E | New state -> Invalid | Exploring action Move F from A to B | New state -> Invalid | Exploring action Move E from C to table | New state -> Stack 1: [B], Stack 2: [D, A, F, C], Stack 3: [E] | Exploring action Move B from table to E | New state -> Stack 1: [D, A, F, C, E, B] | Exploring action Move E from C to B | New state -> Stack 1: [B, E], Stack 2: [D, A, F, C] | Taking action Move E from C to table | Moved to state -> Stack 1: [B], Stack 2: [D, A, F, C], Stack 3: [E] | Plan so far [Move B from E to table | Move E from C to table] | Exploring action Move D from table to E | New state -> Invalid | Exploring action Move C from F to E | New state -> Stack 1: [B], Stack 2: [D, A, F], Stack 3: [E, C] | Exploring action Move C from F to B | New state -> Stack 1: [B, C], Stack 2: [D, A, F], Stack 3: [E] | Exploring action Move C from F to table | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, A, F], Stack 4: [E] | Exploring action Move D from table to B | New state -> Invalid | Taking action Move C from F to table | Moved to state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, A, F], Stack 4: [E] | Plan so far [Move B from E to table | Move E from C to table | Move C from F to table] | Exploring action Move D from table to B | New state -> Invalid | Exploring action Move F from A to E | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, A], Stack 4: [E, F] | Exploring action Move F from A to table | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, A], Stack 4: [E], Stack 5: [F] | Exploring action Move F from A to B | New state -> Stack 1: [B, F], Stack 2: [C], Stack 3: [D, A], Stack 4: [E] | Exploring action Move D from table to F | New state -> Invalid | Taking action Move F from A to table | Moved to state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, A], Stack 4: [E], Stack 5: [F] | Plan so far [Move B from E to table | Move E from C to table | Move C from F to table | Move F from A to table] | Exploring action Move A from D to B | New state -> Stack 1: [B, A], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Exploring action Move D from table to C | New state -> Invalid | Exploring action Move A from D to F | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [F, A] | Exploring action Move A from D to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Taking action Move A from D to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Plan so far [Move B from E to table | Move E from C to table | Move C from F to table | Move F from A to table | Move A from D to table] | Exploring action Move B from table to A | New state -> Stack 1: [A, B], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Exploring action Move A from table to B | New state -> Stack 1: [B, A], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Exploring action Move F from table to D | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D, F], Stack 5: [E] | Taking action Move B from table to A | Moved to state -> Stack 1: [A, B], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Plan so far [Move B from E to table | Move E from C to table | Move C from F to table | Move F from A to table | Move A from D to table | Move B from table to A] | Exploring action Move E from table to B | New state -> Stack 1: [A, B, E], Stack 2: [C], Stack 3: [D], Stack 4: [F] | Exploring action Move F from table to D | New state -> Stack 1: [A, B], Stack 2: [C], Stack 3: [D, F], Stack 4: [E] | Exploring action Move A from table to C | New state -> Invalid | Exploring action Move A from table to E | New state -> Invalid | Exploring action Move B from A to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Taking action Move E from table to B | Moved to state -> Stack 1: [A, B, E], Stack 2: [C], Stack 3: [D], Stack 4: [F] | Plan so far [Move B from E to table | Move E from C to table | Move C from F to table | Move F from A to table | Move A from D to table | Move B from table to A | Move E from table to B] | Exploring action Move B from A to E | New state -> Invalid | Exploring action Move D from table to E | New state -> Stack 1: [A, B, E, D], Stack 2: [C], Stack 3: [F] | Exploring action Move E from B to table | New state -> Stack 1: [A, B], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Exploring action Move B from A to D | New state -> Invalid | Exploring action Move F from table to D | New state -> Stack 1: [A, B, E], Stack 2: [C], Stack 3: [D, F] | Taking action Move D from table to E | Moved to state -> Stack 1: [A, B, E, D], Stack 2: [C], Stack 3: [F] | Plan so far [Move B from E to table | Move E from C to table | Move C from F to table | Move F from A to table | Move A from D to table | Move B from table to A | Move E from table to B | Move D from table to E] | Exploring action Move E from B to C | New state -> Invalid | Exploring action Move F from table to C | New state -> Stack 1: [A, B, E, D], Stack 2: [C, F] | Exploring action Move D from E to table | New state -> Stack 1: [A, B, E], Stack 2: [C], Stack 3: [D], Stack 4: [F] | Exploring action Move F from table to D | New state -> Stack 1: [A, B, E, D, F], Stack 2: [C] | Taking action Move F from table to D | Moved to state -> Stack 1: [A, B, E, D, F], Stack 2: [C] | Plan so far [Move B from E to table | Move E from C to table | Move C from F to table | Move F from A to table | Move A from D to table | Move B from table to A | Move E from table to B | Move D from table to E | Move F from table to D] | Reached goal state!",
        "system2_states_v1": 38
    },
    {
        "idx": 810,
        "start": [
            [
                "table",
                "D",
                "A",
                "E"
            ],
            [
                "table",
                "F",
                "B",
                "C"
            ]
        ],
        "goal": [
            [
                "table",
                "F",
                "C",
                "D",
                "B",
                "A",
                "E"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": false,
                "on": "D",
                "under": "E",
                "ontable": false
            },
            "B": {
                "clear": false,
                "on": "F",
                "under": "C",
                "ontable": false
            },
            "C": {
                "clear": true,
                "on": "B",
                "under": -1,
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": -1,
                "under": "A",
                "ontable": true
            },
            "E": {
                "clear": true,
                "on": "A",
                "under": -1,
                "ontable": false
            },
            "F": {
                "clear": false,
                "on": -1,
                "under": "B",
                "ontable": true
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": false,
                "on": "B",
                "under": "E",
                "ontable": false
            },
            "B": {
                "clear": false,
                "on": "D",
                "under": "A",
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": "F",
                "under": "D",
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": "C",
                "under": "B",
                "ontable": false
            },
            "E": {
                "clear": true,
                "on": "A",
                "under": -1,
                "ontable": false
            },
            "F": {
                "clear": false,
                "on": -1,
                "under": "C",
                "ontable": true
            }
        },
        "plan_len": 9,
        "num_blocks": 6,
        "prompt": "The initial state:\nThe hand is empty.\nD is on the table. A is on D. E is on A. E is clear.\nF is on the table. B is on F. C is on B. C is clear.\n\nThe goal is:\nF is on the table. C is on F. D is on C. B is on D. A is on B. E is on A. E is clear.\n",
        "system1_plan": "Move C from B to table | Move B from F to table | Move C from table to F | Move E from A to table | Move A from D to table | Move D from table to C | Move B from table to D | Move A from table to B | Move E from table to A",
        "system1_states": 9,
        "system2_plan_v1": "Moved to state -> Stack 1: [D, A, E], Stack 2: [F, B, C] | Plan so far [] | Exploring action Move E from A to table | New state -> Stack 1: [D, A], Stack 2: [E], Stack 3: [F, B, C] | Exploring action Move D from table to C | New state -> Invalid | Exploring action Move C from B to table | New state -> Stack 1: [C], Stack 2: [D, A, E], Stack 3: [F, B] | Exploring action Move C from B to E | New state -> Stack 1: [D, A, E, C], Stack 2: [F, B] | Taking action Move C from B to table | Moved to state -> Stack 1: [C], Stack 2: [D, A, E], Stack 3: [F, B] | Plan so far [Move C from B to table] | Exploring action Move B from F to table | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, A, E], Stack 4: [F] | Exploring action Move E from A to table | New state -> Stack 1: [C], Stack 2: [D, A], Stack 3: [E], Stack 4: [F, B] | Exploring action Move B from F to C | New state -> Stack 1: [C, B], Stack 2: [D, A, E], Stack 3: [F] | Exploring action Move D from table to C | New state -> Invalid | Taking action Move B from F to table | Moved to state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, A, E], Stack 4: [F] | Plan so far [Move C from B to table | Move B from F to table] | Exploring action Move D from table to B | New state -> Invalid | Exploring action Move C from table to F | New state -> Stack 1: [B], Stack 2: [D, A, E], Stack 3: [F, C] | Exploring action Move E from A to table | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, A], Stack 4: [E], Stack 5: [F] | Exploring action Move B from table to C | New state -> Stack 1: [C, B], Stack 2: [D, A, E], Stack 3: [F] | Taking action Move C from table to F | Moved to state -> Stack 1: [B], Stack 2: [D, A, E], Stack 3: [F, C] | Plan so far [Move C from B to table | Move B from F to table | Move C from table to F] | Exploring action Move F from table to E | New state -> Invalid | Exploring action Move B from table to C | New state -> Stack 1: [D, A, E], Stack 2: [F, C, B] | Exploring action Move E from A to B | New state -> Stack 1: [B, E], Stack 2: [D, A], Stack 3: [F, C] | Exploring action Move E from A to table | New state -> Stack 1: [B], Stack 2: [D, A], Stack 3: [E], Stack 4: [F, C] | Taking action Move E from A to table | Moved to state -> Stack 1: [D, A], Stack 2: [E], Stack 3: [F, B, C] | Plan so far [Move E from A to table] | Exploring action Move D from table to E | New state -> Invalid | Exploring action Move D from table to C | New state -> Invalid | Exploring action Move C from B to table | New state -> Stack 1: [C], Stack 2: [D, A], Stack 3: [E], Stack 4: [F, B] | Exploring action Move A from D to E | New state -> Stack 1: [D], Stack 2: [E, A], Stack 3: [F, B, C] | Exploring action Move A from D to table | New state -> Stack 1: [A], Stack 2: [D], Stack 3: [E], Stack 4: [F, B, C] | Taking action Move E from A to table | Moved to state -> Stack 1: [B], Stack 2: [D, A], Stack 3: [E], Stack 4: [F, C] | Plan so far [Move C from B to table | Move B from F to table | Move C from table to F | Move E from A to table] | Exploring action Move D from table to E | New state -> Invalid | Exploring action Move E from table to A | New state -> Stack 1: [B], Stack 2: [D, A, E], Stack 3: [F, C] | Exploring action Move A from D to C | New state -> Stack 1: [B], Stack 2: [D], Stack 3: [E], Stack 4: [F, C, A] | Exploring action Move A from D to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D], Stack 4: [E], Stack 5: [F, C] | Taking action Move A from D to table | Moved to state -> Stack 1: [A], Stack 2: [D], Stack 3: [E], Stack 4: [F, B, C] | Plan so far [Move E from A to table | Move A from D to table] | Exploring action Move C from B to D | New state -> Stack 1: [A], Stack 2: [D, C], Stack 3: [E], Stack 4: [F, B] | Exploring action Move F from table to A | New state -> Invalid | Exploring action Move C from B to E | New state -> Stack 1: [A], Stack 2: [D], Stack 3: [E, C], Stack 4: [F, B] | Exploring action Move C from B to table | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [F, B] | Taking action Move B from F to C | Moved to state -> Stack 1: [C, B], Stack 2: [D, A, E], Stack 3: [F] | Plan so far [Move C from B to table | Move B from F to C] | Exploring action Move B from C to F | New state -> Stack 1: [C], Stack 2: [D, A, E], Stack 3: [F, B] | Exploring action Move B from C to table | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, A, E], Stack 4: [F] | Exploring action Move E from A to table | New state -> Stack 1: [C, B], Stack 2: [D, A], Stack 3: [E], Stack 4: [F] | Exploring action Move A from D to F | New state -> Invalid | Taking action Move C from B to table | Moved to state -> Stack 1: [A], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [F, B] | Plan so far [Move E from A to table | Move A from D to table | Move C from B to table] | Exploring action Move B from F to C | New state -> Stack 1: [A], Stack 2: [C, B], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Exploring action Move B from F to A | New state -> Stack 1: [A, B], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Exploring action Move F from table to D | New state -> Invalid | Exploring action Move B from F to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Taking action Move B from C to table | Moved to state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, A, E], Stack 4: [F] | Plan so far [Move C from B to table | Move B from F to C | Move B from C to table] | Taking action Move E from A to table | Moved to state -> Stack 1: [C], Stack 2: [D, A], Stack 3: [E], Stack 4: [F, B] | Plan so far [Move C from B to table | Move E from A to table] | Exploring action Move A from D to C | New state -> Stack 1: [C, A], Stack 2: [D], Stack 3: [E], Stack 4: [F, B] | Exploring action Move A from D to table | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [F, B] | Exploring action Move D from table to B | New state -> Invalid | Exploring action Move D from table to A | New state -> Invalid | Exploring action Move B from F to table | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, A], Stack 4: [E], Stack 5: [F] | Taking action Move A from D to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [D], Stack 4: [E], Stack 5: [F, C] | Plan so far [Move C from B to table | Move B from F to table | Move C from table to F | Move E from A to table | Move A from D to table] | Exploring action Move E from table to A | New state -> Stack 1: [A, E], Stack 2: [B], Stack 3: [D], Stack 4: [F, C] | Exploring action Move F from table to A | New state -> Invalid | Exploring action Move D from table to C | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [E], Stack 4: [F, C, D] | Exploring action Move A from table to D | New state -> Stack 1: [B], Stack 2: [D, A], Stack 3: [E], Stack 4: [F, C] | Exploring action Move F from table to C | New state -> Invalid | Taking action Move B from F to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Plan so far [Move E from A to table | Move A from D to table | Move C from B to table | Move B from F to table] | Exploring action Move C from table to F | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D], Stack 4: [E], Stack 5: [F, C] | Exploring action Move E from table to A | New state -> Stack 1: [A, E], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [F] | Exploring action Move A from table to B | New state -> Stack 1: [B, A], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Taking action Move D from table to C | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [E], Stack 4: [F, C, D] | Plan so far [Move C from B to table | Move B from F to table | Move C from table to F | Move E from A to table | Move A from D to table | Move D from table to C] | Exploring action Move E from table to A | New state -> Stack 1: [A, E], Stack 2: [B], Stack 3: [F, C, D] | Exploring action Move C from F to A | New state -> Invalid | Exploring action Move A from table to E | New state -> Stack 1: [B], Stack 2: [E, A], Stack 3: [F, C, D] | Exploring action Move B from table to D | New state -> Stack 1: [A], Stack 2: [E], Stack 3: [F, C, D, B] | Taking action Move A from D to table | Moved to state -> Stack 1: [A], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [F, B] | Plan so far [Move C from B to table | Move E from A to table | Move A from D to table] | Taking action Move B from F to table | Moved to state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, A], Stack 4: [E], Stack 5: [F] | Plan so far [Move C from B to table | Move E from A to table | Move B from F to table] | Exploring action Move A from D to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Exploring action Move C from table to F | New state -> Stack 1: [B], Stack 2: [D, A], Stack 3: [E], Stack 4: [F, C] | Exploring action Move E from table to A | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, A, E], Stack 4: [F] | Exploring action Move D from table to E | New state -> Invalid | Exploring action Move D from table to A | New state -> Invalid | Taking action Move E from A to table | Moved to state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, A], Stack 4: [E], Stack 5: [F] | Plan so far [Move C from B to table | Move B from F to table | Move E from A to table] | Taking action Move B from table to D | Moved to state -> Stack 1: [A], Stack 2: [E], Stack 3: [F, C, D, B] | Plan so far [Move C from B to table | Move B from F to table | Move C from table to F | Move E from A to table | Move A from D to table | Move D from table to C | Move B from table to D] | Exploring action Move A from table to B | New state -> Stack 1: [E], Stack 2: [F, C, D, B, A] | Exploring action Move B from D to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [E], Stack 4: [F, C, D] | Exploring action Move D from C to B | New state -> Invalid | Exploring action Move E from table to A | New state -> Stack 1: [A, E], Stack 2: [F, C, D, B] | Taking action Move A from D to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Plan so far [Move C from B to table | Move E from A to table | Move B from F to table | Move A from D to table] | Taking action Move C from table to F | Moved to state -> Stack 1: [B], Stack 2: [D, A], Stack 3: [E], Stack 4: [F, C] | Plan so far [Move C from B to table | Move E from A to table | Move B from F to table | Move C from table to F] | Taking action Move A from table to B | Moved to state -> Stack 1: [E], Stack 2: [F, C, D, B, A] | Plan so far [Move C from B to table | Move B from F to table | Move C from table to F | Move E from A to table | Move A from D to table | Move D from table to C | Move B from table to D | Move A from table to B] | Exploring action Move B from D to table | New state -> Invalid | Exploring action Move A from B to E | New state -> Stack 1: [E, A], Stack 2: [F, C, D, B] | Exploring action Move A from B to table | New state -> Stack 1: [A], Stack 2: [E], Stack 3: [F, C, D, B] | Exploring action Move E from table to A | New state -> Stack 1: [F, C, D, B, A, E] | Exploring action Move F from table to A | New state -> Invalid | Taking action Move E from table to A | Moved to state -> Stack 1: [F, C, D, B, A, E] | Plan so far [Move C from B to table | Move B from F to table | Move C from table to F | Move E from A to table | Move A from D to table | Move D from table to C | Move B from table to D | Move A from table to B | Move E from table to A] | Reached goal state!",
        "system2_states_v1": 68
    },
    {
        "idx": 908,
        "start": [
            [
                "table",
                "B",
                "A",
                "D",
                "C"
            ],
            [
                "table",
                "E",
                "G",
                "F"
            ]
        ],
        "goal": [
            [
                "table",
                "D"
            ],
            [
                "table",
                "G",
                "C",
                "F",
                "E",
                "A",
                "B"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": false,
                "on": "B",
                "under": "D",
                "ontable": false
            },
            "B": {
                "clear": false,
                "on": -1,
                "under": "A",
                "ontable": true
            },
            "C": {
                "clear": true,
                "on": "D",
                "under": -1,
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": "A",
                "under": "C",
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": -1,
                "under": "G",
                "ontable": true
            },
            "F": {
                "clear": true,
                "on": "G",
                "under": -1,
                "ontable": false
            },
            "G": {
                "clear": false,
                "on": "E",
                "under": "F",
                "ontable": false
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": false,
                "on": "E",
                "under": "B",
                "ontable": false
            },
            "B": {
                "clear": true,
                "on": "A",
                "under": -1,
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": "G",
                "under": "F",
                "ontable": false
            },
            "D": {
                "clear": true,
                "on": -1,
                "under": -1,
                "ontable": true
            },
            "E": {
                "clear": false,
                "on": "F",
                "under": "A",
                "ontable": false
            },
            "F": {
                "clear": false,
                "on": "C",
                "under": "E",
                "ontable": false
            },
            "G": {
                "clear": false,
                "on": -1,
                "under": "C",
                "ontable": true
            }
        },
        "plan_len": 10,
        "num_blocks": 7,
        "prompt": "The initial state:\nThe hand is empty.\nB is on the table. A is on B. D is on A. C is on D. C is clear.\nE is on the table. G is on E. F is on G. F is clear.\n\nThe goal is:\nD is on the table. D is clear.\nG is on the table. C is on G. F is on C. E is on F. A is on E. B is on A. B is clear.\n",
        "system1_plan": "Move C from D to table | Move D from A to table | Move F from G to table | Move G from E to table | Move C from table to G | Move A from B to table | Move F from table to C | Move E from table to F | Move A from table to E | Move B from table to A",
        "system1_states": 10,
        "system2_plan_v1": "Moved to state -> Stack 1: [B, A, D, C], Stack 2: [E, G, F] | Plan so far [] | Exploring action Move F from G to table | New state -> Stack 1: [B, A, D, C], Stack 2: [E, G], Stack 3: [F] | Exploring action Move G from E to table | New state -> Invalid | Exploring action Move B from table to F | New state -> Invalid | Exploring action Move C from D to table | New state -> Stack 1: [B, A, D], Stack 2: [C], Stack 3: [E, G, F] | Exploring action Move C from D to F | New state -> Stack 1: [B, A, D], Stack 2: [E, G, F, C] | Taking action Move C from D to table | Moved to state -> Stack 1: [B, A, D], Stack 2: [C], Stack 3: [E, G, F] | Plan so far [Move C from D to table] | Exploring action Move A from B to F | New state -> Invalid | Exploring action Move F from G to table | New state -> Stack 1: [B, A, D], Stack 2: [C], Stack 3: [E, G], Stack 4: [F] | Exploring action Move F from G to C | New state -> Stack 1: [B, A, D], Stack 2: [C, F], Stack 3: [E, G] | Exploring action Move D from A to table | New state -> Stack 1: [B, A], Stack 2: [C], Stack 3: [D], Stack 4: [E, G, F] | Taking action Move D from A to table | Moved to state -> Stack 1: [B, A], Stack 2: [C], Stack 3: [D], Stack 4: [E, G, F] | Plan so far [Move C from D to table | Move D from A to table] | Exploring action Move B from table to A | New state -> Invalid | Exploring action Move F from G to table | New state -> Stack 1: [B, A], Stack 2: [C], Stack 3: [D], Stack 4: [E, G], Stack 5: [F] | Exploring action Move E from table to A | New state -> Invalid | Exploring action Move A from B to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E, G, F] | Exploring action Move F from G to A | New state -> Stack 1: [B, A, F], Stack 2: [C], Stack 3: [D], Stack 4: [E, G] | Taking action Move A from B to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E, G, F] | Plan so far [Move C from D to table | Move D from A to table | Move A from B to table] | Exploring action Move F from G to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E, G], Stack 6: [F] | Exploring action Move F from G to C | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, F], Stack 4: [D], Stack 5: [E, G] | Exploring action Move B from table to A | New state -> Stack 1: [A, B], Stack 2: [C], Stack 3: [D], Stack 4: [E, G, F] | Exploring action Move G from E to table | New state -> Invalid | Exploring action Move G from E to A | New state -> Invalid | Taking action Move F from G to table | Moved to state -> Stack 1: [B, A], Stack 2: [C], Stack 3: [D], Stack 4: [E, G], Stack 5: [F] | Plan so far [Move C from D to table | Move D from A to table | Move F from G to table] | Exploring action Move G from E to table | New state -> Stack 1: [B, A], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Exploring action Move A from B to G | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D], Stack 4: [E, G, A], Stack 5: [F] | Exploring action Move B from table to A | New state -> Invalid | Exploring action Move A from B to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E, G], Stack 6: [F] | Taking action Move F from G to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E, G], Stack 6: [F] | Plan so far [Move C from D to table | Move D from A to table | Move A from B to table | Move F from G to table] | Exploring action Move B from table to A | New state -> Stack 1: [A, B], Stack 2: [C], Stack 3: [D], Stack 4: [E, G], Stack 5: [F] | Exploring action Move G from E to B | New state -> Stack 1: [A], Stack 2: [B, G], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Exploring action Move E from table to B | New state -> Invalid | Exploring action Move G from E to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F], Stack 7: [G] | Taking action Move G from E to table | Moved to state -> Stack 1: [B, A], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Plan so far [Move C from D to table | Move D from A to table | Move F from G to table | Move G from E to table] | Exploring action Move C from table to G | New state -> Stack 1: [B, A], Stack 2: [D], Stack 3: [E], Stack 4: [F], Stack 5: [G, C] | Exploring action Move B from table to D | New state -> Invalid | Exploring action Move B from table to G | New state -> Invalid | Exploring action Move A from B to G | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [F], Stack 6: [G, A] | Exploring action Move A from B to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F], Stack 7: [G] | Taking action Move A from B to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E, G], Stack 6: [F] | Plan so far [Move C from D to table | Move D from A to table | Move F from G to table | Move A from B to table] | Taking action Move C from table to G | Moved to state -> Stack 1: [B, A], Stack 2: [D], Stack 3: [E], Stack 4: [F], Stack 5: [G, C] | Plan so far [Move C from D to table | Move D from A to table | Move F from G to table | Move G from E to table | Move C from table to G] | Exploring action Move A from B to C | New state -> Stack 1: [B], Stack 2: [D], Stack 3: [E], Stack 4: [F], Stack 5: [G, C, A] | Exploring action Move F from table to C | New state -> Stack 1: [B, A], Stack 2: [D], Stack 3: [E], Stack 4: [G, C, F] | Exploring action Move B from table to C | New state -> Invalid | Exploring action Move B from table to D | New state -> Invalid | Exploring action Move A from B to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D], Stack 4: [E], Stack 5: [F], Stack 6: [G, C] | Taking action Move G from E to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F], Stack 7: [G] | Plan so far [Move C from D to table | Move D from A to table | Move A from B to table | Move F from G to table | Move G from E to table] | Exploring action Move B from table to A | New state -> Stack 1: [A, B], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Exploring action Move C from table to G | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D], Stack 4: [E], Stack 5: [F], Stack 6: [G, C] | Exploring action Move A from table to B | New state -> Stack 1: [B, A], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Taking action Move A from B to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [D], Stack 4: [E], Stack 5: [F], Stack 6: [G, C] | Plan so far [Move C from D to table | Move D from A to table | Move F from G to table | Move G from E to table | Move C from table to G | Move A from B to table] | Exploring action Move A from table to B | New state -> Stack 1: [B, A], Stack 2: [D], Stack 3: [E], Stack 4: [F], Stack 5: [G, C] | Exploring action Move F from table to C | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D], Stack 4: [E], Stack 5: [G, C, F] | Exploring action Move G from table to D | New state -> Invalid | Exploring action Move B from table to A | New state -> Stack 1: [A, B], Stack 2: [D], Stack 3: [E], Stack 4: [F], Stack 5: [G, C] | Exploring action Move G from table to E | New state -> Invalid | Taking action Move A from B to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F], Stack 7: [G] | Plan so far [Move C from D to table | Move D from A to table | Move F from G to table | Move G from E to table | Move A from B to table] | Taking action Move F from table to C | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [D], Stack 4: [E], Stack 5: [G, C, F] | Plan so far [Move C from D to table | Move D from A to table | Move F from G to table | Move G from E to table | Move C from table to G | Move A from B to table | Move F from table to C] | Exploring action Move A from table to E | New state -> Stack 1: [B], Stack 2: [D], Stack 3: [E, A], Stack 4: [G, C, F] | Exploring action Move B from table to A | New state -> Stack 1: [A, B], Stack 2: [D], Stack 3: [E], Stack 4: [G, C, F] | Exploring action Move G from table to E | New state -> Invalid | Exploring action Move E from table to F | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D], Stack 4: [G, C, F, E] | Exploring action Move C from G to B | New state -> Invalid | Taking action Move C from table to G | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [D], Stack 4: [E], Stack 5: [F], Stack 6: [G, C] | Plan so far [Move C from D to table | Move D from A to table | Move A from B to table | Move F from G to table | Move G from E to table | Move C from table to G] | Taking action Move E from table to F | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [D], Stack 4: [G, C, F, E] | Plan so far [Move C from D to table | Move D from A to table | Move F from G to table | Move G from E to table | Move C from table to G | Move A from B to table | Move F from table to C | Move E from table to F] | Exploring action Move B from table to A | New state -> Stack 1: [A, B], Stack 2: [D], Stack 3: [G, C, F, E] | Exploring action Move C from G to B | New state -> Invalid | Exploring action Move A from table to E | New state -> Stack 1: [B], Stack 2: [D], Stack 3: [G, C, F, E, A] | Exploring action Move A from table to B | New state -> Stack 1: [B, A], Stack 2: [D], Stack 3: [G, C, F, E] | Exploring action Move F from C to A | New state -> Invalid | Taking action Move F from table to C | Moved to state -> Stack 1: [B, A], Stack 2: [D], Stack 3: [E], Stack 4: [G, C, F] | Plan so far [Move C from D to table | Move D from A to table | Move F from G to table | Move G from E to table | Move C from table to G | Move F from table to C] | Exploring action Move E from table to F | New state -> Stack 1: [B, A], Stack 2: [D], Stack 3: [G, C, F, E] | Exploring action Move A from B to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D], Stack 4: [E], Stack 5: [G, C, F] | Exploring action Move A from B to E | New state -> Stack 1: [B], Stack 2: [D], Stack 3: [E, A], Stack 4: [G, C, F] | Exploring action Move C from G to F | New state -> Invalid | Taking action Move A from table to E | Moved to state -> Stack 1: [B], Stack 2: [D], Stack 3: [G, C, F, E, A] | Plan so far [Move C from D to table | Move D from A to table | Move F from G to table | Move G from E to table | Move C from table to G | Move A from B to table | Move F from table to C | Move E from table to F | Move A from table to E] | Exploring action Move D from table to A | New state -> Stack 1: [B], Stack 2: [G, C, F, E, A, D] | Exploring action Move A from E to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D], Stack 4: [G, C, F, E] | Exploring action Move B from table to A | New state -> Stack 1: [D], Stack 2: [G, C, F, E, A, B] | Exploring action Move G from table to B | New state -> Invalid | Exploring action Move F from C to D | New state -> Invalid | Taking action Move B from table to A | Moved to state -> Stack 1: [D], Stack 2: [G, C, F, E, A, B] | Plan so far [Move C from D to table | Move D from A to table | Move F from G to table | Move G from E to table | Move C from table to G | Move A from B to table | Move F from table to C | Move E from table to F | Move A from table to E | Move B from table to A] | Reached goal state!",
        "system2_states_v1": 64
    },
    {
        "idx": 618,
        "start": [
            [
                "table",
                "D",
                "C",
                "E",
                "A",
                "B"
            ]
        ],
        "goal": [
            [
                "table",
                "A"
            ],
            [
                "table",
                "D",
                "E",
                "B",
                "C"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": false,
                "on": "E",
                "under": "B",
                "ontable": false
            },
            "B": {
                "clear": true,
                "on": "A",
                "under": -1,
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": "D",
                "under": "E",
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": -1,
                "under": "C",
                "ontable": true
            },
            "E": {
                "clear": false,
                "on": "C",
                "under": "A",
                "ontable": false
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": true,
                "on": -1,
                "under": -1,
                "ontable": true
            },
            "B": {
                "clear": false,
                "on": "E",
                "under": "C",
                "ontable": false
            },
            "C": {
                "clear": true,
                "on": "B",
                "under": -1,
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": -1,
                "under": "E",
                "ontable": true
            },
            "E": {
                "clear": false,
                "on": "D",
                "under": "B",
                "ontable": false
            }
        },
        "plan_len": 7,
        "num_blocks": 5,
        "prompt": "The initial state:\nThe hand is empty.\nD is on the table. C is on D. E is on C. A is on E. B is on A. B is clear.\n\nThe goal is:\nA is on the table. A is clear.\nD is on the table. E is on D. B is on E. C is on B. C is clear.\n",
        "system1_plan": "Move B from A to table | Move A from E to table | Move E from C to table | Move C from D to table | Move E from table to D | Move B from table to E | Move C from table to B",
        "system1_states": 7,
        "system2_plan_v1": "Moved to state -> Stack 1: [D, C, E, A, B] | Plan so far [] | Exploring action Move B from A to table | New state -> Stack 1: [B], Stack 2: [D, C, E, A] | Exploring action Move E from C to B | New state -> Invalid | Taking action Move B from A to table | Moved to state -> Stack 1: [B], Stack 2: [D, C, E, A] | Plan so far [Move B from A to table] | Exploring action Move B from table to A | New state -> Stack 1: [D, C, E, A, B] | Exploring action Move A from E to B | New state -> Stack 1: [B, A], Stack 2: [D, C, E] | Exploring action Move D from table to A | New state -> Invalid | Exploring action Move A from E to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, C, E] | Taking action Move A from E to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, C, E] | Plan so far [Move B from A to table | Move A from E to table] | Exploring action Move E from C to A | New state -> Stack 1: [A, E], Stack 2: [B], Stack 3: [D, C] | Exploring action Move E from C to B | New state -> Stack 1: [A], Stack 2: [B, E], Stack 3: [D, C] | Exploring action Move C from D to A | New state -> Invalid | Exploring action Move E from C to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, C], Stack 4: [E] | Taking action Move E from C to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, C], Stack 4: [E] | Plan so far [Move B from A to table | Move A from E to table | Move E from C to table] | Exploring action Move C from D to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Exploring action Move C from D to E | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D], Stack 4: [E, C] | Exploring action Move D from table to C | New state -> Invalid | Exploring action Move C from D to B | New state -> Stack 1: [A], Stack 2: [B, C], Stack 3: [D], Stack 4: [E] | Taking action Move C from D to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Plan so far [Move B from A to table | Move A from E to table | Move E from C to table | Move C from D to table] | Exploring action Move B from table to D | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, B], Stack 4: [E] | Exploring action Move C from table to B | New state -> Stack 1: [A], Stack 2: [B, C], Stack 3: [D], Stack 4: [E] | Exploring action Move E from table to D | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D, E] | Taking action Move C from D to B | Moved to state -> Stack 1: [A], Stack 2: [B, C], Stack 3: [D], Stack 4: [E] | Plan so far [Move B from A to table | Move A from E to table | Move E from C to table | Move C from D to B] | Exploring action Move E from table to D | New state -> Stack 1: [A], Stack 2: [B, C], Stack 3: [D, E] | Exploring action Move C from B to E | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D], Stack 4: [E, C] | Exploring action Move B from table to A | New state -> Invalid | Exploring action Move C from B to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Taking action Move E from table to D | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D, E] | Plan so far [Move B from A to table | Move A from E to table | Move E from C to table | Move C from D to table | Move E from table to D] | Exploring action Move B from table to C | New state -> Stack 1: [A], Stack 2: [C, B], Stack 3: [D, E] | Exploring action Move B from table to E | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, E, B] | Exploring action Move D from table to C | New state -> Invalid | Exploring action Move C from table to B | New state -> Stack 1: [A], Stack 2: [B, C], Stack 3: [D, E] | Taking action Move E from table to D | Moved to state -> Stack 1: [A], Stack 2: [B, C], Stack 3: [D, E] | Plan so far [Move B from A to table | Move A from E to table | Move E from C to table | Move C from D to B | Move E from table to D] | Exploring action Move C from B to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D, E] | Exploring action Move E from D to table | New state -> Stack 1: [A], Stack 2: [B, C], Stack 3: [D], Stack 4: [E] | Exploring action Move B from table to A | New state -> Invalid | Exploring action Move C from B to E | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, E, C] | Taking action Move B from table to E | Moved to state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, E, B] | Plan so far [Move B from A to table | Move A from E to table | Move E from C to table | Move C from D to table | Move E from table to D | Move B from table to E] | Exploring action Move B from E to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D, E] | Exploring action Move E from D to table | New state -> Invalid | Exploring action Move C from table to A | New state -> Stack 1: [A, C], Stack 2: [D, E, B] | Exploring action Move D from table to B | New state -> Invalid | Exploring action Move C from table to B | New state -> Stack 1: [A], Stack 2: [D, E, B, C] | Taking action Move C from table to B | Moved to state -> Stack 1: [A], Stack 2: [D, E, B, C] | Plan so far [Move B from A to table | Move A from E to table | Move E from C to table | Move C from D to table | Move E from table to D | Move B from table to E | Move C from table to B] | Reached goal state!",
        "system2_states_v1": 34
    },
    {
        "idx": 820,
        "start": [
            [
                "table",
                "B",
                "A",
                "D",
                "F",
                "E",
                "G"
            ],
            [
                "table",
                "C"
            ]
        ],
        "goal": [
            [
                "table",
                "A"
            ],
            [
                "table",
                "E",
                "B",
                "F",
                "C",
                "D"
            ],
            [
                "table",
                "G"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": false,
                "on": "B",
                "under": "D",
                "ontable": false
            },
            "B": {
                "clear": false,
                "on": -1,
                "under": "A",
                "ontable": true
            },
            "C": {
                "clear": true,
                "on": -1,
                "under": -1,
                "ontable": true
            },
            "D": {
                "clear": false,
                "on": "A",
                "under": "F",
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": "F",
                "under": "G",
                "ontable": false
            },
            "F": {
                "clear": false,
                "on": "D",
                "under": "E",
                "ontable": false
            },
            "G": {
                "clear": true,
                "on": "E",
                "under": -1,
                "ontable": false
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": true,
                "on": -1,
                "under": -1,
                "ontable": true
            },
            "B": {
                "clear": false,
                "on": "E",
                "under": "F",
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": "F",
                "under": "D",
                "ontable": false
            },
            "D": {
                "clear": true,
                "on": "C",
                "under": -1,
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": -1,
                "under": "B",
                "ontable": true
            },
            "F": {
                "clear": false,
                "on": "B",
                "under": "C",
                "ontable": false
            },
            "G": {
                "clear": true,
                "on": -1,
                "under": -1,
                "ontable": true
            }
        },
        "plan_len": 9,
        "num_blocks": 7,
        "prompt": "The initial state:\nThe hand is empty.\nB is on the table. A is on B. D is on A. F is on D. E is on F. G is on E. G is clear.\nC is on the table. C is clear.\n\nThe goal is:\nA is on the table. A is clear.\nE is on the table. B is on E. F is on B. C is on F. D is on C. D is clear.\nG is on the table. G is clear.\n",
        "system1_plan": "Move G from E to table | Move E from F to table | Move F from D to table | Move D from A to table | Move A from B to table | Move B from table to E | Move F from table to B | Move C from table to F | Move D from table to C",
        "system1_states": 9,
        "system2_plan_v1": "Moved to state -> Stack 1: [B, A, D, F, E, G], Stack 2: [C] | Plan so far [] | Exploring action Move C from table to G | New state -> Stack 1: [B, A, D, F, E, G, C] | Exploring action Move D from A to G | New state -> Invalid | Exploring action Move G from E to C | New state -> Stack 1: [B, A, D, F, E], Stack 2: [C, G] | Exploring action Move G from E to table | New state -> Stack 1: [B, A, D, F, E], Stack 2: [C], Stack 3: [G] | Taking action Move G from E to table | Moved to state -> Stack 1: [B, A, D, F, E], Stack 2: [C], Stack 3: [G] | Plan so far [Move G from E to table] | Exploring action Move E from F to C | New state -> Stack 1: [B, A, D, F], Stack 2: [C, E], Stack 3: [G] | Exploring action Move F from D to E | New state -> Invalid | Exploring action Move C from table to E | New state -> Stack 1: [B, A, D, F, E, C], Stack 2: [G] | Exploring action Move E from F to table | New state -> Stack 1: [B, A, D, F], Stack 2: [C], Stack 3: [E], Stack 4: [G] | Taking action Move E from F to table | Moved to state -> Stack 1: [B, A, D, F], Stack 2: [C], Stack 3: [E], Stack 4: [G] | Plan so far [Move G from E to table | Move E from F to table] | Exploring action Move A from B to E | New state -> Invalid | Exploring action Move F from D to E | New state -> Stack 1: [B, A, D], Stack 2: [C], Stack 3: [E, F], Stack 4: [G] | Exploring action Move F from D to table | New state -> Stack 1: [B, A, D], Stack 2: [C], Stack 3: [E], Stack 4: [F], Stack 5: [G] | Exploring action Move F from D to C | New state -> Stack 1: [B, A, D], Stack 2: [C, F], Stack 3: [E], Stack 4: [G] | Exploring action Move D from A to E | New state -> Invalid | Taking action Move F from D to table | Moved to state -> Stack 1: [B, A, D], Stack 2: [C], Stack 3: [E], Stack 4: [F], Stack 5: [G] | Plan so far [Move G from E to table | Move E from F to table | Move F from D to table] | Exploring action Move D from A to table | New state -> Stack 1: [B, A], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Exploring action Move D from A to C | New state -> Stack 1: [B, A], Stack 2: [C, D], Stack 3: [E], Stack 4: [F], Stack 5: [G] | Exploring action Move D from A to E | New state -> Stack 1: [B, A], Stack 2: [C], Stack 3: [E, D], Stack 4: [F], Stack 5: [G] | Exploring action Move B from table to F | New state -> Invalid | Taking action Move D from A to table | Moved to state -> Stack 1: [B, A], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Plan so far [Move G from E to table | Move E from F to table | Move F from D to table | Move D from A to table] | Exploring action Move A from B to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F], Stack 7: [G] | Exploring action Move A from B to D | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, A], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Exploring action Move B from table to D | New state -> Invalid | Exploring action Move D from table to C | New state -> Stack 1: [B, A], Stack 2: [C, D], Stack 3: [E], Stack 4: [F], Stack 5: [G] | Taking action Move A from B to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F], Stack 7: [G] | Plan so far [Move G from E to table | Move E from F to table | Move F from D to table | Move D from A to table | Move A from B to table] | Exploring action Move C from table to B | New state -> Stack 1: [A], Stack 2: [B, C], Stack 3: [D], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Exploring action Move B from table to E | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D], Stack 4: [E, B], Stack 5: [F], Stack 6: [G] | Exploring action Move D from table to C | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, D], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Taking action Move B from table to E | Moved to state -> Stack 1: [A], Stack 2: [C], Stack 3: [D], Stack 4: [E, B], Stack 5: [F], Stack 6: [G] | Plan so far [Move G from E to table | Move E from F to table | Move F from D to table | Move D from A to table | Move A from B to table | Move B from table to E] | Exploring action Move E from table to F | New state -> Invalid | Exploring action Move F from table to B | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D], Stack 4: [E, B, F], Stack 5: [G] | Exploring action Move D from table to C | New state -> Stack 1: [A], Stack 2: [C, D], Stack 3: [E, B], Stack 4: [F], Stack 5: [G] | Exploring action Move C from table to B | New state -> Stack 1: [A], Stack 2: [D], Stack 3: [E, B, C], Stack 4: [F], Stack 5: [G] | Exploring action Move E from table to A | New state -> Invalid | Taking action Move F from table to B | Moved to state -> Stack 1: [A], Stack 2: [C], Stack 3: [D], Stack 4: [E, B, F], Stack 5: [G] | Plan so far [Move G from E to table | Move E from F to table | Move F from D to table | Move D from A to table | Move A from B to table | Move B from table to E | Move F from table to B] | Exploring action Move C from table to F | New state -> Stack 1: [A], Stack 2: [D], Stack 3: [E, B, F, C], Stack 4: [G] | Exploring action Move D from table to C | New state -> Stack 1: [A], Stack 2: [C, D], Stack 3: [E, B, F], Stack 4: [G] | Exploring action Move E from table to G | New state -> Invalid | Exploring action Move C from table to D | New state -> Stack 1: [A], Stack 2: [D, C], Stack 3: [E, B, F], Stack 4: [G] | Taking action Move C from table to F | Moved to state -> Stack 1: [A], Stack 2: [D], Stack 3: [E, B, F, C], Stack 4: [G] | Plan so far [Move G from E to table | Move E from F to table | Move F from D to table | Move D from A to table | Move A from B to table | Move B from table to E | Move F from table to B | Move C from table to F] | Exploring action Move D from table to C | New state -> Stack 1: [A], Stack 2: [E, B, F, C, D], Stack 3: [G] | Exploring action Move F from B to C | New state -> Invalid | Exploring action Move B from E to table | New state -> Invalid | Exploring action Move C from F to table | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D], Stack 4: [E, B, F], Stack 5: [G] | Exploring action Move C from F to D | New state -> Stack 1: [A], Stack 2: [D, C], Stack 3: [E, B, F], Stack 4: [G] | Taking action Move D from table to C | Moved to state -> Stack 1: [A], Stack 2: [E, B, F, C, D], Stack 3: [G] | Plan so far [Move G from E to table | Move E from F to table | Move F from D to table | Move D from A to table | Move A from B to table | Move B from table to E | Move F from table to B | Move C from table to F | Move D from table to C] | Reached goal state!",
        "system2_states_v1": 38
    },
    {
        "idx": 813,
        "start": [
            [
                "table",
                "C",
                "B",
                "D",
                "A"
            ],
            [
                "table",
                "F",
                "G",
                "E"
            ]
        ],
        "goal": [
            [
                "table",
                "B"
            ],
            [
                "table",
                "F",
                "A"
            ],
            [
                "table",
                "G",
                "C",
                "D",
                "E"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": true,
                "on": "D",
                "under": -1,
                "ontable": false
            },
            "B": {
                "clear": false,
                "on": "C",
                "under": "D",
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": -1,
                "under": "B",
                "ontable": true
            },
            "D": {
                "clear": false,
                "on": "B",
                "under": "A",
                "ontable": false
            },
            "E": {
                "clear": true,
                "on": "G",
                "under": -1,
                "ontable": false
            },
            "F": {
                "clear": false,
                "on": -1,
                "under": "G",
                "ontable": true
            },
            "G": {
                "clear": false,
                "on": "F",
                "under": "E",
                "ontable": false
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": true,
                "on": "F",
                "under": -1,
                "ontable": false
            },
            "B": {
                "clear": true,
                "on": -1,
                "under": -1,
                "ontable": true
            },
            "C": {
                "clear": false,
                "on": "G",
                "under": "D",
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": "C",
                "under": "E",
                "ontable": false
            },
            "E": {
                "clear": true,
                "on": "D",
                "under": -1,
                "ontable": false
            },
            "F": {
                "clear": false,
                "on": -1,
                "under": "A",
                "ontable": true
            },
            "G": {
                "clear": false,
                "on": -1,
                "under": "C",
                "ontable": true
            }
        },
        "plan_len": 9,
        "num_blocks": 7,
        "prompt": "The initial state:\nThe hand is empty.\nC is on the table. B is on C. D is on B. A is on D. A is clear.\nF is on the table. G is on F. E is on G. E is clear.\n\nThe goal is:\nB is on the table. B is clear.\nF is on the table. A is on F. A is clear.\nG is on the table. C is on G. D is on C. E is on D. E is clear.\n",
        "system1_plan": "Move A from D to table | Move D from B to table | Move B from C to table | Move E from G to table | Move G from F to table | Move A from table to F | Move C from table to G | Move D from table to C | Move E from table to D",
        "system1_states": 9,
        "system2_plan_v1": "Moved to state -> Stack 1: [C, B, D, A], Stack 2: [F, G, E] | Plan so far [] | Exploring action Move A from D to E | New state -> Stack 1: [C, B, D], Stack 2: [F, G, E, A] | Exploring action Move B from C to E | New state -> Invalid | Exploring action Move A from D to table | New state -> Stack 1: [A], Stack 2: [C, B, D], Stack 3: [F, G, E] | Exploring action Move E from G to table | New state -> Stack 1: [C, B, D, A], Stack 2: [E], Stack 3: [F, G] | Taking action Move A from D to table | Moved to state -> Stack 1: [A], Stack 2: [C, B, D], Stack 3: [F, G, E] | Plan so far [Move A from D to table] | Exploring action Move D from B to table | New state -> Stack 1: [A], Stack 2: [C, B], Stack 3: [D], Stack 4: [F, G, E] | Exploring action Move E from G to D | New state -> Stack 1: [A], Stack 2: [C, B, D, E], Stack 3: [F, G] | Exploring action Move E from G to table | New state -> Stack 1: [A], Stack 2: [C, B, D], Stack 3: [E], Stack 4: [F, G] | Exploring action Move F from table to D | New state -> Invalid | Taking action Move E from G to table | Moved to state -> Stack 1: [C, B, D, A], Stack 2: [E], Stack 3: [F, G] | Plan so far [Move E from G to table] | Exploring action Move B from C to table | New state -> Invalid | Exploring action Move A from D to table | New state -> Stack 1: [A], Stack 2: [C, B, D], Stack 3: [E], Stack 4: [F, G] | Exploring action Move G from F to A | New state -> Stack 1: [C, B, D, A, G], Stack 2: [E], Stack 3: [F] | Exploring action Move B from C to E | New state -> Invalid | Exploring action Move G from F to table | New state -> Stack 1: [C, B, D, A], Stack 2: [E], Stack 3: [F], Stack 4: [G] | Taking action Move D from B to table | Moved to state -> Stack 1: [A], Stack 2: [C, B], Stack 3: [D], Stack 4: [F, G, E] | Plan so far [Move A from D to table | Move D from B to table] | Exploring action Move G from F to E | New state -> Invalid | Exploring action Move E from G to table | New state -> Stack 1: [A], Stack 2: [C, B], Stack 3: [D], Stack 4: [E], Stack 5: [F, G] | Exploring action Move B from C to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [F, G, E] | Exploring action Move E from G to D | New state -> Stack 1: [A], Stack 2: [C, B], Stack 3: [D, E], Stack 4: [F, G] | Taking action Move B from C to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [F, G, E] | Plan so far [Move A from D to table | Move D from B to table | Move B from C to table] | Exploring action Move F from table to E | New state -> Invalid | Exploring action Move E from G to D | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D, E], Stack 5: [F, G] | Exploring action Move E from G to A | New state -> Stack 1: [A, E], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [F, G] | Exploring action Move F from table to B | New state -> Invalid | Exploring action Move E from G to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F, G] | Taking action Move E from G to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F, G] | Plan so far [Move A from D to table | Move D from B to table | Move B from C to table | Move E from G to table] | Exploring action Move F from table to D | New state -> Invalid | Exploring action Move G from F to C | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, G], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Exploring action Move G from F to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F], Stack 7: [G] | Exploring action Move F from table to A | New state -> Invalid | Exploring action Move E from table to D | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D, E], Stack 5: [F, G] | Taking action Move E from G to D | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D, E], Stack 5: [F, G] | Plan so far [Move A from D to table | Move D from B to table | Move B from C to table | Move E from G to D] | Exploring action Move G from F to C | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, G], Stack 4: [D, E], Stack 5: [F] | Exploring action Move E from D to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F, G] | Exploring action Move G from F to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D, E], Stack 5: [F], Stack 6: [G] | Exploring action Move D from table to G | New state -> Invalid | Taking action Move G from F to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F], Stack 7: [G] | Plan so far [Move A from D to table | Move D from B to table | Move B from C to table | Move E from G to table | Move G from F to table] | Exploring action Move A from table to F | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [F, A], Stack 6: [G] | Exploring action Move E from table to D | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D, E], Stack 5: [F], Stack 6: [G] | Exploring action Move C from table to G | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D], Stack 4: [E], Stack 5: [F], Stack 6: [G, C] | Taking action Move A from table to F | Moved to state -> Stack 1: [B], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [F, A], Stack 6: [G] | Plan so far [Move A from D to table | Move D from B to table | Move B from C to table | Move E from G to table | Move G from F to table | Move A from table to F] | Exploring action Move C from table to G | New state -> Stack 1: [B], Stack 2: [D], Stack 3: [E], Stack 4: [F, A], Stack 5: [G, C] | Exploring action Move G from table to C | New state -> Stack 1: [B], Stack 2: [C, G], Stack 3: [D], Stack 4: [E], Stack 5: [F, A] | Exploring action Move E from table to D | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, E], Stack 4: [F, A], Stack 5: [G] | Exploring action Move F from table to A | New state -> Invalid | Taking action Move C from table to G | Moved to state -> Stack 1: [B], Stack 2: [D], Stack 3: [E], Stack 4: [F, A], Stack 5: [G, C] | Plan so far [Move A from D to table | Move D from B to table | Move B from C to table | Move E from G to table | Move G from F to table | Move A from table to F | Move C from table to G] | Exploring action Move D from table to C | New state -> Stack 1: [B], Stack 2: [E], Stack 3: [F, A], Stack 4: [G, C, D] | Exploring action Move E from table to D | New state -> Stack 1: [B], Stack 2: [D, E], Stack 3: [F, A], Stack 4: [G, C] | Exploring action Move C from G to table | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [F, A], Stack 6: [G] | Exploring action Move F from table to D | New state -> Invalid | Exploring action Move G from table to A | New state -> Invalid | Taking action Move D from table to C | Moved to state -> Stack 1: [B], Stack 2: [E], Stack 3: [F, A], Stack 4: [G, C, D] | Plan so far [Move A from D to table | Move D from B to table | Move B from C to table | Move E from G to table | Move G from F to table | Move A from table to F | Move C from table to G | Move D from table to C] | Exploring action Move B from table to D | New state -> Stack 1: [E], Stack 2: [F, A], Stack 3: [G, C, D, B] | Exploring action Move F from table to B | New state -> Invalid | Exploring action Move D from C to table | New state -> Stack 1: [B], Stack 2: [D], Stack 3: [E], Stack 4: [F, A], Stack 5: [G, C] | Exploring action Move E from table to D | New state -> Stack 1: [B], Stack 2: [F, A], Stack 3: [G, C, D, E] | Taking action Move E from table to D | Moved to state -> Stack 1: [B], Stack 2: [F, A], Stack 3: [G, C, D, E] | Plan so far [Move A from D to table | Move D from B to table | Move B from C to table | Move E from G to table | Move G from F to table | Move A from table to F | Move C from table to G | Move D from table to C | Move E from table to D] | Reached goal state!",
        "system2_states_v1": 47
    },
    {
        "idx": 690,
        "start": [
            [
                "table",
                "A",
                "B",
                "D",
                "C"
            ],
            [
                "table",
                "F",
                "E"
            ]
        ],
        "goal": [
            [
                "table",
                "D",
                "F"
            ],
            [
                "table",
                "E",
                "C",
                "A",
                "B"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": false,
                "on": -1,
                "under": "B",
                "ontable": true
            },
            "B": {
                "clear": false,
                "on": "A",
                "under": "D",
                "ontable": false
            },
            "C": {
                "clear": true,
                "on": "D",
                "under": -1,
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": "B",
                "under": "C",
                "ontable": false
            },
            "E": {
                "clear": true,
                "on": "F",
                "under": -1,
                "ontable": false
            },
            "F": {
                "clear": false,
                "on": -1,
                "under": "E",
                "ontable": true
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": false,
                "on": "C",
                "under": "B",
                "ontable": false
            },
            "B": {
                "clear": true,
                "on": "A",
                "under": -1,
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": "E",
                "under": "A",
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": -1,
                "under": "F",
                "ontable": true
            },
            "E": {
                "clear": false,
                "on": -1,
                "under": "C",
                "ontable": true
            },
            "F": {
                "clear": true,
                "on": "D",
                "under": -1,
                "ontable": false
            }
        },
        "plan_len": 8,
        "num_blocks": 6,
        "prompt": "The initial state:\nThe hand is empty.\nA is on the table. B is on A. D is on B. C is on D. C is clear.\nF is on the table. E is on F. E is clear.\n\nThe goal is:\nD is on the table. F is on D. F is clear.\nE is on the table. C is on E. A is on C. B is on A. B is clear.\n",
        "system1_plan": "Move C from D to table | Move D from B to table | Move E from F to table | Move F from table to D | Move C from table to E | Move B from A to table | Move A from table to C | Move B from table to A",
        "system1_states": 8,
        "system2_plan_v1": "Moved to state -> Stack 1: [A, B, D, C], Stack 2: [F, E] | Plan so far [] | Exploring action Move C from D to E | New state -> Stack 1: [A, B, D], Stack 2: [F, E, C] | Exploring action Move E from F to table | New state -> Stack 1: [A, B, D, C], Stack 2: [E], Stack 3: [F] | Exploring action Move D from B to E | New state -> Invalid | Exploring action Move C from D to table | New state -> Stack 1: [A, B, D], Stack 2: [C], Stack 3: [F, E] | Taking action Move C from D to table | Moved to state -> Stack 1: [A, B, D], Stack 2: [C], Stack 3: [F, E] | Plan so far [Move C from D to table] | Exploring action Move F from table to C | New state -> Invalid | Exploring action Move E from F to table | New state -> Stack 1: [A, B, D], Stack 2: [C], Stack 3: [E], Stack 4: [F] | Exploring action Move D from B to table | New state -> Stack 1: [A, B], Stack 2: [C], Stack 3: [D], Stack 4: [F, E] | Exploring action Move B from A to C | New state -> Invalid | Exploring action Move D from B to C | New state -> Stack 1: [A, B], Stack 2: [C, D], Stack 3: [F, E] | Taking action Move D from B to table | Moved to state -> Stack 1: [A, B], Stack 2: [C], Stack 3: [D], Stack 4: [F, E] | Plan so far [Move C from D to table | Move D from B to table] | Exploring action Move E from F to D | New state -> Stack 1: [A, B], Stack 2: [C], Stack 3: [D, E], Stack 4: [F] | Exploring action Move E from F to C | New state -> Stack 1: [A, B], Stack 2: [C, E], Stack 3: [D], Stack 4: [F] | Exploring action Move E from F to table | New state -> Stack 1: [A, B], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Exploring action Move F from table to C | New state -> Invalid | Exploring action Move A from table to E | New state -> Invalid | Taking action Move E from F to table | Moved to state -> Stack 1: [A, B], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Plan so far [Move C from D to table | Move D from B to table | Move E from F to table] | Exploring action Move A from table to E | New state -> Invalid | Exploring action Move F from table to D | New state -> Stack 1: [A, B], Stack 2: [C], Stack 3: [D, F], Stack 4: [E] | Exploring action Move C from table to E | New state -> Stack 1: [A, B], Stack 2: [D], Stack 3: [E, C], Stack 4: [F] | Exploring action Move B from A to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Taking action Move F from table to D | Moved to state -> Stack 1: [A, B], Stack 2: [C], Stack 3: [D, F], Stack 4: [E] | Plan so far [Move C from D to table | Move D from B to table | Move E from F to table | Move F from table to D] | Exploring action Move D from table to E | New state -> Invalid | Exploring action Move B from A to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D, F], Stack 5: [E] | Exploring action Move C from table to E | New state -> Stack 1: [A, B], Stack 2: [D, F], Stack 3: [E, C] | Exploring action Move B from A to E | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, F], Stack 4: [E, B] | Exploring action Move D from table to B | New state -> Invalid | Taking action Move C from table to E | Moved to state -> Stack 1: [A, B], Stack 2: [D, F], Stack 3: [E, C] | Plan so far [Move C from D to table | Move D from B to table | Move E from F to table | Move F from table to D | Move C from table to E] | Exploring action Move B from A to C | New state -> Stack 1: [A], Stack 2: [D, F], Stack 3: [E, C, B] | Exploring action Move A from table to F | New state -> Invalid | Exploring action Move E from table to C | New state -> Invalid | Exploring action Move C from E to table | New state -> Stack 1: [A, B], Stack 2: [C], Stack 3: [D, F], Stack 4: [E] | Exploring action Move B from A to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, F], Stack 4: [E, C] | Taking action Move C from table to E | Moved to state -> Stack 1: [A, B], Stack 2: [D], Stack 3: [E, C], Stack 4: [F] | Plan so far [Move C from D to table | Move D from B to table | Move E from F to table | Move C from table to E] | Exploring action Move B from A to D | New state -> Stack 1: [A], Stack 2: [D, B], Stack 3: [E, C], Stack 4: [F] | Exploring action Move E from table to D | New state -> Invalid | Exploring action Move B from A to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D], Stack 4: [E, C], Stack 5: [F] | Exploring action Move A from table to D | New state -> Invalid | Exploring action Move F from table to D | New state -> Stack 1: [A, B], Stack 2: [D, F], Stack 3: [E, C] | Taking action Move F from table to D | Moved to state -> Stack 1: [A, B], Stack 2: [D, F], Stack 3: [E, C] | Plan so far [Move C from D to table | Move D from B to table | Move E from F to table | Move C from table to E | Move F from table to D] | Taking action Move B from A to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, F], Stack 4: [E, C] | Plan so far [Move C from D to table | Move D from B to table | Move E from F to table | Move F from table to D | Move C from table to E | Move B from A to table] | Exploring action Move C from E to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D, F], Stack 5: [E] | Exploring action Move B from table to A | New state -> Stack 1: [A, B], Stack 2: [D, F], Stack 3: [E, C] | Exploring action Move E from table to A | New state -> Invalid | Exploring action Move A from table to C | New state -> Stack 1: [B], Stack 2: [D, F], Stack 3: [E, C, A] | Taking action Move B from A to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D, F], Stack 5: [E] | Plan so far [Move C from D to table | Move D from B to table | Move E from F to table | Move F from table to D | Move B from A to table] | Exploring action Move B from table to A | New state -> Stack 1: [A, B], Stack 2: [C], Stack 3: [D, F], Stack 4: [E] | Exploring action Move A from table to E | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, F], Stack 4: [E, A] | Exploring action Move D from table to C | New state -> Invalid | Exploring action Move C from table to E | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, F], Stack 4: [E, C] | Taking action Move A from table to C | Moved to state -> Stack 1: [B], Stack 2: [D, F], Stack 3: [E, C, A] | Plan so far [Move C from D to table | Move D from B to table | Move E from F to table | Move F from table to D | Move C from table to E | Move B from A to table | Move A from table to C] | Exploring action Move F from D to table | New state -> Stack 1: [B], Stack 2: [D], Stack 3: [E, C, A], Stack 4: [F] | Exploring action Move C from E to B | New state -> Invalid | Exploring action Move B from table to A | New state -> Stack 1: [D, F], Stack 2: [E, C, A, B] | Exploring action Move A from C to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, F], Stack 4: [E, C] | Taking action Move B from table to A | Moved to state -> Stack 1: [D, F], Stack 2: [E, C, A, B] | Plan so far [Move C from D to table | Move D from B to table | Move E from F to table | Move F from table to D | Move C from table to E | Move B from A to table | Move A from table to C | Move B from table to A] | Reached goal state!",
        "system2_states_v1": 45
    },
    {
        "idx": 799,
        "start": [
            [
                "table",
                "A",
                "E",
                "C"
            ],
            [
                "table",
                "F",
                "D",
                "B"
            ]
        ],
        "goal": [
            [
                "table",
                "D",
                "F",
                "B",
                "A",
                "E",
                "C"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": false,
                "on": -1,
                "under": "E",
                "ontable": true
            },
            "B": {
                "clear": true,
                "on": "D",
                "under": -1,
                "ontable": false
            },
            "C": {
                "clear": true,
                "on": "E",
                "under": -1,
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": "F",
                "under": "B",
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": "A",
                "under": "C",
                "ontable": false
            },
            "F": {
                "clear": false,
                "on": -1,
                "under": "D",
                "ontable": true
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": false,
                "on": "B",
                "under": "E",
                "ontable": false
            },
            "B": {
                "clear": false,
                "on": "F",
                "under": "A",
                "ontable": false
            },
            "C": {
                "clear": true,
                "on": "E",
                "under": -1,
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": -1,
                "under": "F",
                "ontable": true
            },
            "E": {
                "clear": false,
                "on": "A",
                "under": "C",
                "ontable": false
            },
            "F": {
                "clear": false,
                "on": "D",
                "under": "B",
                "ontable": false
            }
        },
        "plan_len": 9,
        "num_blocks": 6,
        "prompt": "The initial state:\nThe hand is empty.\nA is on the table. E is on A. C is on E. C is clear.\nF is on the table. D is on F. B is on D. B is clear.\n\nThe goal is:\nD is on the table. F is on D. B is on F. A is on B. E is on A. C is on E. C is clear.\n",
        "system1_plan": "Move B from D to table | Move D from F to table | Move F from table to D | Move C from E to table | Move B from table to F | Move E from A to table | Move A from table to B | Move E from table to A | Move C from table to E",
        "system1_states": 9,
        "system2_plan_v1": "Moved to state -> Stack 1: [A, E, C], Stack 2: [F, D, B] | Plan so far [] | Exploring action Move C from E to table | New state -> Stack 1: [A, E], Stack 2: [C], Stack 3: [F, D, B] | Exploring action Move B from D to C | New state -> Stack 1: [A, E, C, B], Stack 2: [F, D] | Exploring action Move B from D to table | New state -> Stack 1: [A, E, C], Stack 2: [B], Stack 3: [F, D] | Exploring action Move D from F to table | New state -> Invalid | Taking action Move B from D to table | Moved to state -> Stack 1: [A, E, C], Stack 2: [B], Stack 3: [F, D] | Plan so far [Move B from D to table] | Exploring action Move D from F to B | New state -> Stack 1: [A, E, C], Stack 2: [B, D], Stack 3: [F] | Exploring action Move B from table to D | New state -> Stack 1: [A, E, C], Stack 2: [F, D, B] | Exploring action Move E from A to D | New state -> Invalid | Exploring action Move D from F to table | New state -> Stack 1: [A, E, C], Stack 2: [B], Stack 3: [D], Stack 4: [F] | Taking action Move D from F to table | Moved to state -> Stack 1: [A, E, C], Stack 2: [B], Stack 3: [D], Stack 4: [F] | Plan so far [Move B from D to table | Move D from F to table] | Exploring action Move B from table to D | New state -> Stack 1: [A, E, C], Stack 2: [D, B], Stack 3: [F] | Exploring action Move B from table to F | New state -> Stack 1: [A, E, C], Stack 2: [D], Stack 3: [F, B] | Exploring action Move F from table to D | New state -> Stack 1: [A, E, C], Stack 2: [B], Stack 3: [D, F] | Exploring action Move E from A to table | New state -> Invalid | Exploring action Move A from table to B | New state -> Invalid | Taking action Move F from table to D | Moved to state -> Stack 1: [A, E, C], Stack 2: [B], Stack 3: [D, F] | Plan so far [Move B from D to table | Move D from F to table | Move F from table to D] | Exploring action Move A from table to C | New state -> Invalid | Exploring action Move F from D to B | New state -> Stack 1: [A, E, C], Stack 2: [B, F], Stack 3: [D] | Exploring action Move B from table to F | New state -> Stack 1: [A, E, C], Stack 2: [D, F, B] | Exploring action Move F from D to table | New state -> Stack 1: [A, E, C], Stack 2: [B], Stack 3: [D], Stack 4: [F] | Taking action Move B from table to F | Moved to state -> Stack 1: [A, E, C], Stack 2: [D, F, B] | Plan so far [Move B from D to table | Move D from F to table | Move F from table to D | Move B from table to F] | Exploring action Move C from E to table | New state -> Stack 1: [A, E], Stack 2: [C], Stack 3: [D, F, B] | Exploring action Move F from D to B | New state -> Invalid | Exploring action Move E from A to B | New state -> Invalid | Exploring action Move B from F to C | New state -> Stack 1: [A, E, C, B], Stack 2: [D, F] | Exploring action Move B from F to table | New state -> Stack 1: [A, E, C], Stack 2: [B], Stack 3: [D, F] | Taking action Move D from F to B | Moved to state -> Stack 1: [A, E, C], Stack 2: [B, D], Stack 3: [F] | Plan so far [Move B from D to table | Move D from F to B] | Exploring action Move B from table to C | New state -> Invalid | Exploring action Move D from B to C | New state -> Stack 1: [A, E, C, D], Stack 2: [B], Stack 3: [F] | Exploring action Move D from B to table | New state -> Stack 1: [A, E, C], Stack 2: [B], Stack 3: [D], Stack 4: [F] | Exploring action Move D from B to F | New state -> Stack 1: [A, E, C], Stack 2: [B], Stack 3: [F, D] | Exploring action Move E from A to C | New state -> Invalid | Taking action Move D from B to table | Moved to state -> Stack 1: [A, E, C], Stack 2: [B], Stack 3: [D], Stack 4: [F] | Plan so far [Move B from D to table | Move D from F to B | Move D from B to table] | Taking action Move B from F to table | Moved to state -> Stack 1: [A, E, C], Stack 2: [B], Stack 3: [D, F] | Plan so far [Move B from D to table | Move D from F to table | Move F from table to D | Move B from table to F | Move B from F to table] | Taking action Move B from table to D | Moved to state -> Stack 1: [A, E, C], Stack 2: [D, B], Stack 3: [F] | Plan so far [Move B from D to table | Move D from F to table | Move B from table to D] | Exploring action Move B from D to F | New state -> Stack 1: [A, E, C], Stack 2: [D], Stack 3: [F, B] | Exploring action Move E from A to B | New state -> Invalid | Exploring action Move B from D to table | New state -> Stack 1: [A, E, C], Stack 2: [B], Stack 3: [D], Stack 4: [F] | Exploring action Move F from table to B | New state -> Stack 1: [A, E, C], Stack 2: [D, B, F] | Exploring action Move D from table to F | New state -> Invalid | Taking action Move B from table to F | Moved to state -> Stack 1: [A, E, C], Stack 2: [D], Stack 3: [F, B] | Plan so far [Move B from D to table | Move D from F to table | Move B from table to F] | Exploring action Move B from F to D | New state -> Stack 1: [A, E, C], Stack 2: [D, B], Stack 3: [F] | Exploring action Move F from table to C | New state -> Invalid | Exploring action Move D from table to B | New state -> Stack 1: [A, E, C], Stack 2: [F, B, D] | Exploring action Move B from F to table | New state -> Stack 1: [A, E, C], Stack 2: [B], Stack 3: [D], Stack 4: [F] | Exploring action Move A from table to B | New state -> Invalid | Taking action Move F from D to table | Moved to state -> Stack 1: [A, E, C], Stack 2: [B], Stack 3: [D], Stack 4: [F] | Plan so far [Move B from D to table | Move D from F to table | Move F from table to D | Move F from D to table] | Taking action Move D from F to C | Moved to state -> Stack 1: [A, E, C, D], Stack 2: [B], Stack 3: [F] | Plan so far [Move B from D to table | Move D from F to C] | Exploring action Move E from A to table | New state -> Invalid | Exploring action Move D from C to F | New state -> Stack 1: [A, E, C], Stack 2: [B], Stack 3: [F, D] | Exploring action Move D from C to B | New state -> Stack 1: [A, E, C], Stack 2: [B, D], Stack 3: [F] | Exploring action Move D from C to table | New state -> Stack 1: [A, E, C], Stack 2: [B], Stack 3: [D], Stack 4: [F] | Exploring action Move E from A to D | New state -> Invalid | Taking action Move D from C to table | Moved to state -> Stack 1: [A, E, C], Stack 2: [B], Stack 3: [D], Stack 4: [F] | Plan so far [Move B from D to table | Move D from F to C | Move D from C to table] | Taking action Move D from table to F | Moved to state -> Stack 1: [A, E, C], Stack 2: [B], Stack 3: [F, D] | Plan so far [Move B from D to table | Move D from F to table | Move D from table to F] | Taking action Move D from C to B | Moved to state -> Stack 1: [A, E, C], Stack 2: [B, D], Stack 3: [F] | Plan so far [Move B from D to table | Move D from F to C | Move D from C to B] | Taking action Move D from C to F | Moved to state -> Stack 1: [A, E, C], Stack 2: [B], Stack 3: [F, D] | Plan so far [Move B from D to table | Move D from F to C | Move D from C to F] | Taking action Move B from F to table | Moved to state -> Stack 1: [A, E, C], Stack 2: [B], Stack 3: [D], Stack 4: [F] | Plan so far [Move B from D to table | Move D from F to table | Move B from table to F | Move B from F to table] | Taking action Move F from table to B | Moved to state -> Stack 1: [A, E, C], Stack 2: [B, F], Stack 3: [D] | Plan so far [Move B from D to table | Move D from F to table | Move F from table to B] | Exploring action Move F from B to table | New state -> Stack 1: [A, E, C], Stack 2: [B], Stack 3: [D], Stack 4: [F] | Exploring action Move A from table to C | New state -> Invalid | Exploring action Move D from table to F | New state -> Stack 1: [A, E, C], Stack 2: [B, F, D] | Exploring action Move F from B to D | New state -> Stack 1: [A, E, C], Stack 2: [B], Stack 3: [D, F] | Taking action Move F from B to D | Moved to state -> Stack 1: [A, E, C], Stack 2: [B], Stack 3: [D, F] | Plan so far [Move B from D to table | Move D from F to table | Move F from table to B | Move F from B to D] | Taking action Move B from D to C | Moved to state -> Stack 1: [A, E, C, B], Stack 2: [F, D] | Plan so far [Move B from D to C] | Exploring action Move E from A to D | New state -> Invalid | Exploring action Move D from F to table | New state -> Stack 1: [A, E, C, B], Stack 2: [D], Stack 3: [F] | Exploring action Move B from C to D | New state -> Stack 1: [A, E, C], Stack 2: [F, D, B] | Exploring action Move A from table to B | New state -> Invalid | Exploring action Move B from C to table | New state -> Stack 1: [A, E, C], Stack 2: [B], Stack 3: [F, D] | Taking action Move B from C to table | Moved to state -> Stack 1: [A, E, C], Stack 2: [B], Stack 3: [F, D] | Plan so far [Move B from D to C | Move B from C to table] | Taking action Move F from B to table | Moved to state -> Stack 1: [A, E, C], Stack 2: [B], Stack 3: [D], Stack 4: [F] | Plan so far [Move B from D to table | Move D from F to table | Move F from table to B | Move F from B to table] | Moved to state -> Stack 1: [A, E, C], Stack 2: [F, D, B] | Plan so far [Move B from D to C | Move B from C to D] | Taking action Move D from F to table | Moved to state -> Stack 1: [A, E, C, B], Stack 2: [D], Stack 3: [F] | Plan so far [Move B from D to C | Move D from F to table] | Exploring action Move B from C to F | New state -> Stack 1: [A, E, C], Stack 2: [D], Stack 3: [F, B] | Exploring action Move F from table to D | New state -> Stack 1: [A, E, C, B], Stack 2: [D, F] | Exploring action Move B from C to table | New state -> Stack 1: [A, E, C], Stack 2: [B], Stack 3: [D], Stack 4: [F] | Exploring action Move E from A to B | New state -> Invalid | Taking action Move B from C to table | Moved to state -> Stack 1: [A, E, C], Stack 2: [B], Stack 3: [D], Stack 4: [F] | Plan so far [Move B from D to C | Move D from F to table | Move B from C to table] | Moved to state -> Stack 1: [A, E, C], Stack 2: [F, D, B] | Plan so far [Move B from D to table | Move B from table to D] | Taking action Move B from C to D | Moved to state -> Stack 1: [A, E, C], Stack 2: [D, B], Stack 3: [F] | Plan so far [Move B from D to C | Move D from F to table | Move B from C to D] | Taking action Move B from C to F | Moved to state -> Stack 1: [A, E, C], Stack 2: [D], Stack 3: [F, B] | Plan so far [Move B from D to C | Move D from F to table | Move B from C to F] | Taking action Move D from B to F | Moved to state -> Stack 1: [A, E, C], Stack 2: [B], Stack 3: [F, D] | Plan so far [Move B from D to table | Move D from F to B | Move D from B to F] | Taking action Move B from D to table | Moved to state -> Stack 1: [A, E, C], Stack 2: [B], Stack 3: [D], Stack 4: [F] | Plan so far [Move B from D to table | Move D from F to table | Move B from table to D | Move B from D to table] | Taking action Move D from table to B | Moved to state -> Stack 1: [A, E, C], Stack 2: [B, D], Stack 3: [F] | Plan so far [Move B from D to table | Move D from F to table | Move D from table to B] | Taking action Move F from table to D | Moved to state -> Stack 1: [A, E, C, B], Stack 2: [D, F] | Plan so far [Move B from D to C | Move D from F to table | Move F from table to D] | Exploring action Move C from E to F | New state -> Invalid | Exploring action Move F from D to table | New state -> Stack 1: [A, E, C, B], Stack 2: [D], Stack 3: [F] | Exploring action Move B from C to F | New state -> Stack 1: [A, E, C], Stack 2: [D, F, B] | Exploring action Move B from C to table | New state -> Stack 1: [A, E, C], Stack 2: [B], Stack 3: [D, F] | Taking action Move B from C to F | Moved to state -> Stack 1: [A, E, C], Stack 2: [D, F, B] | Plan so far [Move B from D to C | Move D from F to table | Move F from table to D | Move B from C to F] | Taking action Move B from C to table | Moved to state -> Stack 1: [A, E, C], Stack 2: [B], Stack 3: [D, F] | Plan so far [Move B from D to C | Move D from F to table | Move F from table to D | Move B from C to table] | Taking action Move D from F to B | Moved to state -> Stack 1: [A, E, C, B, D], Stack 2: [F] | Plan so far [Move B from D to C | Move D from F to B] | Exploring action Move C from E to table | New state -> Invalid | Exploring action Move D from B to table | New state -> Stack 1: [A, E, C, B], Stack 2: [D], Stack 3: [F] | Exploring action Move D from B to F | New state -> Stack 1: [A, E, C, B], Stack 2: [F, D] | Exploring action Move F from table to D | New state -> Stack 1: [A, E, C, B, D, F] | Exploring action Move B from C to table | New state -> Invalid | Taking action Move F from D to B | Moved to state -> Stack 1: [A, E, C], Stack 2: [B, F], Stack 3: [D] | Plan so far [Move B from D to table | Move D from F to table | Move F from table to D | Move F from D to B] | Taking action Move D from table to C | Moved to state -> Stack 1: [A, E, C, D], Stack 2: [B], Stack 3: [F] | Plan so far [Move B from D to table | Move D from F to table | Move D from table to C] | Taking action Move D from B to table | Moved to state -> Stack 1: [A, E, C, B], Stack 2: [D], Stack 3: [F] | Plan so far [Move B from D to C | Move D from F to B | Move D from B to table] | Taking action Move C from E to table | Moved to state -> Stack 1: [A, E], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [F] | Plan so far [Move B from D to table | Move D from F to table | Move C from E to table] | Exploring action Move A from table to F | New state -> Invalid | Exploring action Move C from table to E | New state -> Stack 1: [A, E, C], Stack 2: [B], Stack 3: [D], Stack 4: [F] | Exploring action Move E from A to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Exploring action Move F from table to D | New state -> Stack 1: [A, E], Stack 2: [B], Stack 3: [C], Stack 4: [D, F] | Taking action Move C from table to E | Moved to state -> Stack 1: [A, E, C], Stack 2: [B], Stack 3: [D], Stack 4: [F] | Plan so far [Move B from D to table | Move D from F to table | Move C from E to table | Move C from table to E] | Taking action Move C from E to table | Moved to state -> Stack 1: [A, E], Stack 2: [C], Stack 3: [F, D, B] | Plan so far [Move C from E to table] | Exploring action Move E from A to table | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [E], Stack 4: [F, D, B] | Exploring action Move C from table to E | New state -> Stack 1: [A, E, C], Stack 2: [F, D, B] | Exploring action Move F from table to B | New state -> Invalid | Exploring action Move D from F to table | New state -> Invalid | Exploring action Move B from D to table | New state -> Stack 1: [A, E], Stack 2: [B], Stack 3: [C], Stack 4: [F, D] | Moved to state -> Stack 1: [A, E, C], Stack 2: [F, D, B] | Plan so far [Move C from E to table | Move C from table to E] | Taking action Move F from table to D | Moved to state -> Stack 1: [A, E, C], Stack 2: [B, D, F] | Plan so far [Move B from D to table | Move D from F to B | Move F from table to D] | Exploring action Move F from D to C | New state -> Stack 1: [A, E, C, F], Stack 2: [B, D] | Exploring action Move C from E to table | New state -> Stack 1: [A, E], Stack 2: [B, D, F], Stack 3: [C] | Exploring action Move D from B to table | New state -> Invalid | Exploring action Move F from D to table | New state -> Stack 1: [A, E, C], Stack 2: [B, D], Stack 3: [F] | Taking action Move C from E to table | Moved to state -> Stack 1: [A, E], Stack 2: [B], Stack 3: [C], Stack 4: [F, D] | Plan so far [Move B from D to table | Move C from E to table] | Exploring action Move E from A to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [E], Stack 5: [F, D] | Exploring action Move C from table to E | New state -> Stack 1: [A, E, C], Stack 2: [B], Stack 3: [F, D] | Exploring action Move A from table to B | New state -> Invalid | Exploring action Move D from F to table | New state -> Stack 1: [A, E], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [F] | Exploring action Move A from table to C | New state -> Invalid | Taking action Move C from table to E | Moved to state -> Stack 1: [A, E, C], Stack 2: [B], Stack 3: [F, D] | Plan so far [Move B from D to table | Move C from E to table | Move C from table to E] | Taking action Move C from E to table | Moved to state -> Stack 1: [A, E], Stack 2: [B], Stack 3: [C], Stack 4: [D, F] | Plan so far [Move B from D to table | Move D from F to table | Move F from table to D | Move C from E to table] | Exploring action Move A from table to B | New state -> Invalid | Exploring action Move A from table to C | New state -> Invalid | Exploring action Move B from table to F | New state -> Stack 1: [A, E], Stack 2: [C], Stack 3: [D, F, B] | Exploring action Move E from A to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D, F], Stack 5: [E] | Exploring action Move C from table to E | New state -> Stack 1: [A, E, C], Stack 2: [B], Stack 3: [D, F] | Taking action Move C from table to E | Moved to state -> Stack 1: [A, E, C], Stack 2: [B], Stack 3: [D, F] | Plan so far [Move B from D to table | Move D from F to table | Move F from table to D | Move C from E to table | Move C from table to E] | Taking action Move B from table to C | Moved to state -> Stack 1: [A, E, C, B], Stack 2: [D, F] | Plan so far [Move B from D to table | Move D from F to table | Move F from table to D | Move B from table to C] | Taking action Move B from table to F | Moved to state -> Stack 1: [A, E], Stack 2: [C], Stack 3: [D, F, B] | Plan so far [Move B from D to table | Move D from F to table | Move F from table to D | Move C from E to table | Move B from table to F] | Exploring action Move E from A to B | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, F, B, E] | Exploring action Move C from table to E | New state -> Stack 1: [A, E, C], Stack 2: [D, F, B] | Exploring action Move A from table to B | New state -> Invalid | Exploring action Move D from table to C | New state -> Invalid | Exploring action Move E from A to table | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, F, B], Stack 4: [E] | Taking action Move C from table to E | Moved to state -> Stack 1: [A, E, C], Stack 2: [D, F, B] | Plan so far [Move B from D to table | Move D from F to table | Move F from table to D | Move C from E to table | Move B from table to F | Move C from table to E] | Taking action Move E from A to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D, F], Stack 5: [E] | Plan so far [Move B from D to table | Move D from F to table | Move F from table to D | Move C from E to table | Move E from A to table] | Exploring action Move D from table to B | New state -> Invalid | Exploring action Move C from table to E | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, F], Stack 4: [E, C] | Exploring action Move B from table to F | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, F, B], Stack 4: [E] | Exploring action Move A from table to E | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, F], Stack 4: [E, A] | Taking action Move E from A to table | Moved to state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, F, B], Stack 4: [E] | Plan so far [Move B from D to table | Move D from F to table | Move F from table to D | Move C from E to table | Move B from table to F | Move E from A to table] | Exploring action Move F from D to C | New state -> Invalid | Exploring action Move C from table to E | New state -> Stack 1: [A], Stack 2: [D, F, B], Stack 3: [E, C] | Exploring action Move A from table to E | New state -> Stack 1: [C], Stack 2: [D, F, B], Stack 3: [E, A] | Exploring action Move A from table to B | New state -> Stack 1: [C], Stack 2: [D, F, B, A], Stack 3: [E] | Exploring action Move F from D to E | New state -> Invalid | Taking action Move B from table to F | Moved to state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, F, B], Stack 4: [E] | Plan so far [Move B from D to table | Move D from F to table | Move F from table to D | Move C from E to table | Move E from A to table | Move B from table to F] | Taking action Move F from table to C | Moved to state -> Stack 1: [A, E, C, F], Stack 2: [B], Stack 3: [D] | Plan so far [Move B from D to table | Move D from F to table | Move F from table to C] | Exploring action Move E from A to F | New state -> Invalid | Exploring action Move F from C to B | New state -> Stack 1: [A, E, C], Stack 2: [B, F], Stack 3: [D] | Exploring action Move F from C to table | New state -> Stack 1: [A, E, C], Stack 2: [B], Stack 3: [D], Stack 4: [F] | Exploring action Move F from C to D | New state -> Stack 1: [A, E, C], Stack 2: [B], Stack 3: [D, F] | Taking action Move F from C to D | Moved to state -> Stack 1: [A, E, C], Stack 2: [B], Stack 3: [D, F] | Plan so far [Move B from D to table | Move D from F to table | Move F from table to C | Move F from C to D] | Taking action Move F from C to table | Moved to state -> Stack 1: [A, E, C], Stack 2: [B], Stack 3: [D], Stack 4: [F] | Plan so far [Move B from D to table | Move D from F to table | Move F from table to C | Move F from C to table] | Taking action Move D from F to table | Moved to state -> Stack 1: [A, E], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [F] | Plan so far [Move B from D to table | Move C from E to table | Move D from F to table] | Taking action Move B from F to D | Moved to state -> Stack 1: [A, E, C], Stack 2: [D, B], Stack 3: [F] | Plan so far [Move B from D to table | Move D from F to table | Move B from table to F | Move B from F to D] | Taking action Move F from D to table | Moved to state -> Stack 1: [A, E, C], Stack 2: [B, D], Stack 3: [F] | Plan so far [Move B from D to table | Move D from F to B | Move F from table to D | Move F from D to table] | Taking action Move B from table to C | Moved to state -> Stack 1: [A, E, C, B], Stack 2: [F, D] | Plan so far [Move B from D to table | Move B from table to C] | Taking action Move B from D to F | Moved to state -> Stack 1: [A, E, C], Stack 2: [D], Stack 3: [F, B] | Plan so far [Move B from D to table | Move D from F to table | Move B from table to D | Move B from D to F] | Taking action Move E from A to table | Moved to state -> Stack 1: [A], Stack 2: [C], Stack 3: [E], Stack 4: [F, D, B] | Plan so far [Move C from E to table | Move E from A to table] | Exploring action Move B from D to C | New state -> Stack 1: [A], Stack 2: [C, B], Stack 3: [E], Stack 4: [F, D] | Exploring action Move B from D to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [E], Stack 5: [F, D] | Exploring action Move F from table to B | New state -> Invalid | Exploring action Move B from D to E | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [E, B], Stack 4: [F, D] | Taking action Move E from A to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [E], Stack 5: [F, D] | Plan so far [Move B from D to table | Move C from E to table | Move E from A to table] | Exploring action Move D from F to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Exploring action Move F from table to A | New state -> Invalid | Exploring action Move D from F to A | New state -> Stack 1: [A, D], Stack 2: [B], Stack 3: [C], Stack 4: [E], Stack 5: [F] | Exploring action Move C from table to E | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [E, C], Stack 4: [F, D] | Taking action Move B from table to C | Moved to state -> Stack 1: [A, E, C, B], Stack 2: [D], Stack 3: [F] | Plan so far [Move B from D to table | Move D from F to table | Move B from table to C] | Taking action Move B from D to table | Moved to state -> Stack 1: [A, E], Stack 2: [B], Stack 3: [C], Stack 4: [F, D] | Plan so far [Move C from E to table | Move B from D to table] | Taking action Move D from F to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Plan so far [Move B from D to table | Move C from E to table | Move E from A to table | Move D from F to table] | Exploring action Move F from table to D | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D, F], Stack 5: [E] | Exploring action Move C from table to E | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D], Stack 4: [E, C], Stack 5: [F] | Exploring action Move A from table to B | New state -> Stack 1: [B, A], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Taking action Move D from B to C | Moved to state -> Stack 1: [A, E, C, D], Stack 2: [B], Stack 3: [F] | Plan so far [Move B from D to table | Move D from F to B | Move D from B to C] | Taking action Move F from table to D | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D, F], Stack 5: [E] | Plan so far [Move B from D to table | Move C from E to table | Move E from A to table | Move D from F to table | Move F from table to D] | Taking action Move F from table to D | Moved to state -> Stack 1: [A, E], Stack 2: [B], Stack 3: [C], Stack 4: [D, F] | Plan so far [Move B from D to table | Move D from F to table | Move C from E to table | Move F from table to D] | Taking action Move F from C to B | Moved to state -> Stack 1: [A, E, C], Stack 2: [B, F], Stack 3: [D] | Plan so far [Move B from D to table | Move D from F to table | Move F from table to C | Move F from C to B] | Taking action Move B from D to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [E], Stack 5: [F, D] | Plan so far [Move C from E to table | Move E from A to table | Move B from D to table] | Taking action Move C from E to table | Moved to state -> Stack 1: [A, E], Stack 2: [C], Stack 3: [D, F, B] | Plan so far [Move B from D to table | Move D from F to table | Move F from table to D | Move B from table to F | Move C from E to table] | Taking action Move E from A to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Plan so far [Move B from D to table | Move D from F to table | Move C from E to table | Move E from A to table] | Taking action Move A from table to B | Moved to state -> Stack 1: [C], Stack 2: [D, F, B, A], Stack 3: [E] | Plan so far [Move B from D to table | Move D from F to table | Move F from table to D | Move C from E to table | Move B from table to F | Move E from A to table | Move A from table to B] | Exploring action Move F from D to A | New state -> Invalid | Exploring action Move C from table to E | New state -> Stack 1: [D, F, B, A], Stack 2: [E, C] | Exploring action Move F from D to table | New state -> Invalid | Exploring action Move E from table to A | New state -> Stack 1: [C], Stack 2: [D, F, B, A, E] | Exploring action Move E from table to C | New state -> Stack 1: [C, E], Stack 2: [D, F, B, A] | Taking action Move E from table to A | Moved to state -> Stack 1: [C], Stack 2: [D, F, B, A, E] | Plan so far [Move B from D to table | Move D from F to table | Move F from table to D | Move C from E to table | Move B from table to F | Move E from A to table | Move A from table to B | Move E from table to A] | Exploring action Move D from table to E | New state -> Invalid | Exploring action Move A from B to E | New state -> Invalid | Exploring action Move E from A to C | New state -> Stack 1: [C, E], Stack 2: [D, F, B, A] | Exploring action Move E from A to table | New state -> Stack 1: [C], Stack 2: [D, F, B, A], Stack 3: [E] | Exploring action Move C from table to E | New state -> Stack 1: [D, F, B, A, E, C] | Taking action Move C from table to E | Moved to state -> Stack 1: [D, F, B, A, E, C] | Plan so far [Move B from D to table | Move D from F to table | Move F from table to D | Move C from E to table | Move B from table to F | Move E from A to table | Move A from table to B | Move E from table to A | Move C from table to E] | Reached goal state!",
        "system2_states_v1": 126
    },
    {
        "idx": 884,
        "start": [
            [
                "table",
                "C",
                "B",
                "G"
            ],
            [
                "table",
                "D",
                "E",
                "A",
                "F"
            ]
        ],
        "goal": [
            [
                "table",
                "B",
                "G",
                "F",
                "D",
                "C"
            ],
            [
                "table",
                "E",
                "A"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": false,
                "on": "E",
                "under": "F",
                "ontable": false
            },
            "B": {
                "clear": false,
                "on": "C",
                "under": "G",
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": -1,
                "under": "B",
                "ontable": true
            },
            "D": {
                "clear": false,
                "on": -1,
                "under": "E",
                "ontable": true
            },
            "E": {
                "clear": false,
                "on": "D",
                "under": "A",
                "ontable": false
            },
            "F": {
                "clear": true,
                "on": "A",
                "under": -1,
                "ontable": false
            },
            "G": {
                "clear": true,
                "on": "B",
                "under": -1,
                "ontable": false
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": true,
                "on": "E",
                "under": -1,
                "ontable": false
            },
            "B": {
                "clear": false,
                "on": -1,
                "under": "G",
                "ontable": true
            },
            "C": {
                "clear": true,
                "on": "D",
                "under": -1,
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": "F",
                "under": "C",
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": -1,
                "under": "A",
                "ontable": true
            },
            "F": {
                "clear": false,
                "on": "G",
                "under": "D",
                "ontable": false
            },
            "G": {
                "clear": false,
                "on": "B",
                "under": "F",
                "ontable": false
            }
        },
        "plan_len": 10,
        "num_blocks": 7,
        "prompt": "The initial state:\nThe hand is empty.\nC is on the table. B is on C. G is on B. G is clear.\nD is on the table. E is on D. A is on E. F is on A. F is clear.\n\nThe goal is:\nB is on the table. G is on B. F is on G. D is on F. C is on D. C is clear.\nE is on the table. A is on E. A is clear.\n",
        "system1_plan": "Move F from A to table | Move A from E to table | Move E from D to table | Move A from table to E | Move G from B to table | Move B from C to table | Move G from table to B | Move F from table to G | Move D from table to F | Move C from table to D",
        "system1_states": 10,
        "system2_plan_v1": "Moved to state -> Stack 1: [C, B, G], Stack 2: [D, E, A, F] | Plan so far [] | Exploring action Move F from A to G | New state -> Stack 1: [C, B, G, F], Stack 2: [D, E, A] | Exploring action Move G from B to table | New state -> Stack 1: [C, B], Stack 2: [D, E, A, F], Stack 3: [G] | Exploring action Move E from D to F | New state -> Invalid | Exploring action Move F from A to table | New state -> Stack 1: [C, B, G], Stack 2: [D, E, A], Stack 3: [F] | Taking action Move F from A to G | Moved to state -> Stack 1: [C, B, G, F], Stack 2: [D, E, A] | Plan so far [Move F from A to G] | Exploring action Move G from B to F | New state -> Invalid | Exploring action Move D from table to F | New state -> Invalid | Exploring action Move A from E to F | New state -> Stack 1: [C, B, G, F, A], Stack 2: [D, E] | Exploring action Move A from E to table | New state -> Stack 1: [A], Stack 2: [C, B, G, F], Stack 3: [D, E] | Exploring action Move F from G to table | New state -> Stack 1: [C, B, G], Stack 2: [D, E, A], Stack 3: [F] | Taking action Move F from A to table | Moved to state -> Stack 1: [C, B, G], Stack 2: [D, E, A], Stack 3: [F] | Plan so far [Move F from A to table] | Exploring action Move E from D to A | New state -> Invalid | Exploring action Move F from table to G | New state -> Stack 1: [C, B, G, F], Stack 2: [D, E, A] | Exploring action Move G from B to table | New state -> Stack 1: [C, B], Stack 2: [D, E, A], Stack 3: [F], Stack 4: [G] | Exploring action Move C from table to A | New state -> Invalid | Exploring action Move A from E to table | New state -> Stack 1: [A], Stack 2: [C, B, G], Stack 3: [D, E], Stack 4: [F] | Taking action Move A from E to table | Moved to state -> Stack 1: [A], Stack 2: [C, B, G, F], Stack 3: [D, E] | Plan so far [Move F from A to G | Move A from E to table] | Exploring action Move D from table to A | New state -> Invalid | Exploring action Move B from C to E | New state -> Invalid | Exploring action Move E from D to A | New state -> Stack 1: [A, E], Stack 2: [C, B, G, F], Stack 3: [D] | Exploring action Move E from D to table | New state -> Stack 1: [A], Stack 2: [C, B, G, F], Stack 3: [D], Stack 4: [E] | Exploring action Move A from table to E | New state -> Stack 1: [C, B, G, F], Stack 2: [D, E, A] | Taking action Move G from B to table | Moved to state -> Stack 1: [C, B], Stack 2: [D, E, A], Stack 3: [F], Stack 4: [G] | Plan so far [Move F from A to table | Move G from B to table] | Exploring action Move B from C to F | New state -> Stack 1: [C], Stack 2: [D, E, A], Stack 3: [F, B], Stack 4: [G] | Exploring action Move A from E to table | New state -> Stack 1: [A], Stack 2: [C, B], Stack 3: [D, E], Stack 4: [F], Stack 5: [G] | Exploring action Move E from D to B | New state -> Invalid | Exploring action Move B from C to table | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, E, A], Stack 4: [F], Stack 5: [G] | Taking action Move F from table to G | Moved to state -> Stack 1: [C, B, G, F], Stack 2: [D, E, A] | Plan so far [Move F from A to table | Move F from table to G] | Taking action Move B from C to table | Moved to state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, E, A], Stack 4: [F], Stack 5: [G] | Plan so far [Move F from A to table | Move G from B to table | Move B from C to table] | Exploring action Move D from table to G | New state -> Invalid | Exploring action Move A from E to C | New state -> Stack 1: [B], Stack 2: [C, A], Stack 3: [D, E], Stack 4: [F], Stack 5: [G] | Exploring action Move A from E to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D, E], Stack 5: [F], Stack 6: [G] | Exploring action Move E from D to C | New state -> Invalid | Exploring action Move G from table to B | New state -> Stack 1: [B, G], Stack 2: [C], Stack 3: [D, E, A], Stack 4: [F] | Taking action Move E from D to table | Moved to state -> Stack 1: [A], Stack 2: [C, B, G, F], Stack 3: [D], Stack 4: [E] | Plan so far [Move F from A to G | Move A from E to table | Move E from D to table] | Exploring action Move C from table to E | New state -> Invalid | Exploring action Move A from table to E | New state -> Stack 1: [C, B, G, F], Stack 2: [D], Stack 3: [E, A] | Exploring action Move C from table to F | New state -> Invalid | Exploring action Move D from table to F | New state -> Stack 1: [A], Stack 2: [C, B, G, F, D], Stack 3: [E] | Exploring action Move E from table to A | New state -> Stack 1: [A, E], Stack 2: [C, B, G, F], Stack 3: [D] | Taking action Move A from table to E | Moved to state -> Stack 1: [C, B, G, F], Stack 2: [D], Stack 3: [E, A] | Plan so far [Move F from A to G | Move A from E to table | Move E from D to table | Move A from table to E] | Exploring action Move D from table to F | New state -> Stack 1: [C, B, G, F, D], Stack 2: [E, A] | Exploring action Move F from G to table | New state -> Stack 1: [C, B, G], Stack 2: [D], Stack 3: [E, A], Stack 4: [F] | Exploring action Move C from table to D | New state -> Invalid | Exploring action Move A from E to table | New state -> Stack 1: [A], Stack 2: [C, B, G, F], Stack 3: [D], Stack 4: [E] | Exploring action Move E from table to F | New state -> Invalid | Taking action Move D from table to F | Moved to state -> Stack 1: [C, B, G, F, D], Stack 2: [E, A] | Plan so far [Move F from A to G | Move A from E to table | Move E from D to table | Move A from table to E | Move D from table to F] | Exploring action Move A from E to table | New state -> Stack 1: [A], Stack 2: [C, B, G, F, D], Stack 3: [E] | Exploring action Move A from E to D | New state -> Stack 1: [C, B, G, F, D, A], Stack 2: [E] | Exploring action Move B from C to table | New state -> Invalid | Exploring action Move D from F to table | New state -> Stack 1: [C, B, G, F], Stack 2: [D], Stack 3: [E, A] | Exploring action Move G from B to table | New state -> Invalid | Taking action Move D from table to F | Moved to state -> Stack 1: [A], Stack 2: [C, B, G, F, D], Stack 3: [E] | Plan so far [Move F from A to G | Move A from E to table | Move E from D to table | Move D from table to F] | Exploring action Move F from G to A | New state -> Invalid | Exploring action Move D from F to table | New state -> Stack 1: [A], Stack 2: [C, B, G, F], Stack 3: [D], Stack 4: [E] | Exploring action Move E from table to A | New state -> Stack 1: [A, E], Stack 2: [C, B, G, F, D] | Exploring action Move A from table to E | New state -> Stack 1: [C, B, G, F, D], Stack 2: [E, A] | Exploring action Move F from G to table | New state -> Invalid | Taking action Move A from table to E | Moved to state -> Stack 1: [C, B, G, F, D], Stack 2: [E, A] | Plan so far [Move F from A to G | Move A from E to table | Move E from D to table | Move D from table to F | Move A from table to E] | Taking action Move G from table to B | Moved to state -> Stack 1: [B, G], Stack 2: [C], Stack 3: [D, E, A], Stack 4: [F] | Plan so far [Move F from A to table | Move G from B to table | Move B from C to table | Move G from table to B] | Exploring action Move A from E to table | New state -> Stack 1: [A], Stack 2: [B, G], Stack 3: [C], Stack 4: [D, E], Stack 5: [F] | Exploring action Move A from E to F | New state -> Stack 1: [B, G], Stack 2: [C], Stack 3: [D, E], Stack 4: [F, A] | Exploring action Move E from D to F | New state -> Invalid | Exploring action Move D from table to C | New state -> Invalid | Exploring action Move F from table to G | New state -> Stack 1: [B, G, F], Stack 2: [C], Stack 3: [D, E, A] | Taking action Move F from table to G | Moved to state -> Stack 1: [B, G, F], Stack 2: [C], Stack 3: [D, E, A] | Plan so far [Move F from A to table | Move G from B to table | Move B from C to table | Move G from table to B | Move F from table to G] | Exploring action Move A from E to table | New state -> Stack 1: [A], Stack 2: [B, G, F], Stack 3: [C], Stack 4: [D, E] | Exploring action Move F from G to table | New state -> Stack 1: [B, G], Stack 2: [C], Stack 3: [D, E, A], Stack 4: [F] | Exploring action Move G from B to table | New state -> Invalid | Exploring action Move A from E to F | New state -> Stack 1: [B, G, F, A], Stack 2: [C], Stack 3: [D, E] | Taking action Move A from table to E | Moved to state -> Stack 1: [C, B, G, F], Stack 2: [D, E, A] | Plan so far [Move F from A to G | Move A from E to table | Move A from table to E] | Taking action Move G from B to F | Moved to state -> Stack 1: [C, B], Stack 2: [D, E, A], Stack 3: [F, G] | Plan so far [Move F from A to table | Move G from B to F] | Exploring action Move G from F to table | New state -> Stack 1: [C, B], Stack 2: [D, E, A], Stack 3: [F], Stack 4: [G] | Exploring action Move B from C to G | New state -> Stack 1: [C], Stack 2: [D, E, A], Stack 3: [F, G, B] | Exploring action Move B from C to table | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, E, A], Stack 4: [F, G] | Exploring action Move C from table to A | New state -> Invalid | Exploring action Move E from D to A | New state -> Invalid | Taking action Move B from C to F | Moved to state -> Stack 1: [C], Stack 2: [D, E, A], Stack 3: [F, B], Stack 4: [G] | Plan so far [Move F from A to table | Move G from B to table | Move B from C to F] | Exploring action Move B from F to table | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, E, A], Stack 4: [F], Stack 5: [G] | Exploring action Move B from F to C | New state -> Stack 1: [C, B], Stack 2: [D, E, A], Stack 3: [F], Stack 4: [G] | Exploring action Move E from D to G | New state -> Invalid | Exploring action Move A from E to table | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, E], Stack 4: [F, B], Stack 5: [G] | Taking action Move A from E to table | Moved to state -> Stack 1: [A], Stack 2: [C, B, G], Stack 3: [D, E], Stack 4: [F] | Plan so far [Move F from A to table | Move A from E to table] | Exploring action Move C from table to F | New state -> Invalid | Exploring action Move E from D to table | New state -> Stack 1: [A], Stack 2: [C, B, G], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Exploring action Move G from B to table | New state -> Stack 1: [A], Stack 2: [C, B], Stack 3: [D, E], Stack 4: [F], Stack 5: [G] | Exploring action Move D from table to E | New state -> Invalid | Exploring action Move F from table to G | New state -> Stack 1: [A], Stack 2: [C, B, G, F], Stack 3: [D, E] | Taking action Move G from B to table | Moved to state -> Stack 1: [C, B], Stack 2: [D, E, A, F], Stack 3: [G] | Plan so far [Move G from B to table] | Exploring action Move D from table to F | New state -> Invalid | Exploring action Move B from C to table | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, E, A, F], Stack 4: [G] | Exploring action Move F from A to G | New state -> Stack 1: [C, B], Stack 2: [D, E, A], Stack 3: [G, F] | Exploring action Move F from A to table | New state -> Stack 1: [C, B], Stack 2: [D, E, A], Stack 3: [F], Stack 4: [G] | Taking action Move F from A to table | Moved to state -> Stack 1: [C, B], Stack 2: [D, E, A], Stack 3: [F], Stack 4: [G] | Plan so far [Move G from B to table | Move F from A to table] | Taking action Move E from D to table | Moved to state -> Stack 1: [A], Stack 2: [C, B, G], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Plan so far [Move F from A to table | Move A from E to table | Move E from D to table] | Exploring action Move B from C to G | New state -> Invalid | Exploring action Move A from table to E | New state -> Stack 1: [C, B, G], Stack 2: [D], Stack 3: [E, A], Stack 4: [F] | Exploring action Move G from B to table | New state -> Stack 1: [A], Stack 2: [C, B], Stack 3: [D], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Exploring action Move F from table to G | New state -> Stack 1: [A], Stack 2: [C, B, G, F], Stack 3: [D], Stack 4: [E] | Taking action Move A from table to E | Moved to state -> Stack 1: [C, B, G], Stack 2: [D], Stack 3: [E, A], Stack 4: [F] | Plan so far [Move F from A to table | Move A from E to table | Move E from D to table | Move A from table to E] | Exploring action Move F from table to G | New state -> Stack 1: [C, B, G, F], Stack 2: [D], Stack 3: [E, A] | Exploring action Move G from B to D | New state -> Stack 1: [C, B], Stack 2: [D, G], Stack 3: [E, A], Stack 4: [F] | Exploring action Move G from B to table | New state -> Stack 1: [C, B], Stack 2: [D], Stack 3: [E, A], Stack 4: [F], Stack 5: [G] | Exploring action Move E from table to D | New state -> Invalid | Exploring action Move E from table to F | New state -> Invalid | Taking action Move F from table to G | Moved to state -> Stack 1: [C, B, G, F], Stack 2: [D], Stack 3: [E, A] | Plan so far [Move F from A to table | Move A from E to table | Move E from D to table | Move A from table to E | Move F from table to G] | Taking action Move G from B to table | Moved to state -> Stack 1: [C, B], Stack 2: [D], Stack 3: [E, A], Stack 4: [F], Stack 5: [G] | Plan so far [Move F from A to table | Move A from E to table | Move E from D to table | Move A from table to E | Move G from B to table] | Exploring action Move B from C to G | New state -> Stack 1: [C], Stack 2: [D], Stack 3: [E, A], Stack 4: [F], Stack 5: [G, B] | Exploring action Move B from C to D | New state -> Stack 1: [C], Stack 2: [D, B], Stack 3: [E, A], Stack 4: [F], Stack 5: [G] | Exploring action Move C from table to F | New state -> Invalid | Exploring action Move E from table to A | New state -> Invalid | Exploring action Move B from C to table | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D], Stack 4: [E, A], Stack 5: [F], Stack 6: [G] | Taking action Move B from C to table | Moved to state -> Stack 1: [B], Stack 2: [C], Stack 3: [D], Stack 4: [E, A], Stack 5: [F], Stack 6: [G] | Plan so far [Move F from A to table | Move A from E to table | Move E from D to table | Move A from table to E | Move G from B to table | Move B from C to table] | Exploring action Move E from table to A | New state -> Invalid | Exploring action Move C from table to D | New state -> Stack 1: [B], Stack 2: [D, C], Stack 3: [E, A], Stack 4: [F], Stack 5: [G] | Exploring action Move B from table to C | New state -> Stack 1: [C, B], Stack 2: [D], Stack 3: [E, A], Stack 4: [F], Stack 5: [G] | Exploring action Move G from table to B | New state -> Stack 1: [B, G], Stack 2: [C], Stack 3: [D], Stack 4: [E, A], Stack 5: [F] | Taking action Move G from table to B | Moved to state -> Stack 1: [B, G], Stack 2: [C], Stack 3: [D], Stack 4: [E, A], Stack 5: [F] | Plan so far [Move F from A to table | Move A from E to table | Move E from D to table | Move A from table to E | Move G from B to table | Move B from C to table | Move G from table to B] | Exploring action Move F from table to G | New state -> Stack 1: [B, G, F], Stack 2: [C], Stack 3: [D], Stack 4: [E, A] | Exploring action Move D from table to F | New state -> Stack 1: [B, G], Stack 2: [C], Stack 3: [E, A], Stack 4: [F, D] | Exploring action Move C from table to D | New state -> Stack 1: [B, G], Stack 2: [D, C], Stack 3: [E, A], Stack 4: [F] | Exploring action Move B from table to G | New state -> Invalid | Taking action Move F from table to G | Moved to state -> Stack 1: [B, G, F], Stack 2: [C], Stack 3: [D], Stack 4: [E, A] | Plan so far [Move F from A to table | Move A from E to table | Move E from D to table | Move A from table to E | Move G from B to table | Move B from C to table | Move G from table to B | Move F from table to G] | Exploring action Move G from B to A | New state -> Invalid | Exploring action Move G from B to D | New state -> Invalid | Exploring action Move C from table to D | New state -> Stack 1: [B, G, F], Stack 2: [D, C], Stack 3: [E, A] | Exploring action Move D from table to F | New state -> Stack 1: [B, G, F, D], Stack 2: [C], Stack 3: [E, A] | Exploring action Move C from table to F | New state -> Stack 1: [B, G, F, C], Stack 2: [D], Stack 3: [E, A] | Taking action Move D from table to F | Moved to state -> Stack 1: [B, G, F, D], Stack 2: [C], Stack 3: [E, A] | Plan so far [Move F from A to table | Move A from E to table | Move E from D to table | Move A from table to E | Move G from B to table | Move B from C to table | Move G from table to B | Move F from table to G | Move D from table to F] | Exploring action Move F from G to D | New state -> Invalid | Exploring action Move D from F to table | New state -> Stack 1: [B, G, F], Stack 2: [C], Stack 3: [D], Stack 4: [E, A] | Exploring action Move C from table to D | New state -> Stack 1: [B, G, F, D, C], Stack 2: [E, A] | Exploring action Move A from E to table | New state -> Stack 1: [A], Stack 2: [B, G, F, D], Stack 3: [C], Stack 4: [E] | Exploring action Move F from G to A | New state -> Invalid | Taking action Move C from table to D | Moved to state -> Stack 1: [B, G, F, D, C], Stack 2: [E, A] | Plan so far [Move F from A to table | Move A from E to table | Move E from D to table | Move A from table to E | Move G from B to table | Move B from C to table | Move G from table to B | Move F from table to G | Move D from table to F | Move C from table to D] | Reached goal state!",
        "system2_states_v1": 107
    },
    {
        "idx": 782,
        "start": [
            [
                "table",
                "C",
                "A",
                "B",
                "D",
                "E",
                "F"
            ]
        ],
        "goal": [
            [
                "table",
                "A",
                "F"
            ],
            [
                "table",
                "B",
                "D",
                "C",
                "E"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": false,
                "on": "C",
                "under": "B",
                "ontable": false
            },
            "B": {
                "clear": false,
                "on": "A",
                "under": "D",
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": -1,
                "under": "A",
                "ontable": true
            },
            "D": {
                "clear": false,
                "on": "B",
                "under": "E",
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": "D",
                "under": "F",
                "ontable": false
            },
            "F": {
                "clear": true,
                "on": "E",
                "under": -1,
                "ontable": false
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": false,
                "on": -1,
                "under": "F",
                "ontable": true
            },
            "B": {
                "clear": false,
                "on": -1,
                "under": "D",
                "ontable": true
            },
            "C": {
                "clear": false,
                "on": "D",
                "under": "E",
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": "B",
                "under": "C",
                "ontable": false
            },
            "E": {
                "clear": true,
                "on": "C",
                "under": -1,
                "ontable": false
            },
            "F": {
                "clear": true,
                "on": "A",
                "under": -1,
                "ontable": false
            }
        },
        "plan_len": 9,
        "num_blocks": 6,
        "prompt": "The initial state:\nThe hand is empty.\nC is on the table. A is on C. B is on A. D is on B. E is on D. F is on E. F is clear.\n\nThe goal is:\nA is on the table. F is on A. F is clear.\nB is on the table. D is on B. C is on D. E is on C. E is clear.\n",
        "system1_plan": "Move F from E to table | Move E from D to table | Move D from B to table | Move B from A to table | Move A from C to table | Move F from table to A | Move D from table to B | Move C from table to D | Move E from table to C",
        "system1_states": 9,
        "system2_plan_v1": "Moved to state -> Stack 1: [C, A, B, D, E, F] | Plan so far [] | Exploring action Move E from D to F | New state -> Invalid | Exploring action Move F from E to table | New state -> Stack 1: [C, A, B, D, E], Stack 2: [F] | Taking action Move F from E to table | Moved to state -> Stack 1: [C, A, B, D, E], Stack 2: [F] | Plan so far [Move F from E to table] | Exploring action Move D from B to F | New state -> Invalid | Exploring action Move E from D to table | New state -> Stack 1: [C, A, B, D], Stack 2: [E], Stack 3: [F] | Exploring action Move C from table to F | New state -> Invalid | Exploring action Move E from D to F | New state -> Stack 1: [C, A, B, D], Stack 2: [F, E] | Exploring action Move F from table to E | New state -> Stack 1: [C, A, B, D, E, F] | Taking action Move E from D to table | Moved to state -> Stack 1: [C, A, B, D], Stack 2: [E], Stack 3: [F] | Plan so far [Move F from E to table | Move E from D to table] | Exploring action Move D from B to E | New state -> Stack 1: [C, A, B], Stack 2: [E, D], Stack 3: [F] | Exploring action Move D from B to F | New state -> Stack 1: [C, A, B], Stack 2: [E], Stack 3: [F, D] | Exploring action Move A from C to D | New state -> Invalid | Exploring action Move D from B to table | New state -> Stack 1: [C, A, B], Stack 2: [D], Stack 3: [E], Stack 4: [F] | Taking action Move D from B to table | Moved to state -> Stack 1: [C, A, B], Stack 2: [D], Stack 3: [E], Stack 4: [F] | Plan so far [Move F from E to table | Move E from D to table | Move D from B to table] | Exploring action Move B from A to E | New state -> Stack 1: [C, A], Stack 2: [D], Stack 3: [E, B], Stack 4: [F] | Exploring action Move B from A to table | New state -> Stack 1: [B], Stack 2: [C, A], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Exploring action Move C from table to D | New state -> Invalid | Exploring action Move B from A to D | New state -> Stack 1: [C, A], Stack 2: [D, B], Stack 3: [E], Stack 4: [F] | Taking action Move B from A to table | Moved to state -> Stack 1: [B], Stack 2: [C, A], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Plan so far [Move F from E to table | Move E from D to table | Move D from B to table | Move B from A to table] | Exploring action Move C from table to E | New state -> Invalid | Exploring action Move A from C to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Exploring action Move C from table to B | New state -> Invalid | Exploring action Move D from table to B | New state -> Stack 1: [B, D], Stack 2: [C, A], Stack 3: [E], Stack 4: [F] | Exploring action Move A from C to D | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, A], Stack 4: [E], Stack 5: [F] | Taking action Move A from C to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Plan so far [Move F from E to table | Move E from D to table | Move D from B to table | Move B from A to table | Move A from C to table] | Exploring action Move D from table to B | New state -> Stack 1: [A], Stack 2: [B, D], Stack 3: [C], Stack 4: [E], Stack 5: [F] | Exploring action Move E from table to C | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, E], Stack 4: [D], Stack 5: [F] | Exploring action Move F from table to A | New state -> Stack 1: [A, F], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Taking action Move F from table to A | Moved to state -> Stack 1: [A, F], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Plan so far [Move F from E to table | Move E from D to table | Move D from B to table | Move B from A to table | Move A from C to table | Move F from table to A] | Exploring action Move D from table to B | New state -> Stack 1: [A, F], Stack 2: [B, D], Stack 3: [C], Stack 4: [E] | Exploring action Move E from table to C | New state -> Stack 1: [A, F], Stack 2: [B], Stack 3: [C, E], Stack 4: [D] | Exploring action Move A from table to F | New state -> Invalid | Exploring action Move A from table to E | New state -> Invalid | Exploring action Move B from table to E | New state -> Stack 1: [A, F], Stack 2: [C], Stack 3: [D], Stack 4: [E, B] | Taking action Move D from table to B | Moved to state -> Stack 1: [A, F], Stack 2: [B, D], Stack 3: [C], Stack 4: [E] | Plan so far [Move F from E to table | Move E from D to table | Move D from B to table | Move B from A to table | Move A from C to table | Move F from table to A | Move D from table to B] | Exploring action Move E from table to C | New state -> Stack 1: [A, F], Stack 2: [B, D], Stack 3: [C, E] | Exploring action Move C from table to D | New state -> Stack 1: [A, F], Stack 2: [B, D, C], Stack 3: [E] | Exploring action Move B from table to E | New state -> Invalid | Exploring action Move C from table to E | New state -> Stack 1: [A, F], Stack 2: [B, D], Stack 3: [E, C] | Exploring action Move A from table to D | New state -> Invalid | Taking action Move C from table to D | Moved to state -> Stack 1: [A, F], Stack 2: [B, D, C], Stack 3: [E] | Plan so far [Move F from E to table | Move E from D to table | Move D from B to table | Move B from A to table | Move A from C to table | Move F from table to A | Move D from table to B | Move C from table to D] | Exploring action Move F from A to table | New state -> Stack 1: [A], Stack 2: [B, D, C], Stack 3: [E], Stack 4: [F] | Exploring action Move A from table to C | New state -> Invalid | Exploring action Move E from table to C | New state -> Stack 1: [A, F], Stack 2: [B, D, C, E] | Exploring action Move B from table to C | New state -> Invalid | Exploring action Move C from D to table | New state -> Stack 1: [A, F], Stack 2: [B, D], Stack 3: [C], Stack 4: [E] | Taking action Move E from table to C | Moved to state -> Stack 1: [A, F], Stack 2: [B, D, C, E] | Plan so far [Move F from E to table | Move E from D to table | Move D from B to table | Move B from A to table | Move A from C to table | Move F from table to A | Move D from table to B | Move C from table to D | Move E from table to C] | Reached goal state!",
        "system2_states_v1": 38
    },
    {
        "idx": 574,
        "start": [
            [
                "table",
                "A"
            ],
            [
                "table",
                "E",
                "D",
                "B",
                "C"
            ]
        ],
        "goal": [
            [
                "table",
                "C",
                "E",
                "A",
                "B",
                "D"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": true,
                "on": -1,
                "under": -1,
                "ontable": true
            },
            "B": {
                "clear": false,
                "on": "D",
                "under": "C",
                "ontable": false
            },
            "C": {
                "clear": true,
                "on": "B",
                "under": -1,
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": "E",
                "under": "B",
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": -1,
                "under": "D",
                "ontable": true
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": false,
                "on": "E",
                "under": "B",
                "ontable": false
            },
            "B": {
                "clear": false,
                "on": "A",
                "under": "D",
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": -1,
                "under": "E",
                "ontable": true
            },
            "D": {
                "clear": true,
                "on": "B",
                "under": -1,
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": "C",
                "under": "A",
                "ontable": false
            }
        },
        "plan_len": 7,
        "num_blocks": 5,
        "prompt": "The initial state:\nThe hand is empty.\nA is on the table. A is clear.\nE is on the table. D is on E. B is on D. C is on B. C is clear.\n\nThe goal is:\nC is on the table. E is on C. A is on E. B is on A. D is on B. D is clear.\n",
        "system1_plan": "Move C from B to table | Move B from D to table | Move D from E to table | Move E from table to C | Move A from table to E | Move B from table to A | Move D from table to B",
        "system1_states": 7,
        "system2_plan_v1": "Moved to state -> Stack 1: [A], Stack 2: [E, D, B, C] | Plan so far [] | Exploring action Move E from table to A | New state -> Invalid | Exploring action Move C from B to A | New state -> Stack 1: [A, C], Stack 2: [E, D, B] | Exploring action Move A from table to C | New state -> Stack 1: [E, D, B, C, A] | Exploring action Move D from E to A | New state -> Invalid | Exploring action Move C from B to table | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [E, D, B] | Taking action Move C from B to table | Moved to state -> Stack 1: [A], Stack 2: [C], Stack 3: [E, D, B] | Plan so far [Move C from B to table] | Exploring action Move B from D to A | New state -> Stack 1: [A, B], Stack 2: [C], Stack 3: [E, D] | Exploring action Move D from E to C | New state -> Invalid | Exploring action Move B from D to C | New state -> Stack 1: [A], Stack 2: [C, B], Stack 3: [E, D] | Exploring action Move B from D to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [E, D] | Taking action Move B from D to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [E, D] | Plan so far [Move C from B to table | Move B from D to table] | Exploring action Move D from E to B | New state -> Stack 1: [A], Stack 2: [B, D], Stack 3: [C], Stack 4: [E] | Exploring action Move E from table to D | New state -> Invalid | Exploring action Move D from E to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Exploring action Move D from E to C | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, D], Stack 4: [E] | Taking action Move D from E to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Plan so far [Move C from B to table | Move B from D to table | Move D from E to table] | Exploring action Move D from table to B | New state -> Stack 1: [A], Stack 2: [B, D], Stack 3: [C], Stack 4: [E] | Exploring action Move A from table to B | New state -> Stack 1: [B, A], Stack 2: [C], Stack 3: [D], Stack 4: [E] | Exploring action Move E from table to C | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, E], Stack 4: [D] | Taking action Move D from E to B | Moved to state -> Stack 1: [A], Stack 2: [B, D], Stack 3: [C], Stack 4: [E] | Plan so far [Move C from B to table | Move B from D to table | Move D from E to B] | Exploring action Move B from table to C | New state -> Invalid | Exploring action Move D from B to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Exploring action Move A from table to E | New state -> Stack 1: [B, D], Stack 2: [C], Stack 3: [E, A] | Exploring action Move E from table to C | New state -> Stack 1: [A], Stack 2: [B, D], Stack 3: [C, E] | Exploring action Move B from table to A | New state -> Invalid | Taking action Move E from table to C | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, E], Stack 4: [D] | Plan so far [Move C from B to table | Move B from D to table | Move D from E to table | Move E from table to C] | Exploring action Move A from table to B | New state -> Stack 1: [B, A], Stack 2: [C, E], Stack 3: [D] | Exploring action Move D from table to B | New state -> Stack 1: [A], Stack 2: [B, D], Stack 3: [C, E] | Exploring action Move C from table to B | New state -> Invalid | Exploring action Move A from table to E | New state -> Stack 1: [B], Stack 2: [C, E, A], Stack 3: [D] | Taking action Move E from table to C | Moved to state -> Stack 1: [A], Stack 2: [B, D], Stack 3: [C, E] | Plan so far [Move C from B to table | Move B from D to table | Move D from E to B | Move E from table to C] | Exploring action Move B from table to A | New state -> Invalid | Exploring action Move E from C to table | New state -> Stack 1: [A], Stack 2: [B, D], Stack 3: [C], Stack 4: [E] | Exploring action Move D from B to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, E], Stack 4: [D] | Exploring action Move A from table to E | New state -> Stack 1: [B, D], Stack 2: [C, E, A] | Taking action Move A from table to E | Moved to state -> Stack 1: [B], Stack 2: [C, E, A], Stack 3: [D] | Plan so far [Move C from B to table | Move B from D to table | Move D from E to table | Move E from table to C | Move A from table to E] | Exploring action Move D from table to B | New state -> Stack 1: [B, D], Stack 2: [C, E, A] | Exploring action Move D from table to A | New state -> Stack 1: [B], Stack 2: [C, E, A, D] | Exploring action Move E from C to A | New state -> Invalid | Exploring action Move B from table to A | New state -> Stack 1: [C, E, A, B], Stack 2: [D] | Taking action Move A from table to E | Moved to state -> Stack 1: [B, D], Stack 2: [C, E, A] | Plan so far [Move C from B to table | Move B from D to table | Move D from E to B | Move E from table to C | Move A from table to E] | Exploring action Move A from E to table | New state -> Stack 1: [A], Stack 2: [B, D], Stack 3: [C, E] | Exploring action Move D from B to table | New state -> Stack 1: [B], Stack 2: [C, E, A], Stack 3: [D] | Exploring action Move E from C to table | New state -> Invalid | Exploring action Move E from C to D | New state -> Invalid | Exploring action Move D from B to A | New state -> Stack 1: [B], Stack 2: [C, E, A, D] | Taking action Move B from table to A | Moved to state -> Stack 1: [C, E, A, B], Stack 2: [D] | Plan so far [Move C from B to table | Move B from D to table | Move D from E to table | Move E from table to C | Move A from table to E | Move B from table to A] | Exploring action Move B from A to D | New state -> Stack 1: [C, E, A], Stack 2: [D, B] | Exploring action Move D from table to B | New state -> Stack 1: [C, E, A, B, D] | Exploring action Move E from C to B | New state -> Invalid | Exploring action Move B from A to table | New state -> Stack 1: [B], Stack 2: [C, E, A], Stack 3: [D] | Taking action Move D from table to B | Moved to state -> Stack 1: [C, E, A, B, D] | Plan so far [Move C from B to table | Move B from D to table | Move D from E to table | Move E from table to C | Move A from table to E | Move B from table to A | Move D from table to B] | Reached goal state!",
        "system2_states_v1": 42
    },
    {
        "idx": 798,
        "start": [
            [
                "table",
                "C",
                "B",
                "F",
                "D",
                "A",
                "E"
            ]
        ],
        "goal": [
            [
                "table",
                "D",
                "C",
                "B",
                "A"
            ],
            [
                "table",
                "F",
                "E"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": false,
                "on": "D",
                "under": "E",
                "ontable": false
            },
            "B": {
                "clear": false,
                "on": "C",
                "under": "F",
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": -1,
                "under": "B",
                "ontable": true
            },
            "D": {
                "clear": false,
                "on": "F",
                "under": "A",
                "ontable": false
            },
            "E": {
                "clear": true,
                "on": "A",
                "under": -1,
                "ontable": false
            },
            "F": {
                "clear": false,
                "on": "B",
                "under": "D",
                "ontable": false
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": true,
                "on": "B",
                "under": -1,
                "ontable": false
            },
            "B": {
                "clear": false,
                "on": "C",
                "under": "A",
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": "D",
                "under": "B",
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": -1,
                "under": "C",
                "ontable": true
            },
            "E": {
                "clear": true,
                "on": "F",
                "under": -1,
                "ontable": false
            },
            "F": {
                "clear": false,
                "on": -1,
                "under": "E",
                "ontable": true
            }
        },
        "plan_len": 9,
        "num_blocks": 6,
        "prompt": "The initial state:\nThe hand is empty.\nC is on the table. B is on C. F is on B. D is on F. A is on D. E is on A. E is clear.\n\nThe goal is:\nD is on the table. C is on D. B is on C. A is on B. A is clear.\nF is on the table. E is on F. E is clear.\n",
        "system1_plan": "Move E from A to table | Move A from D to table | Move D from F to table | Move F from B to table | Move E from table to F | Move B from C to table | Move C from table to D | Move B from table to C | Move A from table to B",
        "system1_states": 9,
        "system2_plan_v1": "Moved to state -> Stack 1: [C, B, F, D, A, E] | Plan so far [] | Exploring action Move E from A to table | New state -> Stack 1: [C, B, F, D, A], Stack 2: [E] | Exploring action Move B from C to E | New state -> Invalid | Exploring action Move F from B to table | New state -> Invalid | Taking action Move E from A to table | Moved to state -> Stack 1: [C, B, F, D, A], Stack 2: [E] | Plan so far [Move E from A to table] | Exploring action Move B from C to A | New state -> Invalid | Exploring action Move A from D to table | New state -> Stack 1: [A], Stack 2: [C, B, F, D], Stack 3: [E] | Exploring action Move E from table to A | New state -> Stack 1: [C, B, F, D, A, E] | Exploring action Move A from D to E | New state -> Stack 1: [C, B, F, D], Stack 2: [E, A] | Taking action Move A from D to table | Moved to state -> Stack 1: [A], Stack 2: [C, B, F, D], Stack 3: [E] | Plan so far [Move E from A to table | Move A from D to table] | Exploring action Move D from F to table | New state -> Stack 1: [A], Stack 2: [C, B, F], Stack 3: [D], Stack 4: [E] | Exploring action Move F from B to D | New state -> Invalid | Exploring action Move C from table to A | New state -> Invalid | Exploring action Move D from F to E | New state -> Stack 1: [A], Stack 2: [C, B, F], Stack 3: [E, D] | Exploring action Move D from F to A | New state -> Stack 1: [A, D], Stack 2: [C, B, F], Stack 3: [E] | Taking action Move D from F to table | Moved to state -> Stack 1: [A], Stack 2: [C, B, F], Stack 3: [D], Stack 4: [E] | Plan so far [Move E from A to table | Move A from D to table | Move D from F to table] | Exploring action Move F from B to E | New state -> Stack 1: [A], Stack 2: [C, B], Stack 3: [D], Stack 4: [E, F] | Exploring action Move F from B to table | New state -> Stack 1: [A], Stack 2: [C, B], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Exploring action Move F from B to D | New state -> Stack 1: [A], Stack 2: [C, B], Stack 3: [D, F], Stack 4: [E] | Exploring action Move B from C to D | New state -> Invalid | Taking action Move F from B to table | Moved to state -> Stack 1: [A], Stack 2: [C, B], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Plan so far [Move E from A to table | Move A from D to table | Move D from F to table | Move F from B to table] | Exploring action Move C from table to E | New state -> Invalid | Exploring action Move A from table to B | New state -> Stack 1: [C, B, A], Stack 2: [D], Stack 3: [E], Stack 4: [F] | Exploring action Move B from C to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Exploring action Move E from table to F | New state -> Stack 1: [A], Stack 2: [C, B], Stack 3: [D], Stack 4: [F, E] | Taking action Move A from table to B | Moved to state -> Stack 1: [C, B, A], Stack 2: [D], Stack 3: [E], Stack 4: [F] | Plan so far [Move E from A to table | Move A from D to table | Move D from F to table | Move F from B to table | Move A from table to B] | Exploring action Move B from C to table | New state -> Invalid | Exploring action Move F from table to D | New state -> Stack 1: [C, B, A], Stack 2: [D, F], Stack 3: [E] | Exploring action Move D from table to F | New state -> Stack 1: [C, B, A], Stack 2: [E], Stack 3: [F, D] | Exploring action Move E from table to F | New state -> Stack 1: [C, B, A], Stack 2: [D], Stack 3: [F, E] | Exploring action Move B from C to D | New state -> Invalid | Taking action Move E from table to F | Moved to state -> Stack 1: [C, B, A], Stack 2: [D], Stack 3: [F, E] | Plan so far [Move E from A to table | Move A from D to table | Move D from F to table | Move F from B to table | Move A from table to B | Move E from table to F] | Exploring action Move E from F to table | New state -> Stack 1: [C, B, A], Stack 2: [D], Stack 3: [E], Stack 4: [F] | Exploring action Move A from B to table | New state -> Stack 1: [A], Stack 2: [C, B], Stack 3: [D], Stack 4: [F, E] | Exploring action Move D from table to A | New state -> Stack 1: [C, B, A, D], Stack 2: [F, E] | Exploring action Move F from table to A | New state -> Invalid | Taking action Move E from table to F | Moved to state -> Stack 1: [A], Stack 2: [C, B], Stack 3: [D], Stack 4: [F, E] | Plan so far [Move E from A to table | Move A from D to table | Move D from F to table | Move F from B to table | Move E from table to F] | Exploring action Move B from C to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [F, E] | Exploring action Move B from C to D | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, B], Stack 4: [F, E] | Exploring action Move A from table to B | New state -> Stack 1: [C, B, A], Stack 2: [D], Stack 3: [F, E] | Exploring action Move C from table to B | New state -> Invalid | Taking action Move A from table to B | Moved to state -> Stack 1: [C, B, A], Stack 2: [D], Stack 3: [F, E] | Plan so far [Move E from A to table | Move A from D to table | Move D from F to table | Move F from B to table | Move E from table to F | Move A from table to B] | Taking action Move B from C to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [F, E] | Plan so far [Move E from A to table | Move A from D to table | Move D from F to table | Move F from B to table | Move E from table to F | Move B from C to table] | Exploring action Move A from table to D | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, A], Stack 4: [F, E] | Exploring action Move A from table to B | New state -> Stack 1: [B, A], Stack 2: [C], Stack 3: [D], Stack 4: [F, E] | Exploring action Move C from table to D | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, C], Stack 4: [F, E] | Exploring action Move F from table to C | New state -> Invalid | Taking action Move C from table to D | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, C], Stack 4: [F, E] | Plan so far [Move E from A to table | Move A from D to table | Move D from F to table | Move F from B to table | Move E from table to F | Move B from C to table | Move C from table to D] | Exploring action Move C from D to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [F, E] | Exploring action Move B from table to C | New state -> Stack 1: [A], Stack 2: [D, C, B], Stack 3: [F, E] | Exploring action Move A from table to B | New state -> Stack 1: [B, A], Stack 2: [D, C], Stack 3: [F, E] | Exploring action Move D from table to C | New state -> Invalid | Taking action Move B from table to C | Moved to state -> Stack 1: [A], Stack 2: [D, C, B], Stack 3: [F, E] | Plan so far [Move E from A to table | Move A from D to table | Move D from F to table | Move F from B to table | Move E from table to F | Move B from C to table | Move C from table to D | Move B from table to C] | Exploring action Move E from F to table | New state -> Stack 1: [A], Stack 2: [D, C, B], Stack 3: [E], Stack 4: [F] | Exploring action Move A from table to B | New state -> Stack 1: [D, C, B, A], Stack 2: [F, E] | Exploring action Move B from C to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, C], Stack 4: [F, E] | Exploring action Move F from table to E | New state -> Invalid | Taking action Move A from table to B | Moved to state -> Stack 1: [D, C, B, A], Stack 2: [F, E] | Plan so far [Move E from A to table | Move A from D to table | Move D from F to table | Move F from B to table | Move E from table to F | Move B from C to table | Move C from table to D | Move B from table to C | Move A from table to B] | Reached goal state!",
        "system2_states_v1": 45
    },
    {
        "idx": 915,
        "start": [
            [
                "table",
                "B",
                "G",
                "F"
            ],
            [
                "table",
                "D",
                "C",
                "A",
                "E"
            ]
        ],
        "goal": [
            [
                "table",
                "A",
                "D",
                "B",
                "G",
                "E"
            ],
            [
                "table",
                "F",
                "C"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": false,
                "on": "C",
                "under": "E",
                "ontable": false
            },
            "B": {
                "clear": false,
                "on": -1,
                "under": "G",
                "ontable": true
            },
            "C": {
                "clear": false,
                "on": "D",
                "under": "A",
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": -1,
                "under": "C",
                "ontable": true
            },
            "E": {
                "clear": true,
                "on": "A",
                "under": -1,
                "ontable": false
            },
            "F": {
                "clear": true,
                "on": "G",
                "under": -1,
                "ontable": false
            },
            "G": {
                "clear": false,
                "on": "B",
                "under": "F",
                "ontable": false
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": false,
                "on": -1,
                "under": "D",
                "ontable": true
            },
            "B": {
                "clear": false,
                "on": "D",
                "under": "G",
                "ontable": false
            },
            "C": {
                "clear": true,
                "on": "F",
                "under": -1,
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": "A",
                "under": "B",
                "ontable": false
            },
            "E": {
                "clear": true,
                "on": "G",
                "under": -1,
                "ontable": false
            },
            "F": {
                "clear": false,
                "on": -1,
                "under": "C",
                "ontable": true
            },
            "G": {
                "clear": false,
                "on": "B",
                "under": "E",
                "ontable": false
            }
        },
        "plan_len": 10,
        "num_blocks": 7,
        "prompt": "The initial state:\nThe hand is empty.\nB is on the table. G is on B. F is on G. F is clear.\nD is on the table. C is on D. A is on C. E is on A. E is clear.\n\nThe goal is:\nA is on the table. D is on A. B is on D. G is on B. E is on G. E is clear.\nF is on the table. C is on F. C is clear.\n",
        "system1_plan": "Move F from G to table | Move E from A to G | Move A from C to table | Move C from D to F | Move D from table to A | Move E from G to table | Move G from B to table | Move B from table to D | Move G from table to B | Move E from table to G",
        "system1_states": 10,
        "system2_plan_v1": "Moved to state -> Stack 1: [B, G, F], Stack 2: [D, C, A, E] | Plan so far [] | Exploring action Move F from G to table | New state -> Stack 1: [B, G], Stack 2: [D, C, A, E], Stack 3: [F] | Exploring action Move E from A to F | New state -> Stack 1: [B, G, F, E], Stack 2: [D, C, A] | Exploring action Move E from A to table | New state -> Stack 1: [B, G, F], Stack 2: [D, C, A], Stack 3: [E] | Exploring action Move A from C to E | New state -> Invalid | Taking action Move E from A to table | Moved to state -> Stack 1: [B, G, F], Stack 2: [D, C, A], Stack 3: [E] | Plan so far [Move E from A to table] | Exploring action Move C from D to A | New state -> Invalid | Exploring action Move F from G to A | New state -> Stack 1: [B, G], Stack 2: [D, C, A, F], Stack 3: [E] | Exploring action Move B from table to F | New state -> Invalid | Exploring action Move A from C to table | New state -> Stack 1: [A], Stack 2: [B, G, F], Stack 3: [D, C], Stack 4: [E] | Exploring action Move F from G to table | New state -> Stack 1: [B, G], Stack 2: [D, C, A], Stack 3: [E], Stack 4: [F] | Taking action Move F from G to table | Moved to state -> Stack 1: [B, G], Stack 2: [D, C, A, E], Stack 3: [F] | Plan so far [Move F from G to table] | Exploring action Move A from C to F | New state -> Invalid | Exploring action Move G from B to table | New state -> Stack 1: [B], Stack 2: [D, C, A, E], Stack 3: [F], Stack 4: [G] | Exploring action Move E from A to G | New state -> Stack 1: [B, G, E], Stack 2: [D, C, A], Stack 3: [F] | Exploring action Move E from A to table | New state -> Stack 1: [B, G], Stack 2: [D, C, A], Stack 3: [E], Stack 4: [F] | Taking action Move E from A to G | Moved to state -> Stack 1: [B, G, E], Stack 2: [D, C, A], Stack 3: [F] | Plan so far [Move F from G to table | Move E from A to G] | Exploring action Move F from table to A | New state -> Stack 1: [B, G, E], Stack 2: [D, C, A, F] | Exploring action Move C from D to table | New state -> Invalid | Exploring action Move A from C to F | New state -> Stack 1: [B, G, E], Stack 2: [D, C], Stack 3: [F, A] | Exploring action Move A from C to table | New state -> Stack 1: [A], Stack 2: [B, G, E], Stack 3: [D, C], Stack 4: [F] | Taking action Move A from C to table | Moved to state -> Stack 1: [A], Stack 2: [B, G, E], Stack 3: [D, C], Stack 4: [F] | Plan so far [Move F from G to table | Move E from A to G | Move A from C to table] | Exploring action Move G from B to F | New state -> Invalid | Exploring action Move C from D to table | New state -> Stack 1: [A], Stack 2: [B, G, E], Stack 3: [C], Stack 4: [D], Stack 5: [F] | Exploring action Move C from D to F | New state -> Stack 1: [A], Stack 2: [B, G, E], Stack 3: [D], Stack 4: [F, C] | Exploring action Move C from D to A | New state -> Stack 1: [A, C], Stack 2: [B, G, E], Stack 3: [D], Stack 4: [F] | Taking action Move C from D to F | Moved to state -> Stack 1: [A], Stack 2: [B, G, E], Stack 3: [D], Stack 4: [F, C] | Plan so far [Move F from G to table | Move E from A to G | Move A from C to table | Move C from D to F] | Exploring action Move D from table to A | New state -> Stack 1: [A, D], Stack 2: [B, G, E], Stack 3: [F, C] | Exploring action Move G from B to table | New state -> Invalid | Exploring action Move F from table to A | New state -> Invalid | Exploring action Move A from table to D | New state -> Stack 1: [B, G, E], Stack 2: [D, A], Stack 3: [F, C] | Exploring action Move A from table to E | New state -> Stack 1: [B, G, E, A], Stack 2: [D], Stack 3: [F, C] | Taking action Move D from table to A | Moved to state -> Stack 1: [A, D], Stack 2: [B, G, E], Stack 3: [F, C] | Plan so far [Move F from G to table | Move E from A to G | Move A from C to table | Move C from D to F | Move D from table to A] | Exploring action Move E from G to table | New state -> Stack 1: [A, D], Stack 2: [B, G], Stack 3: [E], Stack 4: [F, C] | Exploring action Move G from B to table | New state -> Invalid | Exploring action Move C from F to table | New state -> Stack 1: [A, D], Stack 2: [B, G, E], Stack 3: [C], Stack 4: [F] | Exploring action Move B from table to E | New state -> Invalid | Exploring action Move D from A to table | New state -> Stack 1: [A], Stack 2: [B, G, E], Stack 3: [D], Stack 4: [F, C] | Taking action Move C from D to table | Moved to state -> Stack 1: [A], Stack 2: [B, G, E], Stack 3: [C], Stack 4: [D], Stack 5: [F] | Plan so far [Move F from G to table | Move E from A to G | Move A from C to table | Move C from D to table] | Exploring action Move G from B to F | New state -> Invalid | Exploring action Move D from table to A | New state -> Stack 1: [A, D], Stack 2: [B, G, E], Stack 3: [C], Stack 4: [F] | Exploring action Move G from B to C | New state -> Invalid | Exploring action Move C from table to D | New state -> Stack 1: [A], Stack 2: [B, G, E], Stack 3: [D, C], Stack 4: [F] | Exploring action Move C from table to F | New state -> Stack 1: [A], Stack 2: [B, G, E], Stack 3: [D], Stack 4: [F, C] | Taking action Move C from table to F | Moved to state -> Stack 1: [A], Stack 2: [B, G, E], Stack 3: [D], Stack 4: [F, C] | Plan so far [Move F from G to table | Move E from A to G | Move A from C to table | Move C from D to table | Move C from table to F] | Taking action Move D from A to table | Moved to state -> Stack 1: [A], Stack 2: [B, G, E], Stack 3: [D], Stack 4: [F, C] | Plan so far [Move F from G to table | Move E from A to G | Move A from C to table | Move C from D to F | Move D from table to A | Move D from A to table] | Taking action Move A from table to D | Moved to state -> Stack 1: [B, G, E], Stack 2: [D, A], Stack 3: [F, C] | Plan so far [Move F from G to table | Move E from A to G | Move A from C to table | Move C from D to F | Move A from table to D] | Exploring action Move A from D to E | New state -> Stack 1: [B, G, E, A], Stack 2: [D], Stack 3: [F, C] | Exploring action Move A from D to C | New state -> Stack 1: [B, G, E], Stack 2: [D], Stack 3: [F, C, A] | Exploring action Move F from table to C | New state -> Invalid | Exploring action Move A from D to table | New state -> Stack 1: [A], Stack 2: [B, G, E], Stack 3: [D], Stack 4: [F, C] | Exploring action Move B from table to A | New state -> Invalid | Taking action Move D from table to A | Moved to state -> Stack 1: [A, D], Stack 2: [B, G, E], Stack 3: [C], Stack 4: [F] | Plan so far [Move F from G to table | Move E from A to G | Move A from C to table | Move C from D to table | Move D from table to A] | Exploring action Move C from table to F | New state -> Stack 1: [A, D], Stack 2: [B, G, E], Stack 3: [F, C] | Exploring action Move A from table to D | New state -> Invalid | Exploring action Move C from table to D | New state -> Stack 1: [A, D, C], Stack 2: [B, G, E], Stack 3: [F] | Exploring action Move F from table to C | New state -> Stack 1: [A, D], Stack 2: [B, G, E], Stack 3: [C, F] | Exploring action Move G from B to table | New state -> Invalid | Taking action Move C from table to F | Moved to state -> Stack 1: [A, D], Stack 2: [B, G, E], Stack 3: [F, C] | Plan so far [Move F from G to table | Move E from A to G | Move A from C to table | Move C from D to table | Move D from table to A | Move C from table to F] | Taking action Move A from D to table | Moved to state -> Stack 1: [A], Stack 2: [B, G, E], Stack 3: [D], Stack 4: [F, C] | Plan so far [Move F from G to table | Move E from A to G | Move A from C to table | Move C from D to F | Move A from table to D | Move A from D to table] | Taking action Move C from D to A | Moved to state -> Stack 1: [A, C], Stack 2: [B, G, E], Stack 3: [D], Stack 4: [F] | Plan so far [Move F from G to table | Move E from A to G | Move A from C to table | Move C from D to A] | Exploring action Move G from B to C | New state -> Invalid | Exploring action Move C from A to table | New state -> Stack 1: [A], Stack 2: [B, G, E], Stack 3: [C], Stack 4: [D], Stack 5: [F] | Exploring action Move C from A to D | New state -> Stack 1: [A], Stack 2: [B, G, E], Stack 3: [D, C], Stack 4: [F] | Exploring action Move C from A to F | New state -> Stack 1: [A], Stack 2: [B, G, E], Stack 3: [D], Stack 4: [F, C] | Exploring action Move B from table to E | New state -> Invalid | Taking action Move C from A to F | Moved to state -> Stack 1: [A], Stack 2: [B, G, E], Stack 3: [D], Stack 4: [F, C] | Plan so far [Move F from G to table | Move E from A to G | Move A from C to table | Move C from D to A | Move C from A to F] | Taking action Move E from G to table | Moved to state -> Stack 1: [A, D], Stack 2: [B, G], Stack 3: [E], Stack 4: [F, C] | Plan so far [Move F from G to table | Move E from A to G | Move A from C to table | Move C from D to F | Move D from table to A | Move E from G to table] | Exploring action Move B from table to D | New state -> Invalid | Exploring action Move G from B to table | New state -> Stack 1: [A, D], Stack 2: [B], Stack 3: [E], Stack 4: [F, C], Stack 5: [G] | Exploring action Move G from B to D | New state -> Stack 1: [A, D, G], Stack 2: [B], Stack 3: [E], Stack 4: [F, C] | Exploring action Move E from table to G | New state -> Stack 1: [A, D], Stack 2: [B, G, E], Stack 3: [F, C] | Taking action Move E from table to G | Moved to state -> Stack 1: [A, D], Stack 2: [B, G, E], Stack 3: [F, C] | Plan so far [Move F from G to table | Move E from A to G | Move A from C to table | Move C from D to F | Move D from table to A | Move E from G to table | Move E from table to G] | Taking action Move A from C to F | Moved to state -> Stack 1: [B, G, E], Stack 2: [D, C], Stack 3: [F, A] | Plan so far [Move F from G to table | Move E from A to G | Move A from C to F] | Exploring action Move C from D to table | New state -> Stack 1: [B, G, E], Stack 2: [C], Stack 3: [D], Stack 4: [F, A] | Exploring action Move C from D to A | New state -> Stack 1: [B, G, E], Stack 2: [D], Stack 3: [F, A, C] | Exploring action Move D from table to E | New state -> Invalid | Exploring action Move A from F to table | New state -> Stack 1: [A], Stack 2: [B, G, E], Stack 3: [D, C], Stack 4: [F] | Taking action Move E from G to table | Moved to state -> Stack 1: [A], Stack 2: [B, G], Stack 3: [D], Stack 4: [E], Stack 5: [F, C] | Plan so far [Move F from G to table | Move E from A to G | Move A from C to table | Move C from D to F | Move E from G to table] | Exploring action Move G from B to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D], Stack 4: [E], Stack 5: [F, C], Stack 6: [G] | Exploring action Move D from table to A | New state -> Stack 1: [A, D], Stack 2: [B, G], Stack 3: [E], Stack 4: [F, C] | Exploring action Move F from table to G | New state -> Invalid | Exploring action Move B from table to A | New state -> Invalid | Exploring action Move E from table to G | New state -> Stack 1: [A], Stack 2: [B, G, E], Stack 3: [D], Stack 4: [F, C] | Taking action Move E from table to G | Moved to state -> Stack 1: [A], Stack 2: [B, G, E], Stack 3: [D], Stack 4: [F, C] | Plan so far [Move F from G to table | Move E from A to G | Move A from C to table | Move C from D to F | Move E from G to table | Move E from table to G] | Taking action Move A from F to table | Moved to state -> Stack 1: [A], Stack 2: [B, G, E], Stack 3: [D, C], Stack 4: [F] | Plan so far [Move F from G to table | Move E from A to G | Move A from C to F | Move A from F to table] | Taking action Move C from D to table | Moved to state -> Stack 1: [B, G, E], Stack 2: [C], Stack 3: [D], Stack 4: [F, A] | Plan so far [Move F from G to table | Move E from A to G | Move A from C to F | Move C from D to table] | Exploring action Move B from table to A | New state -> Invalid | Exploring action Move A from F to C | New state -> Stack 1: [B, G, E], Stack 2: [C, A], Stack 3: [D], Stack 4: [F] | Exploring action Move A from F to table | New state -> Stack 1: [A], Stack 2: [B, G, E], Stack 3: [C], Stack 4: [D], Stack 5: [F] | Exploring action Move A from F to D | New state -> Stack 1: [B, G, E], Stack 2: [C], Stack 3: [D, A], Stack 4: [F] | Taking action Move C from F to table | Moved to state -> Stack 1: [A, D], Stack 2: [B, G, E], Stack 3: [C], Stack 4: [F] | Plan so far [Move F from G to table | Move E from A to G | Move A from C to table | Move C from D to F | Move D from table to A | Move C from F to table] | Taking action Move C from A to table | Moved to state -> Stack 1: [A], Stack 2: [B, G, E], Stack 3: [C], Stack 4: [D], Stack 5: [F] | Plan so far [Move F from G to table | Move E from A to G | Move A from C to table | Move C from D to A | Move C from A to table] | Taking action Move G from B to table | Moved to state -> Stack 1: [A, D], Stack 2: [B], Stack 3: [E], Stack 4: [F, C], Stack 5: [G] | Plan so far [Move F from G to table | Move E from A to G | Move A from C to table | Move C from D to F | Move D from table to A | Move E from G to table | Move G from B to table] | Exploring action Move E from table to G | New state -> Stack 1: [A, D], Stack 2: [B], Stack 3: [F, C], Stack 4: [G, E] | Exploring action Move A from table to E | New state -> Invalid | Exploring action Move F from table to B | New state -> Invalid | Exploring action Move B from table to E | New state -> Stack 1: [A, D], Stack 2: [E, B], Stack 3: [F, C], Stack 4: [G] | Exploring action Move B from table to D | New state -> Stack 1: [A, D, B], Stack 2: [E], Stack 3: [F, C], Stack 4: [G] | Taking action Move D from table to E | Moved to state -> Stack 1: [A], Stack 2: [B, G, E, D], Stack 3: [F, C] | Plan so far [Move F from G to table | Move E from A to G | Move A from C to table | Move C from D to F | Move D from table to E] | Exploring action Move G from B to C | New state -> Invalid | Exploring action Move D from E to C | New state -> Stack 1: [A], Stack 2: [B, G, E], Stack 3: [F, C, D] | Exploring action Move D from E to table | New state -> Stack 1: [A], Stack 2: [B, G, E], Stack 3: [D], Stack 4: [F, C] | Exploring action Move D from E to A | New state -> Stack 1: [A, D], Stack 2: [B, G, E], Stack 3: [F, C] | Taking action Move D from E to A | Moved to state -> Stack 1: [A, D], Stack 2: [B, G, E], Stack 3: [F, C] | Plan so far [Move F from G to table | Move E from A to G | Move A from C to table | Move C from D to F | Move D from table to E | Move D from E to A] | Taking action Move D from E to table | Moved to state -> Stack 1: [A], Stack 2: [B, G, E], Stack 3: [D], Stack 4: [F, C] | Plan so far [Move F from G to table | Move E from A to G | Move A from C to table | Move C from D to F | Move D from table to E | Move D from E to table] | Taking action Move C from F to table | Moved to state -> Stack 1: [A], Stack 2: [B, G, E], Stack 3: [C], Stack 4: [D], Stack 5: [F] | Plan so far [Move F from G to table | Move E from A to G | Move A from C to table | Move C from D to F | Move C from F to table] | Taking action Move B from table to D | Moved to state -> Stack 1: [A, D, B], Stack 2: [E], Stack 3: [F, C], Stack 4: [G] | Plan so far [Move F from G to table | Move E from A to G | Move A from C to table | Move C from D to F | Move D from table to A | Move E from G to table | Move G from B to table | Move B from table to D] | Exploring action Move G from table to B | New state -> Stack 1: [A, D, B, G], Stack 2: [E], Stack 3: [F, C] | Exploring action Move A from table to B | New state -> Invalid | Exploring action Move F from table to C | New state -> Invalid | Exploring action Move G from table to E | New state -> Stack 1: [A, D, B], Stack 2: [E, G], Stack 3: [F, C] | Exploring action Move E from table to G | New state -> Stack 1: [A, D, B], Stack 2: [F, C], Stack 3: [G, E] | Taking action Move D from table to C | Moved to state -> Stack 1: [A], Stack 2: [B, G, E], Stack 3: [F, C, D] | Plan so far [Move F from G to table | Move E from A to G | Move A from C to table | Move C from D to F | Move D from table to C] | Exploring action Move C from F to D | New state -> Invalid | Exploring action Move D from C to table | New state -> Stack 1: [A], Stack 2: [B, G, E], Stack 3: [D], Stack 4: [F, C] | Exploring action Move B from table to E | New state -> Invalid | Exploring action Move D from C to A | New state -> Stack 1: [A, D], Stack 2: [B, G, E], Stack 3: [F, C] | Exploring action Move D from C to E | New state -> Stack 1: [A], Stack 2: [B, G, E, D], Stack 3: [F, C] | Taking action Move D from C to A | Moved to state -> Stack 1: [A, D], Stack 2: [B, G, E], Stack 3: [F, C] | Plan so far [Move F from G to table | Move E from A to G | Move A from C to table | Move C from D to F | Move D from table to C | Move D from C to A] | Taking action Move D from C to table | Moved to state -> Stack 1: [A], Stack 2: [B, G, E], Stack 3: [D], Stack 4: [F, C] | Plan so far [Move F from G to table | Move E from A to G | Move A from C to table | Move C from D to F | Move D from table to C | Move D from C to table] | Taking action Move G from table to B | Moved to state -> Stack 1: [A, D, B, G], Stack 2: [E], Stack 3: [F, C] | Plan so far [Move F from G to table | Move E from A to G | Move A from C to table | Move C from D to F | Move D from table to A | Move E from G to table | Move G from B to table | Move B from table to D | Move G from table to B] | Exploring action Move D from A to table | New state -> Invalid | Exploring action Move E from table to G | New state -> Stack 1: [A, D, B, G, E], Stack 2: [F, C] | Exploring action Move G from B to table | New state -> Stack 1: [A, D, B], Stack 2: [E], Stack 3: [F, C], Stack 4: [G] | Exploring action Move C from F to table | New state -> Stack 1: [A, D, B, G], Stack 2: [C], Stack 3: [E], Stack 4: [F] | Taking action Move E from table to G | Moved to state -> Stack 1: [A, D, B, G, E], Stack 2: [F, C] | Plan so far [Move F from G to table | Move E from A to G | Move A from C to table | Move C from D to F | Move D from table to A | Move E from G to table | Move G from B to table | Move B from table to D | Move G from table to B | Move E from table to G] | Reached goal state!",
        "system2_states_v1": 91
    },
    {
        "idx": 585,
        "start": [
            [
                "table",
                "C",
                "E",
                "A",
                "B",
                "D"
            ]
        ],
        "goal": [
            [
                "table",
                "A",
                "B",
                "C",
                "E"
            ],
            [
                "table",
                "D"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": false,
                "on": "E",
                "under": "B",
                "ontable": false
            },
            "B": {
                "clear": false,
                "on": "A",
                "under": "D",
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": -1,
                "under": "E",
                "ontable": true
            },
            "D": {
                "clear": true,
                "on": "B",
                "under": -1,
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": "C",
                "under": "A",
                "ontable": false
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": false,
                "on": -1,
                "under": "B",
                "ontable": true
            },
            "B": {
                "clear": false,
                "on": "A",
                "under": "C",
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": "B",
                "under": "E",
                "ontable": false
            },
            "D": {
                "clear": true,
                "on": -1,
                "under": -1,
                "ontable": true
            },
            "E": {
                "clear": true,
                "on": "C",
                "under": -1,
                "ontable": false
            }
        },
        "plan_len": 7,
        "num_blocks": 5,
        "prompt": "The initial state:\nThe hand is empty.\nC is on the table. E is on C. A is on E. B is on A. D is on B. D is clear.\n\nThe goal is:\nA is on the table. B is on A. C is on B. E is on C. E is clear.\nD is on the table. D is clear.\n",
        "system1_plan": "Move D from B to table | Move B from A to table | Move A from E to table | Move B from table to A | Move E from C to table | Move C from table to B | Move E from table to C",
        "system1_states": 7,
        "system2_plan_v1": "Moved to state -> Stack 1: [C, E, A, B, D] | Plan so far [] | Exploring action Move E from C to D | New state -> Invalid | Exploring action Move D from B to table | New state -> Stack 1: [C, E, A, B], Stack 2: [D] | Exploring action Move C from table to D | New state -> Invalid | Taking action Move D from B to table | Moved to state -> Stack 1: [C, E, A, B], Stack 2: [D] | Plan so far [Move D from B to table] | Exploring action Move B from A to D | New state -> Stack 1: [C, E, A], Stack 2: [D, B] | Exploring action Move A from E to D | New state -> Invalid | Exploring action Move B from A to table | New state -> Stack 1: [B], Stack 2: [C, E, A], Stack 3: [D] | Exploring action Move D from table to B | New state -> Stack 1: [C, E, A, B, D] | Taking action Move B from A to table | Moved to state -> Stack 1: [B], Stack 2: [C, E, A], Stack 3: [D] | Plan so far [Move D from B to table | Move B from A to table] | Exploring action Move A from E to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, E], Stack 4: [D] | Exploring action Move A from E to B | New state -> Stack 1: [B, A], Stack 2: [C, E], Stack 3: [D] | Exploring action Move A from E to D | New state -> Stack 1: [B], Stack 2: [C, E], Stack 3: [D, A] | Exploring action Move C from table to D | New state -> Invalid | Taking action Move A from E to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, E], Stack 4: [D] | Plan so far [Move D from B to table | Move B from A to table | Move A from E to table] | Exploring action Move B from table to A | New state -> Stack 1: [A, B], Stack 2: [C, E], Stack 3: [D] | Exploring action Move C from table to B | New state -> Invalid | Exploring action Move E from C to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Exploring action Move E from C to B | New state -> Stack 1: [A], Stack 2: [B, E], Stack 3: [C], Stack 4: [D] | Exploring action Move C from table to A | New state -> Invalid | Taking action Move B from table to A | Moved to state -> Stack 1: [A, B], Stack 2: [C, E], Stack 3: [D] | Plan so far [Move D from B to table | Move B from A to table | Move A from E to table | Move B from table to A] | Exploring action Move E from C to B | New state -> Stack 1: [A, B, E], Stack 2: [C], Stack 3: [D] | Exploring action Move A from table to E | New state -> Invalid | Exploring action Move A from table to D | New state -> Invalid | Exploring action Move E from C to table | New state -> Stack 1: [A, B], Stack 2: [C], Stack 3: [D], Stack 4: [E] | Exploring action Move B from A to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, E], Stack 4: [D] | Taking action Move A from E to B | Moved to state -> Stack 1: [B, A], Stack 2: [C, E], Stack 3: [D] | Plan so far [Move D from B to table | Move B from A to table | Move A from E to B] | Exploring action Move A from B to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, E], Stack 4: [D] | Exploring action Move B from table to A | New state -> Invalid | Exploring action Move E from C to table | New state -> Stack 1: [B, A], Stack 2: [C], Stack 3: [D], Stack 4: [E] | Exploring action Move E from C to A | New state -> Stack 1: [B, A, E], Stack 2: [C], Stack 3: [D] | Exploring action Move B from table to D | New state -> Invalid | Taking action Move E from C to table | Moved to state -> Stack 1: [A, B], Stack 2: [C], Stack 3: [D], Stack 4: [E] | Plan so far [Move D from B to table | Move B from A to table | Move A from E to table | Move B from table to A | Move E from C to table] | Exploring action Move E from table to C | New state -> Stack 1: [A, B], Stack 2: [C, E], Stack 3: [D] | Exploring action Move A from table to C | New state -> Invalid | Exploring action Move C from table to B | New state -> Stack 1: [A, B, C], Stack 2: [D], Stack 3: [E] | Exploring action Move C from table to E | New state -> Stack 1: [A, B], Stack 2: [D], Stack 3: [E, C] | Exploring action Move A from table to E | New state -> Invalid | Taking action Move A from B to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, E], Stack 4: [D] | Plan so far [Move D from B to table | Move B from A to table | Move A from E to B | Move A from B to table] | Taking action Move E from C to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Plan so far [Move D from B to table | Move B from A to table | Move A from E to table | Move E from C to table] | Exploring action Move E from table to C | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, E], Stack 4: [D] | Exploring action Move B from table to C | New state -> Stack 1: [A], Stack 2: [C, B], Stack 3: [D], Stack 4: [E] | Exploring action Move B from table to A | New state -> Stack 1: [A, B], Stack 2: [C], Stack 3: [D], Stack 4: [E] | Taking action Move C from table to B | Moved to state -> Stack 1: [A, B, C], Stack 2: [D], Stack 3: [E] | Plan so far [Move D from B to table | Move B from A to table | Move A from E to table | Move B from table to A | Move E from C to table | Move C from table to B] | Exploring action Move B from A to C | New state -> Invalid | Exploring action Move B from A to table | New state -> Invalid | Exploring action Move C from B to table | New state -> Stack 1: [A, B], Stack 2: [C], Stack 3: [D], Stack 4: [E] | Exploring action Move C from B to E | New state -> Stack 1: [A, B], Stack 2: [D], Stack 3: [E, C] | Exploring action Move E from table to C | New state -> Stack 1: [A, B, C, E], Stack 2: [D] | Taking action Move E from table to C | Moved to state -> Stack 1: [A, B, C, E], Stack 2: [D] | Plan so far [Move D from B to table | Move B from A to table | Move A from E to table | Move B from table to A | Move E from C to table | Move C from table to B | Move E from table to C] | Reached goal state!",
        "system2_states_v1": 39
    },
    {
        "idx": 794,
        "start": [
            [
                "table",
                "C",
                "A",
                "B",
                "D",
                "E",
                "F"
            ]
        ],
        "goal": [
            [
                "table",
                "A",
                "D",
                "C"
            ],
            [
                "table",
                "B",
                "E",
                "F"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": false,
                "on": "C",
                "under": "B",
                "ontable": false
            },
            "B": {
                "clear": false,
                "on": "A",
                "under": "D",
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": -1,
                "under": "A",
                "ontable": true
            },
            "D": {
                "clear": false,
                "on": "B",
                "under": "E",
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": "D",
                "under": "F",
                "ontable": false
            },
            "F": {
                "clear": true,
                "on": "E",
                "under": -1,
                "ontable": false
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": false,
                "on": -1,
                "under": "D",
                "ontable": true
            },
            "B": {
                "clear": false,
                "on": -1,
                "under": "E",
                "ontable": true
            },
            "C": {
                "clear": true,
                "on": "D",
                "under": -1,
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": "A",
                "under": "C",
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": "B",
                "under": "F",
                "ontable": false
            },
            "F": {
                "clear": true,
                "on": "E",
                "under": -1,
                "ontable": false
            }
        },
        "plan_len": 9,
        "num_blocks": 6,
        "prompt": "The initial state:\nThe hand is empty.\nC is on the table. A is on C. B is on A. D is on B. E is on D. F is on E. F is clear.\n\nThe goal is:\nA is on the table. D is on A. C is on D. C is clear.\nB is on the table. E is on B. F is on E. F is clear.\n",
        "system1_plan": "Move F from E to table | Move E from D to table | Move D from B to table | Move B from A to table | Move E from table to B | Move F from table to E | Move A from C to table | Move D from table to A | Move C from table to D",
        "system1_states": 9,
        "system2_plan_v1": "Moved to state -> Stack 1: [C, A, B, D, E, F] | Plan so far [] | Exploring action Move E from D to table | New state -> Invalid | Exploring action Move B from A to F | New state -> Invalid | Exploring action Move F from E to table | New state -> Stack 1: [C, A, B, D, E], Stack 2: [F] | Taking action Move F from E to table | Moved to state -> Stack 1: [C, A, B, D, E], Stack 2: [F] | Plan so far [Move F from E to table] | Exploring action Move E from D to F | New state -> Stack 1: [C, A, B, D], Stack 2: [F, E] | Exploring action Move E from D to table | New state -> Stack 1: [C, A, B, D], Stack 2: [E], Stack 3: [F] | Exploring action Move A from C to table | New state -> Invalid | Exploring action Move F from table to E | New state -> Stack 1: [C, A, B, D, E, F] | Taking action Move E from D to table | Moved to state -> Stack 1: [C, A, B, D], Stack 2: [E], Stack 3: [F] | Plan so far [Move F from E to table | Move E from D to table] | Exploring action Move F from table to E | New state -> Stack 1: [C, A, B, D], Stack 2: [E, F] | Exploring action Move C from table to F | New state -> Invalid | Exploring action Move D from B to table | New state -> Stack 1: [C, A, B], Stack 2: [D], Stack 3: [E], Stack 4: [F] | Exploring action Move D from B to F | New state -> Stack 1: [C, A, B], Stack 2: [E], Stack 3: [F, D] | Exploring action Move A from C to table | New state -> Invalid | Taking action Move D from B to table | Moved to state -> Stack 1: [C, A, B], Stack 2: [D], Stack 3: [E], Stack 4: [F] | Plan so far [Move F from E to table | Move E from D to table | Move D from B to table] | Exploring action Move B from A to table | New state -> Stack 1: [B], Stack 2: [C, A], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Exploring action Move A from C to table | New state -> Invalid | Exploring action Move B from A to E | New state -> Stack 1: [C, A], Stack 2: [D], Stack 3: [E, B], Stack 4: [F] | Exploring action Move F from table to E | New state -> Stack 1: [C, A, B], Stack 2: [D], Stack 3: [E, F] | Exploring action Move A from C to E | New state -> Invalid | Taking action Move B from A to table | Moved to state -> Stack 1: [B], Stack 2: [C, A], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Plan so far [Move F from E to table | Move E from D to table | Move D from B to table | Move B from A to table] | Exploring action Move A from C to D | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, A], Stack 4: [E], Stack 5: [F] | Exploring action Move C from table to B | New state -> Invalid | Exploring action Move E from table to B | New state -> Stack 1: [B, E], Stack 2: [C, A], Stack 3: [D], Stack 4: [F] | Exploring action Move A from C to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Taking action Move A from C to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Plan so far [Move F from E to table | Move E from D to table | Move D from B to table | Move B from A to table | Move A from C to table] | Exploring action Move F from table to E | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E, F] | Exploring action Move E from table to B | New state -> Stack 1: [A], Stack 2: [B, E], Stack 3: [C], Stack 4: [D], Stack 5: [F] | Exploring action Move D from table to A | New state -> Stack 1: [A, D], Stack 2: [B], Stack 3: [C], Stack 4: [E], Stack 5: [F] | Taking action Move E from table to B | Moved to state -> Stack 1: [B, E], Stack 2: [C, A], Stack 3: [D], Stack 4: [F] | Plan so far [Move F from E to table | Move E from D to table | Move D from B to table | Move B from A to table | Move E from table to B] | Exploring action Move C from table to F | New state -> Invalid | Exploring action Move A from C to E | New state -> Stack 1: [B, E, A], Stack 2: [C], Stack 3: [D], Stack 4: [F] | Exploring action Move A from C to table | New state -> Stack 1: [A], Stack 2: [B, E], Stack 3: [C], Stack 4: [D], Stack 5: [F] | Exploring action Move F from table to E | New state -> Stack 1: [B, E, F], Stack 2: [C, A], Stack 3: [D] | Taking action Move F from table to E | Moved to state -> Stack 1: [B, E, F], Stack 2: [C, A], Stack 3: [D] | Plan so far [Move F from E to table | Move E from D to table | Move D from B to table | Move B from A to table | Move E from table to B | Move F from table to E] | Exploring action Move C from table to F | New state -> Invalid | Exploring action Move B from table to F | New state -> Invalid | Exploring action Move A from C to F | New state -> Stack 1: [B, E, F, A], Stack 2: [C], Stack 3: [D] | Exploring action Move A from C to table | New state -> Stack 1: [A], Stack 2: [B, E, F], Stack 3: [C], Stack 4: [D] | Exploring action Move A from C to D | New state -> Stack 1: [B, E, F], Stack 2: [C], Stack 3: [D, A] | Taking action Move A from C to table | Moved to state -> Stack 1: [A], Stack 2: [B, E, F], Stack 3: [C], Stack 4: [D] | Plan so far [Move F from E to table | Move E from D to table | Move D from B to table | Move B from A to table | Move E from table to B | Move F from table to E | Move A from C to table] | Exploring action Move E from B to table | New state -> Invalid | Exploring action Move B from table to A | New state -> Invalid | Exploring action Move A from table to C | New state -> Stack 1: [B, E, F], Stack 2: [C, A], Stack 3: [D] | Exploring action Move D from table to A | New state -> Stack 1: [A, D], Stack 2: [B, E, F], Stack 3: [C] | Exploring action Move C from table to D | New state -> Stack 1: [A], Stack 2: [B, E, F], Stack 3: [D, C] | Taking action Move D from table to A | Moved to state -> Stack 1: [A, D], Stack 2: [B, E, F], Stack 3: [C] | Plan so far [Move F from E to table | Move E from D to table | Move D from B to table | Move B from A to table | Move E from table to B | Move F from table to E | Move A from C to table | Move D from table to A] | Exploring action Move A from table to C | New state -> Invalid | Exploring action Move D from A to table | New state -> Stack 1: [A], Stack 2: [B, E, F], Stack 3: [C], Stack 4: [D] | Exploring action Move C from table to D | New state -> Stack 1: [A, D, C], Stack 2: [B, E, F] | Exploring action Move A from table to D | New state -> Invalid | Exploring action Move F from E to table | New state -> Stack 1: [A, D], Stack 2: [B, E], Stack 3: [C], Stack 4: [F] | Taking action Move C from table to D | Moved to state -> Stack 1: [A, D, C], Stack 2: [B, E, F] | Plan so far [Move F from E to table | Move E from D to table | Move D from B to table | Move B from A to table | Move E from table to B | Move F from table to E | Move A from C to table | Move D from table to A | Move C from table to D] | Reached goal state!",
        "system2_states_v1": 43
    },
    {
        "idx": 606,
        "start": [
            [
                "table",
                "B"
            ],
            [
                "table",
                "E",
                "C",
                "A",
                "D"
            ]
        ],
        "goal": [
            [
                "table",
                "D",
                "E",
                "A",
                "B",
                "C"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": false,
                "on": "C",
                "under": "D",
                "ontable": false
            },
            "B": {
                "clear": true,
                "on": -1,
                "under": -1,
                "ontable": true
            },
            "C": {
                "clear": false,
                "on": "E",
                "under": "A",
                "ontable": false
            },
            "D": {
                "clear": true,
                "on": "A",
                "under": -1,
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": -1,
                "under": "C",
                "ontable": true
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": false,
                "on": "E",
                "under": "B",
                "ontable": false
            },
            "B": {
                "clear": false,
                "on": "A",
                "under": "C",
                "ontable": false
            },
            "C": {
                "clear": true,
                "on": "B",
                "under": -1,
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": -1,
                "under": "E",
                "ontable": true
            },
            "E": {
                "clear": false,
                "on": "D",
                "under": "A",
                "ontable": false
            }
        },
        "plan_len": 7,
        "num_blocks": 5,
        "prompt": "The initial state:\nThe hand is empty.\nB is on the table. B is clear.\nE is on the table. C is on E. A is on C. D is on A. D is clear.\n\nThe goal is:\nD is on the table. E is on D. A is on E. B is on A. C is on B. C is clear.\n",
        "system1_plan": "Move D from A to table | Move A from C to table | Move C from E to table | Move E from table to D | Move A from table to E | Move B from table to A | Move C from table to B",
        "system1_states": 7,
        "system2_plan_v1": "Moved to state -> Stack 1: [B], Stack 2: [E, C, A, D] | Plan so far [] | Exploring action Move D from A to B | New state -> Stack 1: [B, D], Stack 2: [E, C, A] | Exploring action Move D from A to table | New state -> Stack 1: [B], Stack 2: [D], Stack 3: [E, C, A] | Exploring action Move C from E to table | New state -> Invalid | Exploring action Move B from table to D | New state -> Stack 1: [E, C, A, D, B] | Exploring action Move E from table to D | New state -> Invalid | Taking action Move D from A to table | Moved to state -> Stack 1: [B], Stack 2: [D], Stack 3: [E, C, A] | Plan so far [Move D from A to table] | Exploring action Move A from C to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D], Stack 4: [E, C] | Exploring action Move A from C to B | New state -> Stack 1: [B, A], Stack 2: [D], Stack 3: [E, C] | Exploring action Move C from E to D | New state -> Invalid | Exploring action Move A from C to D | New state -> Stack 1: [B], Stack 2: [D, A], Stack 3: [E, C] | Exploring action Move E from table to B | New state -> Invalid | Taking action Move A from C to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [D], Stack 4: [E, C] | Plan so far [Move D from A to table | Move A from C to table] | Exploring action Move E from table to B | New state -> Invalid | Exploring action Move C from E to D | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, C], Stack 4: [E] | Exploring action Move E from table to A | New state -> Invalid | Exploring action Move C from E to B | New state -> Stack 1: [A], Stack 2: [B, C], Stack 3: [D], Stack 4: [E] | Exploring action Move C from E to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Taking action Move C from E to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Plan so far [Move D from A to table | Move A from C to table | Move C from E to table] | Exploring action Move C from table to B | New state -> Stack 1: [A], Stack 2: [B, C], Stack 3: [D], Stack 4: [E] | Exploring action Move A from table to D | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, A], Stack 4: [E] | Exploring action Move E from table to D | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D, E] | Taking action Move C from E to B | Moved to state -> Stack 1: [A], Stack 2: [B, C], Stack 3: [D], Stack 4: [E] | Plan so far [Move D from A to table | Move A from C to table | Move C from E to B] | Exploring action Move C from B to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Exploring action Move C from B to E | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D], Stack 4: [E, C] | Exploring action Move B from table to A | New state -> Invalid | Exploring action Move B from table to D | New state -> Invalid | Exploring action Move E from table to D | New state -> Stack 1: [A], Stack 2: [B, C], Stack 3: [D, E] | Taking action Move E from table to D | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D, E] | Plan so far [Move D from A to table | Move A from C to table | Move C from E to table | Move E from table to D] | Exploring action Move A from table to B | New state -> Stack 1: [B, A], Stack 2: [C], Stack 3: [D, E] | Exploring action Move C from table to B | New state -> Stack 1: [A], Stack 2: [B, C], Stack 3: [D, E] | Exploring action Move A from table to E | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, E, A] | Exploring action Move D from table to C | New state -> Invalid | Taking action Move E from table to D | Moved to state -> Stack 1: [A], Stack 2: [B, C], Stack 3: [D, E] | Plan so far [Move D from A to table | Move A from C to table | Move C from E to B | Move E from table to D] | Exploring action Move D from table to E | New state -> Invalid | Exploring action Move A from table to E | New state -> Stack 1: [B, C], Stack 2: [D, E, A] | Exploring action Move E from D to table | New state -> Stack 1: [A], Stack 2: [B, C], Stack 3: [D], Stack 4: [E] | Exploring action Move D from table to C | New state -> Invalid | Exploring action Move C from B to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D, E] | Taking action Move A from table to E | Moved to state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, E, A] | Plan so far [Move D from A to table | Move A from C to table | Move C from E to table | Move E from table to D | Move A from table to E] | Exploring action Move B from table to A | New state -> Stack 1: [C], Stack 2: [D, E, A, B] | Exploring action Move E from D to C | New state -> Invalid | Exploring action Move C from table to B | New state -> Stack 1: [B, C], Stack 2: [D, E, A] | Exploring action Move C from table to A | New state -> Stack 1: [B], Stack 2: [D, E, A, C] | Taking action Move A from table to E | Moved to state -> Stack 1: [B, C], Stack 2: [D, E, A] | Plan so far [Move D from A to table | Move A from C to table | Move C from E to B | Move E from table to D | Move A from table to E] | Exploring action Move D from table to C | New state -> Invalid | Exploring action Move C from B to A | New state -> Stack 1: [B], Stack 2: [D, E, A, C] | Exploring action Move C from B to table | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, E, A] | Exploring action Move A from E to table | New state -> Stack 1: [A], Stack 2: [B, C], Stack 3: [D, E] | Taking action Move B from table to A | Moved to state -> Stack 1: [C], Stack 2: [D, E, A, B] | Plan so far [Move D from A to table | Move A from C to table | Move C from E to table | Move E from table to D | Move A from table to E | Move B from table to A] | Exploring action Move E from D to C | New state -> Invalid | Exploring action Move C from table to B | New state -> Stack 1: [D, E, A, B, C] | Exploring action Move B from A to C | New state -> Stack 1: [C, B], Stack 2: [D, E, A] | Exploring action Move B from A to table | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, E, A] | Taking action Move C from table to B | Moved to state -> Stack 1: [D, E, A, B, C] | Plan so far [Move D from A to table | Move A from C to table | Move C from E to table | Move E from table to D | Move A from table to E | Move B from table to A | Move C from table to B] | Reached goal state!",
        "system2_states_v1": 44
    },
    {
        "idx": 804,
        "start": [
            [
                "table",
                "B",
                "A",
                "F",
                "C",
                "E",
                "D"
            ]
        ],
        "goal": [
            [
                "table",
                "C",
                "E",
                "F",
                "B",
                "A"
            ],
            [
                "table",
                "D"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": false,
                "on": "B",
                "under": "F",
                "ontable": false
            },
            "B": {
                "clear": false,
                "on": -1,
                "under": "A",
                "ontable": true
            },
            "C": {
                "clear": false,
                "on": "F",
                "under": "E",
                "ontable": false
            },
            "D": {
                "clear": true,
                "on": "E",
                "under": -1,
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": "C",
                "under": "D",
                "ontable": false
            },
            "F": {
                "clear": false,
                "on": "A",
                "under": "C",
                "ontable": false
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": true,
                "on": "B",
                "under": -1,
                "ontable": false
            },
            "B": {
                "clear": false,
                "on": "F",
                "under": "A",
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": -1,
                "under": "E",
                "ontable": true
            },
            "D": {
                "clear": true,
                "on": -1,
                "under": -1,
                "ontable": true
            },
            "E": {
                "clear": false,
                "on": "C",
                "under": "F",
                "ontable": false
            },
            "F": {
                "clear": false,
                "on": "E",
                "under": "B",
                "ontable": false
            }
        },
        "plan_len": 9,
        "num_blocks": 6,
        "prompt": "The initial state:\nThe hand is empty.\nB is on the table. A is on B. F is on A. C is on F. E is on C. D is on E. D is clear.\n\nThe goal is:\nC is on the table. E is on C. F is on E. B is on F. A is on B. A is clear.\nD is on the table. D is clear.\n",
        "system1_plan": "Move D from E to table | Move E from C to table | Move C from F to table | Move F from A to table | Move E from table to C | Move F from table to E | Move A from B to table | Move B from table to F | Move A from table to B",
        "system1_states": 9,
        "system2_plan_v1": "Moved to state -> Stack 1: [B, A, F, C, E, D] | Plan so far [] | Exploring action Move D from E to table | New state -> Stack 1: [B, A, F, C, E], Stack 2: [D] | Exploring action Move B from table to D | New state -> Invalid | Exploring action Move C from F to table | New state -> Invalid | Taking action Move D from E to table | Moved to state -> Stack 1: [B, A, F, C, E], Stack 2: [D] | Plan so far [Move D from E to table] | Exploring action Move E from C to D | New state -> Stack 1: [B, A, F, C], Stack 2: [D, E] | Exploring action Move F from A to table | New state -> Invalid | Exploring action Move F from A to D | New state -> Invalid | Exploring action Move E from C to table | New state -> Stack 1: [B, A, F, C], Stack 2: [D], Stack 3: [E] | Exploring action Move D from table to E | New state -> Stack 1: [B, A, F, C, E, D] | Taking action Move E from C to table | Moved to state -> Stack 1: [B, A, F, C], Stack 2: [D], Stack 3: [E] | Plan so far [Move D from E to table | Move E from C to table] | Exploring action Move C from F to E | New state -> Stack 1: [B, A, F], Stack 2: [D], Stack 3: [E, C] | Exploring action Move B from table to D | New state -> Invalid | Exploring action Move C from F to table | New state -> Stack 1: [B, A, F], Stack 2: [C], Stack 3: [D], Stack 4: [E] | Exploring action Move E from table to C | New state -> Stack 1: [B, A, F, C, E], Stack 2: [D] | Exploring action Move A from B to E | New state -> Invalid | Taking action Move C from F to table | Moved to state -> Stack 1: [B, A, F], Stack 2: [C], Stack 3: [D], Stack 4: [E] | Plan so far [Move D from E to table | Move E from C to table | Move C from F to table] | Exploring action Move F from A to E | New state -> Stack 1: [B, A], Stack 2: [C], Stack 3: [D], Stack 4: [E, F] | Exploring action Move B from table to D | New state -> Invalid | Exploring action Move A from B to C | New state -> Invalid | Exploring action Move F from A to table | New state -> Stack 1: [B, A], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Exploring action Move E from table to C | New state -> Stack 1: [B, A, F], Stack 2: [C, E], Stack 3: [D] | Taking action Move F from A to table | Moved to state -> Stack 1: [B, A], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Plan so far [Move D from E to table | Move E from C to table | Move C from F to table | Move F from A to table] | Exploring action Move A from B to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Exploring action Move B from table to D | New state -> Invalid | Exploring action Move B from table to E | New state -> Invalid | Exploring action Move E from table to C | New state -> Stack 1: [B, A], Stack 2: [C, E], Stack 3: [D], Stack 4: [F] | Exploring action Move A from B to C | New state -> Stack 1: [B], Stack 2: [C, A], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Taking action Move E from table to C | Moved to state -> Stack 1: [B, A], Stack 2: [C, E], Stack 3: [D], Stack 4: [F] | Plan so far [Move D from E to table | Move E from C to table | Move C from F to table | Move F from A to table | Move E from table to C] | Exploring action Move A from B to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, E], Stack 4: [D], Stack 5: [F] | Exploring action Move A from B to E | New state -> Stack 1: [B], Stack 2: [C, E, A], Stack 3: [D], Stack 4: [F] | Exploring action Move F from table to E | New state -> Stack 1: [B, A], Stack 2: [C, E, F], Stack 3: [D] | Exploring action Move B from table to D | New state -> Invalid | Taking action Move F from table to E | Moved to state -> Stack 1: [B, A], Stack 2: [C, E, F], Stack 3: [D] | Plan so far [Move D from E to table | Move E from C to table | Move C from F to table | Move F from A to table | Move E from table to C | Move F from table to E] | Exploring action Move F from E to table | New state -> Stack 1: [B, A], Stack 2: [C, E], Stack 3: [D], Stack 4: [F] | Exploring action Move A from B to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, E, F], Stack 4: [D] | Exploring action Move B from table to D | New state -> Invalid | Exploring action Move A from B to F | New state -> Stack 1: [B], Stack 2: [C, E, F, A], Stack 3: [D] | Exploring action Move C from table to F | New state -> Invalid | Taking action Move E from table to C | Moved to state -> Stack 1: [B, A, F], Stack 2: [C, E], Stack 3: [D] | Plan so far [Move D from E to table | Move E from C to table | Move C from F to table | Move E from table to C] | Exploring action Move A from B to E | New state -> Invalid | Exploring action Move F from A to E | New state -> Stack 1: [B, A], Stack 2: [C, E, F], Stack 3: [D] | Exploring action Move B from table to D | New state -> Invalid | Exploring action Move F from A to D | New state -> Stack 1: [B, A], Stack 2: [C, E], Stack 3: [D, F] | Exploring action Move F from A to table | New state -> Stack 1: [B, A], Stack 2: [C, E], Stack 3: [D], Stack 4: [F] | Taking action Move F from A to E | Moved to state -> Stack 1: [B, A], Stack 2: [C, E, F], Stack 3: [D] | Plan so far [Move D from E to table | Move E from C to table | Move C from F to table | Move E from table to C | Move F from A to E] | Taking action Move F from A to table | Moved to state -> Stack 1: [B, A], Stack 2: [C, E], Stack 3: [D], Stack 4: [F] | Plan so far [Move D from E to table | Move E from C to table | Move C from F to table | Move E from table to C | Move F from A to table] | Taking action Move A from B to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, E], Stack 4: [D], Stack 5: [F] | Plan so far [Move D from E to table | Move E from C to table | Move C from F to table | Move F from A to table | Move E from table to C | Move A from B to table] | Exploring action Move F from table to E | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, E, F], Stack 4: [D] | Exploring action Move A from table to B | New state -> Stack 1: [B, A], Stack 2: [C, E], Stack 3: [D], Stack 4: [F] | Exploring action Move C from table to A | New state -> Invalid | Exploring action Move C from table to D | New state -> Invalid | Exploring action Move A from table to E | New state -> Stack 1: [B], Stack 2: [C, E, A], Stack 3: [D], Stack 4: [F] | Taking action Move A from B to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, E, F], Stack 4: [D] | Plan so far [Move D from E to table | Move E from C to table | Move C from F to table | Move F from A to table | Move E from table to C | Move F from table to E | Move A from B to table] | Exploring action Move B from table to F | New state -> Stack 1: [A], Stack 2: [C, E, F, B], Stack 3: [D] | Exploring action Move A from table to B | New state -> Stack 1: [B, A], Stack 2: [C, E, F], Stack 3: [D] | Exploring action Move A from table to F | New state -> Stack 1: [B], Stack 2: [C, E, F, A], Stack 3: [D] | Exploring action Move E from C to D | New state -> Invalid | Taking action Move A from B to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Plan so far [Move D from E to table | Move E from C to table | Move C from F to table | Move F from A to table | Move A from B to table] | Exploring action Move B from table to A | New state -> Stack 1: [A, B], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Exploring action Move E from table to C | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, E], Stack 4: [D], Stack 5: [F] | Exploring action Move A from table to B | New state -> Stack 1: [B, A], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Taking action Move F from table to E | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, E, F], Stack 4: [D] | Plan so far [Move D from E to table | Move E from C to table | Move C from F to table | Move F from A to table | Move E from table to C | Move A from B to table | Move F from table to E] | Taking action Move E from table to C | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, E], Stack 4: [D], Stack 5: [F] | Plan so far [Move D from E to table | Move E from C to table | Move C from F to table | Move F from A to table | Move A from B to table | Move E from table to C] | Taking action Move B from table to F | Moved to state -> Stack 1: [A], Stack 2: [C, E, F, B], Stack 3: [D] | Plan so far [Move D from E to table | Move E from C to table | Move C from F to table | Move F from A to table | Move E from table to C | Move F from table to E | Move A from B to table | Move B from table to F] | Exploring action Move B from F to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, E, F], Stack 4: [D] | Exploring action Move E from C to B | New state -> Invalid | Exploring action Move A from table to B | New state -> Stack 1: [C, E, F, B, A], Stack 2: [D] | Exploring action Move D from table to A | New state -> Stack 1: [A, D], Stack 2: [C, E, F, B] | Taking action Move A from table to B | Moved to state -> Stack 1: [C, E, F, B, A], Stack 2: [D] | Plan so far [Move D from E to table | Move E from C to table | Move C from F to table | Move F from A to table | Move E from table to C | Move F from table to E | Move A from B to table | Move B from table to F | Move A from table to B] | Reached goal state!",
        "system2_states_v1": 53
    },
    {
        "idx": 787,
        "start": [
            [
                "table",
                "E",
                "A",
                "C",
                "B",
                "F",
                "D"
            ]
        ],
        "goal": [
            [
                "table",
                "A",
                "F",
                "D",
                "C"
            ],
            [
                "table",
                "E",
                "B"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": false,
                "on": "E",
                "under": "C",
                "ontable": false
            },
            "B": {
                "clear": false,
                "on": "C",
                "under": "F",
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": "A",
                "under": "B",
                "ontable": false
            },
            "D": {
                "clear": true,
                "on": "F",
                "under": -1,
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": -1,
                "under": "A",
                "ontable": true
            },
            "F": {
                "clear": false,
                "on": "B",
                "under": "D",
                "ontable": false
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": false,
                "on": -1,
                "under": "F",
                "ontable": true
            },
            "B": {
                "clear": true,
                "on": "E",
                "under": -1,
                "ontable": false
            },
            "C": {
                "clear": true,
                "on": "D",
                "under": -1,
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": "F",
                "under": "C",
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": -1,
                "under": "B",
                "ontable": true
            },
            "F": {
                "clear": false,
                "on": "A",
                "under": "D",
                "ontable": false
            }
        },
        "plan_len": 9,
        "num_blocks": 6,
        "prompt": "The initial state:\nThe hand is empty.\nE is on the table. A is on E. C is on A. B is on C. F is on B. D is on F. D is clear.\n\nThe goal is:\nA is on the table. F is on A. D is on F. C is on D. C is clear.\nE is on the table. B is on E. B is clear.\n",
        "system1_plan": "Move D from F to table | Move F from B to table | Move B from C to table | Move C from A to table | Move A from E to table | Move B from table to E | Move F from table to A | Move D from table to F | Move C from table to D",
        "system1_states": 9,
        "system2_plan_v1": "Moved to state -> Stack 1: [E, A, C, B, F, D] | Plan so far [] | Exploring action Move D from F to table | New state -> Stack 1: [D], Stack 2: [E, A, C, B, F] | Exploring action Move C from A to table | New state -> Invalid | Taking action Move D from F to table | Moved to state -> Stack 1: [D], Stack 2: [E, A, C, B, F] | Plan so far [Move D from F to table] | Exploring action Move A from E to D | New state -> Invalid | Exploring action Move F from B to D | New state -> Stack 1: [D, F], Stack 2: [E, A, C, B] | Exploring action Move C from A to D | New state -> Invalid | Exploring action Move F from B to table | New state -> Stack 1: [D], Stack 2: [E, A, C, B], Stack 3: [F] | Exploring action Move D from table to F | New state -> Stack 1: [E, A, C, B, F, D] | Taking action Move F from B to table | Moved to state -> Stack 1: [D], Stack 2: [E, A, C, B], Stack 3: [F] | Plan so far [Move D from F to table | Move F from B to table] | Exploring action Move B from C to F | New state -> Stack 1: [D], Stack 2: [E, A, C], Stack 3: [F, B] | Exploring action Move B from C to D | New state -> Stack 1: [D, B], Stack 2: [E, A, C], Stack 3: [F] | Exploring action Move B from C to table | New state -> Stack 1: [B], Stack 2: [D], Stack 3: [E, A, C], Stack 4: [F] | Exploring action Move C from A to D | New state -> Invalid | Exploring action Move A from E to D | New state -> Invalid | Taking action Move B from C to table | Moved to state -> Stack 1: [B], Stack 2: [D], Stack 3: [E, A, C], Stack 4: [F] | Plan so far [Move D from F to table | Move F from B to table | Move B from C to table] | Exploring action Move A from E to C | New state -> Invalid | Exploring action Move C from A to F | New state -> Stack 1: [B], Stack 2: [D], Stack 3: [E, A], Stack 4: [F, C] | Exploring action Move C from A to table | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D], Stack 4: [E, A], Stack 5: [F] | Exploring action Move C from A to D | New state -> Stack 1: [B], Stack 2: [D, C], Stack 3: [E, A], Stack 4: [F] | Taking action Move C from A to table | Moved to state -> Stack 1: [B], Stack 2: [C], Stack 3: [D], Stack 4: [E, A], Stack 5: [F] | Plan so far [Move D from F to table | Move F from B to table | Move B from C to table | Move C from A to table] | Exploring action Move E from table to A | New state -> Invalid | Exploring action Move A from E to C | New state -> Stack 1: [B], Stack 2: [C, A], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Exploring action Move E from table to C | New state -> Invalid | Exploring action Move A from E to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Exploring action Move C from table to D | New state -> Stack 1: [B], Stack 2: [D, C], Stack 3: [E, A], Stack 4: [F] | Taking action Move C from A to D | Moved to state -> Stack 1: [B], Stack 2: [D, C], Stack 3: [E, A], Stack 4: [F] | Plan so far [Move D from F to table | Move F from B to table | Move B from C to table | Move C from A to D] | Exploring action Move A from E to F | New state -> Stack 1: [B], Stack 2: [D, C], Stack 3: [E], Stack 4: [F, A] | Exploring action Move E from table to F | New state -> Invalid | Exploring action Move A from E to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, C], Stack 4: [E], Stack 5: [F] | Exploring action Move E from table to C | New state -> Invalid | Exploring action Move A from E to B | New state -> Stack 1: [B, A], Stack 2: [D, C], Stack 3: [E], Stack 4: [F] | Taking action Move A from E to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Plan so far [Move D from F to table | Move F from B to table | Move B from C to table | Move C from A to table | Move A from E to table] | Exploring action Move B from table to E | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D], Stack 4: [E, B], Stack 5: [F] | Exploring action Move C from table to D | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, C], Stack 4: [E], Stack 5: [F] | Exploring action Move F from table to A | New state -> Stack 1: [A, F], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Taking action Move B from table to E | Moved to state -> Stack 1: [A], Stack 2: [C], Stack 3: [D], Stack 4: [E, B], Stack 5: [F] | Plan so far [Move D from F to table | Move F from B to table | Move B from C to table | Move C from A to table | Move A from E to table | Move B from table to E] | Exploring action Move F from table to A | New state -> Stack 1: [A, F], Stack 2: [C], Stack 3: [D], Stack 4: [E, B] | Exploring action Move E from table to D | New state -> Invalid | Exploring action Move A from table to C | New state -> Stack 1: [C, A], Stack 2: [D], Stack 3: [E, B], Stack 4: [F] | Exploring action Move E from table to F | New state -> Invalid | Exploring action Move C from table to D | New state -> Stack 1: [A], Stack 2: [D, C], Stack 3: [E, B], Stack 4: [F] | Taking action Move F from table to A | Moved to state -> Stack 1: [A, F], Stack 2: [C], Stack 3: [D], Stack 4: [E, B] | Plan so far [Move D from F to table | Move F from B to table | Move B from C to table | Move C from A to table | Move A from E to table | Move B from table to E | Move F from table to A] | Exploring action Move C from table to D | New state -> Stack 1: [A, F], Stack 2: [D, C], Stack 3: [E, B] | Exploring action Move C from table to F | New state -> Stack 1: [A, F, C], Stack 2: [D], Stack 3: [E, B] | Exploring action Move E from table to C | New state -> Invalid | Exploring action Move D from table to F | New state -> Stack 1: [A, F, D], Stack 2: [C], Stack 3: [E, B] | Exploring action Move E from table to D | New state -> Invalid | Taking action Move D from table to F | Moved to state -> Stack 1: [A, F, D], Stack 2: [C], Stack 3: [E, B] | Plan so far [Move D from F to table | Move F from B to table | Move B from C to table | Move C from A to table | Move A from E to table | Move B from table to E | Move F from table to A | Move D from table to F] | Exploring action Move C from table to D | New state -> Stack 1: [A, F, D, C], Stack 2: [E, B] | Exploring action Move D from F to table | New state -> Stack 1: [A, F], Stack 2: [C], Stack 3: [D], Stack 4: [E, B] | Exploring action Move E from table to C | New state -> Invalid | Exploring action Move B from E to table | New state -> Stack 1: [A, F, D], Stack 2: [B], Stack 3: [C], Stack 4: [E] | Taking action Move C from table to D | Moved to state -> Stack 1: [A, F, D, C], Stack 2: [E, B] | Plan so far [Move D from F to table | Move F from B to table | Move B from C to table | Move C from A to table | Move A from E to table | Move B from table to E | Move F from table to A | Move D from table to F | Move C from table to D] | Reached goal state!",
        "system2_states_v1": 43
    },
    {
        "idx": 704,
        "start": [
            [
                "table",
                "C",
                "B"
            ],
            [
                "table",
                "D",
                "E",
                "F",
                "A"
            ]
        ],
        "goal": [
            [
                "table",
                "A"
            ],
            [
                "table",
                "D"
            ],
            [
                "table",
                "E",
                "C",
                "B",
                "F"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": true,
                "on": "F",
                "under": -1,
                "ontable": false
            },
            "B": {
                "clear": true,
                "on": "C",
                "under": -1,
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": -1,
                "under": "B",
                "ontable": true
            },
            "D": {
                "clear": false,
                "on": -1,
                "under": "E",
                "ontable": true
            },
            "E": {
                "clear": false,
                "on": "D",
                "under": "F",
                "ontable": false
            },
            "F": {
                "clear": false,
                "on": "E",
                "under": "A",
                "ontable": false
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": true,
                "on": -1,
                "under": -1,
                "ontable": true
            },
            "B": {
                "clear": false,
                "on": "C",
                "under": "F",
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": "E",
                "under": "B",
                "ontable": false
            },
            "D": {
                "clear": true,
                "on": -1,
                "under": -1,
                "ontable": true
            },
            "E": {
                "clear": false,
                "on": -1,
                "under": "C",
                "ontable": true
            },
            "F": {
                "clear": true,
                "on": "B",
                "under": -1,
                "ontable": false
            }
        },
        "plan_len": 8,
        "num_blocks": 6,
        "prompt": "The initial state:\nThe hand is empty.\nC is on the table. B is on C. B is clear.\nD is on the table. E is on D. F is on E. A is on F. A is clear.\n\nThe goal is:\nA is on the table. A is clear.\nD is on the table. D is clear.\nE is on the table. C is on E. B is on C. F is on B. F is clear.\n",
        "system1_plan": "Move A from F to table | Move F from E to B | Move E from D to table | Move F from B to table | Move B from C to table | Move C from table to E | Move B from table to C | Move F from table to B",
        "system1_states": 8,
        "system2_plan_v1": "Moved to state -> Stack 1: [C, B], Stack 2: [D, E, F, A] | Plan so far [] | Exploring action Move A from F to B | New state -> Stack 1: [C, B, A], Stack 2: [D, E, F] | Exploring action Move C from table to A | New state -> Invalid | Exploring action Move A from F to table | New state -> Stack 1: [A], Stack 2: [C, B], Stack 3: [D, E, F] | Exploring action Move E from D to A | New state -> Invalid | Exploring action Move B from C to table | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, E, F, A] | Taking action Move A from F to table | Moved to state -> Stack 1: [A], Stack 2: [C, B], Stack 3: [D, E, F] | Plan so far [Move A from F to table] | Exploring action Move B from C to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D, E, F] | Exploring action Move E from D to B | New state -> Invalid | Exploring action Move F from E to table | New state -> Stack 1: [A], Stack 2: [C, B], Stack 3: [D, E], Stack 4: [F] | Exploring action Move F from E to B | New state -> Stack 1: [A], Stack 2: [C, B, F], Stack 3: [D, E] | Taking action Move F from E to B | Moved to state -> Stack 1: [A], Stack 2: [C, B, F], Stack 3: [D, E] | Plan so far [Move A from F to table | Move F from E to B] | Exploring action Move E from D to F | New state -> Stack 1: [A], Stack 2: [C, B, F, E], Stack 3: [D] | Exploring action Move D from table to A | New state -> Invalid | Exploring action Move E from D to table | New state -> Stack 1: [A], Stack 2: [C, B, F], Stack 3: [D], Stack 4: [E] | Exploring action Move E from D to A | New state -> Stack 1: [A, E], Stack 2: [C, B, F], Stack 3: [D] | Taking action Move E from D to table | Moved to state -> Stack 1: [A], Stack 2: [C, B, F], Stack 3: [D], Stack 4: [E] | Plan so far [Move A from F to table | Move F from E to B | Move E from D to table] | Exploring action Move B from C to E | New state -> Invalid | Exploring action Move A from table to E | New state -> Stack 1: [C, B, F], Stack 2: [D], Stack 3: [E, A] | Exploring action Move D from table to E | New state -> Stack 1: [A], Stack 2: [C, B, F], Stack 3: [E, D] | Exploring action Move E from table to A | New state -> Stack 1: [A, E], Stack 2: [C, B, F], Stack 3: [D] | Exploring action Move C from table to E | New state -> Invalid | Taking action Move E from D to A | Moved to state -> Stack 1: [A, E], Stack 2: [C, B, F], Stack 3: [D] | Plan so far [Move A from F to table | Move F from E to B | Move E from D to A] | Exploring action Move E from A to table | New state -> Stack 1: [A], Stack 2: [C, B, F], Stack 3: [D], Stack 4: [E] | Exploring action Move E from A to F | New state -> Stack 1: [A], Stack 2: [C, B, F, E], Stack 3: [D] | Exploring action Move E from A to D | New state -> Stack 1: [A], Stack 2: [C, B, F], Stack 3: [D, E] | Exploring action Move C from table to F | New state -> Invalid | Taking action Move E from A to table | Moved to state -> Stack 1: [A], Stack 2: [C, B, F], Stack 3: [D], Stack 4: [E] | Plan so far [Move A from F to table | Move F from E to B | Move E from D to A | Move E from A to table] | Taking action Move E from D to F | Moved to state -> Stack 1: [A], Stack 2: [C, B, F, E], Stack 3: [D] | Plan so far [Move A from F to table | Move F from E to B | Move E from D to F] | Exploring action Move E from F to D | New state -> Stack 1: [A], Stack 2: [C, B, F], Stack 3: [D, E] | Exploring action Move C from table to A | New state -> Invalid | Exploring action Move B from C to A | New state -> Invalid | Exploring action Move E from F to table | New state -> Stack 1: [A], Stack 2: [C, B, F], Stack 3: [D], Stack 4: [E] | Exploring action Move E from F to A | New state -> Stack 1: [A, E], Stack 2: [C, B, F], Stack 3: [D] | Taking action Move E from F to table | Moved to state -> Stack 1: [A], Stack 2: [C, B, F], Stack 3: [D], Stack 4: [E] | Plan so far [Move A from F to table | Move F from E to B | Move E from D to F | Move E from F to table] | Taking action Move E from table to A | Moved to state -> Stack 1: [A, E], Stack 2: [C, B, F], Stack 3: [D] | Plan so far [Move A from F to table | Move F from E to B | Move E from D to table | Move E from table to A] | Taking action Move E from table to F | Moved to state -> Stack 1: [A], Stack 2: [C, B, F, E], Stack 3: [D] | Plan so far [Move A from F to table | Move F from E to B | Move E from D to table | Move E from table to F] | Taking action Move F from B to table | Moved to state -> Stack 1: [A], Stack 2: [C, B], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Plan so far [Move A from F to table | Move F from E to B | Move E from D to table | Move F from B to table] | Exploring action Move F from table to B | New state -> Stack 1: [A], Stack 2: [C, B, F], Stack 3: [D], Stack 4: [E] | Exploring action Move C from table to F | New state -> Invalid | Exploring action Move B from C to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Exploring action Move B from C to E | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D], Stack 4: [E, B], Stack 5: [F] | Exploring action Move C from table to B | New state -> Invalid | Taking action Move F from table to B | Moved to state -> Stack 1: [A], Stack 2: [C, B, F], Stack 3: [D], Stack 4: [E] | Plan so far [Move A from F to table | Move F from E to B | Move E from D to table | Move F from B to table | Move F from table to B] | Taking action Move E from table to D | Moved to state -> Stack 1: [A], Stack 2: [C, B, F], Stack 3: [D, E] | Plan so far [Move A from F to table | Move F from E to B | Move E from D to table | Move E from table to D] | Taking action Move B from C to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D, E, F] | Plan so far [Move A from F to table | Move B from C to table] | Exploring action Move D from table to B | New state -> Invalid | Exploring action Move F from E to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D, E], Stack 5: [F] | Exploring action Move F from E to B | New state -> Stack 1: [A], Stack 2: [B, F], Stack 3: [C], Stack 4: [D, E] | Exploring action Move F from E to C | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, F], Stack 4: [D, E] | Taking action Move D from table to E | Moved to state -> Stack 1: [A], Stack 2: [C, B, F], Stack 3: [E, D] | Plan so far [Move A from F to table | Move F from E to B | Move E from D to table | Move D from table to E] | Exploring action Move B from C to table | New state -> Invalid | Exploring action Move D from E to F | New state -> Stack 1: [A], Stack 2: [C, B, F, D], Stack 3: [E] | Exploring action Move D from E to table | New state -> Stack 1: [A], Stack 2: [C, B, F], Stack 3: [D], Stack 4: [E] | Exploring action Move C from table to A | New state -> Invalid | Exploring action Move D from E to A | New state -> Stack 1: [A, D], Stack 2: [C, B, F], Stack 3: [E] | Taking action Move D from E to table | Moved to state -> Stack 1: [A], Stack 2: [C, B, F], Stack 3: [D], Stack 4: [E] | Plan so far [Move A from F to table | Move F from E to B | Move E from D to table | Move D from table to E | Move D from E to table] | Taking action Move E from F to A | Moved to state -> Stack 1: [A, E], Stack 2: [C, B, F], Stack 3: [D] | Plan so far [Move A from F to table | Move F from E to B | Move E from D to F | Move E from F to A] | Taking action Move B from C to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Plan so far [Move A from F to table | Move F from E to B | Move E from D to table | Move F from B to table | Move B from C to table] | Exploring action Move F from table to B | New state -> Stack 1: [A], Stack 2: [B, F], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Exploring action Move C from table to E | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D], Stack 4: [E, C], Stack 5: [F] | Exploring action Move C from table to B | New state -> Stack 1: [A], Stack 2: [B, C], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Taking action Move E from F to D | Moved to state -> Stack 1: [A], Stack 2: [C, B, F], Stack 3: [D, E] | Plan so far [Move A from F to table | Move F from E to B | Move E from D to F | Move E from F to D] | Taking action Move F from E to table | Moved to state -> Stack 1: [A], Stack 2: [C, B], Stack 3: [D, E], Stack 4: [F] | Plan so far [Move A from F to table | Move F from E to table] | Exploring action Move F from table to B | New state -> Stack 1: [A], Stack 2: [C, B, F], Stack 3: [D, E] | Exploring action Move D from table to B | New state -> Invalid | Exploring action Move B from C to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D, E], Stack 5: [F] | Exploring action Move E from D to table | New state -> Stack 1: [A], Stack 2: [C, B], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Taking action Move E from D to table | Moved to state -> Stack 1: [A], Stack 2: [C, B], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Plan so far [Move A from F to table | Move F from E to table | Move E from D to table] | Taking action Move F from table to B | Moved to state -> Stack 1: [A], Stack 2: [C, B, F], Stack 3: [D, E] | Plan so far [Move A from F to table | Move F from E to table | Move F from table to B] | Taking action Move C from table to E | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [D], Stack 4: [E, C], Stack 5: [F] | Plan so far [Move A from F to table | Move F from E to B | Move E from D to table | Move F from B to table | Move B from C to table | Move C from table to E] | Exploring action Move E from table to C | New state -> Invalid | Exploring action Move F from table to B | New state -> Stack 1: [A], Stack 2: [B, F], Stack 3: [D], Stack 4: [E, C] | Exploring action Move F from table to C | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D], Stack 4: [E, C, F] | Exploring action Move B from table to C | New state -> Stack 1: [A], Stack 2: [D], Stack 3: [E, C, B], Stack 4: [F] | Exploring action Move E from table to A | New state -> Invalid | Taking action Move E from D to F | Moved to state -> Stack 1: [A], Stack 2: [C, B], Stack 3: [D], Stack 4: [F, E] | Plan so far [Move A from F to table | Move F from E to table | Move E from D to F] | Exploring action Move B from C to E | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D], Stack 4: [F, E, B] | Exploring action Move E from F to table | New state -> Stack 1: [A], Stack 2: [C, B], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Exploring action Move B from C to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [F, E] | Exploring action Move C from table to A | New state -> Invalid | Exploring action Move C from table to B | New state -> Invalid | Taking action Move B from C to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D, E], Stack 5: [F] | Plan so far [Move A from F to table | Move F from E to table | Move B from C to table] | Exploring action Move E from D to B | New state -> Stack 1: [A], Stack 2: [B, E], Stack 3: [C], Stack 4: [D], Stack 5: [F] | Exploring action Move D from table to A | New state -> Invalid | Exploring action Move E from D to C | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, E], Stack 4: [D], Stack 5: [F] | Exploring action Move E from D to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Taking action Move E from D to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Plan so far [Move A from F to table | Move F from E to table | Move B from C to table | Move E from D to table] | Taking action Move E from D to B | Moved to state -> Stack 1: [A], Stack 2: [C, B, E], Stack 3: [D], Stack 4: [F] | Plan so far [Move A from F to table | Move F from E to table | Move E from D to B] | Exploring action Move E from B to table | New state -> Stack 1: [A], Stack 2: [C, B], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Exploring action Move E from B to F | New state -> Stack 1: [A], Stack 2: [C, B], Stack 3: [D], Stack 4: [F, E] | Exploring action Move B from C to E | New state -> Invalid | Exploring action Move B from C to table | New state -> Invalid | Exploring action Move F from table to E | New state -> Stack 1: [A], Stack 2: [C, B, E, F], Stack 3: [D] | Taking action Move B from table to C | Moved to state -> Stack 1: [A], Stack 2: [D], Stack 3: [E, C, B], Stack 4: [F] | Plan so far [Move A from F to table | Move F from E to B | Move E from D to table | Move F from B to table | Move B from C to table | Move C from table to E | Move B from table to C] | Exploring action Move B from C to F | New state -> Stack 1: [A], Stack 2: [D], Stack 3: [E, C], Stack 4: [F, B] | Exploring action Move E from table to A | New state -> Invalid | Exploring action Move F from table to B | New state -> Stack 1: [A], Stack 2: [D], Stack 3: [E, C, B, F] | Exploring action Move B from C to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D], Stack 4: [E, C], Stack 5: [F] | Taking action Move F from table to B | Moved to state -> Stack 1: [A], Stack 2: [D], Stack 3: [E, C, B, F] | Plan so far [Move A from F to table | Move F from E to B | Move E from D to table | Move F from B to table | Move B from C to table | Move C from table to E | Move B from table to C | Move F from table to B] | Reached goal state!",
        "system2_states_v1": 71
    },
    {
        "idx": 584,
        "start": [
            [
                "table",
                "A",
                "B"
            ],
            [
                "table",
                "D",
                "C",
                "E"
            ]
        ],
        "goal": [
            [
                "table",
                "C",
                "D",
                "A",
                "E",
                "B"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": false,
                "on": -1,
                "under": "B",
                "ontable": true
            },
            "B": {
                "clear": true,
                "on": "A",
                "under": -1,
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": "D",
                "under": "E",
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": -1,
                "under": "C",
                "ontable": true
            },
            "E": {
                "clear": true,
                "on": "C",
                "under": -1,
                "ontable": false
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": false,
                "on": "D",
                "under": "E",
                "ontable": false
            },
            "B": {
                "clear": true,
                "on": "E",
                "under": -1,
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": -1,
                "under": "D",
                "ontable": true
            },
            "D": {
                "clear": false,
                "on": "C",
                "under": "A",
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": "A",
                "under": "B",
                "ontable": false
            }
        },
        "plan_len": 7,
        "num_blocks": 5,
        "prompt": "The initial state:\nThe hand is empty.\nA is on the table. B is on A. B is clear.\nD is on the table. C is on D. E is on C. E is clear.\n\nThe goal is:\nC is on the table. D is on C. A is on D. E is on A. B is on E. B is clear.\n",
        "system1_plan": "Move E from C to table | Move C from D to table | Move B from A to table | Move D from table to C | Move A from table to D | Move E from table to A | Move B from table to E",
        "system1_states": 7,
        "system2_plan_v1": "Moved to state -> Stack 1: [A, B], Stack 2: [D, C, E] | Plan so far [] | Exploring action Move E from C to table | New state -> Stack 1: [A, B], Stack 2: [D, C], Stack 3: [E] | Exploring action Move C from D to table | New state -> Invalid | Exploring action Move B from A to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, C, E] | Exploring action Move B from A to E | New state -> Stack 1: [A], Stack 2: [D, C, E, B] | Taking action Move B from A to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, C, E] | Plan so far [Move B from A to table] | Exploring action Move E from C to A | New state -> Stack 1: [A, E], Stack 2: [B], Stack 3: [D, C] | Exploring action Move E from C to B | New state -> Stack 1: [A], Stack 2: [B, E], Stack 3: [D, C] | Exploring action Move E from C to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, C], Stack 4: [E] | Exploring action Move D from table to A | New state -> Invalid | Taking action Move E from C to table | Moved to state -> Stack 1: [A, B], Stack 2: [D, C], Stack 3: [E] | Plan so far [Move E from C to table] | Exploring action Move B from A to E | New state -> Stack 1: [A], Stack 2: [D, C], Stack 3: [E, B] | Exploring action Move B from A to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, C], Stack 4: [E] | Exploring action Move D from table to C | New state -> Invalid | Exploring action Move C from D to table | New state -> Stack 1: [A, B], Stack 2: [C], Stack 3: [D], Stack 4: [E] | Taking action Move B from A to E | Moved to state -> Stack 1: [A], Stack 2: [D, C, E, B] | Plan so far [Move B from A to E] | Exploring action Move B from E to A | New state -> Stack 1: [A, B], Stack 2: [D, C, E] | Exploring action Move D from table to A | New state -> Invalid | Exploring action Move B from E to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, C, E] | Exploring action Move A from table to B | New state -> Stack 1: [D, C, E, B, A] | Taking action Move B from A to E | Moved to state -> Stack 1: [A], Stack 2: [D, C], Stack 3: [E, B] | Plan so far [Move E from C to table | Move B from A to E] | Exploring action Move C from D to table | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D], Stack 4: [E, B] | Exploring action Move D from table to A | New state -> Invalid | Exploring action Move E from table to B | New state -> Invalid | Exploring action Move B from E to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, C], Stack 4: [E] | Exploring action Move C from D to A | New state -> Stack 1: [A, C], Stack 2: [D], Stack 3: [E, B] | Taking action Move C from D to table | Moved to state -> Stack 1: [A, B], Stack 2: [C], Stack 3: [D], Stack 4: [E] | Plan so far [Move E from C to table | Move C from D to table] | Exploring action Move A from table to E | New state -> Invalid | Exploring action Move B from A to E | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D], Stack 4: [E, B] | Exploring action Move D from table to C | New state -> Stack 1: [A, B], Stack 2: [C, D], Stack 3: [E] | Exploring action Move A from table to C | New state -> Invalid | Exploring action Move B from A to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Taking action Move C from D to table | Moved to state -> Stack 1: [A], Stack 2: [C], Stack 3: [D], Stack 4: [E, B] | Plan so far [Move E from C to table | Move B from A to E | Move C from D to table] | Exploring action Move B from E to D | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, B], Stack 4: [E] | Exploring action Move D from table to C | New state -> Stack 1: [A], Stack 2: [C, D], Stack 3: [E, B] | Exploring action Move B from E to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Exploring action Move E from table to D | New state -> Invalid | Taking action Move B from A to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Plan so far [Move E from C to table | Move C from D to table | Move B from A to table] | Exploring action Move A from table to D | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, A], Stack 4: [E] | Exploring action Move B from table to E | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D], Stack 4: [E, B] | Exploring action Move D from table to C | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, D], Stack 4: [E] | Taking action Move B from A to E | Moved to state -> Stack 1: [A], Stack 2: [C], Stack 3: [D], Stack 4: [E, B] | Plan so far [Move E from C to table | Move C from D to table | Move B from A to E] | Taking action Move D from table to C | Moved to state -> Stack 1: [A], Stack 2: [C, D], Stack 3: [E, B] | Plan so far [Move E from C to table | Move B from A to E | Move C from D to table | Move D from table to C] | Exploring action Move B from E to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, D], Stack 4: [E] | Exploring action Move E from table to B | New state -> Invalid | Exploring action Move D from C to table | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D], Stack 4: [E, B] | Exploring action Move A from table to D | New state -> Stack 1: [C, D, A], Stack 2: [E, B] | Taking action Move E from C to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, C], Stack 4: [E] | Plan so far [Move B from A to table | Move E from C to table] | Exploring action Move C from D to A | New state -> Stack 1: [A, C], Stack 2: [B], Stack 3: [D], Stack 4: [E] | Exploring action Move B from table to E | New state -> Stack 1: [A], Stack 2: [D, C], Stack 3: [E, B] | Exploring action Move D from table to C | New state -> Invalid | Exploring action Move C from D to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Exploring action Move D from table to A | New state -> Invalid | Taking action Move B from A to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, C], Stack 4: [E] | Plan so far [Move E from C to table | Move B from A to table] | Taking action Move D from table to C | Moved to state -> Stack 1: [A, B], Stack 2: [C, D], Stack 3: [E] | Plan so far [Move E from C to table | Move C from D to table | Move D from table to C] | Exploring action Move C from table to B | New state -> Invalid | Exploring action Move B from A to D | New state -> Stack 1: [A], Stack 2: [C, D, B], Stack 3: [E] | Exploring action Move C from table to D | New state -> Invalid | Exploring action Move B from A to E | New state -> Stack 1: [A], Stack 2: [C, D], Stack 3: [E, B] | Exploring action Move B from A to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, D], Stack 4: [E] | Taking action Move C from D to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Plan so far [Move B from A to table | Move E from C to table | Move C from D to table] | Taking action Move D from table to C | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, D], Stack 4: [E] | Plan so far [Move E from C to table | Move C from D to table | Move B from A to table | Move D from table to C] | Exploring action Move C from table to B | New state -> Invalid | Exploring action Move D from C to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Exploring action Move B from table to E | New state -> Stack 1: [A], Stack 2: [C, D], Stack 3: [E, B] | Exploring action Move C from table to E | New state -> Invalid | Exploring action Move A from table to D | New state -> Stack 1: [B], Stack 2: [C, D, A], Stack 3: [E] | Taking action Move B from A to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, D], Stack 4: [E] | Plan so far [Move E from C to table | Move C from D to table | Move D from table to C | Move B from A to table] | Taking action Move B from A to E | Moved to state -> Stack 1: [A], Stack 2: [C, D], Stack 3: [E, B] | Plan so far [Move E from C to table | Move C from D to table | Move D from table to C | Move B from A to E] | Taking action Move A from table to D | Moved to state -> Stack 1: [B], Stack 2: [C, D, A], Stack 3: [E] | Plan so far [Move E from C to table | Move C from D to table | Move B from A to table | Move D from table to C | Move A from table to D] | Exploring action Move E from table to A | New state -> Stack 1: [B], Stack 2: [C, D, A, E] | Exploring action Move B from table to E | New state -> Stack 1: [C, D, A], Stack 2: [E, B] | Exploring action Move E from table to B | New state -> Stack 1: [B, E], Stack 2: [C, D, A] | Exploring action Move C from table to A | New state -> Invalid | Taking action Move A from table to D | Moved to state -> Stack 1: [C, D, A], Stack 2: [E, B] | Plan so far [Move E from C to table | Move B from A to E | Move C from D to table | Move D from table to C | Move A from table to D] | Exploring action Move D from C to table | New state -> Invalid | Exploring action Move B from E to table | New state -> Stack 1: [B], Stack 2: [C, D, A], Stack 3: [E] | Exploring action Move C from table to A | New state -> Invalid | Exploring action Move A from D to table | New state -> Stack 1: [A], Stack 2: [C, D], Stack 3: [E, B] | Exploring action Move B from E to A | New state -> Stack 1: [C, D, A, B], Stack 2: [E] | Taking action Move E from table to A | Moved to state -> Stack 1: [B], Stack 2: [C, D, A, E] | Plan so far [Move E from C to table | Move C from D to table | Move B from A to table | Move D from table to C | Move A from table to D | Move E from table to A] | Exploring action Move E from A to table | New state -> Stack 1: [B], Stack 2: [C, D, A], Stack 3: [E] | Exploring action Move D from C to E | New state -> Invalid | Exploring action Move E from A to B | New state -> Stack 1: [B, E], Stack 2: [C, D, A] | Exploring action Move B from table to E | New state -> Stack 1: [C, D, A, E, B] | Exploring action Move A from D to table | New state -> Invalid | Taking action Move B from table to E | Moved to state -> Stack 1: [C, D, A, E, B] | Plan so far [Move E from C to table | Move C from D to table | Move B from A to table | Move D from table to C | Move A from table to D | Move E from table to A | Move B from table to E] | Reached goal state!",
        "system2_states_v1": 66
    },
    {
        "idx": 684,
        "start": [
            [
                "table",
                "E",
                "B",
                "C",
                "A",
                "D"
            ],
            [
                "table",
                "F"
            ]
        ],
        "goal": [
            [
                "table",
                "A",
                "D",
                "C",
                "E",
                "F"
            ],
            [
                "table",
                "B"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": false,
                "on": "C",
                "under": "D",
                "ontable": false
            },
            "B": {
                "clear": false,
                "on": "E",
                "under": "C",
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": "B",
                "under": "A",
                "ontable": false
            },
            "D": {
                "clear": true,
                "on": "A",
                "under": -1,
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": -1,
                "under": "B",
                "ontable": true
            },
            "F": {
                "clear": true,
                "on": -1,
                "under": -1,
                "ontable": true
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": false,
                "on": -1,
                "under": "D",
                "ontable": true
            },
            "B": {
                "clear": true,
                "on": -1,
                "under": -1,
                "ontable": true
            },
            "C": {
                "clear": false,
                "on": "D",
                "under": "E",
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": "A",
                "under": "C",
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": "C",
                "under": "F",
                "ontable": false
            },
            "F": {
                "clear": true,
                "on": "E",
                "under": -1,
                "ontable": false
            }
        },
        "plan_len": 8,
        "num_blocks": 6,
        "prompt": "The initial state:\nThe hand is empty.\nE is on the table. B is on E. C is on B. A is on C. D is on A. D is clear.\nF is on the table. F is clear.\n\nThe goal is:\nA is on the table. D is on A. C is on D. E is on C. F is on E. F is clear.\nB is on the table. B is clear.\n",
        "system1_plan": "Move D from A to table | Move A from C to table | Move C from B to table | Move B from E to table | Move D from table to A | Move C from table to D | Move E from table to C | Move F from table to E",
        "system1_states": 8,
        "system2_plan_v1": "Moved to state -> Stack 1: [E, B, C, A, D], Stack 2: [F] | Plan so far [] | Exploring action Move F from table to D | New state -> Stack 1: [E, B, C, A, D, F] | Exploring action Move C from B to D | New state -> Invalid | Exploring action Move D from A to table | New state -> Stack 1: [D], Stack 2: [E, B, C, A], Stack 3: [F] | Exploring action Move D from A to F | New state -> Stack 1: [E, B, C, A], Stack 2: [F, D] | Taking action Move D from A to table | Moved to state -> Stack 1: [D], Stack 2: [E, B, C, A], Stack 3: [F] | Plan so far [Move D from A to table] | Exploring action Move A from C to table | New state -> Stack 1: [A], Stack 2: [D], Stack 3: [E, B, C], Stack 4: [F] | Exploring action Move A from C to D | New state -> Stack 1: [D, A], Stack 2: [E, B, C], Stack 3: [F] | Exploring action Move A from C to F | New state -> Stack 1: [D], Stack 2: [E, B, C], Stack 3: [F, A] | Exploring action Move B from E to A | New state -> Invalid | Taking action Move A from C to table | Moved to state -> Stack 1: [A], Stack 2: [D], Stack 3: [E, B, C], Stack 4: [F] | Plan so far [Move D from A to table | Move A from C to table] | Exploring action Move B from E to C | New state -> Invalid | Exploring action Move C from B to D | New state -> Stack 1: [A], Stack 2: [D, C], Stack 3: [E, B], Stack 4: [F] | Exploring action Move B from E to D | New state -> Invalid | Exploring action Move C from B to table | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D], Stack 4: [E, B], Stack 5: [F] | Exploring action Move D from table to A | New state -> Stack 1: [A, D], Stack 2: [E, B, C], Stack 3: [F] | Taking action Move C from B to table | Moved to state -> Stack 1: [A], Stack 2: [C], Stack 3: [D], Stack 4: [E, B], Stack 5: [F] | Plan so far [Move D from A to table | Move A from C to table | Move C from B to table] | Exploring action Move B from E to A | New state -> Stack 1: [A, B], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Exploring action Move B from E to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Exploring action Move E from table to B | New state -> Invalid | Exploring action Move D from table to A | New state -> Stack 1: [A, D], Stack 2: [C], Stack 3: [E, B], Stack 4: [F] | Taking action Move B from E to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Plan so far [Move D from A to table | Move A from C to table | Move C from B to table | Move B from E to table] | Exploring action Move F from table to E | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E, F] | Exploring action Move D from table to A | New state -> Stack 1: [A, D], Stack 2: [B], Stack 3: [C], Stack 4: [E], Stack 5: [F] | Exploring action Move A from table to D | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, A], Stack 4: [E], Stack 5: [F] | Taking action Move D from table to A | Moved to state -> Stack 1: [A, D], Stack 2: [B], Stack 3: [C], Stack 4: [E], Stack 5: [F] | Plan so far [Move D from A to table | Move A from C to table | Move C from B to table | Move B from E to table | Move D from table to A] | Exploring action Move C from table to D | New state -> Stack 1: [A, D, C], Stack 2: [B], Stack 3: [E], Stack 4: [F] | Exploring action Move F from table to E | New state -> Stack 1: [A, D], Stack 2: [B], Stack 3: [C], Stack 4: [E, F] | Exploring action Move A from table to D | New state -> Invalid | Exploring action Move C from table to E | New state -> Stack 1: [A, D], Stack 2: [B], Stack 3: [E, C], Stack 4: [F] | Exploring action Move A from table to C | New state -> Invalid | Taking action Move C from table to D | Moved to state -> Stack 1: [A, D, C], Stack 2: [B], Stack 3: [E], Stack 4: [F] | Plan so far [Move D from A to table | Move A from C to table | Move C from B to table | Move B from E to table | Move D from table to A | Move C from table to D] | Exploring action Move F from table to E | New state -> Stack 1: [A, D, C], Stack 2: [B], Stack 3: [E, F] | Exploring action Move A from table to F | New state -> Invalid | Exploring action Move E from table to C | New state -> Stack 1: [A, D, C, E], Stack 2: [B], Stack 3: [F] | Exploring action Move D from A to table | New state -> Invalid | Exploring action Move F from table to C | New state -> Stack 1: [A, D, C, F], Stack 2: [B], Stack 3: [E] | Taking action Move E from table to C | Moved to state -> Stack 1: [A, D, C, E], Stack 2: [B], Stack 3: [F] | Plan so far [Move D from A to table | Move A from C to table | Move C from B to table | Move B from E to table | Move D from table to A | Move C from table to D | Move E from table to C] | Exploring action Move F from table to B | New state -> Stack 1: [A, D, C, E], Stack 2: [B, F] | Exploring action Move F from table to E | New state -> Stack 1: [A, D, C, E, F], Stack 2: [B] | Exploring action Move E from C to table | New state -> Stack 1: [A, D, C], Stack 2: [B], Stack 3: [E], Stack 4: [F] | Exploring action Move C from D to F | New state -> Invalid | Taking action Move F from table to E | Moved to state -> Stack 1: [A, D, C, E, F], Stack 2: [B] | Plan so far [Move D from A to table | Move A from C to table | Move C from B to table | Move B from E to table | Move D from table to A | Move C from table to D | Move E from table to C | Move F from table to E] | Reached goal state!",
        "system2_states_v1": 34
    },
    {
        "idx": 588,
        "start": [
            [
                "table",
                "B",
                "C",
                "A",
                "D"
            ],
            [
                "table",
                "E"
            ]
        ],
        "goal": [
            [
                "table",
                "B",
                "D",
                "C",
                "A",
                "E"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": false,
                "on": "C",
                "under": "D",
                "ontable": false
            },
            "B": {
                "clear": false,
                "on": -1,
                "under": "C",
                "ontable": true
            },
            "C": {
                "clear": false,
                "on": "B",
                "under": "A",
                "ontable": false
            },
            "D": {
                "clear": true,
                "on": "A",
                "under": -1,
                "ontable": false
            },
            "E": {
                "clear": true,
                "on": -1,
                "under": -1,
                "ontable": true
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": false,
                "on": "C",
                "under": "E",
                "ontable": false
            },
            "B": {
                "clear": false,
                "on": -1,
                "under": "D",
                "ontable": true
            },
            "C": {
                "clear": false,
                "on": "D",
                "under": "A",
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": "B",
                "under": "C",
                "ontable": false
            },
            "E": {
                "clear": true,
                "on": "A",
                "under": -1,
                "ontable": false
            }
        },
        "plan_len": 7,
        "num_blocks": 5,
        "prompt": "The initial state:\nThe hand is empty.\nB is on the table. C is on B. A is on C. D is on A. D is clear.\nE is on the table. E is clear.\n\nThe goal is:\nB is on the table. D is on B. C is on D. A is on C. E is on A. E is clear.\n",
        "system1_plan": "Move D from A to table | Move A from C to table | Move C from B to table | Move D from table to B | Move C from table to D | Move A from table to C | Move E from table to A",
        "system1_states": 7,
        "system2_plan_v1": "Moved to state -> Stack 1: [B, C, A, D], Stack 2: [E] | Plan so far [] | Exploring action Move D from A to table | New state -> Stack 1: [B, C, A], Stack 2: [D], Stack 3: [E] | Exploring action Move C from B to D | New state -> Invalid | Exploring action Move D from A to E | New state -> Stack 1: [B, C, A], Stack 2: [E, D] | Exploring action Move E from table to D | New state -> Stack 1: [B, C, A, D, E] | Taking action Move D from A to table | Moved to state -> Stack 1: [B, C, A], Stack 2: [D], Stack 3: [E] | Plan so far [Move D from A to table] | Exploring action Move A from C to E | New state -> Stack 1: [B, C], Stack 2: [D], Stack 3: [E, A] | Exploring action Move A from C to table | New state -> Stack 1: [A], Stack 2: [B, C], Stack 3: [D], Stack 4: [E] | Exploring action Move E from table to A | New state -> Stack 1: [B, C, A, E], Stack 2: [D] | Exploring action Move B from table to E | New state -> Invalid | Taking action Move E from table to A | Moved to state -> Stack 1: [B, C, A, E], Stack 2: [D] | Plan so far [Move D from A to table | Move E from table to A] | Exploring action Move D from table to E | New state -> Stack 1: [B, C, A, E, D] | Exploring action Move E from A to table | New state -> Stack 1: [B, C, A], Stack 2: [D], Stack 3: [E] | Exploring action Move A from C to E | New state -> Invalid | Exploring action Move E from A to D | New state -> Stack 1: [B, C, A], Stack 2: [D, E] | Exploring action Move B from table to E | New state -> Invalid | Taking action Move A from C to table | Moved to state -> Stack 1: [A], Stack 2: [B, C], Stack 3: [D], Stack 4: [E] | Plan so far [Move D from A to table | Move A from C to table] | Exploring action Move B from table to D | New state -> Invalid | Exploring action Move C from B to E | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D], Stack 4: [E, C] | Exploring action Move C from B to D | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, C], Stack 4: [E] | Exploring action Move C from B to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Exploring action Move B from table to A | New state -> Invalid | Taking action Move C from B to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Plan so far [Move D from A to table | Move A from C to table | Move C from B to table] | Exploring action Move D from table to B | New state -> Stack 1: [A], Stack 2: [B, D], Stack 3: [C], Stack 4: [E] | Exploring action Move E from table to A | New state -> Stack 1: [A, E], Stack 2: [B], Stack 3: [C], Stack 4: [D] | Exploring action Move A from table to B | New state -> Stack 1: [B, A], Stack 2: [C], Stack 3: [D], Stack 4: [E] | Taking action Move D from table to B | Moved to state -> Stack 1: [A], Stack 2: [B, D], Stack 3: [C], Stack 4: [E] | Plan so far [Move D from A to table | Move A from C to table | Move C from B to table | Move D from table to B] | Exploring action Move E from table to A | New state -> Stack 1: [A, E], Stack 2: [B, D], Stack 3: [C] | Exploring action Move C from table to D | New state -> Stack 1: [A], Stack 2: [B, D, C], Stack 3: [E] | Exploring action Move B from table to E | New state -> Invalid | Exploring action Move B from table to A | New state -> Invalid | Exploring action Move A from table to E | New state -> Stack 1: [B, D], Stack 2: [C], Stack 3: [E, A] | Taking action Move C from table to D | Moved to state -> Stack 1: [A], Stack 2: [B, D, C], Stack 3: [E] | Plan so far [Move D from A to table | Move A from C to table | Move C from B to table | Move D from table to B | Move C from table to D] | Exploring action Move B from table to E | New state -> Invalid | Exploring action Move D from B to E | New state -> Invalid | Exploring action Move C from D to table | New state -> Stack 1: [A], Stack 2: [B, D], Stack 3: [C], Stack 4: [E] | Exploring action Move E from table to A | New state -> Stack 1: [A, E], Stack 2: [B, D, C] | Exploring action Move A from table to C | New state -> Stack 1: [B, D, C, A], Stack 2: [E] | Taking action Move A from table to C | Moved to state -> Stack 1: [B, D, C, A], Stack 2: [E] | Plan so far [Move D from A to table | Move A from C to table | Move C from B to table | Move D from table to B | Move C from table to D | Move A from table to C] | Exploring action Move A from C to table | New state -> Stack 1: [A], Stack 2: [B, D, C], Stack 3: [E] | Exploring action Move D from B to A | New state -> Invalid | Exploring action Move A from C to E | New state -> Stack 1: [B, D, C], Stack 2: [E, A] | Exploring action Move E from table to A | New state -> Stack 1: [B, D, C, A, E] | Taking action Move E from table to A | Moved to state -> Stack 1: [B, D, C, A, E] | Plan so far [Move D from A to table | Move A from C to table | Move C from B to table | Move D from table to B | Move C from table to D | Move A from table to C | Move E from table to A] | Reached goal state!",
        "system2_states_v1": 35
    },
    {
        "idx": 898,
        "start": [
            [
                "table",
                "B",
                "F",
                "E",
                "C"
            ],
            [
                "table",
                "G",
                "D",
                "A"
            ]
        ],
        "goal": [
            [
                "table",
                "B",
                "G"
            ],
            [
                "table",
                "E",
                "C",
                "A"
            ],
            [
                "table",
                "F",
                "D"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": true,
                "on": "D",
                "under": -1,
                "ontable": false
            },
            "B": {
                "clear": false,
                "on": -1,
                "under": "F",
                "ontable": true
            },
            "C": {
                "clear": true,
                "on": "E",
                "under": -1,
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": "G",
                "under": "A",
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": "F",
                "under": "C",
                "ontable": false
            },
            "F": {
                "clear": false,
                "on": "B",
                "under": "E",
                "ontable": false
            },
            "G": {
                "clear": false,
                "on": -1,
                "under": "D",
                "ontable": true
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": true,
                "on": "C",
                "under": -1,
                "ontable": false
            },
            "B": {
                "clear": false,
                "on": -1,
                "under": "G",
                "ontable": true
            },
            "C": {
                "clear": false,
                "on": "E",
                "under": "A",
                "ontable": false
            },
            "D": {
                "clear": true,
                "on": "F",
                "under": -1,
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": -1,
                "under": "C",
                "ontable": true
            },
            "F": {
                "clear": false,
                "on": -1,
                "under": "D",
                "ontable": true
            },
            "G": {
                "clear": true,
                "on": "B",
                "under": -1,
                "ontable": false
            }
        },
        "plan_len": 10,
        "num_blocks": 7,
        "prompt": "The initial state:\nThe hand is empty.\nB is on the table. F is on B. E is on F. C is on E. C is clear.\nG is on the table. D is on G. A is on D. A is clear.\n\nThe goal is:\nB is on the table. G is on B. G is clear.\nE is on the table. C is on E. A is on C. A is clear.\nF is on the table. D is on F. D is clear.\n",
        "system1_plan": "Move C from E to table | Move A from D to C | Move D from G to table | Move E from F to table | Move F from B to table | Move D from table to F | Move G from table to B | Move A from C to table | Move C from table to E | Move A from table to C",
        "system1_states": 10,
        "system2_plan_v1": "Moved to state -> Stack 1: [B, F, E, C], Stack 2: [G, D, A] | Plan so far [] | Exploring action Move A from D to table | New state -> Stack 1: [A], Stack 2: [B, F, E, C], Stack 3: [G, D] | Exploring action Move C from E to table | New state -> Stack 1: [B, F, E], Stack 2: [C], Stack 3: [G, D, A] | Exploring action Move A from D to C | New state -> Stack 1: [B, F, E, C, A], Stack 2: [G, D] | Exploring action Move D from G to C | New state -> Invalid | Taking action Move A from D to C | Moved to state -> Stack 1: [B, F, E, C, A], Stack 2: [G, D] | Plan so far [Move A from D to C] | Exploring action Move A from C to table | New state -> Stack 1: [A], Stack 2: [B, F, E, C], Stack 3: [G, D] | Exploring action Move D from G to table | New state -> Stack 1: [B, F, E, C, A], Stack 2: [D], Stack 3: [G] | Exploring action Move F from B to D | New state -> Invalid | Exploring action Move D from G to A | New state -> Stack 1: [B, F, E, C, A, D], Stack 2: [G] | Exploring action Move F from B to table | New state -> Invalid | Taking action Move D from G to table | Moved to state -> Stack 1: [B, F, E, C, A], Stack 2: [D], Stack 3: [G] | Plan so far [Move A from D to C | Move D from G to table] | Exploring action Move G from table to A | New state -> Stack 1: [B, F, E, C, A, G], Stack 2: [D] | Exploring action Move G from table to D | New state -> Stack 1: [B, F, E, C, A], Stack 2: [D, G] | Exploring action Move B from table to A | New state -> Invalid | Exploring action Move D from table to G | New state -> Stack 1: [B, F, E, C, A], Stack 2: [G, D] | Exploring action Move F from B to A | New state -> Invalid | Taking action Move C from E to table | Moved to state -> Stack 1: [B, F, E], Stack 2: [C], Stack 3: [G, D, A] | Plan so far [Move C from E to table] | Exploring action Move A from D to C | New state -> Stack 1: [B, F, E], Stack 2: [C, A], Stack 3: [G, D] | Exploring action Move E from F to table | New state -> Stack 1: [B, F], Stack 2: [C], Stack 3: [E], Stack 4: [G, D, A] | Exploring action Move A from D to table | New state -> Stack 1: [A], Stack 2: [B, F, E], Stack 3: [C], Stack 4: [G, D] | Exploring action Move B from table to A | New state -> Invalid | Exploring action Move D from G to C | New state -> Invalid | Taking action Move D from G to A | Moved to state -> Stack 1: [B, F, E, C, A, D], Stack 2: [G] | Plan so far [Move A from D to C | Move D from G to A] | Exploring action Move G from table to D | New state -> Stack 1: [B, F, E, C, A, D, G] | Exploring action Move F from B to D | New state -> Invalid | Exploring action Move D from A to G | New state -> Stack 1: [B, F, E, C, A], Stack 2: [G, D] | Exploring action Move D from A to table | New state -> Stack 1: [B, F, E, C, A], Stack 2: [D], Stack 3: [G] | Taking action Move D from A to table | Moved to state -> Stack 1: [B, F, E, C, A], Stack 2: [D], Stack 3: [G] | Plan so far [Move A from D to C | Move D from G to A | Move D from A to table] | Taking action Move A from D to C | Moved to state -> Stack 1: [B, F, E], Stack 2: [C, A], Stack 3: [G, D] | Plan so far [Move C from E to table | Move A from D to C] | Exploring action Move F from B to E | New state -> Invalid | Exploring action Move E from F to table | New state -> Stack 1: [B, F], Stack 2: [C, A], Stack 3: [E], Stack 4: [G, D] | Exploring action Move C from table to E | New state -> Invalid | Exploring action Move D from G to table | New state -> Stack 1: [B, F, E], Stack 2: [C, A], Stack 3: [D], Stack 4: [G] | Exploring action Move D from G to E | New state -> Stack 1: [B, F, E, D], Stack 2: [C, A], Stack 3: [G] | Taking action Move A from D to table | Moved to state -> Stack 1: [A], Stack 2: [B, F, E], Stack 3: [C], Stack 4: [G, D] | Plan so far [Move C from E to table | Move A from D to table] | Exploring action Move D from G to table | New state -> Stack 1: [A], Stack 2: [B, F, E], Stack 3: [C], Stack 4: [D], Stack 5: [G] | Exploring action Move F from B to A | New state -> Invalid | Exploring action Move A from table to C | New state -> Stack 1: [B, F, E], Stack 2: [C, A], Stack 3: [G, D] | Exploring action Move E from F to table | New state -> Stack 1: [A], Stack 2: [B, F], Stack 3: [C], Stack 4: [E], Stack 5: [G, D] | Exploring action Move B from table to E | New state -> Invalid | Taking action Move D from A to G | Moved to state -> Stack 1: [B, F, E, C, A], Stack 2: [G, D] | Plan so far [Move A from D to C | Move D from G to A | Move D from A to G] | Taking action Move D from G to table | Moved to state -> Stack 1: [B, F, E], Stack 2: [C, A], Stack 3: [D], Stack 4: [G] | Plan so far [Move C from E to table | Move A from D to C | Move D from G to table] | Exploring action Move A from C to table | New state -> Stack 1: [A], Stack 2: [B, F, E], Stack 3: [C], Stack 4: [D], Stack 5: [G] | Exploring action Move E from F to table | New state -> Stack 1: [B, F], Stack 2: [C, A], Stack 3: [D], Stack 4: [E], Stack 5: [G] | Exploring action Move B from table to E | New state -> Invalid | Exploring action Move E from F to D | New state -> Stack 1: [B, F], Stack 2: [C, A], Stack 3: [D, E], Stack 4: [G] | Taking action Move E from F to table | Moved to state -> Stack 1: [B, F], Stack 2: [C, A], Stack 3: [E], Stack 4: [G, D] | Plan so far [Move C from E to table | Move A from D to C | Move E from F to table] | Exploring action Move D from G to F | New state -> Stack 1: [B, F, D], Stack 2: [C, A], Stack 3: [E], Stack 4: [G] | Exploring action Move G from table to F | New state -> Invalid | Exploring action Move F from B to table | New state -> Stack 1: [B], Stack 2: [C, A], Stack 3: [E], Stack 4: [F], Stack 5: [G, D] | Exploring action Move D from G to table | New state -> Stack 1: [B, F], Stack 2: [C, A], Stack 3: [D], Stack 4: [E], Stack 5: [G] | Taking action Move E from F to table | Moved to state -> Stack 1: [B, F], Stack 2: [C, A], Stack 3: [D], Stack 4: [E], Stack 5: [G] | Plan so far [Move C from E to table | Move A from D to C | Move D from G to table | Move E from F to table] | Exploring action Move A from C to table | New state -> Stack 1: [A], Stack 2: [B, F], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [G] | Exploring action Move D from table to F | New state -> Stack 1: [B, F, D], Stack 2: [C, A], Stack 3: [E], Stack 4: [G] | Exploring action Move C from table to F | New state -> Invalid | Exploring action Move F from B to table | New state -> Stack 1: [B], Stack 2: [C, A], Stack 3: [D], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Taking action Move D from G to table | Moved to state -> Stack 1: [B, F], Stack 2: [C, A], Stack 3: [D], Stack 4: [E], Stack 5: [G] | Plan so far [Move C from E to table | Move A from D to C | Move E from F to table | Move D from G to table] | Taking action Move D from G to F | Moved to state -> Stack 1: [B, F, D], Stack 2: [C, A], Stack 3: [E], Stack 4: [G] | Plan so far [Move C from E to table | Move A from D to C | Move E from F to table | Move D from G to F] | Exploring action Move A from C to table | New state -> Stack 1: [A], Stack 2: [B, F, D], Stack 3: [C], Stack 4: [E], Stack 5: [G] | Exploring action Move D from F to table | New state -> Stack 1: [B, F], Stack 2: [C, A], Stack 3: [D], Stack 4: [E], Stack 5: [G] | Exploring action Move A from C to E | New state -> Stack 1: [B, F, D], Stack 2: [C], Stack 3: [E, A], Stack 4: [G] | Exploring action Move F from B to table | New state -> Invalid | Taking action Move G from table to D | Moved to state -> Stack 1: [B, F, E, C, A], Stack 2: [D, G] | Plan so far [Move A from D to C | Move D from G to table | Move G from table to D] | Exploring action Move E from F to table | New state -> Invalid | Exploring action Move D from table to G | New state -> Invalid | Exploring action Move G from D to A | New state -> Stack 1: [B, F, E, C, A, G], Stack 2: [D] | Exploring action Move G from D to table | New state -> Stack 1: [B, F, E, C, A], Stack 2: [D], Stack 3: [G] | Exploring action Move A from C to table | New state -> Stack 1: [A], Stack 2: [B, F, E, C], Stack 3: [D, G] | Taking action Move A from D to table | Moved to state -> Stack 1: [A], Stack 2: [B, F, E, C], Stack 3: [G, D] | Plan so far [Move A from D to table] | Exploring action Move D from G to table | New state -> Stack 1: [A], Stack 2: [B, F, E, C], Stack 3: [D], Stack 4: [G] | Exploring action Move C from E to table | New state -> Stack 1: [A], Stack 2: [B, F, E], Stack 3: [C], Stack 4: [G, D] | Exploring action Move A from table to C | New state -> Stack 1: [B, F, E, C, A], Stack 2: [G, D] | Exploring action Move G from table to A | New state -> Invalid | Taking action Move A from table to C | Moved to state -> Stack 1: [B, F, E, C, A], Stack 2: [G, D] | Plan so far [Move A from D to table | Move A from table to C] | Taking action Move G from D to table | Moved to state -> Stack 1: [B, F, E, C, A], Stack 2: [D], Stack 3: [G] | Plan so far [Move A from D to C | Move D from G to table | Move G from table to D | Move G from D to table] | Taking action Move C from E to table | Moved to state -> Stack 1: [A], Stack 2: [B, F, E], Stack 3: [C], Stack 4: [G, D] | Plan so far [Move A from D to table | Move C from E to table] | Taking action Move D from G to table | Moved to state -> Stack 1: [A], Stack 2: [B, F, E, C], Stack 3: [D], Stack 4: [G] | Plan so far [Move A from D to table | Move D from G to table] | Exploring action Move B from table to G | New state -> Invalid | Exploring action Move A from table to C | New state -> Stack 1: [B, F, E, C, A], Stack 2: [D], Stack 3: [G] | Exploring action Move C from E to D | New state -> Stack 1: [A], Stack 2: [B, F, E], Stack 3: [D, C], Stack 4: [G] | Exploring action Move C from E to table | New state -> Stack 1: [A], Stack 2: [B, F, E], Stack 3: [C], Stack 4: [D], Stack 5: [G] | Exploring action Move F from B to C | New state -> Invalid | Taking action Move A from table to C | Moved to state -> Stack 1: [B, F, E, C, A], Stack 2: [D], Stack 3: [G] | Plan so far [Move A from D to table | Move D from G to table | Move A from table to C] | Taking action Move D from table to G | Moved to state -> Stack 1: [B, F, E, C, A], Stack 2: [G, D] | Plan so far [Move A from D to C | Move D from G to table | Move D from table to G] | Taking action Move C from E to table | Moved to state -> Stack 1: [A], Stack 2: [B, F, E], Stack 3: [C], Stack 4: [D], Stack 5: [G] | Plan so far [Move A from D to table | Move D from G to table | Move C from E to table] | Exploring action Move E from F to table | New state -> Stack 1: [A], Stack 2: [B, F], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [G] | Exploring action Move B from table to A | New state -> Invalid | Exploring action Move E from F to A | New state -> Stack 1: [A, E], Stack 2: [B, F], Stack 3: [C], Stack 4: [D], Stack 5: [G] | Exploring action Move A from table to C | New state -> Stack 1: [B, F, E], Stack 2: [C, A], Stack 3: [D], Stack 4: [G] | Taking action Move F from B to table | Moved to state -> Stack 1: [B], Stack 2: [C, A], Stack 3: [D], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Plan so far [Move C from E to table | Move A from D to C | Move D from G to table | Move E from F to table | Move F from B to table] | Exploring action Move G from table to B | New state -> Stack 1: [B, G], Stack 2: [C, A], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Exploring action Move D from table to F | New state -> Stack 1: [B], Stack 2: [C, A], Stack 3: [E], Stack 4: [F, D], Stack 5: [G] | Exploring action Move C from table to D | New state -> Invalid | Exploring action Move A from C to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F], Stack 7: [G] | Taking action Move D from table to F | Moved to state -> Stack 1: [B], Stack 2: [C, A], Stack 3: [E], Stack 4: [F, D], Stack 5: [G] | Plan so far [Move C from E to table | Move A from D to C | Move D from G to table | Move E from F to table | Move F from B to table | Move D from table to F] | Exploring action Move F from table to D | New state -> Invalid | Exploring action Move F from table to B | New state -> Invalid | Exploring action Move A from C to B | New state -> Stack 1: [B, A], Stack 2: [C], Stack 3: [E], Stack 4: [F, D], Stack 5: [G] | Exploring action Move A from C to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [E], Stack 5: [F, D], Stack 6: [G] | Exploring action Move G from table to B | New state -> Stack 1: [B, G], Stack 2: [C, A], Stack 3: [E], Stack 4: [F, D] | Taking action Move G from table to B | Moved to state -> Stack 1: [B, G], Stack 2: [C, A], Stack 3: [E], Stack 4: [F, D] | Plan so far [Move C from E to table | Move A from D to C | Move D from G to table | Move E from F to table | Move F from B to table | Move D from table to F | Move G from table to B] | Exploring action Move A from C to table | New state -> Stack 1: [A], Stack 2: [B, G], Stack 3: [C], Stack 4: [E], Stack 5: [F, D] | Exploring action Move A from C to E | New state -> Stack 1: [B, G], Stack 2: [C], Stack 3: [E, A], Stack 4: [F, D] | Exploring action Move G from B to table | New state -> Stack 1: [B], Stack 2: [C, A], Stack 3: [E], Stack 4: [F, D], Stack 5: [G] | Exploring action Move C from table to D | New state -> Invalid | Taking action Move G from table to B | Moved to state -> Stack 1: [B, G], Stack 2: [C, A], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Plan so far [Move C from E to table | Move A from D to C | Move D from G to table | Move E from F to table | Move F from B to table | Move G from table to B] | Exploring action Move A from C to table | New state -> Stack 1: [A], Stack 2: [B, G], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Exploring action Move D from table to F | New state -> Stack 1: [B, G], Stack 2: [C, A], Stack 3: [E], Stack 4: [F, D] | Exploring action Move A from C to E | New state -> Stack 1: [B, G], Stack 2: [C], Stack 3: [D], Stack 4: [E, A], Stack 5: [F] | Exploring action Move C from table to G | New state -> Invalid | Taking action Move D from table to F | Moved to state -> Stack 1: [B, G], Stack 2: [C, A], Stack 3: [E], Stack 4: [F, D] | Plan so far [Move C from E to table | Move A from D to C | Move D from G to table | Move E from F to table | Move F from B to table | Move G from table to B | Move D from table to F] | Taking action Move A from C to table | Moved to state -> Stack 1: [A], Stack 2: [B, G], Stack 3: [C], Stack 4: [E], Stack 5: [F, D] | Plan so far [Move C from E to table | Move A from D to C | Move D from G to table | Move E from F to table | Move F from B to table | Move D from table to F | Move G from table to B | Move A from C to table] | Exploring action Move A from table to E | New state -> Stack 1: [B, G], Stack 2: [C], Stack 3: [E, A], Stack 4: [F, D] | Exploring action Move A from table to C | New state -> Stack 1: [B, G], Stack 2: [C, A], Stack 3: [E], Stack 4: [F, D] | Exploring action Move F from table to A | New state -> Invalid | Exploring action Move B from table to G | New state -> Invalid | Exploring action Move C from table to E | New state -> Stack 1: [A], Stack 2: [B, G], Stack 3: [E, C], Stack 4: [F, D] | Taking action Move C from table to E | Moved to state -> Stack 1: [A], Stack 2: [B, G], Stack 3: [E, C], Stack 4: [F, D] | Plan so far [Move C from E to table | Move A from D to C | Move D from G to table | Move E from F to table | Move F from B to table | Move D from table to F | Move G from table to B | Move A from C to table | Move C from table to E] | Exploring action Move E from table to D | New state -> Invalid | Exploring action Move A from table to G | New state -> Stack 1: [B, G, A], Stack 2: [E, C], Stack 3: [F, D] | Exploring action Move C from E to table | New state -> Stack 1: [A], Stack 2: [B, G], Stack 3: [C], Stack 4: [E], Stack 5: [F, D] | Exploring action Move A from table to C | New state -> Stack 1: [B, G], Stack 2: [E, C, A], Stack 3: [F, D] | Exploring action Move B from table to G | New state -> Invalid | Taking action Move A from table to C | Moved to state -> Stack 1: [B, G], Stack 2: [E, C, A], Stack 3: [F, D] | Plan so far [Move C from E to table | Move A from D to C | Move D from G to table | Move E from F to table | Move F from B to table | Move D from table to F | Move G from table to B | Move A from C to table | Move C from table to E | Move A from table to C] | Reached goal state!",
        "system2_states_v1": 94
    },
    {
        "idx": 580,
        "start": [
            [
                "table",
                "E",
                "D",
                "A",
                "C",
                "B"
            ]
        ],
        "goal": [
            [
                "table",
                "C"
            ],
            [
                "table",
                "D",
                "E",
                "B",
                "A"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": false,
                "on": "D",
                "under": "C",
                "ontable": false
            },
            "B": {
                "clear": true,
                "on": "C",
                "under": -1,
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": "A",
                "under": "B",
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": "E",
                "under": "A",
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": -1,
                "under": "D",
                "ontable": true
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": true,
                "on": "B",
                "under": -1,
                "ontable": false
            },
            "B": {
                "clear": false,
                "on": "E",
                "under": "A",
                "ontable": false
            },
            "C": {
                "clear": true,
                "on": -1,
                "under": -1,
                "ontable": true
            },
            "D": {
                "clear": false,
                "on": -1,
                "under": "E",
                "ontable": true
            },
            "E": {
                "clear": false,
                "on": "D",
                "under": "B",
                "ontable": false
            }
        },
        "plan_len": 7,
        "num_blocks": 5,
        "prompt": "The initial state:\nThe hand is empty.\nE is on the table. D is on E. A is on D. C is on A. B is on C. B is clear.\n\nThe goal is:\nC is on the table. C is clear.\nD is on the table. E is on D. B is on E. A is on B. A is clear.\n",
        "system1_plan": "Move B from C to table | Move C from A to table | Move A from D to table | Move D from E to table | Move E from table to D | Move B from table to E | Move A from table to B",
        "system1_states": 7,
        "system2_plan_v1": "Moved to state -> Stack 1: [E, D, A, C, B] | Plan so far [] | Exploring action Move A from D to B | New state -> Invalid | Exploring action Move A from D to table | New state -> Invalid | Exploring action Move B from C to table | New state -> Stack 1: [B], Stack 2: [E, D, A, C] | Taking action Move B from C to table | Moved to state -> Stack 1: [B], Stack 2: [E, D, A, C] | Plan so far [Move B from C to table] | Exploring action Move B from table to C | New state -> Stack 1: [E, D, A, C, B] | Exploring action Move C from A to table | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [E, D, A] | Exploring action Move D from E to table | New state -> Invalid | Exploring action Move C from A to B | New state -> Stack 1: [B, C], Stack 2: [E, D, A] | Taking action Move C from A to table | Moved to state -> Stack 1: [B], Stack 2: [C], Stack 3: [E, D, A] | Plan so far [Move B from C to table | Move C from A to table] | Exploring action Move A from D to C | New state -> Stack 1: [B], Stack 2: [C, A], Stack 3: [E, D] | Exploring action Move D from E to B | New state -> Invalid | Exploring action Move A from D to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [E, D] | Exploring action Move A from D to B | New state -> Stack 1: [B, A], Stack 2: [C], Stack 3: [E, D] | Taking action Move A from D to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [E, D] | Plan so far [Move B from C to table | Move C from A to table | Move A from D to table] | Exploring action Move A from table to B | New state -> Stack 1: [B, A], Stack 2: [C], Stack 3: [E, D] | Exploring action Move D from E to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Exploring action Move D from E to B | New state -> Stack 1: [A], Stack 2: [B, D], Stack 3: [C], Stack 4: [E] | Exploring action Move E from table to B | New state -> Invalid | Taking action Move A from D to B | Moved to state -> Stack 1: [B, A], Stack 2: [C], Stack 3: [E, D] | Plan so far [Move B from C to table | Move C from A to table | Move A from D to B] | Exploring action Move A from B to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [E, D] | Exploring action Move E from table to C | New state -> Invalid | Exploring action Move D from E to table | New state -> Stack 1: [B, A], Stack 2: [C], Stack 3: [D], Stack 4: [E] | Exploring action Move B from table to D | New state -> Invalid | Exploring action Move D from E to A | New state -> Stack 1: [B, A, D], Stack 2: [C], Stack 3: [E] | Taking action Move D from E to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Plan so far [Move B from C to table | Move C from A to table | Move A from D to table | Move D from E to table] | Exploring action Move A from table to B | New state -> Stack 1: [B, A], Stack 2: [C], Stack 3: [D], Stack 4: [E] | Exploring action Move E from table to D | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D, E] | Exploring action Move A from table to D | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, A], Stack 4: [E] | Taking action Move D from E to table | Moved to state -> Stack 1: [B, A], Stack 2: [C], Stack 3: [D], Stack 4: [E] | Plan so far [Move B from C to table | Move C from A to table | Move A from D to B | Move D from E to table] | Exploring action Move B from table to A | New state -> Invalid | Exploring action Move E from table to D | New state -> Stack 1: [B, A], Stack 2: [C], Stack 3: [D, E] | Exploring action Move A from B to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Exploring action Move A from B to D | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, A], Stack 4: [E] | Exploring action Move B from table to E | New state -> Invalid | Taking action Move E from table to D | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D, E] | Plan so far [Move B from C to table | Move C from A to table | Move A from D to table | Move D from E to table | Move E from table to D] | Exploring action Move B from table to E | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, E, B] | Exploring action Move A from table to B | New state -> Stack 1: [B, A], Stack 2: [C], Stack 3: [D, E] | Exploring action Move D from table to E | New state -> Invalid | Exploring action Move D from table to A | New state -> Invalid | Exploring action Move A from table to E | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, E, A] | Taking action Move E from table to D | Moved to state -> Stack 1: [B, A], Stack 2: [C], Stack 3: [D, E] | Plan so far [Move B from C to table | Move C from A to table | Move A from D to B | Move D from E to table | Move E from table to D] | Exploring action Move A from B to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D, E] | Exploring action Move A from B to E | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, E, A] | Exploring action Move E from D to table | New state -> Stack 1: [B, A], Stack 2: [C], Stack 3: [D], Stack 4: [E] | Exploring action Move B from table to A | New state -> Invalid | Taking action Move B from table to E | Moved to state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, E, B] | Plan so far [Move B from C to table | Move C from A to table | Move A from D to table | Move D from E to table | Move E from table to D | Move B from table to E] | Exploring action Move C from table to A | New state -> Stack 1: [A, C], Stack 2: [D, E, B] | Exploring action Move A from table to B | New state -> Stack 1: [C], Stack 2: [D, E, B, A] | Exploring action Move E from D to C | New state -> Invalid | Exploring action Move B from E to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D, E] | Taking action Move A from table to B | Moved to state -> Stack 1: [C], Stack 2: [D, E, B, A] | Plan so far [Move B from C to table | Move C from A to table | Move A from D to table | Move D from E to table | Move E from table to D | Move B from table to E | Move A from table to B] | Reached goal state!",
        "system2_states_v1": 41
    },
    {
        "idx": 711,
        "start": [
            [
                "table",
                "B",
                "A",
                "F"
            ],
            [
                "table",
                "D",
                "C",
                "E"
            ]
        ],
        "goal": [
            [
                "table",
                "A",
                "D",
                "C"
            ],
            [
                "table",
                "B",
                "F",
                "E"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": false,
                "on": "B",
                "under": "F",
                "ontable": false
            },
            "B": {
                "clear": false,
                "on": -1,
                "under": "A",
                "ontable": true
            },
            "C": {
                "clear": false,
                "on": "D",
                "under": "E",
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": -1,
                "under": "C",
                "ontable": true
            },
            "E": {
                "clear": true,
                "on": "C",
                "under": -1,
                "ontable": false
            },
            "F": {
                "clear": true,
                "on": "A",
                "under": -1,
                "ontable": false
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": false,
                "on": -1,
                "under": "D",
                "ontable": true
            },
            "B": {
                "clear": false,
                "on": -1,
                "under": "F",
                "ontable": true
            },
            "C": {
                "clear": true,
                "on": "D",
                "under": -1,
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": "A",
                "under": "C",
                "ontable": false
            },
            "E": {
                "clear": true,
                "on": "F",
                "under": -1,
                "ontable": false
            },
            "F": {
                "clear": false,
                "on": "B",
                "under": "E",
                "ontable": false
            }
        },
        "plan_len": 8,
        "num_blocks": 6,
        "prompt": "The initial state:\nThe hand is empty.\nB is on the table. A is on B. F is on A. F is clear.\nD is on the table. C is on D. E is on C. E is clear.\n\nThe goal is:\nA is on the table. D is on A. C is on D. C is clear.\nB is on the table. F is on B. E is on F. E is clear.\n",
        "system1_plan": "Move E from C to table | Move F from A to table | Move A from B to table | Move F from table to B | Move E from table to F | Move C from D to table | Move D from table to A | Move C from table to D",
        "system1_states": 8,
        "system2_plan_v1": "Moved to state -> Stack 1: [B, A, F], Stack 2: [D, C, E] | Plan so far [] | Exploring action Move E from C to F | New state -> Stack 1: [B, A, F, E], Stack 2: [D, C] | Exploring action Move C from D to table | New state -> Invalid | Exploring action Move C from D to E | New state -> Invalid | Exploring action Move E from C to table | New state -> Stack 1: [B, A, F], Stack 2: [D, C], Stack 3: [E] | Exploring action Move F from A to table | New state -> Stack 1: [B, A], Stack 2: [D, C, E], Stack 3: [F] | Taking action Move E from C to table | Moved to state -> Stack 1: [B, A, F], Stack 2: [D, C], Stack 3: [E] | Plan so far [Move E from C to table] | Exploring action Move B from table to C | New state -> Invalid | Exploring action Move F from A to table | New state -> Stack 1: [B, A], Stack 2: [D, C], Stack 3: [E], Stack 4: [F] | Exploring action Move C from D to table | New state -> Stack 1: [B, A, F], Stack 2: [C], Stack 3: [D], Stack 4: [E] | Exploring action Move B from table to F | New state -> Invalid | Exploring action Move E from table to F | New state -> Stack 1: [B, A, F, E], Stack 2: [D, C] | Taking action Move E from C to F | Moved to state -> Stack 1: [B, A, F, E], Stack 2: [D, C] | Plan so far [Move E from C to F] | Exploring action Move F from A to C | New state -> Invalid | Exploring action Move C from D to E | New state -> Stack 1: [B, A, F, E, C], Stack 2: [D] | Exploring action Move C from D to table | New state -> Stack 1: [B, A, F, E], Stack 2: [C], Stack 3: [D] | Exploring action Move E from F to table | New state -> Stack 1: [B, A, F], Stack 2: [D, C], Stack 3: [E] | Taking action Move F from A to table | Moved to state -> Stack 1: [B, A], Stack 2: [D, C], Stack 3: [E], Stack 4: [F] | Plan so far [Move E from C to table | Move F from A to table] | Exploring action Move B from table to A | New state -> Invalid | Exploring action Move A from B to F | New state -> Stack 1: [B], Stack 2: [D, C], Stack 3: [E], Stack 4: [F, A] | Exploring action Move A from B to E | New state -> Stack 1: [B], Stack 2: [D, C], Stack 3: [E, A], Stack 4: [F] | Exploring action Move B from table to C | New state -> Invalid | Exploring action Move A from B to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, C], Stack 4: [E], Stack 5: [F] | Taking action Move A from B to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, C], Stack 4: [E], Stack 5: [F] | Plan so far [Move E from C to table | Move F from A to table | Move A from B to table] | Exploring action Move E from table to F | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, C], Stack 4: [F, E] | Exploring action Move D from table to C | New state -> Invalid | Exploring action Move C from D to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Exploring action Move F from table to B | New state -> Stack 1: [A], Stack 2: [B, F], Stack 3: [D, C], Stack 4: [E] | Taking action Move F from table to B | Moved to state -> Stack 1: [A], Stack 2: [B, F], Stack 3: [D, C], Stack 4: [E] | Plan so far [Move E from C to table | Move F from A to table | Move A from B to table | Move F from table to B] | Exploring action Move C from D to table | New state -> Stack 1: [A], Stack 2: [B, F], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Exploring action Move E from table to F | New state -> Stack 1: [A], Stack 2: [B, F, E], Stack 3: [D, C] | Exploring action Move A from table to F | New state -> Stack 1: [B, F, A], Stack 2: [D, C], Stack 3: [E] | Exploring action Move D from table to F | New state -> Invalid | Exploring action Move D from table to E | New state -> Invalid | Taking action Move E from table to F | Moved to state -> Stack 1: [A], Stack 2: [B, F, E], Stack 3: [D, C] | Plan so far [Move E from C to table | Move F from A to table | Move A from B to table | Move F from table to B | Move E from table to F] | Exploring action Move D from table to E | New state -> Invalid | Exploring action Move C from D to table | New state -> Stack 1: [A], Stack 2: [B, F, E], Stack 3: [C], Stack 4: [D] | Exploring action Move C from D to A | New state -> Stack 1: [A, C], Stack 2: [B, F, E], Stack 3: [D] | Exploring action Move A from table to C | New state -> Stack 1: [B, F, E], Stack 2: [D, C, A] | Exploring action Move B from table to E | New state -> Invalid | Taking action Move C from D to table | Moved to state -> Stack 1: [A], Stack 2: [B, F, E], Stack 3: [C], Stack 4: [D] | Plan so far [Move E from C to table | Move F from A to table | Move A from B to table | Move F from table to B | Move E from table to F | Move C from D to table] | Exploring action Move F from B to D | New state -> Invalid | Exploring action Move F from B to E | New state -> Invalid | Exploring action Move C from table to D | New state -> Stack 1: [A], Stack 2: [B, F, E], Stack 3: [D, C] | Exploring action Move D from table to A | New state -> Stack 1: [A, D], Stack 2: [B, F, E], Stack 3: [C] | Exploring action Move A from table to C | New state -> Stack 1: [B, F, E], Stack 2: [C, A], Stack 3: [D] | Taking action Move D from table to A | Moved to state -> Stack 1: [A, D], Stack 2: [B, F, E], Stack 3: [C] | Plan so far [Move E from C to table | Move F from A to table | Move A from B to table | Move F from table to B | Move E from table to F | Move C from D to table | Move D from table to A] | Exploring action Move F from B to E | New state -> Invalid | Exploring action Move C from table to D | New state -> Stack 1: [A, D, C], Stack 2: [B, F, E] | Exploring action Move B from table to C | New state -> Invalid | Exploring action Move E from F to table | New state -> Stack 1: [A, D], Stack 2: [B, F], Stack 3: [C], Stack 4: [E] | Exploring action Move D from A to table | New state -> Stack 1: [A], Stack 2: [B, F, E], Stack 3: [C], Stack 4: [D] | Taking action Move C from table to D | Moved to state -> Stack 1: [A, D, C], Stack 2: [B, F, E] | Plan so far [Move E from C to table | Move F from A to table | Move A from B to table | Move F from table to B | Move E from table to F | Move C from D to table | Move D from table to A | Move C from table to D] | Reached goal state!",
        "system2_states_v1": 43
    },
    {
        "idx": 895,
        "start": [
            [
                "table",
                "D",
                "A",
                "B",
                "F",
                "C",
                "G",
                "E"
            ]
        ],
        "goal": [
            [
                "table",
                "A",
                "B"
            ],
            [
                "table",
                "D",
                "E",
                "G",
                "C"
            ],
            [
                "table",
                "F"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": false,
                "on": "D",
                "under": "B",
                "ontable": false
            },
            "B": {
                "clear": false,
                "on": "A",
                "under": "F",
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": "F",
                "under": "G",
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": -1,
                "under": "A",
                "ontable": true
            },
            "E": {
                "clear": true,
                "on": "G",
                "under": -1,
                "ontable": false
            },
            "F": {
                "clear": false,
                "on": "B",
                "under": "C",
                "ontable": false
            },
            "G": {
                "clear": false,
                "on": "C",
                "under": "E",
                "ontable": false
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": false,
                "on": -1,
                "under": "B",
                "ontable": true
            },
            "B": {
                "clear": true,
                "on": "A",
                "under": -1,
                "ontable": false
            },
            "C": {
                "clear": true,
                "on": "G",
                "under": -1,
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": -1,
                "under": "E",
                "ontable": true
            },
            "E": {
                "clear": false,
                "on": "D",
                "under": "G",
                "ontable": false
            },
            "F": {
                "clear": true,
                "on": -1,
                "under": -1,
                "ontable": true
            },
            "G": {
                "clear": false,
                "on": "E",
                "under": "C",
                "ontable": false
            }
        },
        "plan_len": 10,
        "num_blocks": 7,
        "prompt": "The initial state:\nThe hand is empty.\nD is on the table. A is on D. B is on A. F is on B. C is on F. G is on C. E is on G. E is clear.\n\nThe goal is:\nA is on the table. B is on A. B is clear.\nD is on the table. E is on D. G is on E. C is on G. C is clear.\nF is on the table. F is clear.\n",
        "system1_plan": "Move E from G to table | Move G from C to table | Move C from F to table | Move F from B to table | Move B from A to table | Move A from D to table | Move B from table to A | Move E from table to D | Move G from table to E | Move C from table to G",
        "system1_states": 10,
        "system2_plan_v1": "Moved to state -> Stack 1: [D, A, B, F, C, G, E] | Plan so far [] | Exploring action Move E from G to table | New state -> Stack 1: [D, A, B, F, C, G], Stack 2: [E] | Exploring action Move B from A to table | New state -> Invalid | Taking action Move E from G to table | Moved to state -> Stack 1: [D, A, B, F, C, G], Stack 2: [E] | Plan so far [Move E from G to table] | Exploring action Move G from C to E | New state -> Stack 1: [D, A, B, F, C], Stack 2: [E, G] | Exploring action Move B from A to E | New state -> Invalid | Exploring action Move C from F to E | New state -> Invalid | Exploring action Move G from C to table | New state -> Stack 1: [D, A, B, F, C], Stack 2: [E], Stack 3: [G] | Exploring action Move E from table to G | New state -> Stack 1: [D, A, B, F, C, G, E] | Taking action Move G from C to table | Moved to state -> Stack 1: [D, A, B, F, C], Stack 2: [E], Stack 3: [G] | Plan so far [Move E from G to table | Move G from C to table] | Exploring action Move C from F to G | New state -> Stack 1: [D, A, B, F], Stack 2: [E], Stack 3: [G, C] | Exploring action Move B from A to E | New state -> Invalid | Exploring action Move C from F to table | New state -> Stack 1: [C], Stack 2: [D, A, B, F], Stack 3: [E], Stack 4: [G] | Exploring action Move C from F to E | New state -> Stack 1: [D, A, B, F], Stack 2: [E, C], Stack 3: [G] | Taking action Move C from F to table | Moved to state -> Stack 1: [C], Stack 2: [D, A, B, F], Stack 3: [E], Stack 4: [G] | Plan so far [Move E from G to table | Move G from C to table | Move C from F to table] | Exploring action Move F from B to table | New state -> Stack 1: [C], Stack 2: [D, A, B], Stack 3: [E], Stack 4: [F], Stack 5: [G] | Exploring action Move F from B to G | New state -> Stack 1: [C], Stack 2: [D, A, B], Stack 3: [E], Stack 4: [G, F] | Exploring action Move F from B to C | New state -> Stack 1: [C, F], Stack 2: [D, A, B], Stack 3: [E], Stack 4: [G] | Exploring action Move A from D to G | New state -> Invalid | Taking action Move F from B to table | Moved to state -> Stack 1: [C], Stack 2: [D, A, B], Stack 3: [E], Stack 4: [F], Stack 5: [G] | Plan so far [Move E from G to table | Move G from C to table | Move C from F to table | Move F from B to table] | Exploring action Move B from A to table | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, A], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Exploring action Move B from A to E | New state -> Stack 1: [C], Stack 2: [D, A], Stack 3: [E, B], Stack 4: [F], Stack 5: [G] | Exploring action Move A from D to C | New state -> Invalid | Exploring action Move C from table to G | New state -> Stack 1: [D, A, B], Stack 2: [E], Stack 3: [F], Stack 4: [G, C] | Taking action Move B from A to table | Moved to state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, A], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Plan so far [Move E from G to table | Move G from C to table | Move C from F to table | Move F from B to table | Move B from A to table] | Exploring action Move D from table to A | New state -> Invalid | Exploring action Move A from D to C | New state -> Stack 1: [B], Stack 2: [C, A], Stack 3: [D], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Exploring action Move A from D to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F], Stack 7: [G] | Exploring action Move B from table to A | New state -> Stack 1: [C], Stack 2: [D, A, B], Stack 3: [E], Stack 4: [F], Stack 5: [G] | Taking action Move C from table to G | Moved to state -> Stack 1: [D, A, B], Stack 2: [E], Stack 3: [F], Stack 4: [G, C] | Plan so far [Move E from G to table | Move G from C to table | Move C from F to table | Move F from B to table | Move C from table to G] | Exploring action Move B from A to E | New state -> Stack 1: [D, A], Stack 2: [E, B], Stack 3: [F], Stack 4: [G, C] | Exploring action Move C from G to table | New state -> Stack 1: [C], Stack 2: [D, A, B], Stack 3: [E], Stack 4: [F], Stack 5: [G] | Exploring action Move A from D to F | New state -> Invalid | Exploring action Move G from table to F | New state -> Invalid | Exploring action Move B from A to table | New state -> Stack 1: [B], Stack 2: [D, A], Stack 3: [E], Stack 4: [F], Stack 5: [G, C] | Taking action Move A from D to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F], Stack 7: [G] | Plan so far [Move E from G to table | Move G from C to table | Move C from F to table | Move F from B to table | Move B from A to table | Move A from D to table] | Exploring action Move E from table to D | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D, E], Stack 5: [F], Stack 6: [G] | Exploring action Move B from table to A | New state -> Stack 1: [A, B], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Exploring action Move C from table to G | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D], Stack 4: [E], Stack 5: [F], Stack 6: [G, C] | Taking action Move B from table to A | Moved to state -> Stack 1: [A, B], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Plan so far [Move E from G to table | Move G from C to table | Move C from F to table | Move F from B to table | Move B from A to table | Move A from D to table | Move B from table to A] | Exploring action Move D from table to C | New state -> Stack 1: [A, B], Stack 2: [C, D], Stack 3: [E], Stack 4: [F], Stack 5: [G] | Exploring action Move E from table to D | New state -> Stack 1: [A, B], Stack 2: [C], Stack 3: [D, E], Stack 4: [F], Stack 5: [G] | Exploring action Move C from table to G | New state -> Stack 1: [A, B], Stack 2: [D], Stack 3: [E], Stack 4: [F], Stack 5: [G, C] | Exploring action Move A from table to B | New state -> Invalid | Exploring action Move A from table to D | New state -> Invalid | Taking action Move E from table to D | Moved to state -> Stack 1: [A, B], Stack 2: [C], Stack 3: [D, E], Stack 4: [F], Stack 5: [G] | Plan so far [Move E from G to table | Move G from C to table | Move C from F to table | Move F from B to table | Move B from A to table | Move A from D to table | Move B from table to A | Move E from table to D] | Exploring action Move D from table to B | New state -> Invalid | Exploring action Move C from table to G | New state -> Stack 1: [A, B], Stack 2: [D, E], Stack 3: [F], Stack 4: [G, C] | Exploring action Move G from table to E | New state -> Stack 1: [A, B], Stack 2: [C], Stack 3: [D, E, G], Stack 4: [F] | Exploring action Move A from table to F | New state -> Invalid | Exploring action Move C from table to E | New state -> Stack 1: [A, B], Stack 2: [D, E, C], Stack 3: [F], Stack 4: [G] | Taking action Move G from table to E | Moved to state -> Stack 1: [A, B], Stack 2: [C], Stack 3: [D, E, G], Stack 4: [F] | Plan so far [Move E from G to table | Move G from C to table | Move C from F to table | Move F from B to table | Move B from A to table | Move A from D to table | Move B from table to A | Move E from table to D | Move G from table to E] | Exploring action Move A from table to B | New state -> Invalid | Exploring action Move E from D to table | New state -> Invalid | Exploring action Move B from A to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D, E, G], Stack 5: [F] | Exploring action Move G from E to table | New state -> Stack 1: [A, B], Stack 2: [C], Stack 3: [D, E], Stack 4: [F], Stack 5: [G] | Exploring action Move C from table to G | New state -> Stack 1: [A, B], Stack 2: [D, E, G, C], Stack 3: [F] | Taking action Move C from table to G | Moved to state -> Stack 1: [A, B], Stack 2: [D, E, G, C], Stack 3: [F] | Plan so far [Move E from G to table | Move G from C to table | Move C from F to table | Move F from B to table | Move B from A to table | Move A from D to table | Move B from table to A | Move E from table to D | Move G from table to E | Move C from table to G] | Reached goal state!",
        "system2_states_v1": 46
    },
    {
        "idx": 909,
        "start": [
            [
                "table",
                "D",
                "C",
                "A",
                "G"
            ],
            [
                "table",
                "F",
                "B",
                "E"
            ]
        ],
        "goal": [
            [
                "table",
                "A",
                "F",
                "B",
                "C"
            ],
            [
                "table",
                "G",
                "D",
                "E"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": false,
                "on": "C",
                "under": "G",
                "ontable": false
            },
            "B": {
                "clear": false,
                "on": "F",
                "under": "E",
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": "D",
                "under": "A",
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": -1,
                "under": "C",
                "ontable": true
            },
            "E": {
                "clear": true,
                "on": "B",
                "under": -1,
                "ontable": false
            },
            "F": {
                "clear": false,
                "on": -1,
                "under": "B",
                "ontable": true
            },
            "G": {
                "clear": true,
                "on": "A",
                "under": -1,
                "ontable": false
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": false,
                "on": -1,
                "under": "F",
                "ontable": true
            },
            "B": {
                "clear": false,
                "on": "F",
                "under": "C",
                "ontable": false
            },
            "C": {
                "clear": true,
                "on": "B",
                "under": -1,
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": "G",
                "under": "E",
                "ontable": false
            },
            "E": {
                "clear": true,
                "on": "D",
                "under": -1,
                "ontable": false
            },
            "F": {
                "clear": false,
                "on": "A",
                "under": "B",
                "ontable": false
            },
            "G": {
                "clear": false,
                "on": -1,
                "under": "D",
                "ontable": true
            }
        },
        "plan_len": 10,
        "num_blocks": 7,
        "prompt": "The initial state:\nThe hand is empty.\nD is on the table. C is on D. A is on C. G is on A. G is clear.\nF is on the table. B is on F. E is on B. E is clear.\n\nThe goal is:\nA is on the table. F is on A. B is on F. C is on B. C is clear.\nG is on the table. D is on G. E is on D. E is clear.\n",
        "system1_plan": "Move G from A to table | Move E from B to table | Move A from C to table | Move C from D to table | Move B from F to table | Move D from table to G | Move F from table to A | Move E from table to D | Move B from table to F | Move C from table to B",
        "system1_states": 10,
        "system2_plan_v1": "Moved to state -> Stack 1: [D, C, A, G], Stack 2: [F, B, E] | Plan so far [] | Exploring action Move E from B to table | New state -> Stack 1: [D, C, A, G], Stack 2: [E], Stack 3: [F, B] | Exploring action Move F from table to G | New state -> Invalid | Exploring action Move G from A to table | New state -> Stack 1: [D, C, A], Stack 2: [F, B, E], Stack 3: [G] | Exploring action Move E from B to G | New state -> Stack 1: [D, C, A, G, E], Stack 2: [F, B] | Taking action Move E from B to table | Moved to state -> Stack 1: [D, C, A, G], Stack 2: [E], Stack 3: [F, B] | Plan so far [Move E from B to table] | Exploring action Move B from F to table | New state -> Stack 1: [B], Stack 2: [D, C, A, G], Stack 3: [E], Stack 4: [F] | Exploring action Move D from table to G | New state -> Invalid | Exploring action Move G from A to B | New state -> Stack 1: [D, C, A], Stack 2: [E], Stack 3: [F, B, G] | Exploring action Move G from A to table | New state -> Stack 1: [D, C, A], Stack 2: [E], Stack 3: [F, B], Stack 4: [G] | Exploring action Move A from C to B | New state -> Invalid | Taking action Move G from A to table | Moved to state -> Stack 1: [D, C, A], Stack 2: [F, B, E], Stack 3: [G] | Plan so far [Move G from A to table] | Exploring action Move B from F to G | New state -> Invalid | Exploring action Move E from B to table | New state -> Stack 1: [D, C, A], Stack 2: [E], Stack 3: [F, B], Stack 4: [G] | Exploring action Move A from C to G | New state -> Stack 1: [D, C], Stack 2: [F, B, E], Stack 3: [G, A] | Exploring action Move B from F to table | New state -> Invalid | Exploring action Move A from C to table | New state -> Stack 1: [A], Stack 2: [D, C], Stack 3: [F, B, E], Stack 4: [G] | Taking action Move B from F to table | Moved to state -> Stack 1: [B], Stack 2: [D, C, A, G], Stack 3: [E], Stack 4: [F] | Plan so far [Move E from B to table | Move B from F to table] | Exploring action Move G from A to F | New state -> Stack 1: [B], Stack 2: [D, C, A], Stack 3: [E], Stack 4: [F, G] | Exploring action Move G from A to table | New state -> Stack 1: [B], Stack 2: [D, C, A], Stack 3: [E], Stack 4: [F], Stack 5: [G] | Exploring action Move C from D to G | New state -> Invalid | Exploring action Move G from A to E | New state -> Stack 1: [B], Stack 2: [D, C, A], Stack 3: [E, G], Stack 4: [F] | Taking action Move E from B to table | Moved to state -> Stack 1: [D, C, A], Stack 2: [E], Stack 3: [F, B], Stack 4: [G] | Plan so far [Move G from A to table | Move E from B to table] | Exploring action Move A from C to E | New state -> Stack 1: [D, C], Stack 2: [E, A], Stack 3: [F, B], Stack 4: [G] | Exploring action Move B from F to table | New state -> Stack 1: [B], Stack 2: [D, C, A], Stack 3: [E], Stack 4: [F], Stack 5: [G] | Exploring action Move A from C to table | New state -> Stack 1: [A], Stack 2: [D, C], Stack 3: [E], Stack 4: [F, B], Stack 5: [G] | Exploring action Move F from table to G | New state -> Invalid | Taking action Move G from A to table | Moved to state -> Stack 1: [B], Stack 2: [D, C, A], Stack 3: [E], Stack 4: [F], Stack 5: [G] | Plan so far [Move E from B to table | Move B from F to table | Move G from A to table] | Exploring action Move D from table to B | New state -> Invalid | Exploring action Move A from C to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, C], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Exploring action Move A from C to E | New state -> Stack 1: [B], Stack 2: [D, C], Stack 3: [E, A], Stack 4: [F], Stack 5: [G] | Exploring action Move A from C to B | New state -> Stack 1: [B, A], Stack 2: [D, C], Stack 3: [E], Stack 4: [F], Stack 5: [G] | Taking action Move A from C to table | Moved to state -> Stack 1: [A], Stack 2: [D, C], Stack 3: [E], Stack 4: [F, B], Stack 5: [G] | Plan so far [Move G from A to table | Move E from B to table | Move A from C to table] | Exploring action Move C from D to table | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [F, B], Stack 6: [G] | Exploring action Move B from F to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, C], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Exploring action Move D from table to E | New state -> Invalid | Exploring action Move C from D to B | New state -> Stack 1: [A], Stack 2: [D], Stack 3: [E], Stack 4: [F, B, C], Stack 5: [G] | Taking action Move C from D to B | Moved to state -> Stack 1: [A], Stack 2: [D], Stack 3: [E], Stack 4: [F, B, C], Stack 5: [G] | Plan so far [Move G from A to table | Move E from B to table | Move A from C to table | Move C from D to B] | Exploring action Move F from table to C | New state -> Invalid | Exploring action Move A from table to D | New state -> Stack 1: [D, A], Stack 2: [E], Stack 3: [F, B, C], Stack 4: [G] | Exploring action Move D from table to G | New state -> Stack 1: [A], Stack 2: [E], Stack 3: [F, B, C], Stack 4: [G, D] | Exploring action Move E from table to D | New state -> Stack 1: [A], Stack 2: [D, E], Stack 3: [F, B, C], Stack 4: [G] | Exploring action Move B from F to C | New state -> Invalid | Taking action Move D from table to G | Moved to state -> Stack 1: [A], Stack 2: [E], Stack 3: [F, B, C], Stack 4: [G, D] | Plan so far [Move G from A to table | Move E from B to table | Move A from C to table | Move C from D to B | Move D from table to G] | Exploring action Move A from table to D | New state -> Stack 1: [E], Stack 2: [F, B, C], Stack 3: [G, D, A] | Exploring action Move G from table to D | New state -> Invalid | Exploring action Move E from table to D | New state -> Stack 1: [A], Stack 2: [F, B, C], Stack 3: [G, D, E] | Exploring action Move F from table to C | New state -> Invalid | Exploring action Move A from table to E | New state -> Stack 1: [E, A], Stack 2: [F, B, C], Stack 3: [G, D] | Taking action Move E from table to D | Moved to state -> Stack 1: [A], Stack 2: [F, B, C], Stack 3: [G, D, E] | Plan so far [Move G from A to table | Move E from B to table | Move A from C to table | Move C from D to B | Move D from table to G | Move E from table to D] | Exploring action Move E from D to table | New state -> Stack 1: [A], Stack 2: [E], Stack 3: [F, B, C], Stack 4: [G, D] | Exploring action Move C from B to table | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [F, B], Stack 4: [G, D, E] | Exploring action Move G from table to E | New state -> Invalid | Exploring action Move A from table to C | New state -> Stack 1: [F, B, C, A], Stack 2: [G, D, E] | Exploring action Move G from table to C | New state -> Invalid | Taking action Move E from table to D | Moved to state -> Stack 1: [A], Stack 2: [D, E], Stack 3: [F, B, C], Stack 4: [G] | Plan so far [Move G from A to table | Move E from B to table | Move A from C to table | Move C from D to B | Move E from table to D] | Exploring action Move E from D to table | New state -> Stack 1: [A], Stack 2: [D], Stack 3: [E], Stack 4: [F, B, C], Stack 5: [G] | Exploring action Move D from table to G | New state -> Invalid | Exploring action Move G from table to A | New state -> Stack 1: [A, G], Stack 2: [D, E], Stack 3: [F, B, C] | Exploring action Move A from table to G | New state -> Stack 1: [D, E], Stack 2: [F, B, C], Stack 3: [G, A] | Taking action Move G from A to table | Moved to state -> Stack 1: [D, C, A], Stack 2: [E], Stack 3: [F, B], Stack 4: [G] | Plan so far [Move E from B to table | Move G from A to table] | Taking action Move E from table to A | Moved to state -> Stack 1: [A, E], Stack 2: [F, B, C], Stack 3: [G, D] | Plan so far [Move G from A to table | Move E from B to table | Move A from C to table | Move C from D to B | Move D from table to G | Move E from table to A] | Exploring action Move D from G to table | New state -> Stack 1: [A, E], Stack 2: [D], Stack 3: [F, B, C], Stack 4: [G] | Exploring action Move E from A to D | New state -> Stack 1: [A], Stack 2: [F, B, C], Stack 3: [G, D, E] | Exploring action Move E from A to table | New state -> Stack 1: [A], Stack 2: [E], Stack 3: [F, B, C], Stack 4: [G, D] | Exploring action Move F from table to E | New state -> Invalid | Taking action Move E from A to D | Moved to state -> Stack 1: [A], Stack 2: [F, B, C], Stack 3: [G, D, E] | Plan so far [Move G from A to table | Move E from B to table | Move A from C to table | Move C from D to B | Move D from table to G | Move E from table to A | Move E from A to D] | Taking action Move A from table to C | Moved to state -> Stack 1: [F, B, C, A], Stack 2: [G, D, E] | Plan so far [Move G from A to table | Move E from B to table | Move A from C to table | Move C from D to B | Move D from table to G | Move E from table to D | Move A from table to C] | Exploring action Move D from G to E | New state -> Invalid | Exploring action Move A from C to E | New state -> Stack 1: [F, B, C], Stack 2: [G, D, E, A] | Exploring action Move A from C to table | New state -> Stack 1: [A], Stack 2: [F, B, C], Stack 3: [G, D, E] | Exploring action Move E from D to table | New state -> Stack 1: [E], Stack 2: [F, B, C, A], Stack 3: [G, D] | Taking action Move A from C to table | Moved to state -> Stack 1: [A], Stack 2: [F, B, C], Stack 3: [G, D, E] | Plan so far [Move G from A to table | Move E from B to table | Move A from C to table | Move C from D to B | Move D from table to G | Move E from table to D | Move A from table to C | Move A from C to table] | Taking action Move C from B to table | Moved to state -> Stack 1: [A], Stack 2: [C], Stack 3: [F, B], Stack 4: [G, D, E] | Plan so far [Move G from A to table | Move E from B to table | Move A from C to table | Move C from D to B | Move D from table to G | Move E from table to D | Move C from B to table] | Exploring action Move F from table to A | New state -> Invalid | Exploring action Move G from table to E | New state -> Invalid | Exploring action Move B from F to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [F], Stack 5: [G, D, E] | Exploring action Move C from table to B | New state -> Stack 1: [A], Stack 2: [F, B, C], Stack 3: [G, D, E] | Exploring action Move B from F to C | New state -> Stack 1: [A], Stack 2: [C, B], Stack 3: [F], Stack 4: [G, D, E] | Taking action Move C from table to B | Moved to state -> Stack 1: [A], Stack 2: [F, B, C], Stack 3: [G, D, E] | Plan so far [Move G from A to table | Move E from B to table | Move A from C to table | Move C from D to B | Move D from table to G | Move E from table to D | Move C from B to table | Move C from table to B] | Taking action Move A from table to D | Moved to state -> Stack 1: [E], Stack 2: [F, B, C], Stack 3: [G, D, A] | Plan so far [Move G from A to table | Move E from B to table | Move A from C to table | Move C from D to B | Move D from table to G | Move A from table to D] | Exploring action Move F from table to C | New state -> Invalid | Exploring action Move A from D to table | New state -> Stack 1: [A], Stack 2: [E], Stack 3: [F, B, C], Stack 4: [G, D] | Exploring action Move A from D to E | New state -> Stack 1: [E, A], Stack 2: [F, B, C], Stack 3: [G, D] | Exploring action Move E from table to A | New state -> Stack 1: [F, B, C], Stack 2: [G, D, A, E] | Exploring action Move D from G to C | New state -> Invalid | Taking action Move D from G to table | Moved to state -> Stack 1: [A], Stack 2: [D], Stack 3: [E], Stack 4: [F, B, C], Stack 5: [G] | Plan so far [Move G from A to table | Move E from B to table | Move A from C to table | Move C from D to B | Move D from table to G | Move D from G to table] | Taking action Move A from table to E | Moved to state -> Stack 1: [E, A], Stack 2: [F, B, C], Stack 3: [G, D] | Plan so far [Move G from A to table | Move E from B to table | Move A from C to table | Move C from D to B | Move D from table to G | Move A from table to E] | Exploring action Move B from F to D | New state -> Invalid | Exploring action Move D from G to table | New state -> Stack 1: [D], Stack 2: [E, A], Stack 3: [F, B, C], Stack 4: [G] | Exploring action Move A from E to table | New state -> Stack 1: [A], Stack 2: [E], Stack 3: [F, B, C], Stack 4: [G, D] | Exploring action Move G from table to C | New state -> Invalid | Exploring action Move A from E to D | New state -> Stack 1: [E], Stack 2: [F, B, C], Stack 3: [G, D, A] | Taking action Move E from table to A | Moved to state -> Stack 1: [A, E], Stack 2: [D], Stack 3: [F, B, C], Stack 4: [G] | Plan so far [Move G from A to table | Move E from B to table | Move A from C to table | Move C from D to B | Move E from table to A] | Exploring action Move E from A to D | New state -> Stack 1: [A], Stack 2: [D, E], Stack 3: [F, B, C], Stack 4: [G] | Exploring action Move D from table to G | New state -> Stack 1: [A, E], Stack 2: [F, B, C], Stack 3: [G, D] | Exploring action Move A from table to D | New state -> Invalid | Exploring action Move A from table to G | New state -> Invalid | Exploring action Move E from A to table | New state -> Stack 1: [A], Stack 2: [D], Stack 3: [E], Stack 4: [F, B, C], Stack 5: [G] | Taking action Move E from table to G | Moved to state -> Stack 1: [A], Stack 2: [D], Stack 3: [F, B, C], Stack 4: [G, E] | Plan so far [Move G from A to table | Move E from B to table | Move A from C to table | Move C from D to B | Move E from table to G] | Exploring action Move E from G to table | New state -> Stack 1: [A], Stack 2: [D], Stack 3: [E], Stack 4: [F, B, C], Stack 5: [G] | Exploring action Move E from G to A | New state -> Stack 1: [A, E], Stack 2: [D], Stack 3: [F, B, C], Stack 4: [G] | Exploring action Move F from table to E | New state -> Invalid | Exploring action Move E from G to D | New state -> Stack 1: [A], Stack 2: [D, E], Stack 3: [F, B, C], Stack 4: [G] | Exploring action Move B from F to table | New state -> Invalid | Taking action Move G from table to D | Moved to state -> Stack 1: [A], Stack 2: [D, G], Stack 3: [E], Stack 4: [F, B, C] | Plan so far [Move G from A to table | Move E from B to table | Move A from C to table | Move C from D to B | Move G from table to D] | Exploring action Move G from D to table | New state -> Stack 1: [A], Stack 2: [D], Stack 3: [E], Stack 4: [F, B, C], Stack 5: [G] | Exploring action Move G from D to E | New state -> Stack 1: [A], Stack 2: [D], Stack 3: [E, G], Stack 4: [F, B, C] | Exploring action Move G from D to A | New state -> Stack 1: [A, G], Stack 2: [D], Stack 3: [E], Stack 4: [F, B, C] | Exploring action Move F from table to G | New state -> Invalid | Taking action Move G from table to A | Moved to state -> Stack 1: [A, G], Stack 2: [D], Stack 3: [E], Stack 4: [F, B, C] | Plan so far [Move G from A to table | Move E from B to table | Move A from C to table | Move C from D to B | Move G from table to A] | Exploring action Move G from A to table | New state -> Stack 1: [A], Stack 2: [D], Stack 3: [E], Stack 4: [F, B, C], Stack 5: [G] | Exploring action Move A from table to E | New state -> Invalid | Exploring action Move G from A to D | New state -> Stack 1: [A], Stack 2: [D, G], Stack 3: [E], Stack 4: [F, B, C] | Exploring action Move G from A to E | New state -> Stack 1: [A], Stack 2: [D], Stack 3: [E, G], Stack 4: [F, B, C] | Taking action Move E from G to table | Moved to state -> Stack 1: [A], Stack 2: [D], Stack 3: [E], Stack 4: [F, B, C], Stack 5: [G] | Plan so far [Move G from A to table | Move E from B to table | Move A from C to table | Move C from D to B | Move E from table to G | Move E from G to table] | Taking action Move E from G to D | Moved to state -> Stack 1: [A], Stack 2: [D, E], Stack 3: [F, B, C], Stack 4: [G] | Plan so far [Move G from A to table | Move E from B to table | Move A from C to table | Move C from D to B | Move E from table to G | Move E from G to D] | Taking action Move G from D to table | Moved to state -> Stack 1: [A], Stack 2: [D], Stack 3: [E], Stack 4: [F, B, C], Stack 5: [G] | Plan so far [Move G from A to table | Move E from B to table | Move A from C to table | Move C from D to B | Move G from table to D | Move G from D to table] | Taking action Move G from A to table | Moved to state -> Stack 1: [A], Stack 2: [D], Stack 3: [E], Stack 4: [F, B, C], Stack 5: [G] | Plan so far [Move G from A to table | Move E from B to table | Move A from C to table | Move C from D to B | Move G from table to A | Move G from A to table] | Taking action Move G from table to E | Moved to state -> Stack 1: [A], Stack 2: [D], Stack 3: [E, G], Stack 4: [F, B, C] | Plan so far [Move G from A to table | Move E from B to table | Move A from C to table | Move C from D to B | Move G from table to E] | Exploring action Move G from E to D | New state -> Stack 1: [A], Stack 2: [D, G], Stack 3: [E], Stack 4: [F, B, C] | Exploring action Move F from table to G | New state -> Invalid | Exploring action Move E from table to D | New state -> Invalid | Exploring action Move G from E to A | New state -> Stack 1: [A, G], Stack 2: [D], Stack 3: [E], Stack 4: [F, B, C] | Exploring action Move G from E to table | New state -> Stack 1: [A], Stack 2: [D], Stack 3: [E], Stack 4: [F, B, C], Stack 5: [G] | Taking action Move A from table to D | Moved to state -> Stack 1: [D, A], Stack 2: [E], Stack 3: [F, B, C], Stack 4: [G] | Plan so far [Move G from A to table | Move E from B to table | Move A from C to table | Move C from D to B | Move A from table to D] | Exploring action Move F from table to E | New state -> Invalid | Exploring action Move A from D to E | New state -> Stack 1: [D], Stack 2: [E, A], Stack 3: [F, B, C], Stack 4: [G] | Exploring action Move A from D to table | New state -> Stack 1: [A], Stack 2: [D], Stack 3: [E], Stack 4: [F, B, C], Stack 5: [G] | Exploring action Move D from table to E | New state -> Invalid | Exploring action Move A from D to G | New state -> Stack 1: [D], Stack 2: [E], Stack 3: [F, B, C], Stack 4: [G, A] | Taking action Move G from E to table | Moved to state -> Stack 1: [A], Stack 2: [D], Stack 3: [E], Stack 4: [F, B, C], Stack 5: [G] | Plan so far [Move G from A to table | Move E from B to table | Move A from C to table | Move C from D to B | Move G from table to E | Move G from E to table] | Taking action Move A from D to table | Moved to state -> Stack 1: [A], Stack 2: [D], Stack 3: [E], Stack 4: [F, B, C], Stack 5: [G] | Plan so far [Move G from A to table | Move E from B to table | Move A from C to table | Move C from D to B | Move A from table to D | Move A from D to table] | Taking action Move D from table to A | Moved to state -> Stack 1: [A, D], Stack 2: [E], Stack 3: [F, B, C], Stack 4: [G] | Plan so far [Move G from A to table | Move E from B to table | Move A from C to table | Move C from D to B | Move D from table to A] | Exploring action Move D from A to G | New state -> Stack 1: [A], Stack 2: [E], Stack 3: [F, B, C], Stack 4: [G, D] | Exploring action Move D from A to E | New state -> Stack 1: [A], Stack 2: [E, D], Stack 3: [F, B, C], Stack 4: [G] | Exploring action Move B from F to table | New state -> Invalid | Exploring action Move D from A to table | New state -> Stack 1: [A], Stack 2: [D], Stack 3: [E], Stack 4: [F, B, C], Stack 5: [G] | Taking action Move D from A to G | Moved to state -> Stack 1: [A], Stack 2: [E], Stack 3: [F, B, C], Stack 4: [G, D] | Plan so far [Move G from A to table | Move E from B to table | Move A from C to table | Move C from D to B | Move D from table to A | Move D from A to G] | Taking action Move D from table to E | Moved to state -> Stack 1: [A], Stack 2: [E, D], Stack 3: [F, B, C], Stack 4: [G] | Plan so far [Move G from A to table | Move E from B to table | Move A from C to table | Move C from D to B | Move D from table to E] | Exploring action Move D from E to table | New state -> Stack 1: [A], Stack 2: [D], Stack 3: [E], Stack 4: [F, B, C], Stack 5: [G] | Exploring action Move B from F to C | New state -> Invalid | Exploring action Move D from E to A | New state -> Stack 1: [A, D], Stack 2: [E], Stack 3: [F, B, C], Stack 4: [G] | Exploring action Move D from E to G | New state -> Stack 1: [A], Stack 2: [E], Stack 3: [F, B, C], Stack 4: [G, D] | Taking action Move D from E to G | Moved to state -> Stack 1: [A], Stack 2: [E], Stack 3: [F, B, C], Stack 4: [G, D] | Plan so far [Move G from A to table | Move E from B to table | Move A from C to table | Move C from D to B | Move D from table to E | Move D from E to G] | Taking action Move D from A to table | Moved to state -> Stack 1: [A], Stack 2: [D], Stack 3: [E], Stack 4: [F, B, C], Stack 5: [G] | Plan so far [Move G from A to table | Move E from B to table | Move A from C to table | Move C from D to B | Move D from table to A | Move D from A to table] | Taking action Move E from A to D | Moved to state -> Stack 1: [A], Stack 2: [D, E], Stack 3: [F, B, C], Stack 4: [G] | Plan so far [Move G from A to table | Move E from B to table | Move A from C to table | Move C from D to B | Move E from table to A | Move E from A to D] | Taking action Move E from A to table | Moved to state -> Stack 1: [A], Stack 2: [D], Stack 3: [E], Stack 4: [F, B, C], Stack 5: [G] | Plan so far [Move G from A to table | Move E from B to table | Move A from C to table | Move C from D to B | Move E from table to A | Move E from A to table] | Taking action Move A from table to E | Moved to state -> Stack 1: [D], Stack 2: [E, A], Stack 3: [F, B, C], Stack 4: [G] | Plan so far [Move G from A to table | Move E from B to table | Move A from C to table | Move C from D to B | Move A from table to E] | Exploring action Move E from table to A | New state -> Invalid | Exploring action Move D from table to G | New state -> Stack 1: [E, A], Stack 2: [F, B, C], Stack 3: [G, D] | Exploring action Move A from E to D | New state -> Stack 1: [D, A], Stack 2: [E], Stack 3: [F, B, C], Stack 4: [G] | Exploring action Move A from E to table | New state -> Stack 1: [A], Stack 2: [D], Stack 3: [E], Stack 4: [F, B, C], Stack 5: [G] | Exploring action Move E from table to G | New state -> Invalid | Taking action Move A from table to G | Moved to state -> Stack 1: [D], Stack 2: [E], Stack 3: [F, B, C], Stack 4: [G, A] | Plan so far [Move G from A to table | Move E from B to table | Move A from C to table | Move C from D to B | Move A from table to G] | Exploring action Move A from G to D | New state -> Stack 1: [D, A], Stack 2: [E], Stack 3: [F, B, C], Stack 4: [G] | Exploring action Move G from table to D | New state -> Invalid | Exploring action Move E from table to D | New state -> Stack 1: [D, E], Stack 2: [F, B, C], Stack 3: [G, A] | Exploring action Move A from G to table | New state -> Stack 1: [A], Stack 2: [D], Stack 3: [E], Stack 4: [F, B, C], Stack 5: [G] | Exploring action Move B from F to A | New state -> Invalid | Taking action Move A from E to table | Moved to state -> Stack 1: [A], Stack 2: [E], Stack 3: [F, B, C], Stack 4: [G, D] | Plan so far [Move G from A to table | Move E from B to table | Move A from C to table | Move C from D to B | Move D from table to G | Move A from table to E | Move A from E to table] | Taking action Move D from table to G | Moved to state -> Stack 1: [A, E], Stack 2: [F, B, C], Stack 3: [G, D] | Plan so far [Move G from A to table | Move E from B to table | Move A from C to table | Move C from D to B | Move E from table to A | Move D from table to G] | Taking action Move E from D to table | Moved to state -> Stack 1: [A], Stack 2: [E], Stack 3: [F, B, C], Stack 4: [G, D] | Plan so far [Move G from A to table | Move E from B to table | Move A from C to table | Move C from D to B | Move D from table to G | Move E from table to D | Move E from D to table] | Taking action Move A from C to table | Moved to state -> Stack 1: [A], Stack 2: [D, C], Stack 3: [F, B, E], Stack 4: [G] | Plan so far [Move G from A to table | Move A from C to table] | Exploring action Move C from D to table | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D], Stack 4: [F, B, E], Stack 5: [G] | Exploring action Move E from B to table | New state -> Stack 1: [A], Stack 2: [D, C], Stack 3: [E], Stack 4: [F, B], Stack 5: [G] | Exploring action Move C from D to E | New state -> Stack 1: [A], Stack 2: [D], Stack 3: [F, B, E, C], Stack 4: [G] | Exploring action Move F from table to A | New state -> Invalid | Exploring action Move F from table to E | New state -> Invalid | Taking action Move A from D to table | Moved to state -> Stack 1: [A], Stack 2: [E], Stack 3: [F, B, C], Stack 4: [G, D] | Plan so far [Move G from A to table | Move E from B to table | Move A from C to table | Move C from D to B | Move D from table to G | Move A from table to D | Move A from D to table] | Taking action Move B from F to table | Moved to state -> Stack 1: [B], Stack 2: [D, C, A], Stack 3: [E], Stack 4: [F], Stack 5: [G] | Plan so far [Move G from A to table | Move E from B to table | Move B from F to table] | Taking action Move B from F to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [F], Stack 5: [G, D, E] | Plan so far [Move G from A to table | Move E from B to table | Move A from C to table | Move C from D to B | Move D from table to G | Move E from table to D | Move C from B to table | Move B from F to table] | Exploring action Move D from G to E | New state -> Invalid | Exploring action Move C from table to B | New state -> Stack 1: [A], Stack 2: [B, C], Stack 3: [F], Stack 4: [G, D, E] | Exploring action Move B from table to C | New state -> Stack 1: [A], Stack 2: [C, B], Stack 3: [F], Stack 4: [G, D, E] | Exploring action Move F from table to A | New state -> Stack 1: [A, F], Stack 2: [B], Stack 3: [C], Stack 4: [G, D, E] | Taking action Move C from D to table | Moved to state -> Stack 1: [A], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [F, B], Stack 6: [G] | Plan so far [Move G from A to table | Move E from B to table | Move A from C to table | Move C from D to table] | Exploring action Move D from table to G | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [E], Stack 4: [F, B], Stack 5: [G, D] | Exploring action Move F from table to D | New state -> Invalid | Exploring action Move F from table to G | New state -> Invalid | Exploring action Move C from table to B | New state -> Stack 1: [A], Stack 2: [D], Stack 3: [E], Stack 4: [F, B, C], Stack 5: [G] | Exploring action Move B from F to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F], Stack 7: [G] | Taking action Move C from table to B | Moved to state -> Stack 1: [A], Stack 2: [D], Stack 3: [E], Stack 4: [F, B, C], Stack 5: [G] | Plan so far [Move G from A to table | Move E from B to table | Move A from C to table | Move C from D to table | Move C from table to B] | Taking action Move C from D to table | Moved to state -> Stack 1: [A], Stack 2: [C], Stack 3: [D], Stack 4: [F, B, E], Stack 5: [G] | Plan so far [Move G from A to table | Move A from C to table | Move C from D to table] | Exploring action Move D from table to G | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [F, B, E], Stack 4: [G, D] | Exploring action Move E from B to D | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, E], Stack 4: [F, B], Stack 5: [G] | Exploring action Move E from B to table | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [F, B], Stack 6: [G] | Exploring action Move B from F to D | New state -> Invalid | Taking action Move E from B to table | Moved to state -> Stack 1: [A], Stack 2: [D, C], Stack 3: [E], Stack 4: [F, B], Stack 5: [G] | Plan so far [Move G from A to table | Move A from C to table | Move E from B to table] | Taking action Move B from F to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F], Stack 7: [G] | Plan so far [Move G from A to table | Move E from B to table | Move A from C to table | Move C from D to table | Move B from F to table] | Exploring action Move C from table to B | New state -> Stack 1: [A], Stack 2: [B, C], Stack 3: [D], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Exploring action Move F from table to A | New state -> Stack 1: [A, F], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [G] | Exploring action Move D from table to G | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [E], Stack 5: [F], Stack 6: [G, D] | Taking action Move D from table to G | Moved to state -> Stack 1: [A], Stack 2: [C], Stack 3: [E], Stack 4: [F, B], Stack 5: [G, D] | Plan so far [Move G from A to table | Move E from B to table | Move A from C to table | Move C from D to table | Move D from table to G] | Exploring action Move G from table to A | New state -> Invalid | Exploring action Move E from table to D | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [F, B], Stack 4: [G, D, E] | Exploring action Move C from table to B | New state -> Stack 1: [A], Stack 2: [E], Stack 3: [F, B, C], Stack 4: [G, D] | Exploring action Move B from F to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [E], Stack 5: [F], Stack 6: [G, D] | Taking action Move C from table to B | Moved to state -> Stack 1: [A], Stack 2: [E], Stack 3: [F, B, C], Stack 4: [G, D] | Plan so far [Move G from A to table | Move E from B to table | Move A from C to table | Move C from D to table | Move D from table to G | Move C from table to B] | Taking action Move E from table to D | Moved to state -> Stack 1: [A], Stack 2: [C], Stack 3: [F, B], Stack 4: [G, D, E] | Plan so far [Move G from A to table | Move E from B to table | Move A from C to table | Move C from D to table | Move D from table to G | Move E from table to D] | Taking action Move D from table to G | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [E], Stack 5: [F], Stack 6: [G, D] | Plan so far [Move G from A to table | Move E from B to table | Move A from C to table | Move C from D to table | Move B from F to table | Move D from table to G] | Exploring action Move E from table to D | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [F], Stack 5: [G, D, E] | Exploring action Move G from table to F | New state -> Invalid | Exploring action Move C from table to B | New state -> Stack 1: [A], Stack 2: [B, C], Stack 3: [E], Stack 4: [F], Stack 5: [G, D] | Exploring action Move F from table to A | New state -> Stack 1: [A, F], Stack 2: [B], Stack 3: [C], Stack 4: [E], Stack 5: [G, D] | Taking action Move E from table to D | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [F], Stack 5: [G, D, E] | Plan so far [Move G from A to table | Move E from B to table | Move A from C to table | Move C from D to table | Move B from F to table | Move D from table to G | Move E from table to D] | Taking action Move F from table to A | Moved to state -> Stack 1: [A, F], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [G] | Plan so far [Move G from A to table | Move E from B to table | Move A from C to table | Move C from D to table | Move B from F to table | Move F from table to A] | Exploring action Move D from table to G | New state -> Stack 1: [A, F], Stack 2: [B], Stack 3: [C], Stack 4: [E], Stack 5: [G, D] | Exploring action Move B from table to F | New state -> Stack 1: [A, F, B], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [G] | Exploring action Move A from table to D | New state -> Invalid | Exploring action Move C from table to B | New state -> Stack 1: [A, F], Stack 2: [B, C], Stack 3: [D], Stack 4: [E], Stack 5: [G] | Exploring action Move A from table to G | New state -> Invalid | Taking action Move B from F to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [E], Stack 5: [F], Stack 6: [G, D] | Plan so far [Move G from A to table | Move E from B to table | Move A from C to table | Move C from D to table | Move D from table to G | Move B from F to table] | Taking action Move F from table to A | Moved to state -> Stack 1: [A, F], Stack 2: [B], Stack 3: [C], Stack 4: [E], Stack 5: [G, D] | Plan so far [Move G from A to table | Move E from B to table | Move A from C to table | Move C from D to table | Move B from F to table | Move D from table to G | Move F from table to A] | Exploring action Move B from table to F | New state -> Stack 1: [A, F, B], Stack 2: [C], Stack 3: [E], Stack 4: [G, D] | Exploring action Move C from table to B | New state -> Stack 1: [A, F], Stack 2: [B, C], Stack 3: [E], Stack 4: [G, D] | Exploring action Move G from table to D | New state -> Invalid | Exploring action Move E from table to D | New state -> Stack 1: [A, F], Stack 2: [B], Stack 3: [C], Stack 4: [G, D, E] | Taking action Move E from table to D | Moved to state -> Stack 1: [A, F], Stack 2: [B], Stack 3: [C], Stack 4: [G, D, E] | Plan so far [Move G from A to table | Move E from B to table | Move A from C to table | Move C from D to table | Move B from F to table | Move D from table to G | Move F from table to A | Move E from table to D] | Exploring action Move B from table to C | New state -> Stack 1: [A, F], Stack 2: [C, B], Stack 3: [G, D, E] | Exploring action Move G from table to E | New state -> Invalid | Exploring action Move C from table to B | New state -> Stack 1: [A, F], Stack 2: [B, C], Stack 3: [G, D, E] | Exploring action Move B from table to F | New state -> Stack 1: [A, F, B], Stack 2: [C], Stack 3: [G, D, E] | Taking action Move B from table to F | Moved to state -> Stack 1: [A, F, B], Stack 2: [C], Stack 3: [G, D, E] | Plan so far [Move G from A to table | Move E from B to table | Move A from C to table | Move C from D to table | Move B from F to table | Move D from table to G | Move F from table to A | Move E from table to D | Move B from table to F] | Exploring action Move F from A to E | New state -> Invalid | Exploring action Move E from D to table | New state -> Stack 1: [A, F, B], Stack 2: [C], Stack 3: [E], Stack 4: [G, D] | Exploring action Move B from F to table | New state -> Stack 1: [A, F], Stack 2: [B], Stack 3: [C], Stack 4: [G, D, E] | Exploring action Move C from table to B | New state -> Stack 1: [A, F, B, C], Stack 2: [G, D, E] | Taking action Move C from table to B | Moved to state -> Stack 1: [A, F, B, C], Stack 2: [G, D, E] | Plan so far [Move G from A to table | Move E from B to table | Move A from C to table | Move C from D to table | Move B from F to table | Move D from table to G | Move F from table to A | Move E from table to D | Move B from table to F | Move C from table to B] | Reached goal state!",
        "system2_states_v1": 164
    },
    {
        "idx": 722,
        "start": [
            [
                "table",
                "A",
                "F",
                "E",
                "C"
            ],
            [
                "table",
                "B",
                "D"
            ]
        ],
        "goal": [
            [
                "table",
                "C",
                "B",
                "F",
                "A",
                "E",
                "D"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": false,
                "on": -1,
                "under": "F",
                "ontable": true
            },
            "B": {
                "clear": false,
                "on": -1,
                "under": "D",
                "ontable": true
            },
            "C": {
                "clear": true,
                "on": "E",
                "under": -1,
                "ontable": false
            },
            "D": {
                "clear": true,
                "on": "B",
                "under": -1,
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": "F",
                "under": "C",
                "ontable": false
            },
            "F": {
                "clear": false,
                "on": "A",
                "under": "E",
                "ontable": false
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": false,
                "on": "F",
                "under": "E",
                "ontable": false
            },
            "B": {
                "clear": false,
                "on": "C",
                "under": "F",
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": -1,
                "under": "B",
                "ontable": true
            },
            "D": {
                "clear": true,
                "on": "E",
                "under": -1,
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": "A",
                "under": "D",
                "ontable": false
            },
            "F": {
                "clear": false,
                "on": "B",
                "under": "A",
                "ontable": false
            }
        },
        "plan_len": 8,
        "num_blocks": 6,
        "prompt": "The initial state:\nThe hand is empty.\nA is on the table. F is on A. E is on F. C is on E. C is clear.\nB is on the table. D is on B. D is clear.\n\nThe goal is:\nC is on the table. B is on C. F is on B. A is on F. E is on A. D is on E. D is clear.\n",
        "system1_plan": "Move C from E to table | Move D from B to table | Move E from F to table | Move B from table to C | Move F from A to B | Move A from table to F | Move E from table to A | Move D from table to E",
        "system1_states": 8,
        "system2_plan_v1": "Moved to state -> Stack 1: [A, F, E, C], Stack 2: [B, D] | Plan so far [] | Exploring action Move C from E to table | New state -> Stack 1: [A, F, E], Stack 2: [B, D], Stack 3: [C] | Exploring action Move F from A to table | New state -> Invalid | Exploring action Move C from E to D | New state -> Stack 1: [A, F, E], Stack 2: [B, D, C] | Exploring action Move D from B to table | New state -> Stack 1: [A, F, E, C], Stack 2: [B], Stack 3: [D] | Taking action Move C from E to table | Moved to state -> Stack 1: [A, F, E], Stack 2: [B, D], Stack 3: [C] | Plan so far [Move C from E to table] | Exploring action Move D from B to E | New state -> Stack 1: [A, F, E, D], Stack 2: [B], Stack 3: [C] | Exploring action Move D from B to table | New state -> Stack 1: [A, F, E], Stack 2: [B], Stack 3: [C], Stack 4: [D] | Exploring action Move F from A to table | New state -> Invalid | Exploring action Move E from F to table | New state -> Stack 1: [A, F], Stack 2: [B, D], Stack 3: [C], Stack 4: [E] | Taking action Move D from B to table | Moved to state -> Stack 1: [A, F, E, C], Stack 2: [B], Stack 3: [D] | Plan so far [Move D from B to table] | Exploring action Move C from E to D | New state -> Stack 1: [A, F, E], Stack 2: [B], Stack 3: [D, C] | Exploring action Move F from A to D | New state -> Invalid | Exploring action Move C from E to table | New state -> Stack 1: [A, F, E], Stack 2: [B], Stack 3: [C], Stack 4: [D] | Exploring action Move C from E to B | New state -> Stack 1: [A, F, E], Stack 2: [B, C], Stack 3: [D] | Exploring action Move A from table to D | New state -> Invalid | Taking action Move D from B to table | Moved to state -> Stack 1: [A, F, E], Stack 2: [B], Stack 3: [C], Stack 4: [D] | Plan so far [Move C from E to table | Move D from B to table] | Exploring action Move F from A to C | New state -> Invalid | Exploring action Move E from F to C | New state -> Stack 1: [A, F], Stack 2: [B], Stack 3: [C, E], Stack 4: [D] | Exploring action Move E from F to table | New state -> Stack 1: [A, F], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Exploring action Move B from table to C | New state -> Stack 1: [A, F, E], Stack 2: [C, B], Stack 3: [D] | Taking action Move C from E to table | Moved to state -> Stack 1: [A, F, E], Stack 2: [B], Stack 3: [C], Stack 4: [D] | Plan so far [Move D from B to table | Move C from E to table] | Taking action Move E from F to table | Moved to state -> Stack 1: [A, F], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Plan so far [Move C from E to table | Move D from B to table | Move E from F to table] | Exploring action Move F from A to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Exploring action Move B from table to C | New state -> Stack 1: [A, F], Stack 2: [C, B], Stack 3: [D], Stack 4: [E] | Exploring action Move A from table to D | New state -> Invalid | Exploring action Move F from A to D | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D, F], Stack 5: [E] | Taking action Move D from B to E | Moved to state -> Stack 1: [A, F, E, D], Stack 2: [B], Stack 3: [C] | Plan so far [Move C from E to table | Move D from B to E] | Exploring action Move E from F to table | New state -> Invalid | Exploring action Move C from table to B | New state -> Stack 1: [A, F, E, D], Stack 2: [B, C] | Exploring action Move B from table to C | New state -> Stack 1: [A, F, E, D], Stack 2: [C, B] | Exploring action Move D from E to table | New state -> Stack 1: [A, F, E], Stack 2: [B], Stack 3: [C], Stack 4: [D] | Taking action Move B from table to C | Moved to state -> Stack 1: [A, F], Stack 2: [C, B], Stack 3: [D], Stack 4: [E] | Plan so far [Move C from E to table | Move D from B to table | Move E from F to table | Move B from table to C] | Exploring action Move C from table to E | New state -> Invalid | Exploring action Move C from table to F | New state -> Invalid | Exploring action Move F from A to E | New state -> Stack 1: [A], Stack 2: [C, B], Stack 3: [D], Stack 4: [E, F] | Exploring action Move F from A to B | New state -> Stack 1: [A], Stack 2: [C, B, F], Stack 3: [D], Stack 4: [E] | Exploring action Move F from A to table | New state -> Stack 1: [A], Stack 2: [C, B], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Taking action Move F from A to B | Moved to state -> Stack 1: [A], Stack 2: [C, B, F], Stack 3: [D], Stack 4: [E] | Plan so far [Move C from E to table | Move D from B to table | Move E from F to table | Move B from table to C | Move F from A to B] | Exploring action Move B from C to F | New state -> Invalid | Exploring action Move A from table to F | New state -> Stack 1: [C, B, F, A], Stack 2: [D], Stack 3: [E] | Exploring action Move D from table to E | New state -> Stack 1: [A], Stack 2: [C, B, F], Stack 3: [E, D] | Exploring action Move A from table to D | New state -> Stack 1: [C, B, F], Stack 2: [D, A], Stack 3: [E] | Taking action Move A from table to F | Moved to state -> Stack 1: [C, B, F, A], Stack 2: [D], Stack 3: [E] | Plan so far [Move C from E to table | Move D from B to table | Move E from F to table | Move B from table to C | Move F from A to B | Move A from table to F] | Exploring action Move E from table to D | New state -> Stack 1: [C, B, F, A], Stack 2: [D, E] | Exploring action Move D from table to E | New state -> Stack 1: [C, B, F, A], Stack 2: [E, D] | Exploring action Move E from table to A | New state -> Stack 1: [C, B, F, A, E], Stack 2: [D] | Exploring action Move B from C to D | New state -> Invalid | Taking action Move E from table to A | Moved to state -> Stack 1: [C, B, F, A, E], Stack 2: [D] | Plan so far [Move C from E to table | Move D from B to table | Move E from F to table | Move B from table to C | Move F from A to B | Move A from table to F | Move E from table to A] | Exploring action Move E from A to D | New state -> Stack 1: [C, B, F, A], Stack 2: [D, E] | Exploring action Move E from A to table | New state -> Stack 1: [C, B, F, A], Stack 2: [D], Stack 3: [E] | Exploring action Move D from table to E | New state -> Stack 1: [C, B, F, A, E, D] | Exploring action Move C from table to D | New state -> Invalid | Exploring action Move B from C to D | New state -> Invalid | Taking action Move D from table to E | Moved to state -> Stack 1: [C, B, F, A, E, D] | Plan so far [Move C from E to table | Move D from B to table | Move E from F to table | Move B from table to C | Move F from A to B | Move A from table to F | Move E from table to A | Move D from table to E] | Reached goal state!",
        "system2_states_v1": 43
    },
    {
        "idx": 674,
        "start": [
            [
                "table",
                "A",
                "F",
                "C",
                "E",
                "B",
                "D"
            ]
        ],
        "goal": [
            [
                "table",
                "A",
                "D",
                "C",
                "E"
            ],
            [
                "table",
                "B",
                "F"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": false,
                "on": -1,
                "under": "F",
                "ontable": true
            },
            "B": {
                "clear": false,
                "on": "E",
                "under": "D",
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": "F",
                "under": "E",
                "ontable": false
            },
            "D": {
                "clear": true,
                "on": "B",
                "under": -1,
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": "C",
                "under": "B",
                "ontable": false
            },
            "F": {
                "clear": false,
                "on": "A",
                "under": "C",
                "ontable": false
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": false,
                "on": -1,
                "under": "D",
                "ontable": true
            },
            "B": {
                "clear": false,
                "on": -1,
                "under": "F",
                "ontable": true
            },
            "C": {
                "clear": false,
                "on": "D",
                "under": "E",
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": "A",
                "under": "C",
                "ontable": false
            },
            "E": {
                "clear": true,
                "on": "C",
                "under": -1,
                "ontable": false
            },
            "F": {
                "clear": true,
                "on": "B",
                "under": -1,
                "ontable": false
            }
        },
        "plan_len": 8,
        "num_blocks": 6,
        "prompt": "The initial state:\nThe hand is empty.\nA is on the table. F is on A. C is on F. E is on C. B is on E. D is on B. D is clear.\n\nThe goal is:\nA is on the table. D is on A. C is on D. E is on C. E is clear.\nB is on the table. F is on B. F is clear.\n",
        "system1_plan": "Move D from B to table | Move B from E to table | Move E from C to table | Move C from F to table | Move F from A to B | Move D from table to A | Move C from table to D | Move E from table to C",
        "system1_states": 8,
        "system2_plan_v1": "Moved to state -> Stack 1: [A, F, C, E, B, D] | Plan so far [] | Exploring action Move D from B to table | New state -> Stack 1: [A, F, C, E, B], Stack 2: [D] | Exploring action Move A from table to D | New state -> Invalid | Taking action Move D from B to table | Moved to state -> Stack 1: [A, F, C, E, B], Stack 2: [D] | Plan so far [Move D from B to table] | Exploring action Move B from E to table | New state -> Stack 1: [A, F, C, E], Stack 2: [B], Stack 3: [D] | Exploring action Move B from E to D | New state -> Stack 1: [A, F, C, E], Stack 2: [D, B] | Exploring action Move D from table to B | New state -> Stack 1: [A, F, C, E, B, D] | Exploring action Move F from A to B | New state -> Invalid | Exploring action Move C from F to D | New state -> Invalid | Taking action Move B from E to table | Moved to state -> Stack 1: [A, F, C, E], Stack 2: [B], Stack 3: [D] | Plan so far [Move D from B to table | Move B from E to table] | Exploring action Move E from C to B | New state -> Stack 1: [A, F, C], Stack 2: [B, E], Stack 3: [D] | Exploring action Move D from table to B | New state -> Stack 1: [A, F, C, E], Stack 2: [B, D] | Exploring action Move E from C to table | New state -> Stack 1: [A, F, C], Stack 2: [B], Stack 3: [D], Stack 4: [E] | Exploring action Move C from F to D | New state -> Invalid | Taking action Move B from E to D | Moved to state -> Stack 1: [A, F, C, E], Stack 2: [D, B] | Plan so far [Move D from B to table | Move B from E to D] | Exploring action Move B from D to table | New state -> Stack 1: [A, F, C, E], Stack 2: [B], Stack 3: [D] | Exploring action Move E from C to table | New state -> Stack 1: [A, F, C], Stack 2: [D, B], Stack 3: [E] | Exploring action Move C from F to B | New state -> Invalid | Exploring action Move B from D to E | New state -> Stack 1: [A, F, C, E, B], Stack 2: [D] | Exploring action Move F from A to B | New state -> Invalid | Taking action Move E from C to table | Moved to state -> Stack 1: [A, F, C], Stack 2: [B], Stack 3: [D], Stack 4: [E] | Plan so far [Move D from B to table | Move B from E to table | Move E from C to table] | Exploring action Move F from A to D | New state -> Invalid | Exploring action Move C from F to E | New state -> Stack 1: [A, F], Stack 2: [B], Stack 3: [D], Stack 4: [E, C] | Exploring action Move F from A to C | New state -> Invalid | Exploring action Move C from F to D | New state -> Stack 1: [A, F], Stack 2: [B], Stack 3: [D, C], Stack 4: [E] | Exploring action Move C from F to table | New state -> Stack 1: [A, F], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Taking action Move B from D to table | Moved to state -> Stack 1: [A, F, C, E], Stack 2: [B], Stack 3: [D] | Plan so far [Move D from B to table | Move B from E to D | Move B from D to table] | Taking action Move C from F to table | Moved to state -> Stack 1: [A, F], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Plan so far [Move D from B to table | Move B from E to table | Move E from C to table | Move C from F to table] | Exploring action Move F from A to B | New state -> Stack 1: [A], Stack 2: [B, F], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Exploring action Move F from A to D | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D, F], Stack 5: [E] | Exploring action Move F from A to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Exploring action Move A from table to E | New state -> Invalid | Exploring action Move A from table to D | New state -> Invalid | Taking action Move F from A to B | Moved to state -> Stack 1: [A], Stack 2: [B, F], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Plan so far [Move D from B to table | Move B from E to table | Move E from C to table | Move C from F to table | Move F from A to B] | Exploring action Move D from table to A | New state -> Stack 1: [A, D], Stack 2: [B, F], Stack 3: [C], Stack 4: [E] | Exploring action Move B from table to E | New state -> Invalid | Exploring action Move E from table to C | New state -> Stack 1: [A], Stack 2: [B, F], Stack 3: [C, E], Stack 4: [D] | Exploring action Move B from table to D | New state -> Invalid | Exploring action Move A from table to E | New state -> Stack 1: [B, F], Stack 2: [C], Stack 3: [D], Stack 4: [E, A] | Taking action Move D from table to A | Moved to state -> Stack 1: [A, D], Stack 2: [B, F], Stack 3: [C], Stack 4: [E] | Plan so far [Move D from B to table | Move B from E to table | Move E from C to table | Move C from F to table | Move F from A to B | Move D from table to A] | Exploring action Move C from table to D | New state -> Stack 1: [A, D, C], Stack 2: [B, F], Stack 3: [E] | Exploring action Move C from table to E | New state -> Stack 1: [A, D], Stack 2: [B, F], Stack 3: [E, C] | Exploring action Move E from table to C | New state -> Stack 1: [A, D], Stack 2: [B, F], Stack 3: [C, E] | Exploring action Move B from table to C | New state -> Invalid | Taking action Move C from table to D | Moved to state -> Stack 1: [A, D, C], Stack 2: [B, F], Stack 3: [E] | Plan so far [Move D from B to table | Move B from E to table | Move E from C to table | Move C from F to table | Move F from A to B | Move D from table to A | Move C from table to D] | Exploring action Move B from table to F | New state -> Invalid | Exploring action Move A from table to E | New state -> Invalid | Exploring action Move E from table to C | New state -> Stack 1: [A, D, C, E], Stack 2: [B, F] | Exploring action Move C from D to table | New state -> Stack 1: [A, D], Stack 2: [B, F], Stack 3: [C], Stack 4: [E] | Exploring action Move F from B to table | New state -> Stack 1: [A, D, C], Stack 2: [B], Stack 3: [E], Stack 4: [F] | Taking action Move E from table to C | Moved to state -> Stack 1: [A, D, C, E], Stack 2: [B, F] | Plan so far [Move D from B to table | Move B from E to table | Move E from C to table | Move C from F to table | Move F from A to B | Move D from table to A | Move C from table to D | Move E from table to C] | Reached goal state!",
        "system2_states_v1": 40
    },
    {
        "idx": 880,
        "start": [
            [
                "table",
                "D",
                "A",
                "F",
                "G",
                "C",
                "B"
            ],
            [
                "table",
                "E"
            ]
        ],
        "goal": [
            [
                "table",
                "A",
                "G"
            ],
            [
                "table",
                "D",
                "E",
                "C",
                "F",
                "B"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": false,
                "on": "D",
                "under": "F",
                "ontable": false
            },
            "B": {
                "clear": true,
                "on": "C",
                "under": -1,
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": "G",
                "under": "B",
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": -1,
                "under": "A",
                "ontable": true
            },
            "E": {
                "clear": true,
                "on": -1,
                "under": -1,
                "ontable": true
            },
            "F": {
                "clear": false,
                "on": "A",
                "under": "G",
                "ontable": false
            },
            "G": {
                "clear": false,
                "on": "F",
                "under": "C",
                "ontable": false
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": false,
                "on": -1,
                "under": "G",
                "ontable": true
            },
            "B": {
                "clear": true,
                "on": "F",
                "under": -1,
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": "E",
                "under": "F",
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": -1,
                "under": "E",
                "ontable": true
            },
            "E": {
                "clear": false,
                "on": "D",
                "under": "C",
                "ontable": false
            },
            "F": {
                "clear": false,
                "on": "C",
                "under": "B",
                "ontable": false
            },
            "G": {
                "clear": true,
                "on": "A",
                "under": -1,
                "ontable": false
            }
        },
        "plan_len": 10,
        "num_blocks": 7,
        "prompt": "The initial state:\nThe hand is empty.\nD is on the table. A is on D. F is on A. G is on F. C is on G. B is on C. B is clear.\nE is on the table. E is clear.\n\nThe goal is:\nA is on the table. G is on A. G is clear.\nD is on the table. E is on D. C is on E. F is on C. B is on F. B is clear.\n",
        "system1_plan": "Move B from C to table | Move C from G to table | Move G from F to table | Move F from A to table | Move A from D to table | Move G from table to A | Move E from table to D | Move C from table to E | Move F from table to C | Move B from table to F",
        "system1_states": 10,
        "system2_plan_v1": "Moved to state -> Stack 1: [D, A, F, G, C, B], Stack 2: [E] | Plan so far [] | Exploring action Move B from C to E | New state -> Stack 1: [D, A, F, G, C], Stack 2: [E, B] | Exploring action Move F from A to table | New state -> Invalid | Exploring action Move E from table to B | New state -> Stack 1: [D, A, F, G, C, B, E] | Exploring action Move B from C to table | New state -> Stack 1: [B], Stack 2: [D, A, F, G, C], Stack 3: [E] | Taking action Move B from C to table | Moved to state -> Stack 1: [B], Stack 2: [D, A, F, G, C], Stack 3: [E] | Plan so far [Move B from C to table] | Exploring action Move C from G to B | New state -> Stack 1: [B, C], Stack 2: [D, A, F, G], Stack 3: [E] | Exploring action Move C from G to table | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, A, F, G], Stack 4: [E] | Exploring action Move C from G to E | New state -> Stack 1: [B], Stack 2: [D, A, F, G], Stack 3: [E, C] | Exploring action Move F from A to E | New state -> Invalid | Exploring action Move F from A to B | New state -> Invalid | Taking action Move C from G to table | Moved to state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, A, F, G], Stack 4: [E] | Plan so far [Move B from C to table | Move C from G to table] | Exploring action Move G from F to E | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, A, F], Stack 4: [E, G] | Exploring action Move G from F to table | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, A, F], Stack 4: [E], Stack 5: [G] | Exploring action Move A from D to B | New state -> Invalid | Exploring action Move G from F to C | New state -> Stack 1: [B], Stack 2: [C, G], Stack 3: [D, A, F], Stack 4: [E] | Exploring action Move F from A to C | New state -> Invalid | Taking action Move G from F to table | Moved to state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, A, F], Stack 4: [E], Stack 5: [G] | Plan so far [Move B from C to table | Move C from G to table | Move G from F to table] | Exploring action Move F from A to table | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, A], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Exploring action Move A from D to E | New state -> Invalid | Exploring action Move B from table to F | New state -> Stack 1: [C], Stack 2: [D, A, F, B], Stack 3: [E], Stack 4: [G] | Exploring action Move F from A to B | New state -> Stack 1: [B, F], Stack 2: [C], Stack 3: [D, A], Stack 4: [E], Stack 5: [G] | Taking action Move F from A to table | Moved to state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, A], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Plan so far [Move B from C to table | Move C from G to table | Move G from F to table | Move F from A to table] | Exploring action Move A from D to G | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [F], Stack 6: [G, A] | Exploring action Move A from D to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F], Stack 7: [G] | Exploring action Move D from table to G | New state -> Invalid | Exploring action Move D from table to C | New state -> Invalid | Exploring action Move A from D to C | New state -> Stack 1: [B], Stack 2: [C, A], Stack 3: [D], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Taking action Move A from D to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F], Stack 7: [G] | Plan so far [Move B from C to table | Move C from G to table | Move G from F to table | Move F from A to table | Move A from D to table] | Exploring action Move B from table to F | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [F, B], Stack 6: [G] | Exploring action Move E from table to D | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D, E], Stack 5: [F], Stack 6: [G] | Exploring action Move G from table to A | New state -> Stack 1: [A, G], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Taking action Move G from table to A | Moved to state -> Stack 1: [A, G], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Plan so far [Move B from C to table | Move C from G to table | Move G from F to table | Move F from A to table | Move A from D to table | Move G from table to A] | Exploring action Move B from table to E | New state -> Stack 1: [A, G], Stack 2: [C], Stack 3: [D], Stack 4: [E, B], Stack 5: [F] | Exploring action Move B from table to F | New state -> Stack 1: [A, G], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [F, B] | Exploring action Move A from table to C | New state -> Invalid | Exploring action Move E from table to D | New state -> Stack 1: [A, G], Stack 2: [B], Stack 3: [C], Stack 4: [D, E], Stack 5: [F] | Taking action Move E from table to D | Moved to state -> Stack 1: [A, G], Stack 2: [B], Stack 3: [C], Stack 4: [D, E], Stack 5: [F] | Plan so far [Move B from C to table | Move C from G to table | Move G from F to table | Move F from A to table | Move A from D to table | Move G from table to A | Move E from table to D] | Exploring action Move D from table to E | New state -> Invalid | Exploring action Move B from table to F | New state -> Stack 1: [A, G], Stack 2: [C], Stack 3: [D, E], Stack 4: [F, B] | Exploring action Move C from table to F | New state -> Stack 1: [A, G], Stack 2: [B], Stack 3: [D, E], Stack 4: [F, C] | Exploring action Move A from table to B | New state -> Invalid | Exploring action Move C from table to E | New state -> Stack 1: [A, G], Stack 2: [B], Stack 3: [D, E, C], Stack 4: [F] | Taking action Move C from table to E | Moved to state -> Stack 1: [A, G], Stack 2: [B], Stack 3: [D, E, C], Stack 4: [F] | Plan so far [Move B from C to table | Move C from G to table | Move G from F to table | Move F from A to table | Move A from D to table | Move G from table to A | Move E from table to D | Move C from table to E] | Exploring action Move B from table to F | New state -> Stack 1: [A, G], Stack 2: [D, E, C], Stack 3: [F, B] | Exploring action Move F from table to C | New state -> Stack 1: [A, G], Stack 2: [B], Stack 3: [D, E, C, F] | Exploring action Move E from D to F | New state -> Invalid | Exploring action Move E from D to C | New state -> Invalid | Exploring action Move B from table to C | New state -> Stack 1: [A, G], Stack 2: [D, E, C, B], Stack 3: [F] | Taking action Move F from table to C | Moved to state -> Stack 1: [A, G], Stack 2: [B], Stack 3: [D, E, C, F] | Plan so far [Move B from C to table | Move C from G to table | Move G from F to table | Move F from A to table | Move A from D to table | Move G from table to A | Move E from table to D | Move C from table to E | Move F from table to C] | Exploring action Move G from A to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, E, C, F], Stack 4: [G] | Exploring action Move B from table to F | New state -> Stack 1: [A, G], Stack 2: [D, E, C, F, B] | Exploring action Move E from D to B | New state -> Invalid | Exploring action Move C from E to F | New state -> Invalid | Exploring action Move F from C to table | New state -> Stack 1: [A, G], Stack 2: [B], Stack 3: [D, E, C], Stack 4: [F] | Taking action Move B from table to F | Moved to state -> Stack 1: [A, G], Stack 2: [D, E, C, F, B] | Plan so far [Move B from C to table | Move C from G to table | Move G from F to table | Move F from A to table | Move A from D to table | Move G from table to A | Move E from table to D | Move C from table to E | Move F from table to C | Move B from table to F] | Reached goal state!",
        "system2_states_v1": 45
    },
    {
        "idx": 892,
        "start": [
            [
                "table",
                "D",
                "C",
                "E",
                "B"
            ],
            [
                "table",
                "G",
                "A",
                "F"
            ]
        ],
        "goal": [
            [
                "table",
                "C",
                "B",
                "E",
                "A",
                "F",
                "D",
                "G"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": false,
                "on": "G",
                "under": "F",
                "ontable": false
            },
            "B": {
                "clear": true,
                "on": "E",
                "under": -1,
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": "D",
                "under": "E",
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": -1,
                "under": "C",
                "ontable": true
            },
            "E": {
                "clear": false,
                "on": "C",
                "under": "B",
                "ontable": false
            },
            "F": {
                "clear": true,
                "on": "A",
                "under": -1,
                "ontable": false
            },
            "G": {
                "clear": false,
                "on": -1,
                "under": "A",
                "ontable": true
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": false,
                "on": "E",
                "under": "F",
                "ontable": false
            },
            "B": {
                "clear": false,
                "on": "C",
                "under": "E",
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": -1,
                "under": "B",
                "ontable": true
            },
            "D": {
                "clear": false,
                "on": "F",
                "under": "G",
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": "B",
                "under": "A",
                "ontable": false
            },
            "F": {
                "clear": false,
                "on": "A",
                "under": "D",
                "ontable": false
            },
            "G": {
                "clear": true,
                "on": "D",
                "under": -1,
                "ontable": false
            }
        },
        "plan_len": 10,
        "num_blocks": 7,
        "prompt": "The initial state:\nThe hand is empty.\nD is on the table. C is on D. E is on C. B is on E. B is clear.\nG is on the table. A is on G. F is on A. F is clear.\n\nThe goal is:\nC is on the table. B is on C. E is on B. A is on E. F is on A. D is on F. G is on D. G is clear.\n",
        "system1_plan": "Move B from E to table | Move E from C to table | Move F from A to table | Move C from D to table | Move B from table to C | Move E from table to B | Move A from G to E | Move F from table to A | Move D from table to F | Move G from table to D",
        "system1_states": 10,
        "system2_plan_v1": "Moved to state -> Stack 1: [D, C, E, B], Stack 2: [G, A, F] | Plan so far [] | Exploring action Move F from A to table | New state -> Stack 1: [D, C, E, B], Stack 2: [F], Stack 3: [G, A] | Exploring action Move D from table to F | New state -> Invalid | Exploring action Move B from E to F | New state -> Stack 1: [D, C, E], Stack 2: [G, A, F, B] | Exploring action Move B from E to table | New state -> Stack 1: [B], Stack 2: [D, C, E], Stack 3: [G, A, F] | Taking action Move B from E to table | Moved to state -> Stack 1: [B], Stack 2: [D, C, E], Stack 3: [G, A, F] | Plan so far [Move B from E to table] | Exploring action Move A from G to B | New state -> Invalid | Exploring action Move F from A to B | New state -> Stack 1: [B, F], Stack 2: [D, C, E], Stack 3: [G, A] | Exploring action Move F from A to table | New state -> Stack 1: [B], Stack 2: [D, C, E], Stack 3: [F], Stack 4: [G, A] | Exploring action Move E from C to table | New state -> Stack 1: [B], Stack 2: [D, C], Stack 3: [E], Stack 4: [G, A, F] | Taking action Move F from A to table | Moved to state -> Stack 1: [D, C, E, B], Stack 2: [F], Stack 3: [G, A] | Plan so far [Move F from A to table] | Exploring action Move A from G to table | New state -> Stack 1: [A], Stack 2: [D, C, E, B], Stack 3: [F], Stack 4: [G] | Exploring action Move A from G to F | New state -> Stack 1: [D, C, E, B], Stack 2: [F, A], Stack 3: [G] | Exploring action Move E from C to A | New state -> Invalid | Exploring action Move B from E to table | New state -> Stack 1: [B], Stack 2: [D, C, E], Stack 3: [F], Stack 4: [G, A] | Taking action Move E from C to table | Moved to state -> Stack 1: [B], Stack 2: [D, C], Stack 3: [E], Stack 4: [G, A, F] | Plan so far [Move B from E to table | Move E from C to table] | Exploring action Move C from D to E | New state -> Stack 1: [B], Stack 2: [D], Stack 3: [E, C], Stack 4: [G, A, F] | Exploring action Move D from table to F | New state -> Invalid | Exploring action Move A from G to C | New state -> Invalid | Exploring action Move C from D to table | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [G, A, F] | Exploring action Move F from A to table | New state -> Stack 1: [B], Stack 2: [D, C], Stack 3: [E], Stack 4: [F], Stack 5: [G, A] | Taking action Move B from E to table | Moved to state -> Stack 1: [B], Stack 2: [D, C, E], Stack 3: [F], Stack 4: [G, A] | Plan so far [Move F from A to table | Move B from E to table] | Exploring action Move A from G to E | New state -> Stack 1: [B], Stack 2: [D, C, E, A], Stack 3: [F], Stack 4: [G] | Exploring action Move D from table to B | New state -> Invalid | Exploring action Move A from G to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, C, E], Stack 4: [F], Stack 5: [G] | Exploring action Move E from C to table | New state -> Stack 1: [B], Stack 2: [D, C], Stack 3: [E], Stack 4: [F], Stack 5: [G, A] | Exploring action Move D from table to F | New state -> Invalid | Taking action Move F from A to table | Moved to state -> Stack 1: [B], Stack 2: [D, C], Stack 3: [E], Stack 4: [F], Stack 5: [G, A] | Plan so far [Move B from E to table | Move E from C to table | Move F from A to table] | Exploring action Move C from D to table | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [F], Stack 6: [G, A] | Exploring action Move D from table to F | New state -> Invalid | Exploring action Move A from G to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, C], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Exploring action Move A from G to C | New state -> Stack 1: [B], Stack 2: [D, C, A], Stack 3: [E], Stack 4: [F], Stack 5: [G] | Taking action Move A from G to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, C, E], Stack 4: [F], Stack 5: [G] | Plan so far [Move F from A to table | Move B from E to table | Move A from G to table] | Exploring action Move E from C to F | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, C], Stack 4: [F, E], Stack 5: [G] | Exploring action Move C from D to G | New state -> Invalid | Exploring action Move E from C to G | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, C], Stack 4: [F], Stack 5: [G, E] | Exploring action Move E from C to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, C], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Taking action Move C from D to table | Moved to state -> Stack 1: [B], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [F], Stack 6: [G, A] | Plan so far [Move B from E to table | Move E from C to table | Move F from A to table | Move C from D to table] | Exploring action Move A from G to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F], Stack 7: [G] | Exploring action Move G from table to F | New state -> Invalid | Exploring action Move B from table to C | New state -> Stack 1: [C, B], Stack 2: [D], Stack 3: [E], Stack 4: [F], Stack 5: [G, A] | Exploring action Move G from table to A | New state -> Invalid | Exploring action Move A from G to C | New state -> Stack 1: [B], Stack 2: [C, A], Stack 3: [D], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Taking action Move F from A to table | Moved to state -> Stack 1: [B], Stack 2: [D, C, E], Stack 3: [F], Stack 4: [G, A] | Plan so far [Move B from E to table | Move F from A to table] | Taking action Move A from G to table | Moved to state -> Stack 1: [A], Stack 2: [D, C, E, B], Stack 3: [F], Stack 4: [G] | Plan so far [Move F from A to table | Move A from G to table] | Exploring action Move B from E to G | New state -> Stack 1: [A], Stack 2: [D, C, E], Stack 3: [F], Stack 4: [G, B] | Exploring action Move B from E to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, C, E], Stack 4: [F], Stack 5: [G] | Exploring action Move B from E to F | New state -> Stack 1: [A], Stack 2: [D, C, E], Stack 3: [F, B], Stack 4: [G] | Exploring action Move E from C to B | New state -> Invalid | Taking action Move A from G to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, C], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Plan so far [Move B from E to table | Move E from C to table | Move F from A to table | Move A from G to table] | Exploring action Move C from D to A | New state -> Stack 1: [A, C], Stack 2: [B], Stack 3: [D], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Exploring action Move C from D to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F], Stack 7: [G] | Exploring action Move D from table to F | New state -> Invalid | Exploring action Move C from D to E | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D], Stack 4: [E, C], Stack 5: [F], Stack 6: [G] | Taking action Move B from E to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, C, E], Stack 4: [F], Stack 5: [G] | Plan so far [Move F from A to table | Move A from G to table | Move B from E to table] | Taking action Move B from table to C | Moved to state -> Stack 1: [C, B], Stack 2: [D], Stack 3: [E], Stack 4: [F], Stack 5: [G, A] | Plan so far [Move B from E to table | Move E from C to table | Move F from A to table | Move C from D to table | Move B from table to C] | Exploring action Move G from table to A | New state -> Invalid | Exploring action Move E from table to B | New state -> Stack 1: [C, B, E], Stack 2: [D], Stack 3: [F], Stack 4: [G, A] | Exploring action Move A from G to table | New state -> Stack 1: [A], Stack 2: [C, B], Stack 3: [D], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Exploring action Move A from G to D | New state -> Stack 1: [C, B], Stack 2: [D, A], Stack 3: [E], Stack 4: [F], Stack 5: [G] | Taking action Move C from D to table | Moved to state -> Stack 1: [B], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [G, A, F] | Plan so far [Move B from E to table | Move E from C to table | Move C from D to table] | Exploring action Move F from A to table | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [F], Stack 6: [G, A] | Exploring action Move D from table to F | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [E], Stack 4: [G, A, F, D] | Exploring action Move B from table to C | New state -> Stack 1: [C, B], Stack 2: [D], Stack 3: [E], Stack 4: [G, A, F] | Exploring action Move A from G to F | New state -> Invalid | Taking action Move A from G to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F], Stack 7: [G] | Plan so far [Move B from E to table | Move E from C to table | Move F from A to table | Move C from D to table | Move A from G to table] | Exploring action Move A from table to D | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, A], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Exploring action Move B from table to C | New state -> Stack 1: [A], Stack 2: [C, B], Stack 3: [D], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Exploring action Move G from table to D | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D, G], Stack 5: [E], Stack 6: [F] | Taking action Move F from A to table | Moved to state -> Stack 1: [B], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [F], Stack 6: [G, A] | Plan so far [Move B from E to table | Move E from C to table | Move C from D to table | Move F from A to table] | Taking action Move B from table to C | Moved to state -> Stack 1: [A], Stack 2: [C, B], Stack 3: [D], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Plan so far [Move B from E to table | Move E from C to table | Move F from A to table | Move C from D to table | Move A from G to table | Move B from table to C] | Exploring action Move E from table to B | New state -> Stack 1: [A], Stack 2: [C, B, E], Stack 3: [D], Stack 4: [F], Stack 5: [G] | Exploring action Move A from table to E | New state -> Stack 1: [C, B], Stack 2: [D], Stack 3: [E, A], Stack 4: [F], Stack 5: [G] | Exploring action Move C from table to F | New state -> Invalid | Exploring action Move G from table to D | New state -> Stack 1: [A], Stack 2: [C, B], Stack 3: [D, G], Stack 4: [E], Stack 5: [F] | Taking action Move E from table to B | Moved to state -> Stack 1: [C, B, E], Stack 2: [D], Stack 3: [F], Stack 4: [G, A] | Plan so far [Move B from E to table | Move E from C to table | Move F from A to table | Move C from D to table | Move B from table to C | Move E from table to B] | Exploring action Move A from G to E | New state -> Stack 1: [C, B, E, A], Stack 2: [D], Stack 3: [F], Stack 4: [G] | Exploring action Move A from G to table | New state -> Stack 1: [A], Stack 2: [C, B, E], Stack 3: [D], Stack 4: [F], Stack 5: [G] | Exploring action Move C from table to E | New state -> Invalid | Exploring action Move A from G to D | New state -> Stack 1: [C, B, E], Stack 2: [D, A], Stack 3: [F], Stack 4: [G] | Taking action Move A from G to E | Moved to state -> Stack 1: [C, B, E, A], Stack 2: [D], Stack 3: [F], Stack 4: [G] | Plan so far [Move B from E to table | Move E from C to table | Move F from A to table | Move C from D to table | Move B from table to C | Move E from table to B | Move A from G to E] | Exploring action Move B from C to D | New state -> Invalid | Exploring action Move F from table to A | New state -> Stack 1: [C, B, E, A, F], Stack 2: [D], Stack 3: [G] | Exploring action Move D from table to G | New state -> Stack 1: [C, B, E, A], Stack 2: [F], Stack 3: [G, D] | Exploring action Move B from C to table | New state -> Invalid | Exploring action Move G from table to D | New state -> Stack 1: [C, B, E, A], Stack 2: [D, G], Stack 3: [F] | Taking action Move F from table to A | Moved to state -> Stack 1: [C, B, E, A, F], Stack 2: [D], Stack 3: [G] | Plan so far [Move B from E to table | Move E from C to table | Move F from A to table | Move C from D to table | Move B from table to C | Move E from table to B | Move A from G to E | Move F from table to A] | Exploring action Move F from A to table | New state -> Stack 1: [C, B, E, A], Stack 2: [D], Stack 3: [F], Stack 4: [G] | Exploring action Move E from B to table | New state -> Invalid | Exploring action Move A from E to F | New state -> Invalid | Exploring action Move G from table to D | New state -> Stack 1: [C, B, E, A, F], Stack 2: [D, G] | Exploring action Move D from table to F | New state -> Stack 1: [C, B, E, A, F, D], Stack 2: [G] | Taking action Move D from table to F | Moved to state -> Stack 1: [C, B, E, A, F, D], Stack 2: [G] | Plan so far [Move B from E to table | Move E from C to table | Move F from A to table | Move C from D to table | Move B from table to C | Move E from table to B | Move A from G to E | Move F from table to A | Move D from table to F] | Exploring action Move D from F to G | New state -> Stack 1: [C, B, E, A, F], Stack 2: [G, D] | Exploring action Move C from table to G | New state -> Invalid | Exploring action Move G from table to D | New state -> Stack 1: [C, B, E, A, F, D, G] | Exploring action Move E from B to G | New state -> Invalid | Exploring action Move D from F to table | New state -> Stack 1: [C, B, E, A, F], Stack 2: [D], Stack 3: [G] | Taking action Move G from table to D | Moved to state -> Stack 1: [C, B, E, A, F, D, G] | Plan so far [Move B from E to table | Move E from C to table | Move F from A to table | Move C from D to table | Move B from table to C | Move E from table to B | Move A from G to E | Move F from table to A | Move D from table to F | Move G from table to D] | Reached goal state!",
        "system2_states_v1": 77
    },
    {
        "idx": 717,
        "start": [
            [
                "table",
                "B",
                "E"
            ],
            [
                "table",
                "C",
                "A",
                "F",
                "D"
            ]
        ],
        "goal": [
            [
                "table",
                "A",
                "F",
                "D",
                "C"
            ],
            [
                "table",
                "E",
                "B"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": false,
                "on": "C",
                "under": "F",
                "ontable": false
            },
            "B": {
                "clear": false,
                "on": -1,
                "under": "E",
                "ontable": true
            },
            "C": {
                "clear": false,
                "on": -1,
                "under": "A",
                "ontable": true
            },
            "D": {
                "clear": true,
                "on": "F",
                "under": -1,
                "ontable": false
            },
            "E": {
                "clear": true,
                "on": "B",
                "under": -1,
                "ontable": false
            },
            "F": {
                "clear": false,
                "on": "A",
                "under": "D",
                "ontable": false
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": false,
                "on": -1,
                "under": "F",
                "ontable": true
            },
            "B": {
                "clear": true,
                "on": "E",
                "under": -1,
                "ontable": false
            },
            "C": {
                "clear": true,
                "on": "D",
                "under": -1,
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": "F",
                "under": "C",
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": -1,
                "under": "B",
                "ontable": true
            },
            "F": {
                "clear": false,
                "on": "A",
                "under": "D",
                "ontable": false
            }
        },
        "plan_len": 8,
        "num_blocks": 6,
        "prompt": "The initial state:\nThe hand is empty.\nB is on the table. E is on B. E is clear.\nC is on the table. A is on C. F is on A. D is on F. D is clear.\n\nThe goal is:\nA is on the table. F is on A. D is on F. C is on D. C is clear.\nE is on the table. B is on E. B is clear.\n",
        "system1_plan": "Move E from B to table | Move B from table to E | Move D from F to table | Move F from A to table | Move A from C to table | Move F from table to A | Move D from table to F | Move C from table to D",
        "system1_states": 8,
        "system2_plan_v1": "Moved to state -> Stack 1: [B, E], Stack 2: [C, A, F, D] | Plan so far [] | Exploring action Move E from B to D | New state -> Stack 1: [B], Stack 2: [C, A, F, D, E] | Exploring action Move D from F to table | New state -> Stack 1: [B, E], Stack 2: [C, A, F], Stack 3: [D] | Exploring action Move A from C to E | New state -> Invalid | Exploring action Move E from B to table | New state -> Stack 1: [B], Stack 2: [C, A, F, D], Stack 3: [E] | Taking action Move E from B to table | Moved to state -> Stack 1: [B], Stack 2: [C, A, F, D], Stack 3: [E] | Plan so far [Move E from B to table] | Exploring action Move D from F to table | New state -> Stack 1: [B], Stack 2: [C, A, F], Stack 3: [D], Stack 4: [E] | Exploring action Move E from table to B | New state -> Stack 1: [B, E], Stack 2: [C, A, F, D] | Exploring action Move B from table to E | New state -> Stack 1: [C, A, F, D], Stack 2: [E, B] | Exploring action Move A from C to table | New state -> Invalid | Taking action Move B from table to E | Moved to state -> Stack 1: [C, A, F, D], Stack 2: [E, B] | Plan so far [Move E from B to table | Move B from table to E] | Exploring action Move B from E to D | New state -> Stack 1: [C, A, F, D, B], Stack 2: [E] | Exploring action Move D from F to table | New state -> Stack 1: [C, A, F], Stack 2: [D], Stack 3: [E, B] | Exploring action Move F from A to B | New state -> Invalid | Exploring action Move A from C to table | New state -> Invalid | Exploring action Move B from E to table | New state -> Stack 1: [B], Stack 2: [C, A, F, D], Stack 3: [E] | Taking action Move E from B to D | Moved to state -> Stack 1: [B], Stack 2: [C, A, F, D, E] | Plan so far [Move E from B to D] | Exploring action Move D from F to table | New state -> Invalid | Exploring action Move B from table to E | New state -> Stack 1: [C, A, F, D, E, B] | Exploring action Move E from D to table | New state -> Stack 1: [B], Stack 2: [C, A, F, D], Stack 3: [E] | Exploring action Move E from D to B | New state -> Stack 1: [B, E], Stack 2: [C, A, F, D] | Taking action Move D from F to table | Moved to state -> Stack 1: [C, A, F], Stack 2: [D], Stack 3: [E, B] | Plan so far [Move E from B to table | Move B from table to E | Move D from F to table] | Exploring action Move D from table to F | New state -> Stack 1: [C, A, F, D], Stack 2: [E, B] | Exploring action Move F from A to table | New state -> Stack 1: [C, A], Stack 2: [D], Stack 3: [E, B], Stack 4: [F] | Exploring action Move A from C to D | New state -> Invalid | Exploring action Move F from A to D | New state -> Stack 1: [C, A], Stack 2: [D, F], Stack 3: [E, B] | Taking action Move E from D to table | Moved to state -> Stack 1: [B], Stack 2: [C, A, F, D], Stack 3: [E] | Plan so far [Move E from B to D | Move E from D to table] | Taking action Move D from table to F | Moved to state -> Stack 1: [C, A, F, D], Stack 2: [E, B] | Plan so far [Move E from B to table | Move B from table to E | Move D from F to table | Move D from table to F] | Taking action Move F from A to table | Moved to state -> Stack 1: [C, A], Stack 2: [D], Stack 3: [E, B], Stack 4: [F] | Plan so far [Move E from B to table | Move B from table to E | Move D from F to table | Move F from A to table] | Exploring action Move E from table to F | New state -> Invalid | Exploring action Move A from C to table | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D], Stack 4: [E, B], Stack 5: [F] | Exploring action Move A from C to F | New state -> Stack 1: [C], Stack 2: [D], Stack 3: [E, B], Stack 4: [F, A] | Exploring action Move A from C to D | New state -> Stack 1: [C], Stack 2: [D, A], Stack 3: [E, B], Stack 4: [F] | Taking action Move A from C to table | Moved to state -> Stack 1: [A], Stack 2: [C], Stack 3: [D], Stack 4: [E, B], Stack 5: [F] | Plan so far [Move E from B to table | Move B from table to E | Move D from F to table | Move F from A to table | Move A from C to table] | Exploring action Move A from table to C | New state -> Stack 1: [C, A], Stack 2: [D], Stack 3: [E, B], Stack 4: [F] | Exploring action Move C from table to D | New state -> Stack 1: [A], Stack 2: [D, C], Stack 3: [E, B], Stack 4: [F] | Exploring action Move F from table to A | New state -> Stack 1: [A, F], Stack 2: [C], Stack 3: [D], Stack 4: [E, B] | Exploring action Move E from table to F | New state -> Invalid | Exploring action Move E from table to D | New state -> Invalid | Taking action Move F from table to A | Moved to state -> Stack 1: [A, F], Stack 2: [C], Stack 3: [D], Stack 4: [E, B] | Plan so far [Move E from B to table | Move B from table to E | Move D from F to table | Move F from A to table | Move A from C to table | Move F from table to A] | Exploring action Move C from table to F | New state -> Stack 1: [A, F, C], Stack 2: [D], Stack 3: [E, B] | Exploring action Move A from table to D | New state -> Invalid | Exploring action Move D from table to F | New state -> Stack 1: [A, F, D], Stack 2: [C], Stack 3: [E, B] | Exploring action Move C from table to D | New state -> Stack 1: [A, F], Stack 2: [D, C], Stack 3: [E, B] | Taking action Move D from table to F | Moved to state -> Stack 1: [A, F, D], Stack 2: [C], Stack 3: [E, B] | Plan so far [Move E from B to table | Move B from table to E | Move D from F to table | Move F from A to table | Move A from C to table | Move F from table to A | Move D from table to F] | Exploring action Move E from table to D | New state -> Invalid | Exploring action Move B from E to table | New state -> Stack 1: [A, F, D], Stack 2: [B], Stack 3: [C], Stack 4: [E] | Exploring action Move D from F to table | New state -> Stack 1: [A, F], Stack 2: [C], Stack 3: [D], Stack 4: [E, B] | Exploring action Move C from table to D | New state -> Stack 1: [A, F, D, C], Stack 2: [E, B] | Taking action Move C from table to D | Moved to state -> Stack 1: [A, F, D, C], Stack 2: [E, B] | Plan so far [Move E from B to table | Move B from table to E | Move D from F to table | Move F from A to table | Move A from C to table | Move F from table to A | Move D from table to F | Move C from table to D] | Reached goal state!",
        "system2_states_v1": 38
    },
    {
        "idx": 815,
        "start": [
            [
                "table",
                "C"
            ],
            [
                "table",
                "D"
            ],
            [
                "table",
                "G",
                "A",
                "B",
                "F",
                "E"
            ]
        ],
        "goal": [
            [
                "table",
                "A",
                "F",
                "B"
            ],
            [
                "table",
                "E",
                "D",
                "G",
                "C"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": false,
                "on": "G",
                "under": "B",
                "ontable": false
            },
            "B": {
                "clear": false,
                "on": "A",
                "under": "F",
                "ontable": false
            },
            "C": {
                "clear": true,
                "on": -1,
                "under": -1,
                "ontable": true
            },
            "D": {
                "clear": true,
                "on": -1,
                "under": -1,
                "ontable": true
            },
            "E": {
                "clear": true,
                "on": "F",
                "under": -1,
                "ontable": false
            },
            "F": {
                "clear": false,
                "on": "B",
                "under": "E",
                "ontable": false
            },
            "G": {
                "clear": false,
                "on": -1,
                "under": "A",
                "ontable": true
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": false,
                "on": -1,
                "under": "F",
                "ontable": true
            },
            "B": {
                "clear": true,
                "on": "F",
                "under": -1,
                "ontable": false
            },
            "C": {
                "clear": true,
                "on": "G",
                "under": -1,
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": "E",
                "under": "G",
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": -1,
                "under": "D",
                "ontable": true
            },
            "F": {
                "clear": false,
                "on": "A",
                "under": "B",
                "ontable": false
            },
            "G": {
                "clear": false,
                "on": "D",
                "under": "C",
                "ontable": false
            }
        },
        "plan_len": 9,
        "num_blocks": 7,
        "prompt": "The initial state:\nThe hand is empty.\nC is on the table. C is clear.\nD is on the table. D is clear.\nG is on the table. A is on G. B is on A. F is on B. E is on F. E is clear.\n\nThe goal is:\nA is on the table. F is on A. B is on F. B is clear.\nE is on the table. D is on E. G is on D. C is on G. C is clear.\n",
        "system1_plan": "Move E from F to table | Move F from B to table | Move B from A to table | Move A from G to table | Move F from table to A | Move B from table to F | Move D from table to E | Move G from table to D | Move C from table to G",
        "system1_states": 9,
        "system2_plan_v1": "Moved to state -> Stack 1: [C], Stack 2: [D], Stack 3: [G, A, B, F, E] | Plan so far [] | Exploring action Move B from A to E | New state -> Invalid | Exploring action Move E from F to table | New state -> Stack 1: [C], Stack 2: [D], Stack 3: [E], Stack 4: [G, A, B, F] | Exploring action Move E from F to D | New state -> Stack 1: [C], Stack 2: [D, E], Stack 3: [G, A, B, F] | Exploring action Move E from F to C | New state -> Stack 1: [C, E], Stack 2: [D], Stack 3: [G, A, B, F] | Exploring action Move G from table to E | New state -> Invalid | Taking action Move E from F to table | Moved to state -> Stack 1: [C], Stack 2: [D], Stack 3: [E], Stack 4: [G, A, B, F] | Plan so far [Move E from F to table] | Exploring action Move G from table to C | New state -> Invalid | Exploring action Move F from B to table | New state -> Stack 1: [C], Stack 2: [D], Stack 3: [E], Stack 4: [F], Stack 5: [G, A, B] | Exploring action Move D from table to E | New state -> Stack 1: [C], Stack 2: [E, D], Stack 3: [G, A, B, F] | Exploring action Move G from table to D | New state -> Invalid | Exploring action Move F from B to D | New state -> Stack 1: [C], Stack 2: [D, F], Stack 3: [E], Stack 4: [G, A, B] | Taking action Move D from table to E | Moved to state -> Stack 1: [C], Stack 2: [E, D], Stack 3: [G, A, B, F] | Plan so far [Move E from F to table | Move D from table to E] | Exploring action Move F from B to D | New state -> Stack 1: [C], Stack 2: [E, D, F], Stack 3: [G, A, B] | Exploring action Move B from A to D | New state -> Invalid | Exploring action Move F from B to C | New state -> Stack 1: [C, F], Stack 2: [E, D], Stack 3: [G, A, B] | Exploring action Move F from B to table | New state -> Stack 1: [C], Stack 2: [E, D], Stack 3: [F], Stack 4: [G, A, B] | Taking action Move F from B to table | Moved to state -> Stack 1: [C], Stack 2: [D], Stack 3: [E], Stack 4: [F], Stack 5: [G, A, B] | Plan so far [Move E from F to table | Move F from B to table] | Exploring action Move D from table to E | New state -> Stack 1: [C], Stack 2: [E, D], Stack 3: [F], Stack 4: [G, A, B] | Exploring action Move B from A to table | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [F], Stack 6: [G, A] | Exploring action Move A from G to F | New state -> Invalid | Exploring action Move B from A to F | New state -> Stack 1: [C], Stack 2: [D], Stack 3: [E], Stack 4: [F, B], Stack 5: [G, A] | Taking action Move F from B to table | Moved to state -> Stack 1: [C], Stack 2: [E, D], Stack 3: [F], Stack 4: [G, A, B] | Plan so far [Move E from F to table | Move D from table to E | Move F from B to table] | Exploring action Move B from A to F | New state -> Stack 1: [C], Stack 2: [E, D], Stack 3: [F, B], Stack 4: [G, A] | Exploring action Move G from table to B | New state -> Invalid | Exploring action Move B from A to D | New state -> Stack 1: [C], Stack 2: [E, D, B], Stack 3: [F], Stack 4: [G, A] | Exploring action Move G from table to D | New state -> Invalid | Exploring action Move B from A to table | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [E, D], Stack 4: [F], Stack 5: [G, A] | Taking action Move B from A to table | Moved to state -> Stack 1: [B], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [F], Stack 6: [G, A] | Plan so far [Move E from F to table | Move F from B to table | Move B from A to table] | Exploring action Move A from G to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F], Stack 7: [G] | Exploring action Move G from table to A | New state -> Invalid | Exploring action Move A from G to C | New state -> Stack 1: [B], Stack 2: [C, A], Stack 3: [D], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Exploring action Move D from table to E | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [E, D], Stack 4: [F], Stack 5: [G, A] | Taking action Move B from A to F | Moved to state -> Stack 1: [C], Stack 2: [D], Stack 3: [E], Stack 4: [F, B], Stack 5: [G, A] | Plan so far [Move E from F to table | Move F from B to table | Move B from A to F] | Exploring action Move A from G to C | New state -> Stack 1: [C, A], Stack 2: [D], Stack 3: [E], Stack 4: [F, B], Stack 5: [G] | Exploring action Move A from G to table | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [F, B], Stack 6: [G] | Exploring action Move D from table to E | New state -> Stack 1: [C], Stack 2: [E, D], Stack 3: [F, B], Stack 4: [G, A] | Exploring action Move F from table to B | New state -> Invalid | Taking action Move B from A to F | Moved to state -> Stack 1: [C], Stack 2: [E, D], Stack 3: [F, B], Stack 4: [G, A] | Plan so far [Move E from F to table | Move D from table to E | Move F from B to table | Move B from A to F] | Exploring action Move F from table to C | New state -> Invalid | Exploring action Move A from G to C | New state -> Stack 1: [C, A], Stack 2: [E, D], Stack 3: [F, B], Stack 4: [G] | Exploring action Move A from G to D | New state -> Stack 1: [C], Stack 2: [E, D, A], Stack 3: [F, B], Stack 4: [G] | Exploring action Move G from table to A | New state -> Invalid | Exploring action Move A from G to table | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [E, D], Stack 4: [F, B], Stack 5: [G] | Taking action Move A from G to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F], Stack 7: [G] | Plan so far [Move E from F to table | Move F from B to table | Move B from A to table | Move A from G to table] | Exploring action Move B from table to F | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [F, B], Stack 6: [G] | Exploring action Move F from table to A | New state -> Stack 1: [A, F], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [G] | Exploring action Move D from table to E | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [E, D], Stack 5: [F], Stack 6: [G] | Taking action Move D from table to E | Moved to state -> Stack 1: [C], Stack 2: [E, D], Stack 3: [F, B], Stack 4: [G, A] | Plan so far [Move E from F to table | Move F from B to table | Move B from A to F | Move D from table to E] | Taking action Move A from G to table | Moved to state -> Stack 1: [A], Stack 2: [C], Stack 3: [E, D], Stack 4: [F, B], Stack 5: [G] | Plan so far [Move E from F to table | Move D from table to E | Move F from B to table | Move B from A to F | Move A from G to table] | Exploring action Move B from F to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [E, D], Stack 5: [F], Stack 6: [G] | Exploring action Move G from table to D | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [E, D, G], Stack 4: [F, B] | Exploring action Move E from table to B | New state -> Invalid | Exploring action Move C from table to G | New state -> Stack 1: [A], Stack 2: [E, D], Stack 3: [F, B], Stack 4: [G, C] | Taking action Move D from table to E | Moved to state -> Stack 1: [C], Stack 2: [E, D], Stack 3: [F], Stack 4: [G, A, B] | Plan so far [Move E from F to table | Move F from B to table | Move D from table to E] | Taking action Move B from A to table | Moved to state -> Stack 1: [B], Stack 2: [C], Stack 3: [E, D], Stack 4: [F], Stack 5: [G, A] | Plan so far [Move E from F to table | Move D from table to E | Move F from B to table | Move B from A to table] | Exploring action Move A from G to C | New state -> Stack 1: [B], Stack 2: [C, A], Stack 3: [E, D], Stack 4: [F], Stack 5: [G] | Exploring action Move A from G to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [E, D], Stack 5: [F], Stack 6: [G] | Exploring action Move A from G to B | New state -> Stack 1: [B, A], Stack 2: [C], Stack 3: [E, D], Stack 4: [F], Stack 5: [G] | Exploring action Move E from table to D | New state -> Invalid | Exploring action Move G from table to A | New state -> Invalid | Taking action Move A from G to table | Moved to state -> Stack 1: [A], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [F, B], Stack 6: [G] | Plan so far [Move E from F to table | Move F from B to table | Move B from A to F | Move A from G to table] | Exploring action Move F from table to G | New state -> Invalid | Exploring action Move C from table to G | New state -> Stack 1: [A], Stack 2: [D], Stack 3: [E], Stack 4: [F, B], Stack 5: [G, C] | Exploring action Move F from table to D | New state -> Invalid | Exploring action Move D from table to E | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [E, D], Stack 4: [F, B], Stack 5: [G] | Exploring action Move B from F to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F], Stack 7: [G] | Taking action Move G from table to D | Moved to state -> Stack 1: [A], Stack 2: [C], Stack 3: [E, D, G], Stack 4: [F, B] | Plan so far [Move E from F to table | Move D from table to E | Move F from B to table | Move B from A to F | Move A from G to table | Move G from table to D] | Exploring action Move A from table to G | New state -> Stack 1: [C], Stack 2: [E, D, G, A], Stack 3: [F, B] | Exploring action Move C from table to G | New state -> Stack 1: [A], Stack 2: [E, D, G, C], Stack 3: [F, B] | Exploring action Move F from table to A | New state -> Invalid | Exploring action Move B from F to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [E, D, G], Stack 5: [F] | Taking action Move C from table to G | Moved to state -> Stack 1: [A], Stack 2: [E, D, G, C], Stack 3: [F, B] | Plan so far [Move E from F to table | Move D from table to E | Move F from B to table | Move B from A to F | Move A from G to table | Move G from table to D | Move C from table to G] | Exploring action Move G from D to A | New state -> Invalid | Exploring action Move B from F to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [E, D, G, C], Stack 4: [F] | Exploring action Move A from table to B | New state -> Stack 1: [E, D, G, C], Stack 2: [F, B, A] | Exploring action Move B from F to A | New state -> Stack 1: [A, B], Stack 2: [E, D, G, C], Stack 3: [F] | Taking action Move D from table to E | Moved to state -> Stack 1: [A], Stack 2: [C], Stack 3: [E, D], Stack 4: [F, B], Stack 5: [G] | Plan so far [Move E from F to table | Move F from B to table | Move B from A to F | Move A from G to table | Move D from table to E] | Taking action Move B from F to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [E, D, G, C], Stack 4: [F] | Plan so far [Move E from F to table | Move D from table to E | Move F from B to table | Move B from A to F | Move A from G to table | Move G from table to D | Move C from table to G | Move B from F to table] | Exploring action Move D from E to F | New state -> Invalid | Exploring action Move A from table to B | New state -> Stack 1: [B, A], Stack 2: [E, D, G, C], Stack 3: [F] | Exploring action Move B from table to F | New state -> Stack 1: [A], Stack 2: [E, D, G, C], Stack 3: [F, B] | Exploring action Move F from table to A | New state -> Stack 1: [A, F], Stack 2: [B], Stack 3: [E, D, G, C] | Taking action Move A from G to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [E, D], Stack 5: [F], Stack 6: [G] | Plan so far [Move E from F to table | Move D from table to E | Move F from B to table | Move B from A to table | Move A from G to table] | Exploring action Move G from table to D | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [E, D, G], Stack 5: [F] | Exploring action Move E from table to G | New state -> Invalid | Exploring action Move E from table to F | New state -> Invalid | Exploring action Move F from table to A | New state -> Stack 1: [A, F], Stack 2: [B], Stack 3: [C], Stack 4: [E, D], Stack 5: [G] | Exploring action Move C from table to G | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [E, D], Stack 4: [F], Stack 5: [G, C] | Taking action Move D from table to E | Moved to state -> Stack 1: [B], Stack 2: [C], Stack 3: [E, D], Stack 4: [F], Stack 5: [G, A] | Plan so far [Move E from F to table | Move F from B to table | Move B from A to table | Move D from table to E] | Taking action Move D from table to E | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [E, D], Stack 5: [F], Stack 6: [G] | Plan so far [Move E from F to table | Move F from B to table | Move B from A to table | Move A from G to table | Move D from table to E] | Taking action Move F from table to A | Moved to state -> Stack 1: [A, F], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [G] | Plan so far [Move E from F to table | Move F from B to table | Move B from A to table | Move A from G to table | Move F from table to A] | Exploring action Move D from table to E | New state -> Stack 1: [A, F], Stack 2: [B], Stack 3: [C], Stack 4: [E, D], Stack 5: [G] | Exploring action Move C from table to G | New state -> Stack 1: [A, F], Stack 2: [B], Stack 3: [D], Stack 4: [E], Stack 5: [G, C] | Exploring action Move A from table to E | New state -> Invalid | Exploring action Move B from table to F | New state -> Stack 1: [A, F, B], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [G] | Taking action Move B from table to F | Moved to state -> Stack 1: [A, F, B], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [G] | Plan so far [Move E from F to table | Move F from B to table | Move B from A to table | Move A from G to table | Move F from table to A | Move B from table to F] | Exploring action Move D from table to E | New state -> Stack 1: [A, F, B], Stack 2: [C], Stack 3: [E, D], Stack 4: [G] | Exploring action Move F from A to E | New state -> Invalid | Exploring action Move E from table to C | New state -> Stack 1: [A, F, B], Stack 2: [C, E], Stack 3: [D], Stack 4: [G] | Exploring action Move C from table to G | New state -> Stack 1: [A, F, B], Stack 2: [D], Stack 3: [E], Stack 4: [G, C] | Taking action Move D from table to E | Moved to state -> Stack 1: [A, F, B], Stack 2: [C], Stack 3: [E, D], Stack 4: [G] | Plan so far [Move E from F to table | Move F from B to table | Move B from A to table | Move A from G to table | Move F from table to A | Move B from table to F | Move D from table to E] | Exploring action Move C from table to D | New state -> Stack 1: [A, F, B], Stack 2: [E, D, C], Stack 3: [G] | Exploring action Move E from table to G | New state -> Invalid | Exploring action Move C from table to G | New state -> Stack 1: [A, F, B], Stack 2: [E, D], Stack 3: [G, C] | Exploring action Move G from table to D | New state -> Stack 1: [A, F, B], Stack 2: [C], Stack 3: [E, D, G] | Exploring action Move F from A to G | New state -> Invalid | Taking action Move G from table to D | Moved to state -> Stack 1: [A, F, B], Stack 2: [C], Stack 3: [E, D, G] | Plan so far [Move E from F to table | Move F from B to table | Move B from A to table | Move A from G to table | Move F from table to A | Move B from table to F | Move D from table to E | Move G from table to D] | Exploring action Move C from table to G | New state -> Stack 1: [A, F, B], Stack 2: [E, D, G, C] | Exploring action Move A from table to C | New state -> Invalid | Exploring action Move G from D to table | New state -> Stack 1: [A, F, B], Stack 2: [C], Stack 3: [E, D], Stack 4: [G] | Exploring action Move B from F to table | New state -> Stack 1: [A, F], Stack 2: [B], Stack 3: [C], Stack 4: [E, D, G] | Taking action Move C from table to G | Moved to state -> Stack 1: [A, F, B], Stack 2: [E, D, G, C] | Plan so far [Move E from F to table | Move F from B to table | Move B from A to table | Move A from G to table | Move F from table to A | Move B from table to F | Move D from table to E | Move G from table to D | Move C from table to G] | Reached goal state!",
        "system2_states_v1": 87
    },
    {
        "idx": 696,
        "start": [
            [
                "table",
                "B",
                "A",
                "C"
            ],
            [
                "table",
                "E"
            ],
            [
                "table",
                "F",
                "D"
            ]
        ],
        "goal": [
            [
                "table",
                "A"
            ],
            [
                "table",
                "B",
                "F",
                "D",
                "C",
                "E"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": false,
                "on": "B",
                "under": "C",
                "ontable": false
            },
            "B": {
                "clear": false,
                "on": -1,
                "under": "A",
                "ontable": true
            },
            "C": {
                "clear": true,
                "on": "A",
                "under": -1,
                "ontable": false
            },
            "D": {
                "clear": true,
                "on": "F",
                "under": -1,
                "ontable": false
            },
            "E": {
                "clear": true,
                "on": -1,
                "under": -1,
                "ontable": true
            },
            "F": {
                "clear": false,
                "on": -1,
                "under": "D",
                "ontable": true
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": true,
                "on": -1,
                "under": -1,
                "ontable": true
            },
            "B": {
                "clear": false,
                "on": -1,
                "under": "F",
                "ontable": true
            },
            "C": {
                "clear": false,
                "on": "D",
                "under": "E",
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": "F",
                "under": "C",
                "ontable": false
            },
            "E": {
                "clear": true,
                "on": "C",
                "under": -1,
                "ontable": false
            },
            "F": {
                "clear": false,
                "on": "B",
                "under": "D",
                "ontable": false
            }
        },
        "plan_len": 8,
        "num_blocks": 6,
        "prompt": "The initial state:\nThe hand is empty.\nB is on the table. A is on B. C is on A. C is clear.\nE is on the table. E is clear.\nF is on the table. D is on F. D is clear.\n\nThe goal is:\nA is on the table. A is clear.\nB is on the table. F is on B. D is on F. C is on D. E is on C. E is clear.\n",
        "system1_plan": "Move C from A to D | Move A from B to table | Move C from D to table | Move D from F to table | Move F from table to B | Move D from table to F | Move C from table to D | Move E from table to C",
        "system1_states": 8,
        "system2_plan_v1": "Moved to state -> Stack 1: [B, A, C], Stack 2: [E], Stack 3: [F, D] | Plan so far [] | Exploring action Move C from A to table | New state -> Stack 1: [B, A], Stack 2: [C], Stack 3: [E], Stack 4: [F, D] | Exploring action Move C from A to D | New state -> Stack 1: [B, A], Stack 2: [E], Stack 3: [F, D, C] | Exploring action Move D from F to table | New state -> Stack 1: [B, A, C], Stack 2: [D], Stack 3: [E], Stack 4: [F] | Exploring action Move B from table to E | New state -> Invalid | Taking action Move C from A to D | Moved to state -> Stack 1: [B, A], Stack 2: [E], Stack 3: [F, D, C] | Plan so far [Move C from A to D] | Exploring action Move D from F to E | New state -> Invalid | Exploring action Move F from table to A | New state -> Invalid | Exploring action Move E from table to C | New state -> Stack 1: [B, A], Stack 2: [F, D, C, E] | Exploring action Move A from B to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [E], Stack 4: [F, D, C] | Exploring action Move A from B to E | New state -> Stack 1: [B], Stack 2: [E, A], Stack 3: [F, D, C] | Taking action Move A from B to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [E], Stack 4: [F, D, C] | Plan so far [Move C from A to D | Move A from B to table] | Exploring action Move D from F to C | New state -> Invalid | Exploring action Move C from D to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [E], Stack 5: [F, D] | Exploring action Move E from table to C | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [F, D, C, E] | Exploring action Move B from table to C | New state -> Stack 1: [A], Stack 2: [E], Stack 3: [F, D, C, B] | Taking action Move E from table to C | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [F, D, C, E] | Plan so far [Move C from A to D | Move A from B to table | Move E from table to C] | Exploring action Move B from table to E | New state -> Stack 1: [A], Stack 2: [F, D, C, E, B] | Exploring action Move B from table to A | New state -> Stack 1: [A, B], Stack 2: [F, D, C, E] | Exploring action Move C from D to A | New state -> Invalid | Exploring action Move A from table to B | New state -> Stack 1: [B, A], Stack 2: [F, D, C, E] | Taking action Move E from table to C | Moved to state -> Stack 1: [B, A], Stack 2: [F, D, C, E] | Plan so far [Move C from A to D | Move E from table to C] | Exploring action Move F from table to E | New state -> Invalid | Exploring action Move A from B to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [F, D, C, E] | Exploring action Move E from C to table | New state -> Stack 1: [B, A], Stack 2: [E], Stack 3: [F, D, C] | Exploring action Move A from B to E | New state -> Stack 1: [B], Stack 2: [F, D, C, E, A] | Exploring action Move C from D to table | New state -> Invalid | Taking action Move A from B to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [F, D, C, E] | Plan so far [Move C from A to D | Move E from table to C | Move A from B to table] | Taking action Move B from table to A | Moved to state -> Stack 1: [A, B], Stack 2: [F, D, C, E] | Plan so far [Move C from A to D | Move A from B to table | Move E from table to C | Move B from table to A] | Exploring action Move B from A to E | New state -> Stack 1: [A], Stack 2: [F, D, C, E, B] | Exploring action Move D from F to E | New state -> Invalid | Exploring action Move B from A to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [F, D, C, E] | Exploring action Move E from C to table | New state -> Stack 1: [A, B], Stack 2: [E], Stack 3: [F, D, C] | Taking action Move B from A to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [F, D, C, E] | Plan so far [Move C from A to D | Move A from B to table | Move E from table to C | Move B from table to A | Move B from A to table] | Taking action Move E from C to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [E], Stack 4: [F, D, C] | Plan so far [Move C from A to D | Move A from B to table | Move E from table to C | Move E from C to table] | Taking action Move A from table to B | Moved to state -> Stack 1: [B, A], Stack 2: [F, D, C, E] | Plan so far [Move C from A to D | Move A from B to table | Move E from table to C | Move A from table to B] | Taking action Move B from table to E | Moved to state -> Stack 1: [A], Stack 2: [F, D, C, E, B] | Plan so far [Move C from A to D | Move A from B to table | Move E from table to C | Move B from table to E] | Exploring action Move B from E to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [F, D, C, E] | Exploring action Move B from E to A | New state -> Stack 1: [A, B], Stack 2: [F, D, C, E] | Exploring action Move A from table to B | New state -> Stack 1: [F, D, C, E, B, A] | Exploring action Move E from C to B | New state -> Invalid | Taking action Move B from E to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [F, D, C, E] | Plan so far [Move C from A to D | Move A from B to table | Move E from table to C | Move B from table to E | Move B from E to table] | Taking action Move A from B to E | Moved to state -> Stack 1: [B], Stack 2: [E, A], Stack 3: [F, D, C] | Plan so far [Move C from A to D | Move A from B to E] | Exploring action Move F from table to C | New state -> Invalid | Exploring action Move A from E to C | New state -> Stack 1: [B], Stack 2: [E], Stack 3: [F, D, C, A] | Exploring action Move A from E to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [E], Stack 4: [F, D, C] | Exploring action Move A from E to B | New state -> Stack 1: [B, A], Stack 2: [E], Stack 3: [F, D, C] | Taking action Move A from E to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [E], Stack 4: [F, D, C] | Plan so far [Move C from A to D | Move A from B to E | Move A from E to table] | Taking action Move C from D to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [E], Stack 5: [F, D] | Plan so far [Move C from A to D | Move A from B to table | Move C from D to table] | Exploring action Move D from F to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Exploring action Move F from table to D | New state -> Invalid | Exploring action Move D from F to B | New state -> Stack 1: [A], Stack 2: [B, D], Stack 3: [C], Stack 4: [E], Stack 5: [F] | Exploring action Move C from table to D | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [E], Stack 4: [F, D, C] | Exploring action Move F from table to C | New state -> Invalid | Taking action Move A from B to E | Moved to state -> Stack 1: [B], Stack 2: [F, D, C, E, A] | Plan so far [Move C from A to D | Move E from table to C | Move A from B to E] | Exploring action Move A from E to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [F, D, C, E] | Exploring action Move D from F to B | New state -> Invalid | Exploring action Move A from E to B | New state -> Stack 1: [B, A], Stack 2: [F, D, C, E] | Exploring action Move B from table to A | New state -> Stack 1: [F, D, C, E, A, B] | Taking action Move A from E to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [F, D, C, E] | Plan so far [Move C from A to D | Move E from table to C | Move A from B to E | Move A from E to table] | Taking action Move C from table to D | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [E], Stack 4: [F, D, C] | Plan so far [Move C from A to D | Move A from B to table | Move C from D to table | Move C from table to D] | Taking action Move D from F to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Plan so far [Move C from A to D | Move A from B to table | Move C from D to table | Move D from F to table] | Exploring action Move E from table to C | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, E], Stack 4: [D], Stack 5: [F] | Exploring action Move C from table to E | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D], Stack 4: [E, C], Stack 5: [F] | Exploring action Move F from table to B | New state -> Stack 1: [A], Stack 2: [B, F], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Taking action Move A from E to B | Moved to state -> Stack 1: [B, A], Stack 2: [F, D, C, E] | Plan so far [Move C from A to D | Move E from table to C | Move A from B to E | Move A from E to B] | Taking action Move B from table to E | Moved to state -> Stack 1: [A], Stack 2: [E, B], Stack 3: [F, D, C] | Plan so far [Move C from A to D | Move A from B to table | Move B from table to E] | Exploring action Move C from D to table | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [E, B], Stack 4: [F, D] | Exploring action Move B from E to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [E], Stack 4: [F, D, C] | Exploring action Move E from table to A | New state -> Invalid | Exploring action Move F from table to C | New state -> Invalid | Exploring action Move B from E to C | New state -> Stack 1: [A], Stack 2: [E], Stack 3: [F, D, C, B] | Taking action Move F from table to B | Moved to state -> Stack 1: [A], Stack 2: [B, F], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Plan so far [Move C from A to D | Move A from B to table | Move C from D to table | Move D from F to table | Move F from table to B] | Exploring action Move C from table to D | New state -> Stack 1: [A], Stack 2: [B, F], Stack 3: [D, C], Stack 4: [E] | Exploring action Move E from table to C | New state -> Stack 1: [A], Stack 2: [B, F], Stack 3: [C, E], Stack 4: [D] | Exploring action Move D from table to F | New state -> Stack 1: [A], Stack 2: [B, F, D], Stack 3: [C], Stack 4: [E] | Exploring action Move B from table to A | New state -> Invalid | Exploring action Move B from table to D | New state -> Invalid | Taking action Move B from table to C | Moved to state -> Stack 1: [A], Stack 2: [E], Stack 3: [F, D, C, B] | Plan so far [Move C from A to D | Move A from B to table | Move B from table to C] | Exploring action Move B from C to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [E], Stack 4: [F, D, C] | Exploring action Move B from C to E | New state -> Stack 1: [A], Stack 2: [E, B], Stack 3: [F, D, C] | Exploring action Move E from table to B | New state -> Stack 1: [A], Stack 2: [F, D, C, B, E] | Exploring action Move F from table to E | New state -> Invalid | Exploring action Move F from table to B | New state -> Invalid | Taking action Move D from table to F | Moved to state -> Stack 1: [A], Stack 2: [B, F, D], Stack 3: [C], Stack 4: [E] | Plan so far [Move C from A to D | Move A from B to table | Move C from D to table | Move D from F to table | Move F from table to B | Move D from table to F] | Exploring action Move B from table to D | New state -> Invalid | Exploring action Move F from B to table | New state -> Invalid | Exploring action Move D from F to table | New state -> Stack 1: [A], Stack 2: [B, F], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Exploring action Move E from table to C | New state -> Stack 1: [A], Stack 2: [B, F, D], Stack 3: [C, E] | Exploring action Move C from table to D | New state -> Stack 1: [A], Stack 2: [B, F, D, C], Stack 3: [E] | Taking action Move B from C to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [E], Stack 4: [F, D, C] | Plan so far [Move C from A to D | Move A from B to table | Move B from table to C | Move B from C to table] | Taking action Move C from table to D | Moved to state -> Stack 1: [A], Stack 2: [B, F, D, C], Stack 3: [E] | Plan so far [Move C from A to D | Move A from B to table | Move C from D to table | Move D from F to table | Move F from table to B | Move D from table to F | Move C from table to D] | Exploring action Move D from F to table | New state -> Invalid | Exploring action Move E from table to C | New state -> Stack 1: [A], Stack 2: [B, F, D, C, E] | Exploring action Move C from D to table | New state -> Stack 1: [A], Stack 2: [B, F, D], Stack 3: [C], Stack 4: [E] | Exploring action Move E from table to A | New state -> Stack 1: [A, E], Stack 2: [B, F, D, C] | Taking action Move E from table to C | Moved to state -> Stack 1: [A], Stack 2: [B, F, D, C, E] | Plan so far [Move C from A to D | Move A from B to table | Move C from D to table | Move D from F to table | Move F from table to B | Move D from table to F | Move C from table to D | Move E from table to C] | Reached goal state!",
        "system2_states_v1": 70
    },
    {
        "idx": 775,
        "start": [
            [
                "table",
                "B",
                "D",
                "E"
            ],
            [
                "table",
                "F",
                "A",
                "C"
            ]
        ],
        "goal": [
            [
                "table",
                "D",
                "B",
                "E",
                "F",
                "A",
                "C"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": false,
                "on": "F",
                "under": "C",
                "ontable": false
            },
            "B": {
                "clear": false,
                "on": -1,
                "under": "D",
                "ontable": true
            },
            "C": {
                "clear": true,
                "on": "A",
                "under": -1,
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": "B",
                "under": "E",
                "ontable": false
            },
            "E": {
                "clear": true,
                "on": "D",
                "under": -1,
                "ontable": false
            },
            "F": {
                "clear": false,
                "on": -1,
                "under": "A",
                "ontable": true
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": false,
                "on": "F",
                "under": "C",
                "ontable": false
            },
            "B": {
                "clear": false,
                "on": "D",
                "under": "E",
                "ontable": false
            },
            "C": {
                "clear": true,
                "on": "A",
                "under": -1,
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": -1,
                "under": "B",
                "ontable": true
            },
            "E": {
                "clear": false,
                "on": "B",
                "under": "F",
                "ontable": false
            },
            "F": {
                "clear": false,
                "on": "E",
                "under": "A",
                "ontable": false
            }
        },
        "plan_len": 9,
        "num_blocks": 6,
        "prompt": "The initial state:\nThe hand is empty.\nB is on the table. D is on B. E is on D. E is clear.\nF is on the table. A is on F. C is on A. C is clear.\n\nThe goal is:\nD is on the table. B is on D. E is on B. F is on E. A is on F. C is on A. C is clear.\n",
        "system1_plan": "Move E from D to table | Move D from B to table | Move B from table to D | Move C from A to table | Move E from table to B | Move A from F to table | Move F from table to E | Move A from table to F | Move C from table to A",
        "system1_states": 9,
        "system2_plan_v1": "Moved to state -> Stack 1: [B, D, E], Stack 2: [F, A, C] | Plan so far [] | Exploring action Move D from B to E | New state -> Invalid | Exploring action Move C from A to table | New state -> Stack 1: [B, D, E], Stack 2: [C], Stack 3: [F, A] | Exploring action Move E from D to C | New state -> Stack 1: [B, D], Stack 2: [F, A, C, E] | Exploring action Move E from D to table | New state -> Stack 1: [B, D], Stack 2: [E], Stack 3: [F, A, C] | Exploring action Move A from F to table | New state -> Invalid | Taking action Move E from D to table | Moved to state -> Stack 1: [B, D], Stack 2: [E], Stack 3: [F, A, C] | Plan so far [Move E from D to table] | Exploring action Move D from B to table | New state -> Stack 1: [B], Stack 2: [D], Stack 3: [E], Stack 4: [F, A, C] | Exploring action Move D from B to C | New state -> Stack 1: [B], Stack 2: [E], Stack 3: [F, A, C, D] | Exploring action Move D from B to E | New state -> Stack 1: [B], Stack 2: [E, D], Stack 3: [F, A, C] | Exploring action Move A from F to table | New state -> Invalid | Taking action Move D from B to table | Moved to state -> Stack 1: [B], Stack 2: [D], Stack 3: [E], Stack 4: [F, A, C] | Plan so far [Move E from D to table | Move D from B to table] | Exploring action Move F from table to E | New state -> Invalid | Exploring action Move B from table to D | New state -> Stack 1: [D, B], Stack 2: [E], Stack 3: [F, A, C] | Exploring action Move E from table to D | New state -> Stack 1: [B], Stack 2: [D, E], Stack 3: [F, A, C] | Exploring action Move A from F to table | New state -> Invalid | Exploring action Move B from table to E | New state -> Stack 1: [D], Stack 2: [E, B], Stack 3: [F, A, C] | Taking action Move B from table to D | Moved to state -> Stack 1: [D, B], Stack 2: [E], Stack 3: [F, A, C] | Plan so far [Move E from D to table | Move D from B to table | Move B from table to D] | Exploring action Move E from table to B | New state -> Stack 1: [D, B, E], Stack 2: [F, A, C] | Exploring action Move F from table to E | New state -> Invalid | Exploring action Move B from D to table | New state -> Stack 1: [B], Stack 2: [D], Stack 3: [E], Stack 4: [F, A, C] | Exploring action Move B from D to E | New state -> Stack 1: [D], Stack 2: [E, B], Stack 3: [F, A, C] | Taking action Move E from table to B | Moved to state -> Stack 1: [D, B, E], Stack 2: [F, A, C] | Plan so far [Move E from D to table | Move D from B to table | Move B from table to D | Move E from table to B] | Exploring action Move C from A to table | New state -> Stack 1: [C], Stack 2: [D, B, E], Stack 3: [F, A] | Exploring action Move C from A to E | New state -> Stack 1: [D, B, E, C], Stack 2: [F, A] | Exploring action Move B from D to C | New state -> Invalid | Exploring action Move E from B to table | New state -> Stack 1: [D, B], Stack 2: [E], Stack 3: [F, A, C] | Exploring action Move A from F to table | New state -> Invalid | Taking action Move D from B to E | Moved to state -> Stack 1: [B], Stack 2: [E, D], Stack 3: [F, A, C] | Plan so far [Move E from D to table | Move D from B to E] | Exploring action Move D from E to table | New state -> Stack 1: [B], Stack 2: [D], Stack 3: [E], Stack 4: [F, A, C] | Exploring action Move D from E to B | New state -> Stack 1: [B, D], Stack 2: [E], Stack 3: [F, A, C] | Exploring action Move A from F to table | New state -> Invalid | Exploring action Move B from table to D | New state -> Stack 1: [E, D, B], Stack 2: [F, A, C] | Taking action Move D from E to table | Moved to state -> Stack 1: [B], Stack 2: [D], Stack 3: [E], Stack 4: [F, A, C] | Plan so far [Move E from D to table | Move D from B to E | Move D from E to table] | Taking action Move B from table to E | Moved to state -> Stack 1: [D], Stack 2: [E, B], Stack 3: [F, A, C] | Plan so far [Move E from D to table | Move D from B to table | Move B from table to E] | Exploring action Move D from table to B | New state -> Stack 1: [E, B, D], Stack 2: [F, A, C] | Exploring action Move B from E to D | New state -> Stack 1: [D, B], Stack 2: [E], Stack 3: [F, A, C] | Exploring action Move B from E to table | New state -> Stack 1: [B], Stack 2: [D], Stack 3: [E], Stack 4: [F, A, C] | Exploring action Move E from table to B | New state -> Invalid | Taking action Move B from E to D | Moved to state -> Stack 1: [D, B], Stack 2: [E], Stack 3: [F, A, C] | Plan so far [Move E from D to table | Move D from B to table | Move B from table to E | Move B from E to D] | Taking action Move E from D to C | Moved to state -> Stack 1: [B, D], Stack 2: [F, A, C, E] | Plan so far [Move E from D to C] | Exploring action Move B from table to D | New state -> Invalid | Exploring action Move E from C to D | New state -> Stack 1: [B, D, E], Stack 2: [F, A, C] | Exploring action Move D from B to table | New state -> Stack 1: [B], Stack 2: [D], Stack 3: [F, A, C, E] | Exploring action Move E from C to table | New state -> Stack 1: [B, D], Stack 2: [E], Stack 3: [F, A, C] | Taking action Move E from C to table | Moved to state -> Stack 1: [B, D], Stack 2: [E], Stack 3: [F, A, C] | Plan so far [Move E from D to C | Move E from C to table] | Moved to state -> Stack 1: [B, D, E], Stack 2: [F, A, C] | Plan so far [Move E from D to C | Move E from C to D] | Taking action Move D from table to E | Moved to state -> Stack 1: [B], Stack 2: [E, D], Stack 3: [F, A, C] | Plan so far [Move E from D to table | Move D from B to table | Move D from table to E] | Taking action Move B from D to table | Moved to state -> Stack 1: [B], Stack 2: [D], Stack 3: [E], Stack 4: [F, A, C] | Plan so far [Move E from D to table | Move D from B to table | Move B from table to D | Move B from D to table] | Taking action Move D from E to B | Moved to state -> Stack 1: [B, D], Stack 2: [E], Stack 3: [F, A, C] | Plan so far [Move E from D to table | Move D from B to E | Move D from E to B] | Taking action Move D from B to table | Moved to state -> Stack 1: [B], Stack 2: [D], Stack 3: [F, A, C, E] | Plan so far [Move E from D to C | Move D from B to table] | Exploring action Move F from table to B | New state -> Invalid | Exploring action Move E from C to table | New state -> Stack 1: [B], Stack 2: [D], Stack 3: [E], Stack 4: [F, A, C] | Exploring action Move E from C to D | New state -> Stack 1: [B], Stack 2: [D, E], Stack 3: [F, A, C] | Exploring action Move E from C to B | New state -> Stack 1: [B, E], Stack 2: [D], Stack 3: [F, A, C] | Taking action Move E from C to table | Moved to state -> Stack 1: [B], Stack 2: [D], Stack 3: [E], Stack 4: [F, A, C] | Plan so far [Move E from D to C | Move D from B to table | Move E from C to table] | Taking action Move E from C to B | Moved to state -> Stack 1: [B, E], Stack 2: [D], Stack 3: [F, A, C] | Plan so far [Move E from D to C | Move D from B to table | Move E from C to B] | Exploring action Move B from table to C | New state -> Invalid | Exploring action Move E from B to table | New state -> Stack 1: [B], Stack 2: [D], Stack 3: [E], Stack 4: [F, A, C] | Exploring action Move A from F to table | New state -> Invalid | Exploring action Move D from table to E | New state -> Stack 1: [B, E, D], Stack 2: [F, A, C] | Exploring action Move E from B to D | New state -> Stack 1: [B], Stack 2: [D, E], Stack 3: [F, A, C] | Taking action Move E from C to D | Moved to state -> Stack 1: [B], Stack 2: [D, E], Stack 3: [F, A, C] | Plan so far [Move E from D to C | Move D from B to table | Move E from C to D] | Exploring action Move A from F to C | New state -> Invalid | Exploring action Move E from D to B | New state -> Stack 1: [B, E], Stack 2: [D], Stack 3: [F, A, C] | Exploring action Move F from table to E | New state -> Invalid | Exploring action Move E from D to table | New state -> Stack 1: [B], Stack 2: [D], Stack 3: [E], Stack 4: [F, A, C] | Exploring action Move B from table to E | New state -> Stack 1: [D, E, B], Stack 2: [F, A, C] | Taking action Move E from B to table | Moved to state -> Stack 1: [B], Stack 2: [D], Stack 3: [E], Stack 4: [F, A, C] | Plan so far [Move E from D to C | Move D from B to table | Move E from C to B | Move E from B to table] | Taking action Move E from D to table | Moved to state -> Stack 1: [B], Stack 2: [D], Stack 3: [E], Stack 4: [F, A, C] | Plan so far [Move E from D to C | Move D from B to table | Move E from C to D | Move E from D to table] | Taking action Move E from table to D | Moved to state -> Stack 1: [B], Stack 2: [D, E], Stack 3: [F, A, C] | Plan so far [Move E from D to table | Move D from B to table | Move E from table to D] | Taking action Move E from table to B | Moved to state -> Stack 1: [B, E], Stack 2: [D], Stack 3: [F, A, C] | Plan so far [Move E from D to table | Move D from B to table | Move E from table to B] | Taking action Move B from table to D | Moved to state -> Stack 1: [D, B], Stack 2: [F, A, C, E] | Plan so far [Move E from D to C | Move D from B to table | Move B from table to D] | Exploring action Move C from A to table | New state -> Invalid | Exploring action Move A from F to table | New state -> Invalid | Exploring action Move B from D to table | New state -> Stack 1: [B], Stack 2: [D], Stack 3: [F, A, C, E] | Exploring action Move E from C to B | New state -> Stack 1: [D, B, E], Stack 2: [F, A, C] | Exploring action Move E from C to table | New state -> Stack 1: [D, B], Stack 2: [E], Stack 3: [F, A, C] | Taking action Move E from C to B | Moved to state -> Stack 1: [D, B, E], Stack 2: [F, A, C] | Plan so far [Move E from D to C | Move D from B to table | Move B from table to D | Move E from C to B] | Taking action Move E from C to table | Moved to state -> Stack 1: [D, B], Stack 2: [E], Stack 3: [F, A, C] | Plan so far [Move E from D to C | Move D from B to table | Move B from table to D | Move E from C to table] | Moved to state -> Stack 1: [B, D, E], Stack 2: [F, A, C] | Plan so far [Move E from D to table | Move E from table to D] | Taking action Move D from B to C | Moved to state -> Stack 1: [B], Stack 2: [E], Stack 3: [F, A, C, D] | Plan so far [Move E from D to table | Move D from B to C] | Exploring action Move C from A to D | New state -> Invalid | Exploring action Move D from C to B | New state -> Stack 1: [B, D], Stack 2: [E], Stack 3: [F, A, C] | Exploring action Move D from C to E | New state -> Stack 1: [B], Stack 2: [E, D], Stack 3: [F, A, C] | Exploring action Move D from C to table | New state -> Stack 1: [B], Stack 2: [D], Stack 3: [E], Stack 4: [F, A, C] | Exploring action Move C from A to B | New state -> Invalid | Taking action Move D from C to table | Moved to state -> Stack 1: [B], Stack 2: [D], Stack 3: [E], Stack 4: [F, A, C] | Plan so far [Move E from D to table | Move D from B to C | Move D from C to table] | Taking action Move D from table to B | Moved to state -> Stack 1: [B, D], Stack 2: [E], Stack 3: [F, A, C] | Plan so far [Move E from D to table | Move D from B to table | Move D from table to B] | Taking action Move D from C to B | Moved to state -> Stack 1: [B, D], Stack 2: [E], Stack 3: [F, A, C] | Plan so far [Move E from D to table | Move D from B to C | Move D from C to B] | Taking action Move D from C to E | Moved to state -> Stack 1: [B], Stack 2: [E, D], Stack 3: [F, A, C] | Plan so far [Move E from D to table | Move D from B to C | Move D from C to E] | Taking action Move B from E to table | Moved to state -> Stack 1: [B], Stack 2: [D], Stack 3: [E], Stack 4: [F, A, C] | Plan so far [Move E from D to table | Move D from B to table | Move B from table to E | Move B from E to table] | Taking action Move E from B to table | Moved to state -> Stack 1: [D, B], Stack 2: [E], Stack 3: [F, A, C] | Plan so far [Move E from D to table | Move D from B to table | Move B from table to D | Move E from table to B | Move E from B to table] | Taking action Move C from A to table | Moved to state -> Stack 1: [B], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [F, A] | Plan so far [Move E from D to table | Move D from B to table | Move C from A to table] | Exploring action Move F from table to D | New state -> Invalid | Exploring action Move C from table to A | New state -> Stack 1: [B], Stack 2: [D], Stack 3: [E], Stack 4: [F, A, C] | Exploring action Move A from F to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Exploring action Move B from table to D | New state -> Stack 1: [C], Stack 2: [D, B], Stack 3: [E], Stack 4: [F, A] | Taking action Move C from table to A | Moved to state -> Stack 1: [B], Stack 2: [D], Stack 3: [E], Stack 4: [F, A, C] | Plan so far [Move E from D to table | Move D from B to table | Move C from A to table | Move C from table to A] | Taking action Move E from D to B | Moved to state -> Stack 1: [B, E], Stack 2: [D], Stack 3: [F, A, C] | Plan so far [Move E from D to C | Move D from B to table | Move E from C to D | Move E from D to B] | Taking action Move A from F to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Plan so far [Move E from D to table | Move D from B to table | Move C from A to table | Move A from F to table] | Exploring action Move A from table to D | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, A], Stack 4: [E], Stack 5: [F] | Exploring action Move C from table to A | New state -> Stack 1: [A, C], Stack 2: [B], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Exploring action Move B from table to D | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, B], Stack 4: [E], Stack 5: [F] | Taking action Move C from A to table | Moved to state -> Stack 1: [B, D, E], Stack 2: [C], Stack 3: [F, A] | Plan so far [Move C from A to table] | Exploring action Move C from table to A | New state -> Stack 1: [B, D, E], Stack 2: [F, A, C] | Exploring action Move D from B to E | New state -> Invalid | Exploring action Move A from F to table | New state -> Stack 1: [A], Stack 2: [B, D, E], Stack 3: [C], Stack 4: [F] | Exploring action Move E from D to table | New state -> Stack 1: [B, D], Stack 2: [C], Stack 3: [E], Stack 4: [F, A] | Moved to state -> Stack 1: [B, D, E], Stack 2: [F, A, C] | Plan so far [Move C from A to table | Move C from table to A] | Taking action Move C from A to table | Moved to state -> Stack 1: [C], Stack 2: [D, B], Stack 3: [E], Stack 4: [F, A] | Plan so far [Move E from D to table | Move D from B to table | Move B from table to D | Move C from A to table] | Exploring action Move C from table to A | New state -> Stack 1: [D, B], Stack 2: [E], Stack 3: [F, A, C] | Exploring action Move A from F to table | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, B], Stack 4: [E], Stack 5: [F] | Exploring action Move E from table to B | New state -> Stack 1: [C], Stack 2: [D, B, E], Stack 3: [F, A] | Exploring action Move D from table to E | New state -> Invalid | Taking action Move C from table to A | Moved to state -> Stack 1: [D, B], Stack 2: [E], Stack 3: [F, A, C] | Plan so far [Move E from D to table | Move D from B to table | Move B from table to D | Move C from A to table | Move C from table to A] | Taking action Move E from B to D | Moved to state -> Stack 1: [B], Stack 2: [D, E], Stack 3: [F, A, C] | Plan so far [Move E from D to C | Move D from B to table | Move E from C to B | Move E from B to D] | Taking action Move B from table to C | Moved to state -> Stack 1: [D], Stack 2: [E], Stack 3: [F, A, C, B] | Plan so far [Move E from D to table | Move D from B to table | Move B from table to C] | Exploring action Move B from C to D | New state -> Stack 1: [D, B], Stack 2: [E], Stack 3: [F, A, C] | Exploring action Move A from F to table | New state -> Invalid | Exploring action Move B from C to table | New state -> Stack 1: [B], Stack 2: [D], Stack 3: [E], Stack 4: [F, A, C] | Exploring action Move B from C to E | New state -> Stack 1: [D], Stack 2: [E, B], Stack 3: [F, A, C] | Exploring action Move A from F to B | New state -> Invalid | Taking action Move B from C to D | Moved to state -> Stack 1: [D, B], Stack 2: [E], Stack 3: [F, A, C] | Plan so far [Move E from D to table | Move D from B to table | Move B from table to C | Move B from C to D] | Taking action Move B from C to table | Moved to state -> Stack 1: [B], Stack 2: [D], Stack 3: [E], Stack 4: [F, A, C] | Plan so far [Move E from D to table | Move D from B to table | Move B from table to C | Move B from C to table] | Taking action Move E from table to B | Moved to state -> Stack 1: [C], Stack 2: [D, B, E], Stack 3: [F, A] | Plan so far [Move E from D to table | Move D from B to table | Move B from table to D | Move C from A to table | Move E from table to B] | Exploring action Move A from F to E | New state -> Stack 1: [C], Stack 2: [D, B, E, A], Stack 3: [F] | Exploring action Move A from F to table | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, B, E], Stack 4: [F] | Exploring action Move F from table to E | New state -> Invalid | Exploring action Move B from D to table | New state -> Invalid | Exploring action Move C from table to A | New state -> Stack 1: [D, B, E], Stack 2: [F, A, C] | Taking action Move C from table to A | Moved to state -> Stack 1: [D, B, E], Stack 2: [F, A, C] | Plan so far [Move E from D to table | Move D from B to table | Move B from table to D | Move C from A to table | Move E from table to B | Move C from table to A] | Taking action Move B from C to E | Moved to state -> Stack 1: [D], Stack 2: [E, B], Stack 3: [F, A, C] | Plan so far [Move E from D to table | Move D from B to table | Move B from table to C | Move B from C to E] | Taking action Move A from F to table | Moved to state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, B, E], Stack 4: [F] | Plan so far [Move E from D to table | Move D from B to table | Move B from table to D | Move C from A to table | Move E from table to B | Move A from F to table] | Exploring action Move C from table to A | New state -> Stack 1: [A, C], Stack 2: [D, B, E], Stack 3: [F] | Exploring action Move D from table to A | New state -> Invalid | Exploring action Move D from table to F | New state -> Invalid | Exploring action Move E from B to table | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, B], Stack 4: [E], Stack 5: [F] | Exploring action Move F from table to E | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, B, E, F] | Taking action Move E from D to table | Moved to state -> Stack 1: [B, D], Stack 2: [C], Stack 3: [E], Stack 4: [F, A] | Plan so far [Move C from A to table | Move E from D to table] | Exploring action Move A from F to table | New state -> Stack 1: [A], Stack 2: [B, D], Stack 3: [C], Stack 4: [E], Stack 5: [F] | Exploring action Move F from table to E | New state -> Invalid | Exploring action Move D from B to table | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [F, A] | Exploring action Move C from table to A | New state -> Stack 1: [B, D], Stack 2: [E], Stack 3: [F, A, C] | Exploring action Move F from table to D | New state -> Invalid | Taking action Move C from table to A | Moved to state -> Stack 1: [B, D], Stack 2: [E], Stack 3: [F, A, C] | Plan so far [Move C from A to table | Move E from D to table | Move C from table to A] | Taking action Move C from A to table | Moved to state -> Stack 1: [C], Stack 2: [D, B, E], Stack 3: [F, A] | Plan so far [Move E from D to table | Move D from B to table | Move B from table to D | Move E from table to B | Move C from A to table] | Taking action Move E from table to C | Moved to state -> Stack 1: [D, B], Stack 2: [F, A, C, E] | Plan so far [Move E from D to table | Move D from B to table | Move B from table to D | Move E from table to C] | Taking action Move A from F to table | Moved to state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, B], Stack 4: [E], Stack 5: [F] | Plan so far [Move E from D to table | Move D from B to table | Move B from table to D | Move C from A to table | Move A from F to table] | Exploring action Move C from table to A | New state -> Stack 1: [A, C], Stack 2: [D, B], Stack 3: [E], Stack 4: [F] | Exploring action Move D from table to F | New state -> Invalid | Exploring action Move A from table to E | New state -> Stack 1: [C], Stack 2: [D, B], Stack 3: [E, A], Stack 4: [F] | Exploring action Move E from table to B | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, B, E], Stack 4: [F] | Taking action Move D from B to E | Moved to state -> Stack 1: [B], Stack 2: [F, A, C, E, D] | Plan so far [Move E from D to C | Move D from B to E] | Exploring action Move D from E to table | New state -> Stack 1: [B], Stack 2: [D], Stack 3: [F, A, C, E] | Exploring action Move B from table to D | New state -> Stack 1: [F, A, C, E, D, B] | Exploring action Move C from A to B | New state -> Invalid | Exploring action Move D from E to B | New state -> Stack 1: [B, D], Stack 2: [F, A, C, E] | Exploring action Move C from A to D | New state -> Invalid | Taking action Move E from table to C | Moved to state -> Stack 1: [B, D], Stack 2: [F, A, C, E] | Plan so far [Move E from D to table | Move E from table to C] | Taking action Move D from E to C | Moved to state -> Stack 1: [B], Stack 2: [E], Stack 3: [F, A, C, D] | Plan so far [Move E from D to table | Move D from B to E | Move D from E to C] | Taking action Move B from table to D | Moved to state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, B], Stack 4: [E], Stack 5: [F] | Plan so far [Move E from D to table | Move D from B to table | Move C from A to table | Move A from F to table | Move B from table to D] | Taking action Move E from table to B | Moved to state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, B, E], Stack 4: [F] | Plan so far [Move E from D to table | Move D from B to table | Move B from table to D | Move C from A to table | Move A from F to table | Move E from table to B] | Taking action Move D from E to table | Moved to state -> Stack 1: [B], Stack 2: [D], Stack 3: [F, A, C, E] | Plan so far [Move E from D to C | Move D from B to E | Move D from E to table] | Taking action Move A from F to table | Moved to state -> Stack 1: [A], Stack 2: [B, D, E], Stack 3: [C], Stack 4: [F] | Plan so far [Move C from A to table | Move A from F to table] | Exploring action Move B from table to C | New state -> Invalid | Exploring action Move E from D to table | New state -> Stack 1: [A], Stack 2: [B, D], Stack 3: [C], Stack 4: [E], Stack 5: [F] | Exploring action Move E from D to A | New state -> Stack 1: [A, E], Stack 2: [B, D], Stack 3: [C], Stack 4: [F] | Exploring action Move C from table to A | New state -> Stack 1: [A, C], Stack 2: [B, D, E], Stack 3: [F] | Taking action Move B from D to E | Moved to state -> Stack 1: [D], Stack 2: [E, B], Stack 3: [F, A, C] | Plan so far [Move E from D to table | Move D from B to table | Move B from table to D | Move B from D to E] | Taking action Move C from A to table | Moved to state -> Stack 1: [B, D], Stack 2: [C], Stack 3: [E], Stack 4: [F, A] | Plan so far [Move E from D to table | Move C from A to table] | Taking action Move E from D to table | Moved to state -> Stack 1: [A], Stack 2: [B, D], Stack 3: [C], Stack 4: [E], Stack 5: [F] | Plan so far [Move C from A to table | Move A from F to table | Move E from D to table] | Exploring action Move B from table to E | New state -> Invalid | Exploring action Move B from table to F | New state -> Invalid | Exploring action Move D from B to E | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [E, D], Stack 5: [F] | Exploring action Move D from B to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Exploring action Move D from B to F | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [E], Stack 5: [F, D] | Taking action Move D from B to table | Moved to state -> Stack 1: [B], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [F, A] | Plan so far [Move C from A to table | Move E from D to table | Move D from B to table] | Taking action Move E from table to C | Moved to state -> Stack 1: [B], Stack 2: [D], Stack 3: [F, A, C, E] | Plan so far [Move E from D to table | Move D from B to table | Move E from table to C] | Taking action Move D from B to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Plan so far [Move C from A to table | Move A from F to table | Move E from D to table | Move D from B to table] | Taking action Move F from table to E | Moved to state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, B, E, F] | Plan so far [Move E from D to table | Move D from B to table | Move B from table to D | Move C from A to table | Move E from table to B | Move A from F to table | Move F from table to E] | Exploring action Move A from table to C | New state -> Stack 1: [C, A], Stack 2: [D, B, E, F] | Exploring action Move A from table to F | New state -> Stack 1: [C], Stack 2: [D, B, E, F, A] | Exploring action Move E from B to A | New state -> Invalid | Exploring action Move B from D to F | New state -> Invalid | Exploring action Move C from table to A | New state -> Stack 1: [A, C], Stack 2: [D, B, E, F] | Taking action Move A from F to table | Moved to state -> Stack 1: [A], Stack 2: [B, D], Stack 3: [C], Stack 4: [E], Stack 5: [F] | Plan so far [Move C from A to table | Move E from D to table | Move A from F to table] | Taking action Move A from table to F | Moved to state -> Stack 1: [C], Stack 2: [D, B, E, F, A] | Plan so far [Move E from D to table | Move D from B to table | Move B from table to D | Move C from A to table | Move E from table to B | Move A from F to table | Move F from table to E | Move A from table to F] | Exploring action Move A from F to table | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, B, E, F] | Exploring action Move E from B to table | New state -> Invalid | Exploring action Move A from F to C | New state -> Stack 1: [C, A], Stack 2: [D, B, E, F] | Exploring action Move C from table to A | New state -> Stack 1: [D, B, E, F, A, C] | Taking action Move C from table to A | Moved to state -> Stack 1: [D, B, E, F, A, C] | Plan so far [Move E from D to table | Move D from B to table | Move B from table to D | Move C from A to table | Move E from table to B | Move A from F to table | Move F from table to E | Move A from table to F | Move C from table to A] | Reached goal state!",
        "system2_states_v1": 121
    },
    {
        "idx": 800,
        "start": [
            [
                "table",
                "C",
                "E",
                "F",
                "B",
                "D",
                "A"
            ]
        ],
        "goal": [
            [
                "table",
                "A"
            ],
            [
                "table",
                "E",
                "D",
                "C",
                "B",
                "F"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": true,
                "on": "D",
                "under": -1,
                "ontable": false
            },
            "B": {
                "clear": false,
                "on": "F",
                "under": "D",
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": -1,
                "under": "E",
                "ontable": true
            },
            "D": {
                "clear": false,
                "on": "B",
                "under": "A",
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": "C",
                "under": "F",
                "ontable": false
            },
            "F": {
                "clear": false,
                "on": "E",
                "under": "B",
                "ontable": false
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": true,
                "on": -1,
                "under": -1,
                "ontable": true
            },
            "B": {
                "clear": false,
                "on": "C",
                "under": "F",
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": "D",
                "under": "B",
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": "E",
                "under": "C",
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": -1,
                "under": "D",
                "ontable": true
            },
            "F": {
                "clear": true,
                "on": "B",
                "under": -1,
                "ontable": false
            }
        },
        "plan_len": 9,
        "num_blocks": 6,
        "prompt": "The initial state:\nThe hand is empty.\nC is on the table. E is on C. F is on E. B is on F. D is on B. A is on D. A is clear.\n\nThe goal is:\nA is on the table. A is clear.\nE is on the table. D is on E. C is on D. B is on C. F is on B. F is clear.\n",
        "system1_plan": "Move A from D to table | Move D from B to table | Move B from F to table | Move F from E to table | Move E from C to table | Move D from table to E | Move C from table to D | Move B from table to C | Move F from table to B",
        "system1_states": 9,
        "system2_plan_v1": "Moved to state -> Stack 1: [C, E, F, B, D, A] | Plan so far [] | Exploring action Move D from B to table | New state -> Invalid | Exploring action Move A from D to table | New state -> Stack 1: [A], Stack 2: [C, E, F, B, D] | Taking action Move A from D to table | Moved to state -> Stack 1: [A], Stack 2: [C, E, F, B, D] | Plan so far [Move A from D to table] | Exploring action Move D from B to A | New state -> Stack 1: [A, D], Stack 2: [C, E, F, B] | Exploring action Move D from B to table | New state -> Stack 1: [A], Stack 2: [C, E, F, B], Stack 3: [D] | Exploring action Move B from F to D | New state -> Invalid | Exploring action Move A from table to D | New state -> Stack 1: [C, E, F, B, D, A] | Taking action Move D from B to table | Moved to state -> Stack 1: [A], Stack 2: [C, E, F, B], Stack 3: [D] | Plan so far [Move A from D to table | Move D from B to table] | Exploring action Move C from table to B | New state -> Invalid | Exploring action Move B from F to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, E, F], Stack 4: [D] | Exploring action Move D from table to B | New state -> Stack 1: [A], Stack 2: [C, E, F, B, D] | Exploring action Move B from F to D | New state -> Stack 1: [A], Stack 2: [C, E, F], Stack 3: [D, B] | Taking action Move B from F to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, E, F], Stack 4: [D] | Plan so far [Move A from D to table | Move D from B to table | Move B from F to table] | Exploring action Move F from E to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, E], Stack 4: [D], Stack 5: [F] | Exploring action Move F from E to B | New state -> Stack 1: [A], Stack 2: [B, F], Stack 3: [C, E], Stack 4: [D] | Exploring action Move F from E to D | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, E], Stack 4: [D, F] | Exploring action Move C from table to B | New state -> Invalid | Taking action Move F from E to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, E], Stack 4: [D], Stack 5: [F] | Plan so far [Move A from D to table | Move D from B to table | Move B from F to table | Move F from E to table] | Exploring action Move E from C to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Exploring action Move E from C to B | New state -> Stack 1: [A], Stack 2: [B, E], Stack 3: [C], Stack 4: [D], Stack 5: [F] | Exploring action Move C from table to B | New state -> Invalid | Exploring action Move C from table to F | New state -> Invalid | Exploring action Move E from C to D | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D, E], Stack 5: [F] | Taking action Move F from E to B | Moved to state -> Stack 1: [A], Stack 2: [B, F], Stack 3: [C, E], Stack 4: [D] | Plan so far [Move A from D to table | Move D from B to table | Move B from F to table | Move F from E to B] | Exploring action Move E from C to D | New state -> Stack 1: [A], Stack 2: [B, F], Stack 3: [C], Stack 4: [D, E] | Exploring action Move C from table to F | New state -> Invalid | Exploring action Move F from B to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, E], Stack 4: [D], Stack 5: [F] | Exploring action Move E from C to table | New state -> Stack 1: [A], Stack 2: [B, F], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Taking action Move E from C to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Plan so far [Move A from D to table | Move D from B to table | Move B from F to table | Move F from E to table | Move E from C to table] | Exploring action Move F from table to B | New state -> Stack 1: [A], Stack 2: [B, F], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Exploring action Move C from table to E | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D], Stack 4: [E, C], Stack 5: [F] | Exploring action Move D from table to E | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [E, D], Stack 5: [F] | Taking action Move E from C to table | Moved to state -> Stack 1: [A], Stack 2: [B, F], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Plan so far [Move A from D to table | Move D from B to table | Move B from F to table | Move F from E to B | Move E from C to table] | Exploring action Move F from B to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Exploring action Move C from table to E | New state -> Stack 1: [A], Stack 2: [B, F], Stack 3: [D], Stack 4: [E, C] | Exploring action Move B from table to E | New state -> Invalid | Exploring action Move B from table to A | New state -> Invalid | Exploring action Move D from table to E | New state -> Stack 1: [A], Stack 2: [B, F], Stack 3: [C], Stack 4: [E, D] | Taking action Move D from table to E | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [E, D], Stack 5: [F] | Plan so far [Move A from D to table | Move D from B to table | Move B from F to table | Move F from E to table | Move E from C to table | Move D from table to E] | Exploring action Move B from table to D | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [E, D, B], Stack 4: [F] | Exploring action Move F from table to B | New state -> Stack 1: [A], Stack 2: [B, F], Stack 3: [C], Stack 4: [E, D] | Exploring action Move C from table to D | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [E, D, C], Stack 4: [F] | Exploring action Move E from table to C | New state -> Invalid | Taking action Move D from table to E | Moved to state -> Stack 1: [A], Stack 2: [B, F], Stack 3: [C], Stack 4: [E, D] | Plan so far [Move A from D to table | Move D from B to table | Move B from F to table | Move F from E to B | Move E from C to table | Move D from table to E] | Exploring action Move F from B to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [E, D], Stack 5: [F] | Exploring action Move D from E to table | New state -> Stack 1: [A], Stack 2: [B, F], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Exploring action Move B from table to C | New state -> Invalid | Exploring action Move E from table to C | New state -> Invalid | Exploring action Move C from table to D | New state -> Stack 1: [A], Stack 2: [B, F], Stack 3: [E, D, C] | Taking action Move C from table to D | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [E, D, C], Stack 4: [F] | Plan so far [Move A from D to table | Move D from B to table | Move B from F to table | Move F from E to table | Move E from C to table | Move D from table to E | Move C from table to D] | Exploring action Move E from table to B | New state -> Invalid | Exploring action Move B from table to C | New state -> Stack 1: [A], Stack 2: [E, D, C, B], Stack 3: [F] | Exploring action Move C from D to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [E, D], Stack 5: [F] | Exploring action Move F from table to B | New state -> Stack 1: [A], Stack 2: [B, F], Stack 3: [E, D, C] | Taking action Move C from table to D | Moved to state -> Stack 1: [A], Stack 2: [B, F], Stack 3: [E, D, C] | Plan so far [Move A from D to table | Move D from B to table | Move B from F to table | Move F from E to B | Move E from C to table | Move D from table to E | Move C from table to D] | Exploring action Move B from table to A | New state -> Invalid | Exploring action Move C from D to table | New state -> Stack 1: [A], Stack 2: [B, F], Stack 3: [C], Stack 4: [E, D] | Exploring action Move F from B to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [E, D, C], Stack 4: [F] | Exploring action Move F from B to C | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [E, D, C, F] | Taking action Move B from table to C | Moved to state -> Stack 1: [A], Stack 2: [E, D, C, B], Stack 3: [F] | Plan so far [Move A from D to table | Move D from B to table | Move B from F to table | Move F from E to table | Move E from C to table | Move D from table to E | Move C from table to D | Move B from table to C] | Exploring action Move F from table to A | New state -> Stack 1: [A, F], Stack 2: [E, D, C, B] | Exploring action Move F from table to B | New state -> Stack 1: [A], Stack 2: [E, D, C, B, F] | Exploring action Move D from E to B | New state -> Invalid | Exploring action Move B from C to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [E, D, C], Stack 4: [F] | Taking action Move F from table to B | Moved to state -> Stack 1: [A], Stack 2: [E, D, C, B, F] | Plan so far [Move A from D to table | Move D from B to table | Move B from F to table | Move F from E to table | Move E from C to table | Move D from table to E | Move C from table to D | Move B from table to C | Move F from table to B] | Reached goal state!",
        "system2_states_v1": 52
    },
    {
        "idx": 589,
        "start": [
            [
                "table",
                "E",
                "A",
                "D",
                "C",
                "B"
            ]
        ],
        "goal": [
            [
                "table",
                "A",
                "B"
            ],
            [
                "table",
                "E",
                "C",
                "D"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": false,
                "on": "E",
                "under": "D",
                "ontable": false
            },
            "B": {
                "clear": true,
                "on": "C",
                "under": -1,
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": "D",
                "under": "B",
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": "A",
                "under": "C",
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": -1,
                "under": "A",
                "ontable": true
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": false,
                "on": -1,
                "under": "B",
                "ontable": true
            },
            "B": {
                "clear": true,
                "on": "A",
                "under": -1,
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": "E",
                "under": "D",
                "ontable": false
            },
            "D": {
                "clear": true,
                "on": "C",
                "under": -1,
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": -1,
                "under": "C",
                "ontable": true
            }
        },
        "plan_len": 7,
        "num_blocks": 5,
        "prompt": "The initial state:\nThe hand is empty.\nE is on the table. A is on E. D is on A. C is on D. B is on C. B is clear.\n\nThe goal is:\nA is on the table. B is on A. B is clear.\nE is on the table. C is on E. D is on C. D is clear.\n",
        "system1_plan": "Move B from C to table | Move C from D to table | Move D from A to table | Move A from E to table | Move B from table to A | Move C from table to E | Move D from table to C",
        "system1_states": 7,
        "system2_plan_v1": "Moved to state -> Stack 1: [E, A, D, C, B] | Plan so far [] | Exploring action Move C from D to B | New state -> Invalid | Exploring action Move B from C to table | New state -> Stack 1: [B], Stack 2: [E, A, D, C] | Taking action Move B from C to table | Moved to state -> Stack 1: [B], Stack 2: [E, A, D, C] | Plan so far [Move B from C to table] | Exploring action Move E from table to B | New state -> Invalid | Exploring action Move B from table to C | New state -> Stack 1: [E, A, D, C, B] | Exploring action Move C from D to table | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [E, A, D] | Exploring action Move C from D to B | New state -> Stack 1: [B, C], Stack 2: [E, A, D] | Exploring action Move D from A to table | New state -> Invalid | Taking action Move C from D to table | Moved to state -> Stack 1: [B], Stack 2: [C], Stack 3: [E, A, D] | Plan so far [Move B from C to table | Move C from D to table] | Exploring action Move D from A to B | New state -> Stack 1: [B, D], Stack 2: [C], Stack 3: [E, A] | Exploring action Move D from A to C | New state -> Stack 1: [B], Stack 2: [C, D], Stack 3: [E, A] | Exploring action Move D from A to table | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D], Stack 4: [E, A] | Exploring action Move E from table to D | New state -> Invalid | Taking action Move D from A to table | Moved to state -> Stack 1: [B], Stack 2: [C], Stack 3: [D], Stack 4: [E, A] | Plan so far [Move B from C to table | Move C from D to table | Move D from A to table] | Exploring action Move E from table to B | New state -> Invalid | Exploring action Move A from E to C | New state -> Stack 1: [B], Stack 2: [C, A], Stack 3: [D], Stack 4: [E] | Exploring action Move E from table to D | New state -> Invalid | Exploring action Move D from table to C | New state -> Stack 1: [B], Stack 2: [C, D], Stack 3: [E, A] | Exploring action Move A from E to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Taking action Move D from A to C | Moved to state -> Stack 1: [B], Stack 2: [C, D], Stack 3: [E, A] | Plan so far [Move B from C to table | Move C from D to table | Move D from A to C] | Exploring action Move A from E to B | New state -> Stack 1: [B, A], Stack 2: [C, D], Stack 3: [E] | Exploring action Move E from table to A | New state -> Invalid | Exploring action Move D from C to table | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D], Stack 4: [E, A] | Exploring action Move A from E to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, D], Stack 4: [E] | Taking action Move A from E to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Plan so far [Move B from C to table | Move C from D to table | Move D from A to table | Move A from E to table] | Exploring action Move D from table to C | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, D], Stack 4: [E] | Exploring action Move C from table to E | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D], Stack 4: [E, C] | Exploring action Move B from table to A | New state -> Stack 1: [A, B], Stack 2: [C], Stack 3: [D], Stack 4: [E] | Taking action Move B from table to A | Moved to state -> Stack 1: [A, B], Stack 2: [C], Stack 3: [D], Stack 4: [E] | Plan so far [Move B from C to table | Move C from D to table | Move D from A to table | Move A from E to table | Move B from table to A] | Exploring action Move D from table to C | New state -> Stack 1: [A, B], Stack 2: [C, D], Stack 3: [E] | Exploring action Move C from table to D | New state -> Stack 1: [A, B], Stack 2: [D, C], Stack 3: [E] | Exploring action Move C from table to E | New state -> Stack 1: [A, B], Stack 2: [D], Stack 3: [E, C] | Exploring action Move A from table to D | New state -> Invalid | Taking action Move C from table to E | Moved to state -> Stack 1: [A, B], Stack 2: [D], Stack 3: [E, C] | Plan so far [Move B from C to table | Move C from D to table | Move D from A to table | Move A from E to table | Move B from table to A | Move C from table to E] | Exploring action Move E from table to D | New state -> Invalid | Exploring action Move C from E to table | New state -> Stack 1: [A, B], Stack 2: [C], Stack 3: [D], Stack 4: [E] | Exploring action Move C from E to D | New state -> Stack 1: [A, B], Stack 2: [D, C], Stack 3: [E] | Exploring action Move D from table to C | New state -> Stack 1: [A, B], Stack 2: [E, C, D] | Taking action Move D from table to C | Moved to state -> Stack 1: [A, B], Stack 2: [E, C, D] | Plan so far [Move B from C to table | Move C from D to table | Move D from A to table | Move A from E to table | Move B from table to A | Move C from table to E | Move D from table to C] | Reached goal state!",
        "system2_states_v1": 31
    },
    {
        "idx": 777,
        "start": [
            [
                "table",
                "C",
                "F",
                "A",
                "B"
            ],
            [
                "table",
                "D",
                "E"
            ]
        ],
        "goal": [
            [
                "table",
                "A",
                "D",
                "E",
                "B"
            ],
            [
                "table",
                "F",
                "C"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": false,
                "on": "F",
                "under": "B",
                "ontable": false
            },
            "B": {
                "clear": true,
                "on": "A",
                "under": -1,
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": -1,
                "under": "F",
                "ontable": true
            },
            "D": {
                "clear": false,
                "on": -1,
                "under": "E",
                "ontable": true
            },
            "E": {
                "clear": true,
                "on": "D",
                "under": -1,
                "ontable": false
            },
            "F": {
                "clear": false,
                "on": "C",
                "under": "A",
                "ontable": false
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": false,
                "on": -1,
                "under": "D",
                "ontable": true
            },
            "B": {
                "clear": true,
                "on": "E",
                "under": -1,
                "ontable": false
            },
            "C": {
                "clear": true,
                "on": "F",
                "under": -1,
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": "A",
                "under": "E",
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": "D",
                "under": "B",
                "ontable": false
            },
            "F": {
                "clear": false,
                "on": -1,
                "under": "C",
                "ontable": true
            }
        },
        "plan_len": 9,
        "num_blocks": 6,
        "prompt": "The initial state:\nThe hand is empty.\nC is on the table. F is on C. A is on F. B is on A. B is clear.\nD is on the table. E is on D. E is clear.\n\nThe goal is:\nA is on the table. D is on A. E is on D. B is on E. B is clear.\nF is on the table. C is on F. C is clear.\n",
        "system1_plan": "Move B from A to E | Move A from F to table | Move F from C to table | Move C from table to F | Move B from E to table | Move E from D to table | Move D from table to A | Move E from table to D | Move B from table to E",
        "system1_states": 9,
        "system2_plan_v1": "Moved to state -> Stack 1: [C, F, A, B], Stack 2: [D, E] | Plan so far [] | Exploring action Move B from A to E | New state -> Stack 1: [C, F, A], Stack 2: [D, E, B] | Exploring action Move C from table to B | New state -> Invalid | Exploring action Move A from F to B | New state -> Invalid | Exploring action Move B from A to table | New state -> Stack 1: [B], Stack 2: [C, F, A], Stack 3: [D, E] | Exploring action Move E from D to table | New state -> Stack 1: [C, F, A, B], Stack 2: [D], Stack 3: [E] | Taking action Move B from A to E | Moved to state -> Stack 1: [C, F, A], Stack 2: [D, E, B] | Plan so far [Move B from A to E] | Exploring action Move C from table to B | New state -> Invalid | Exploring action Move B from E to table | New state -> Stack 1: [B], Stack 2: [C, F, A], Stack 3: [D, E] | Exploring action Move A from F to B | New state -> Stack 1: [C, F], Stack 2: [D, E, B, A] | Exploring action Move A from F to table | New state -> Stack 1: [A], Stack 2: [C, F], Stack 3: [D, E, B] | Taking action Move A from F to table | Moved to state -> Stack 1: [A], Stack 2: [C, F], Stack 3: [D, E, B] | Plan so far [Move B from A to E | Move A from F to table] | Exploring action Move F from C to A | New state -> Stack 1: [A, F], Stack 2: [C], Stack 3: [D, E, B] | Exploring action Move E from D to A | New state -> Invalid | Exploring action Move D from table to A | New state -> Invalid | Exploring action Move F from C to table | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, E, B], Stack 4: [F] | Exploring action Move A from table to F | New state -> Stack 1: [C, F, A], Stack 2: [D, E, B] | Taking action Move F from C to table | Moved to state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, E, B], Stack 4: [F] | Plan so far [Move B from A to E | Move A from F to table | Move F from C to table] | Exploring action Move A from table to F | New state -> Stack 1: [C], Stack 2: [D, E, B], Stack 3: [F, A] | Exploring action Move C from table to F | New state -> Stack 1: [A], Stack 2: [D, E, B], Stack 3: [F, C] | Exploring action Move F from table to C | New state -> Stack 1: [A], Stack 2: [C, F], Stack 3: [D, E, B] | Exploring action Move E from D to table | New state -> Invalid | Taking action Move C from table to F | Moved to state -> Stack 1: [A], Stack 2: [D, E, B], Stack 3: [F, C] | Plan so far [Move B from A to E | Move A from F to table | Move F from C to table | Move C from table to F] | Exploring action Move C from F to table | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, E, B], Stack 4: [F] | Exploring action Move E from D to table | New state -> Invalid | Exploring action Move B from E to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, E], Stack 4: [F, C] | Exploring action Move A from table to B | New state -> Stack 1: [D, E, B, A], Stack 2: [F, C] | Taking action Move F from C to A | Moved to state -> Stack 1: [A, F], Stack 2: [C], Stack 3: [D, E, B] | Plan so far [Move B from A to E | Move A from F to table | Move F from C to A] | Exploring action Move A from table to C | New state -> Invalid | Exploring action Move F from A to table | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, E, B], Stack 4: [F] | Exploring action Move D from table to C | New state -> Invalid | Exploring action Move F from A to C | New state -> Stack 1: [A], Stack 2: [C, F], Stack 3: [D, E, B] | Exploring action Move C from table to F | New state -> Stack 1: [A, F, C], Stack 2: [D, E, B] | Taking action Move F from A to table | Moved to state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, E, B], Stack 4: [F] | Plan so far [Move B from A to E | Move A from F to table | Move F from C to A | Move F from A to table] | Taking action Move A from table to C | Moved to state -> Stack 1: [C, A], Stack 2: [D, E, B], Stack 3: [F] | Plan so far [Move B from A to E | Move A from F to table | Move F from C to table | Move A from table to C] | Exploring action Move F from table to A | New state -> Stack 1: [C, A, F], Stack 2: [D, E, B] | Exploring action Move A from C to F | New state -> Stack 1: [C], Stack 2: [D, E, B], Stack 3: [F, A] | Exploring action Move E from D to A | New state -> Invalid | Exploring action Move A from C to table | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, E, B], Stack 4: [F] | Taking action Move C from F to table | Moved to state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, E, B], Stack 4: [F] | Plan so far [Move B from A to E | Move A from F to table | Move F from C to table | Move C from table to F | Move C from F to table] | Taking action Move B from E to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, E], Stack 4: [F, C] | Plan so far [Move B from A to E | Move A from F to table | Move F from C to table | Move C from table to F | Move B from E to table] | Exploring action Move E from D to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D], Stack 4: [E], Stack 5: [F, C] | Exploring action Move E from D to A | New state -> Stack 1: [A, E], Stack 2: [B], Stack 3: [D], Stack 4: [F, C] | Exploring action Move D from table to B | New state -> Invalid | Exploring action Move D from table to C | New state -> Invalid | Exploring action Move B from table to E | New state -> Stack 1: [A], Stack 2: [D, E, B], Stack 3: [F, C] | Taking action Move B from table to E | Moved to state -> Stack 1: [A], Stack 2: [D, E, B], Stack 3: [F, C] | Plan so far [Move B from A to E | Move A from F to table | Move F from C to table | Move C from table to F | Move B from E to table | Move B from table to E] | Taking action Move E from D to table | Moved to state -> Stack 1: [C, F, A, B], Stack 2: [D], Stack 3: [E] | Plan so far [Move E from D to table] | Exploring action Move B from A to E | New state -> Stack 1: [C, F, A], Stack 2: [D], Stack 3: [E, B] | Exploring action Move F from C to table | New state -> Invalid | Exploring action Move B from A to D | New state -> Stack 1: [C, F, A], Stack 2: [D, B], Stack 3: [E] | Exploring action Move B from A to table | New state -> Stack 1: [B], Stack 2: [C, F, A], Stack 3: [D], Stack 4: [E] | Taking action Move F from table to C | Moved to state -> Stack 1: [A], Stack 2: [C, F], Stack 3: [D, E, B] | Plan so far [Move B from A to E | Move A from F to table | Move F from C to table | Move F from table to C] | Taking action Move A from table to B | Moved to state -> Stack 1: [D, E, B, A], Stack 2: [F, C] | Plan so far [Move B from A to E | Move A from F to table | Move F from C to table | Move C from table to F | Move A from table to B] | Exploring action Move C from F to table | New state -> Stack 1: [C], Stack 2: [D, E, B, A], Stack 3: [F] | Exploring action Move A from B to C | New state -> Stack 1: [D, E, B], Stack 2: [F, C, A] | Exploring action Move E from D to A | New state -> Invalid | Exploring action Move A from B to table | New state -> Stack 1: [A], Stack 2: [D, E, B], Stack 3: [F, C] | Taking action Move A from B to table | Moved to state -> Stack 1: [A], Stack 2: [D, E, B], Stack 3: [F, C] | Plan so far [Move B from A to E | Move A from F to table | Move F from C to table | Move C from table to F | Move A from table to B | Move A from B to table] | Taking action Move B from A to table | Moved to state -> Stack 1: [B], Stack 2: [C, F, A], Stack 3: [D], Stack 4: [E] | Plan so far [Move E from D to table | Move B from A to table] | Exploring action Move F from C to A | New state -> Invalid | Exploring action Move A from F to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, F], Stack 4: [D], Stack 5: [E] | Exploring action Move C from table to D | New state -> Invalid | Exploring action Move B from table to E | New state -> Stack 1: [C, F, A], Stack 2: [D], Stack 3: [E, B] | Exploring action Move A from F to D | New state -> Stack 1: [B], Stack 2: [C, F], Stack 3: [D, A], Stack 4: [E] | Taking action Move B from A to E | Moved to state -> Stack 1: [C, F, A], Stack 2: [D], Stack 3: [E, B] | Plan so far [Move E from D to table | Move B from A to E] | Exploring action Move A from F to table | New state -> Stack 1: [A], Stack 2: [C, F], Stack 3: [D], Stack 4: [E, B] | Exploring action Move C from table to B | New state -> Invalid | Exploring action Move A from F to D | New state -> Stack 1: [C, F], Stack 2: [D, A], Stack 3: [E, B] | Exploring action Move B from E to table | New state -> Stack 1: [B], Stack 2: [C, F, A], Stack 3: [D], Stack 4: [E] | Exploring action Move E from table to B | New state -> Invalid | Taking action Move E from D to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [D], Stack 4: [E], Stack 5: [F, C] | Plan so far [Move B from A to E | Move A from F to table | Move F from C to table | Move C from table to F | Move B from E to table | Move E from D to table] | Exploring action Move D from table to A | New state -> Stack 1: [A, D], Stack 2: [B], Stack 3: [E], Stack 4: [F, C] | Exploring action Move F from table to E | New state -> Invalid | Exploring action Move A from table to D | New state -> Stack 1: [B], Stack 2: [D, A], Stack 3: [E], Stack 4: [F, C] | Exploring action Move B from table to E | New state -> Stack 1: [A], Stack 2: [D], Stack 3: [E, B], Stack 4: [F, C] | Taking action Move A from table to C | Moved to state -> Stack 1: [D, E, B], Stack 2: [F, C, A] | Plan so far [Move B from A to E | Move A from F to table | Move F from C to table | Move C from table to F | Move A from table to C] | Exploring action Move C from F to A | New state -> Invalid | Exploring action Move B from E to table | New state -> Stack 1: [B], Stack 2: [D, E], Stack 3: [F, C, A] | Exploring action Move A from C to table | New state -> Stack 1: [A], Stack 2: [D, E, B], Stack 3: [F, C] | Exploring action Move A from C to B | New state -> Stack 1: [D, E, B, A], Stack 2: [F, C] | Exploring action Move F from table to B | New state -> Invalid | Taking action Move A from C to table | Moved to state -> Stack 1: [A], Stack 2: [D, E, B], Stack 3: [F, C] | Plan so far [Move B from A to E | Move A from F to table | Move F from C to table | Move C from table to F | Move A from table to C | Move A from C to table] | Taking action Move F from table to A | Moved to state -> Stack 1: [A, F], Stack 2: [C], Stack 3: [D, E, B] | Plan so far [Move B from A to E | Move A from F to table | Move F from C to table | Move F from table to A] | Taking action Move D from table to A | Moved to state -> Stack 1: [A, D], Stack 2: [B], Stack 3: [E], Stack 4: [F, C] | Plan so far [Move B from A to E | Move A from F to table | Move F from C to table | Move C from table to F | Move B from E to table | Move E from D to table | Move D from table to A] | Exploring action Move F from table to D | New state -> Invalid | Exploring action Move E from table to D | New state -> Stack 1: [A, D, E], Stack 2: [B], Stack 3: [F, C] | Exploring action Move A from table to C | New state -> Invalid | Exploring action Move B from table to D | New state -> Stack 1: [A, D, B], Stack 2: [E], Stack 3: [F, C] | Exploring action Move B from table to E | New state -> Stack 1: [A, D], Stack 2: [E, B], Stack 3: [F, C] | Taking action Move F from C to B | Moved to state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, E, B, F] | Plan so far [Move B from A to E | Move A from F to table | Move F from C to B] | Exploring action Move F from B to C | New state -> Stack 1: [A], Stack 2: [C, F], Stack 3: [D, E, B] | Exploring action Move F from B to A | New state -> Stack 1: [A, F], Stack 2: [C], Stack 3: [D, E, B] | Exploring action Move B from E to A | New state -> Invalid | Exploring action Move F from B to table | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, E, B], Stack 4: [F] | Taking action Move F from B to table | Moved to state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, E, B], Stack 4: [F] | Plan so far [Move B from A to E | Move A from F to table | Move F from C to B | Move F from B to table] | Taking action Move E from table to D | Moved to state -> Stack 1: [A, D, E], Stack 2: [B], Stack 3: [F, C] | Plan so far [Move B from A to E | Move A from F to table | Move F from C to table | Move C from table to F | Move B from E to table | Move E from D to table | Move D from table to A | Move E from table to D] | Exploring action Move E from D to B | New state -> Stack 1: [A, D], Stack 2: [B, E], Stack 3: [F, C] | Exploring action Move A from table to B | New state -> Invalid | Exploring action Move B from table to E | New state -> Stack 1: [A, D, E, B], Stack 2: [F, C] | Exploring action Move E from D to table | New state -> Stack 1: [A, D], Stack 2: [B], Stack 3: [E], Stack 4: [F, C] | Taking action Move B from table to E | Moved to state -> Stack 1: [A, D, E, B], Stack 2: [F, C] | Plan so far [Move B from A to E | Move A from F to table | Move F from C to table | Move C from table to F | Move B from E to table | Move E from D to table | Move D from table to A | Move E from table to D | Move B from table to E] | Reached goal state!",
        "system2_states_v1": 76
    },
    {
        "idx": 822,
        "start": [
            [
                "table",
                "A",
                "E",
                "C",
                "F",
                "B",
                "G"
            ],
            [
                "table",
                "D"
            ]
        ],
        "goal": [
            [
                "table",
                "A",
                "F"
            ],
            [
                "table",
                "B",
                "E",
                "C",
                "D",
                "G"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": false,
                "on": -1,
                "under": "E",
                "ontable": true
            },
            "B": {
                "clear": false,
                "on": "F",
                "under": "G",
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": "E",
                "under": "F",
                "ontable": false
            },
            "D": {
                "clear": true,
                "on": -1,
                "under": -1,
                "ontable": true
            },
            "E": {
                "clear": false,
                "on": "A",
                "under": "C",
                "ontable": false
            },
            "F": {
                "clear": false,
                "on": "C",
                "under": "B",
                "ontable": false
            },
            "G": {
                "clear": true,
                "on": "B",
                "under": -1,
                "ontable": false
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": false,
                "on": -1,
                "under": "F",
                "ontable": true
            },
            "B": {
                "clear": false,
                "on": -1,
                "under": "E",
                "ontable": true
            },
            "C": {
                "clear": false,
                "on": "E",
                "under": "D",
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": "C",
                "under": "G",
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": "B",
                "under": "C",
                "ontable": false
            },
            "F": {
                "clear": true,
                "on": "A",
                "under": -1,
                "ontable": false
            },
            "G": {
                "clear": true,
                "on": "D",
                "under": -1,
                "ontable": false
            }
        },
        "plan_len": 9,
        "num_blocks": 7,
        "prompt": "The initial state:\nThe hand is empty.\nA is on the table. E is on A. C is on E. F is on C. B is on F. G is on B. G is clear.\nD is on the table. D is clear.\n\nThe goal is:\nA is on the table. F is on A. F is clear.\nB is on the table. E is on B. C is on E. D is on C. G is on D. G is clear.\n",
        "system1_plan": "Move G from B to table | Move B from F to table | Move F from C to table | Move C from E to table | Move E from A to B | Move F from table to A | Move C from table to E | Move D from table to C | Move G from table to D",
        "system1_states": 9,
        "system2_plan_v1": "Moved to state -> Stack 1: [A, E, C, F, B, G], Stack 2: [D] | Plan so far [] | Exploring action Move D from table to G | New state -> Stack 1: [A, E, C, F, B, G, D] | Exploring action Move G from B to table | New state -> Stack 1: [A, E, C, F, B], Stack 2: [D], Stack 3: [G] | Exploring action Move C from E to table | New state -> Invalid | Exploring action Move G from B to D | New state -> Stack 1: [A, E, C, F, B], Stack 2: [D, G] | Exploring action Move B from F to D | New state -> Invalid | Taking action Move G from B to table | Moved to state -> Stack 1: [A, E, C, F, B], Stack 2: [D], Stack 3: [G] | Plan so far [Move G from B to table] | Exploring action Move B from F to G | New state -> Stack 1: [A, E, C, F], Stack 2: [D], Stack 3: [G, B] | Exploring action Move C from E to D | New state -> Invalid | Exploring action Move C from E to table | New state -> Invalid | Exploring action Move G from table to D | New state -> Stack 1: [A, E, C, F, B], Stack 2: [D, G] | Exploring action Move B from F to table | New state -> Stack 1: [A, E, C, F], Stack 2: [B], Stack 3: [D], Stack 4: [G] | Taking action Move G from B to D | Moved to state -> Stack 1: [A, E, C, F, B], Stack 2: [D, G] | Plan so far [Move G from B to D] | Exploring action Move B from F to G | New state -> Stack 1: [A, E, C, F], Stack 2: [D, G, B] | Exploring action Move D from table to B | New state -> Invalid | Exploring action Move G from D to table | New state -> Stack 1: [A, E, C, F, B], Stack 2: [D], Stack 3: [G] | Exploring action Move B from F to table | New state -> Stack 1: [A, E, C, F], Stack 2: [B], Stack 3: [D, G] | Taking action Move B from F to table | Moved to state -> Stack 1: [A, E, C, F], Stack 2: [B], Stack 3: [D], Stack 4: [G] | Plan so far [Move G from B to table | Move B from F to table] | Exploring action Move A from table to F | New state -> Invalid | Exploring action Move F from C to table | New state -> Stack 1: [A, E, C], Stack 2: [B], Stack 3: [D], Stack 4: [F], Stack 5: [G] | Exploring action Move E from A to F | New state -> Invalid | Exploring action Move G from table to D | New state -> Stack 1: [A, E, C, F], Stack 2: [B], Stack 3: [D, G] | Exploring action Move F from C to B | New state -> Stack 1: [A, E, C], Stack 2: [B, F], Stack 3: [D], Stack 4: [G] | Taking action Move B from F to table | Moved to state -> Stack 1: [A, E, C, F], Stack 2: [B], Stack 3: [D, G] | Plan so far [Move G from B to D | Move B from F to table] | Exploring action Move F from C to table | New state -> Stack 1: [A, E, C], Stack 2: [B], Stack 3: [D, G], Stack 4: [F] | Exploring action Move F from C to B | New state -> Stack 1: [A, E, C], Stack 2: [B, F], Stack 3: [D, G] | Exploring action Move A from table to B | New state -> Invalid | Exploring action Move G from D to table | New state -> Stack 1: [A, E, C, F], Stack 2: [B], Stack 3: [D], Stack 4: [G] | Taking action Move F from C to table | Moved to state -> Stack 1: [A, E, C], Stack 2: [B], Stack 3: [D], Stack 4: [F], Stack 5: [G] | Plan so far [Move G from B to table | Move B from F to table | Move F from C to table] | Exploring action Move A from table to F | New state -> Invalid | Exploring action Move E from A to F | New state -> Invalid | Exploring action Move C from E to table | New state -> Stack 1: [A, E], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [F], Stack 6: [G] | Exploring action Move C from E to B | New state -> Stack 1: [A, E], Stack 2: [B, C], Stack 3: [D], Stack 4: [F], Stack 5: [G] | Exploring action Move D from table to C | New state -> Stack 1: [A, E, C, D], Stack 2: [B], Stack 3: [F], Stack 4: [G] | Taking action Move F from C to table | Moved to state -> Stack 1: [A, E, C], Stack 2: [B], Stack 3: [D, G], Stack 4: [F] | Plan so far [Move G from B to D | Move B from F to table | Move F from C to table] | Exploring action Move C from E to table | New state -> Stack 1: [A, E], Stack 2: [B], Stack 3: [C], Stack 4: [D, G], Stack 5: [F] | Exploring action Move C from E to B | New state -> Stack 1: [A, E], Stack 2: [B, C], Stack 3: [D, G], Stack 4: [F] | Exploring action Move A from table to C | New state -> Invalid | Exploring action Move C from E to F | New state -> Stack 1: [A, E], Stack 2: [B], Stack 3: [D, G], Stack 4: [F, C] | Taking action Move C from E to table | Moved to state -> Stack 1: [A, E], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [F], Stack 6: [G] | Plan so far [Move G from B to table | Move B from F to table | Move F from C to table | Move C from E to table] | Exploring action Move G from table to D | New state -> Stack 1: [A, E], Stack 2: [B], Stack 3: [C], Stack 4: [D, G], Stack 5: [F] | Exploring action Move E from A to B | New state -> Stack 1: [A], Stack 2: [B, E], Stack 3: [C], Stack 4: [D], Stack 5: [F], Stack 6: [G] | Exploring action Move A from table to F | New state -> Invalid | Exploring action Move E from A to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F], Stack 7: [G] | Taking action Move E from A to B | Moved to state -> Stack 1: [A], Stack 2: [B, E], Stack 3: [C], Stack 4: [D], Stack 5: [F], Stack 6: [G] | Plan so far [Move G from B to table | Move B from F to table | Move F from C to table | Move C from E to table | Move E from A to B] | Exploring action Move B from table to C | New state -> Invalid | Exploring action Move C from table to E | New state -> Stack 1: [A], Stack 2: [B, E, C], Stack 3: [D], Stack 4: [F], Stack 5: [G] | Exploring action Move G from table to D | New state -> Stack 1: [A], Stack 2: [B, E], Stack 3: [C], Stack 4: [D, G], Stack 5: [F] | Exploring action Move F from table to A | New state -> Stack 1: [A, F], Stack 2: [B, E], Stack 3: [C], Stack 4: [D], Stack 5: [G] | Taking action Move F from table to A | Moved to state -> Stack 1: [A, F], Stack 2: [B, E], Stack 3: [C], Stack 4: [D], Stack 5: [G] | Plan so far [Move G from B to table | Move B from F to table | Move F from C to table | Move C from E to table | Move E from A to B | Move F from table to A] | Exploring action Move G from table to D | New state -> Stack 1: [A, F], Stack 2: [B, E], Stack 3: [C], Stack 4: [D, G] | Exploring action Move C from table to E | New state -> Stack 1: [A, F], Stack 2: [B, E, C], Stack 3: [D], Stack 4: [G] | Exploring action Move D from table to E | New state -> Stack 1: [A, F], Stack 2: [B, E, D], Stack 3: [C], Stack 4: [G] | Exploring action Move A from table to E | New state -> Invalid | Exploring action Move B from table to F | New state -> Invalid | Taking action Move C from table to E | Moved to state -> Stack 1: [A, F], Stack 2: [B, E, C], Stack 3: [D], Stack 4: [G] | Plan so far [Move G from B to table | Move B from F to table | Move F from C to table | Move C from E to table | Move E from A to B | Move F from table to A | Move C from table to E] | Exploring action Move G from table to D | New state -> Stack 1: [A, F], Stack 2: [B, E, C], Stack 3: [D, G] | Exploring action Move D from table to C | New state -> Stack 1: [A, F], Stack 2: [B, E, C, D], Stack 3: [G] | Exploring action Move B from table to C | New state -> Invalid | Exploring action Move B from table to D | New state -> Invalid | Exploring action Move D from table to G | New state -> Stack 1: [A, F], Stack 2: [B, E, C], Stack 3: [G, D] | Taking action Move D from table to C | Moved to state -> Stack 1: [A, F], Stack 2: [B, E, C, D], Stack 3: [G] | Plan so far [Move G from B to table | Move B from F to table | Move F from C to table | Move C from E to table | Move E from A to B | Move F from table to A | Move C from table to E | Move D from table to C] | Exploring action Move E from B to D | New state -> Invalid | Exploring action Move D from C to table | New state -> Stack 1: [A, F], Stack 2: [B, E, C], Stack 3: [D], Stack 4: [G] | Exploring action Move G from table to D | New state -> Stack 1: [A, F], Stack 2: [B, E, C, D, G] | Exploring action Move A from table to G | New state -> Invalid | Exploring action Move D from C to G | New state -> Stack 1: [A, F], Stack 2: [B, E, C], Stack 3: [G, D] | Taking action Move G from table to D | Moved to state -> Stack 1: [A, F], Stack 2: [B, E, C, D, G] | Plan so far [Move G from B to table | Move B from F to table | Move F from C to table | Move C from E to table | Move E from A to B | Move F from table to A | Move C from table to E | Move D from table to C | Move G from table to D] | Reached goal state!",
        "system2_states_v1": 55
    },
    {
        "idx": 596,
        "start": [
            [
                "table",
                "B",
                "A",
                "C",
                "D"
            ],
            [
                "table",
                "E"
            ]
        ],
        "goal": [
            [
                "table",
                "A",
                "E",
                "B",
                "D",
                "C"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": false,
                "on": "B",
                "under": "C",
                "ontable": false
            },
            "B": {
                "clear": false,
                "on": -1,
                "under": "A",
                "ontable": true
            },
            "C": {
                "clear": false,
                "on": "A",
                "under": "D",
                "ontable": false
            },
            "D": {
                "clear": true,
                "on": "C",
                "under": -1,
                "ontable": false
            },
            "E": {
                "clear": true,
                "on": -1,
                "under": -1,
                "ontable": true
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": false,
                "on": -1,
                "under": "E",
                "ontable": true
            },
            "B": {
                "clear": false,
                "on": "E",
                "under": "D",
                "ontable": false
            },
            "C": {
                "clear": true,
                "on": "D",
                "under": -1,
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": "B",
                "under": "C",
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": "A",
                "under": "B",
                "ontable": false
            }
        },
        "plan_len": 7,
        "num_blocks": 5,
        "prompt": "The initial state:\nThe hand is empty.\nB is on the table. A is on B. C is on A. D is on C. D is clear.\nE is on the table. E is clear.\n\nThe goal is:\nA is on the table. E is on A. B is on E. D is on B. C is on D. C is clear.\n",
        "system1_plan": "Move D from C to table | Move C from A to table | Move A from B to table | Move E from table to A | Move B from table to E | Move D from table to B | Move C from table to D",
        "system1_states": 7,
        "system2_plan_v1": "Moved to state -> Stack 1: [B, A, C, D], Stack 2: [E] | Plan so far [] | Exploring action Move C from A to E | New state -> Invalid | Exploring action Move D from C to E | New state -> Stack 1: [B, A, C], Stack 2: [E, D] | Exploring action Move E from table to D | New state -> Stack 1: [B, A, C, D, E] | Exploring action Move D from C to table | New state -> Stack 1: [B, A, C], Stack 2: [D], Stack 3: [E] | Taking action Move D from C to table | Moved to state -> Stack 1: [B, A, C], Stack 2: [D], Stack 3: [E] | Plan so far [Move D from C to table] | Exploring action Move C from A to D | New state -> Stack 1: [B, A], Stack 2: [D, C], Stack 3: [E] | Exploring action Move B from table to E | New state -> Invalid | Exploring action Move C from A to table | New state -> Stack 1: [B, A], Stack 2: [C], Stack 3: [D], Stack 4: [E] | Exploring action Move C from A to E | New state -> Stack 1: [B, A], Stack 2: [D], Stack 3: [E, C] | Exploring action Move A from B to D | New state -> Invalid | Taking action Move C from A to table | Moved to state -> Stack 1: [B, A], Stack 2: [C], Stack 3: [D], Stack 4: [E] | Plan so far [Move D from C to table | Move C from A to table] | Exploring action Move B from table to D | New state -> Invalid | Exploring action Move B from table to C | New state -> Invalid | Exploring action Move A from B to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Exploring action Move A from B to D | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, A], Stack 4: [E] | Exploring action Move C from table to D | New state -> Stack 1: [B, A], Stack 2: [D, C], Stack 3: [E] | Taking action Move C from A to D | Moved to state -> Stack 1: [B, A], Stack 2: [D, C], Stack 3: [E] | Plan so far [Move D from C to table | Move C from A to D] | Exploring action Move A from B to E | New state -> Stack 1: [B], Stack 2: [D, C], Stack 3: [E, A] | Exploring action Move D from table to E | New state -> Invalid | Exploring action Move B from table to A | New state -> Invalid | Exploring action Move C from D to table | New state -> Stack 1: [B, A], Stack 2: [C], Stack 3: [D], Stack 4: [E] | Exploring action Move A from B to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, C], Stack 4: [E] | Taking action Move A from B to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Plan so far [Move D from C to table | Move C from A to table | Move A from B to table] | Exploring action Move C from table to D | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, C], Stack 4: [E] | Exploring action Move E from table to A | New state -> Stack 1: [A, E], Stack 2: [B], Stack 3: [C], Stack 4: [D] | Exploring action Move A from table to D | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, A], Stack 4: [E] | Taking action Move A from B to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, C], Stack 4: [E] | Plan so far [Move D from C to table | Move C from A to D | Move A from B to table] | Exploring action Move C from D to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Exploring action Move E from table to A | New state -> Stack 1: [A, E], Stack 2: [B], Stack 3: [D, C] | Exploring action Move D from table to B | New state -> Invalid | Exploring action Move A from table to B | New state -> Stack 1: [B, A], Stack 2: [D, C], Stack 3: [E] | Exploring action Move D from table to E | New state -> Invalid | Taking action Move E from table to A | Moved to state -> Stack 1: [A, E], Stack 2: [B], Stack 3: [C], Stack 4: [D] | Plan so far [Move D from C to table | Move C from A to table | Move A from B to table | Move E from table to A] | Exploring action Move B from table to C | New state -> Stack 1: [A, E], Stack 2: [C, B], Stack 3: [D] | Exploring action Move B from table to E | New state -> Stack 1: [A, E, B], Stack 2: [C], Stack 3: [D] | Exploring action Move A from table to D | New state -> Invalid | Exploring action Move C from table to D | New state -> Stack 1: [A, E], Stack 2: [B], Stack 3: [D, C] | Taking action Move E from table to A | Moved to state -> Stack 1: [A, E], Stack 2: [B], Stack 3: [D, C] | Plan so far [Move D from C to table | Move C from A to D | Move A from B to table | Move E from table to A] | Exploring action Move E from A to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, C], Stack 4: [E] | Exploring action Move A from table to C | New state -> Invalid | Exploring action Move C from D to table | New state -> Stack 1: [A, E], Stack 2: [B], Stack 3: [C], Stack 4: [D] | Exploring action Move B from table to E | New state -> Stack 1: [A, E, B], Stack 2: [D, C] | Taking action Move B from table to E | Moved to state -> Stack 1: [A, E, B], Stack 2: [C], Stack 3: [D] | Plan so far [Move D from C to table | Move C from A to table | Move A from B to table | Move E from table to A | Move B from table to E] | Exploring action Move D from table to B | New state -> Stack 1: [A, E, B, D], Stack 2: [C] | Exploring action Move E from A to table | New state -> Invalid | Exploring action Move C from table to D | New state -> Stack 1: [A, E, B], Stack 2: [D, C] | Exploring action Move D from table to C | New state -> Stack 1: [A, E, B], Stack 2: [C, D] | Taking action Move B from table to E | Moved to state -> Stack 1: [A, E, B], Stack 2: [D, C] | Plan so far [Move D from C to table | Move C from A to D | Move A from B to table | Move E from table to A | Move B from table to E] | Exploring action Move E from A to B | New state -> Invalid | Exploring action Move B from E to table | New state -> Stack 1: [A, E], Stack 2: [B], Stack 3: [D, C] | Exploring action Move C from D to B | New state -> Stack 1: [A, E, B, C], Stack 2: [D] | Exploring action Move E from A to C | New state -> Invalid | Exploring action Move C from D to table | New state -> Stack 1: [A, E, B], Stack 2: [C], Stack 3: [D] | Taking action Move D from table to B | Moved to state -> Stack 1: [A, E, B, D], Stack 2: [C] | Plan so far [Move D from C to table | Move C from A to table | Move A from B to table | Move E from table to A | Move B from table to E | Move D from table to B] | Exploring action Move D from B to table | New state -> Stack 1: [A, E, B], Stack 2: [C], Stack 3: [D] | Exploring action Move C from table to D | New state -> Stack 1: [A, E, B, D, C] | Exploring action Move A from table to C | New state -> Invalid | Exploring action Move D from B to C | New state -> Stack 1: [A, E, B], Stack 2: [C, D] | Exploring action Move E from A to D | New state -> Invalid | Taking action Move C from table to D | Moved to state -> Stack 1: [A, E, B, D, C] | Plan so far [Move D from C to table | Move C from A to table | Move A from B to table | Move E from table to A | Move B from table to E | Move D from table to B | Move C from table to D] | Reached goal state!",
        "system2_states_v1": 49
    },
    {
        "idx": 680,
        "start": [
            [
                "table",
                "A",
                "B",
                "F"
            ],
            [
                "table",
                "D",
                "C"
            ],
            [
                "table",
                "E"
            ]
        ],
        "goal": [
            [
                "table",
                "B",
                "F",
                "D",
                "E",
                "A",
                "C"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": false,
                "on": -1,
                "under": "B",
                "ontable": true
            },
            "B": {
                "clear": false,
                "on": "A",
                "under": "F",
                "ontable": false
            },
            "C": {
                "clear": true,
                "on": "D",
                "under": -1,
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": -1,
                "under": "C",
                "ontable": true
            },
            "E": {
                "clear": true,
                "on": -1,
                "under": -1,
                "ontable": true
            },
            "F": {
                "clear": true,
                "on": "B",
                "under": -1,
                "ontable": false
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": false,
                "on": "E",
                "under": "C",
                "ontable": false
            },
            "B": {
                "clear": false,
                "on": -1,
                "under": "F",
                "ontable": true
            },
            "C": {
                "clear": true,
                "on": "A",
                "under": -1,
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": "F",
                "under": "E",
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": "D",
                "under": "A",
                "ontable": false
            },
            "F": {
                "clear": false,
                "on": "B",
                "under": "D",
                "ontable": false
            }
        },
        "plan_len": 8,
        "num_blocks": 6,
        "prompt": "The initial state:\nThe hand is empty.\nA is on the table. B is on A. F is on B. F is clear.\nD is on the table. C is on D. C is clear.\nE is on the table. E is clear.\n\nThe goal is:\nB is on the table. F is on B. D is on F. E is on D. A is on E. C is on A. C is clear.\n",
        "system1_plan": "Move F from B to table | Move C from D to table | Move B from A to table | Move F from table to B | Move D from table to F | Move E from table to D | Move A from table to E | Move C from table to A",
        "system1_states": 8,
        "system2_plan_v1": "Moved to state -> Stack 1: [A, B, F], Stack 2: [D, C], Stack 3: [E] | Plan so far [] | Exploring action Move D from table to F | New state -> Invalid | Exploring action Move F from B to table | New state -> Stack 1: [A, B], Stack 2: [D, C], Stack 3: [E], Stack 4: [F] | Exploring action Move D from table to C | New state -> Invalid | Exploring action Move C from D to table | New state -> Stack 1: [A, B, F], Stack 2: [C], Stack 3: [D], Stack 4: [E] | Exploring action Move F from B to C | New state -> Stack 1: [A, B], Stack 2: [D, C, F], Stack 3: [E] | Taking action Move C from D to table | Moved to state -> Stack 1: [A, B, F], Stack 2: [C], Stack 3: [D], Stack 4: [E] | Plan so far [Move C from D to table] | Exploring action Move D from table to F | New state -> Stack 1: [A, B, F, D], Stack 2: [C], Stack 3: [E] | Exploring action Move F from B to D | New state -> Stack 1: [A, B], Stack 2: [C], Stack 3: [D, F], Stack 4: [E] | Exploring action Move F from B to table | New state -> Stack 1: [A, B], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Exploring action Move A from table to E | New state -> Invalid | Taking action Move F from B to table | Moved to state -> Stack 1: [A, B], Stack 2: [D, C], Stack 3: [E], Stack 4: [F] | Plan so far [Move F from B to table] | Exploring action Move C from D to table | New state -> Stack 1: [A, B], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Exploring action Move B from A to E | New state -> Stack 1: [A], Stack 2: [D, C], Stack 3: [E, B], Stack 4: [F] | Exploring action Move A from table to F | New state -> Invalid | Exploring action Move A from table to B | New state -> Invalid | Exploring action Move B from A to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, C], Stack 4: [E], Stack 5: [F] | Taking action Move D from table to F | Moved to state -> Stack 1: [A, B, F, D], Stack 2: [C], Stack 3: [E] | Plan so far [Move C from D to table | Move D from table to F] | Exploring action Move E from table to C | New state -> Stack 1: [A, B, F, D], Stack 2: [C, E] | Exploring action Move B from A to D | New state -> Invalid | Exploring action Move E from table to D | New state -> Stack 1: [A, B, F, D, E], Stack 2: [C] | Exploring action Move C from table to D | New state -> Stack 1: [A, B, F, D, C], Stack 2: [E] | Taking action Move C from D to table | Moved to state -> Stack 1: [A, B], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Plan so far [Move F from B to table | Move C from D to table] | Exploring action Move B from A to D | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, B], Stack 4: [E], Stack 5: [F] | Exploring action Move B from A to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Exploring action Move B from A to C | New state -> Stack 1: [A], Stack 2: [C, B], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Exploring action Move A from table to E | New state -> Invalid | Taking action Move F from B to table | Moved to state -> Stack 1: [A, B], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Plan so far [Move C from D to table | Move F from B to table] | Taking action Move B from A to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, C], Stack 4: [E], Stack 5: [F] | Plan so far [Move F from B to table | Move B from A to table] | Exploring action Move C from D to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Exploring action Move D from table to C | New state -> Invalid | Exploring action Move C from D to A | New state -> Stack 1: [A, C], Stack 2: [B], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Exploring action Move D from table to A | New state -> Invalid | Exploring action Move F from table to B | New state -> Stack 1: [A], Stack 2: [B, F], Stack 3: [D, C], Stack 4: [E] | Taking action Move E from table to D | Moved to state -> Stack 1: [A, B, F, D, E], Stack 2: [C] | Plan so far [Move C from D to table | Move D from table to F | Move E from table to D] | Exploring action Move E from D to C | New state -> Stack 1: [A, B, F, D], Stack 2: [C, E] | Exploring action Move F from B to table | New state -> Invalid | Exploring action Move E from D to table | New state -> Stack 1: [A, B, F, D], Stack 2: [C], Stack 3: [E] | Exploring action Move C from table to E | New state -> Stack 1: [A, B, F, D, E, C] | Taking action Move B from A to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Plan so far [Move F from B to table | Move C from D to table | Move B from A to table] | Exploring action Move C from table to A | New state -> Stack 1: [A, C], Stack 2: [B], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Exploring action Move B from table to C | New state -> Stack 1: [A], Stack 2: [C, B], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Exploring action Move F from table to B | New state -> Stack 1: [A], Stack 2: [B, F], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Taking action Move C from D to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Plan so far [Move F from B to table | Move B from A to table | Move C from D to table] | Taking action Move F from table to B | Moved to state -> Stack 1: [A], Stack 2: [B, F], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Plan so far [Move F from B to table | Move C from D to table | Move B from A to table | Move F from table to B] | Exploring action Move B from table to D | New state -> Invalid | Exploring action Move C from table to E | New state -> Stack 1: [A], Stack 2: [B, F], Stack 3: [D], Stack 4: [E, C] | Exploring action Move C from table to A | New state -> Stack 1: [A, C], Stack 2: [B, F], Stack 3: [D], Stack 4: [E] | Exploring action Move B from table to C | New state -> Invalid | Exploring action Move D from table to F | New state -> Stack 1: [A], Stack 2: [B, F, D], Stack 3: [C], Stack 4: [E] | Taking action Move F from table to B | Moved to state -> Stack 1: [A], Stack 2: [B, F], Stack 3: [D, C], Stack 4: [E] | Plan so far [Move F from B to table | Move B from A to table | Move F from table to B] | Exploring action Move C from D to A | New state -> Stack 1: [A, C], Stack 2: [B, F], Stack 3: [D], Stack 4: [E] | Exploring action Move B from table to E | New state -> Invalid | Exploring action Move C from D to table | New state -> Stack 1: [A], Stack 2: [B, F], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Exploring action Move B from table to F | New state -> Invalid | Exploring action Move C from D to E | New state -> Stack 1: [A], Stack 2: [B, F], Stack 3: [D], Stack 4: [E, C] | Taking action Move D from table to F | Moved to state -> Stack 1: [A], Stack 2: [B, F, D], Stack 3: [C], Stack 4: [E] | Plan so far [Move F from B to table | Move C from D to table | Move B from A to table | Move F from table to B | Move D from table to F] | Exploring action Move B from table to D | New state -> Invalid | Exploring action Move F from B to E | New state -> Invalid | Exploring action Move D from F to table | New state -> Stack 1: [A], Stack 2: [B, F], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Exploring action Move C from table to A | New state -> Stack 1: [A, C], Stack 2: [B, F, D], Stack 3: [E] | Exploring action Move E from table to D | New state -> Stack 1: [A], Stack 2: [B, F, D, E], Stack 3: [C] | Taking action Move C from D to A | Moved to state -> Stack 1: [A, C], Stack 2: [B], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Plan so far [Move F from B to table | Move B from A to table | Move C from D to A] | Exploring action Move A from table to E | New state -> Invalid | Exploring action Move F from table to B | New state -> Stack 1: [A, C], Stack 2: [B, F], Stack 3: [D], Stack 4: [E] | Exploring action Move B from table to E | New state -> Stack 1: [A, C], Stack 2: [D], Stack 3: [E, B], Stack 4: [F] | Exploring action Move C from A to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Taking action Move C from D to table | Moved to state -> Stack 1: [A], Stack 2: [B, F], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Plan so far [Move F from B to table | Move B from A to table | Move F from table to B | Move C from D to table] | Taking action Move C from D to A | Moved to state -> Stack 1: [A, C], Stack 2: [B, F], Stack 3: [D], Stack 4: [E] | Plan so far [Move F from B to table | Move B from A to table | Move F from table to B | Move C from D to A] | Exploring action Move A from table to D | New state -> Invalid | Exploring action Move C from A to table | New state -> Stack 1: [A], Stack 2: [B, F], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Exploring action Move C from A to E | New state -> Stack 1: [A], Stack 2: [B, F], Stack 3: [D], Stack 4: [E, C] | Exploring action Move D from table to F | New state -> Stack 1: [A, C], Stack 2: [B, F, D], Stack 3: [E] | Exploring action Move B from table to D | New state -> Invalid | Taking action Move F from table to B | Moved to state -> Stack 1: [A, C], Stack 2: [B, F], Stack 3: [D], Stack 4: [E] | Plan so far [Move F from B to table | Move B from A to table | Move C from D to A | Move F from table to B] | Taking action Move E from table to D | Moved to state -> Stack 1: [A], Stack 2: [B, F, D, E], Stack 3: [C] | Plan so far [Move F from B to table | Move C from D to table | Move B from A to table | Move F from table to B | Move D from table to F | Move E from table to D] | Exploring action Move A from table to E | New state -> Stack 1: [B, F, D, E, A], Stack 2: [C] | Exploring action Move A from table to C | New state -> Stack 1: [B, F, D, E], Stack 2: [C, A] | Exploring action Move B from table to A | New state -> Invalid | Exploring action Move D from F to A | New state -> Invalid | Exploring action Move C from table to A | New state -> Stack 1: [A, C], Stack 2: [B, F, D, E] | Taking action Move D from table to F | Moved to state -> Stack 1: [A, C], Stack 2: [B, F, D], Stack 3: [E] | Plan so far [Move F from B to table | Move B from A to table | Move F from table to B | Move C from D to A | Move D from table to F] | Exploring action Move C from A to E | New state -> Stack 1: [A], Stack 2: [B, F, D], Stack 3: [E, C] | Exploring action Move C from A to table | New state -> Stack 1: [A], Stack 2: [B, F, D], Stack 3: [C], Stack 4: [E] | Exploring action Move E from table to D | New state -> Stack 1: [A, C], Stack 2: [B, F, D, E] | Exploring action Move A from table to E | New state -> Invalid | Taking action Move A from table to E | Moved to state -> Stack 1: [B, F, D, E, A], Stack 2: [C] | Plan so far [Move F from B to table | Move C from D to table | Move B from A to table | Move F from table to B | Move D from table to F | Move E from table to D | Move A from table to E] | Exploring action Move C from table to A | New state -> Stack 1: [B, F, D, E, A, C] | Exploring action Move A from E to C | New state -> Stack 1: [B, F, D, E], Stack 2: [C, A] | Exploring action Move D from F to A | New state -> Invalid | Exploring action Move D from F to C | New state -> Invalid | Exploring action Move A from E to table | New state -> Stack 1: [A], Stack 2: [B, F, D, E], Stack 3: [C] | Taking action Move C from table to A | Moved to state -> Stack 1: [B, F, D, E, A, C] | Plan so far [Move F from B to table | Move C from D to table | Move B from A to table | Move F from table to B | Move D from table to F | Move E from table to D | Move A from table to E | Move C from table to A] | Reached goal state!",
        "system2_states_v1": 72
    },
    {
        "idx": 781,
        "start": [
            [
                "table",
                "D",
                "B",
                "A"
            ],
            [
                "table",
                "F",
                "C",
                "E"
            ]
        ],
        "goal": [
            [
                "table",
                "C",
                "F",
                "E",
                "D",
                "A",
                "B"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": true,
                "on": "B",
                "under": -1,
                "ontable": false
            },
            "B": {
                "clear": false,
                "on": "D",
                "under": "A",
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": "F",
                "under": "E",
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": -1,
                "under": "B",
                "ontable": true
            },
            "E": {
                "clear": true,
                "on": "C",
                "under": -1,
                "ontable": false
            },
            "F": {
                "clear": false,
                "on": -1,
                "under": "C",
                "ontable": true
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": false,
                "on": "D",
                "under": "B",
                "ontable": false
            },
            "B": {
                "clear": true,
                "on": "A",
                "under": -1,
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": -1,
                "under": "F",
                "ontable": true
            },
            "D": {
                "clear": false,
                "on": "E",
                "under": "A",
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": "F",
                "under": "D",
                "ontable": false
            },
            "F": {
                "clear": false,
                "on": "C",
                "under": "E",
                "ontable": false
            }
        },
        "plan_len": 9,
        "num_blocks": 6,
        "prompt": "The initial state:\nThe hand is empty.\nD is on the table. B is on D. A is on B. A is clear.\nF is on the table. C is on F. E is on C. E is clear.\n\nThe goal is:\nC is on the table. F is on C. E is on F. D is on E. A is on D. B is on A. B is clear.\n",
        "system1_plan": "Move A from B to table | Move E from C to table | Move C from F to table | Move F from table to C | Move E from table to F | Move B from D to table | Move D from table to E | Move A from table to D | Move B from table to A",
        "system1_states": 9,
        "system2_plan_v1": "Moved to state -> Stack 1: [D, B, A], Stack 2: [F, C, E] | Plan so far [] | Exploring action Move A from B to table | New state -> Stack 1: [A], Stack 2: [D, B], Stack 3: [F, C, E] | Exploring action Move E from C to table | New state -> Stack 1: [D, B, A], Stack 2: [E], Stack 3: [F, C] | Exploring action Move F from table to A | New state -> Invalid | Exploring action Move A from B to E | New state -> Stack 1: [D, B], Stack 2: [F, C, E, A] | Taking action Move A from B to table | Moved to state -> Stack 1: [A], Stack 2: [D, B], Stack 3: [F, C, E] | Plan so far [Move A from B to table] | Exploring action Move B from D to A | New state -> Stack 1: [A, B], Stack 2: [D], Stack 3: [F, C, E] | Exploring action Move B from D to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D], Stack 4: [F, C, E] | Exploring action Move D from table to E | New state -> Invalid | Exploring action Move E from C to table | New state -> Stack 1: [A], Stack 2: [D, B], Stack 3: [E], Stack 4: [F, C] | Taking action Move E from C to table | Moved to state -> Stack 1: [D, B, A], Stack 2: [E], Stack 3: [F, C] | Plan so far [Move E from C to table] | Exploring action Move D from table to E | New state -> Invalid | Exploring action Move F from table to A | New state -> Invalid | Exploring action Move A from B to E | New state -> Stack 1: [D, B], Stack 2: [E, A], Stack 3: [F, C] | Exploring action Move A from B to table | New state -> Stack 1: [A], Stack 2: [D, B], Stack 3: [E], Stack 4: [F, C] | Exploring action Move C from F to table | New state -> Stack 1: [C], Stack 2: [D, B, A], Stack 3: [E], Stack 4: [F] | Taking action Move B from D to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [D], Stack 4: [F, C, E] | Plan so far [Move A from B to table | Move B from D to table] | Exploring action Move E from C to B | New state -> Stack 1: [A], Stack 2: [B, E], Stack 3: [D], Stack 4: [F, C] | Exploring action Move E from C to D | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, E], Stack 4: [F, C] | Exploring action Move F from table to A | New state -> Invalid | Exploring action Move E from C to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D], Stack 4: [E], Stack 5: [F, C] | Taking action Move B from D to A | Moved to state -> Stack 1: [A, B], Stack 2: [D], Stack 3: [F, C, E] | Plan so far [Move A from B to table | Move B from D to A] | Exploring action Move E from C to D | New state -> Stack 1: [A, B], Stack 2: [D, E], Stack 3: [F, C] | Exploring action Move B from A to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D], Stack 4: [F, C, E] | Exploring action Move A from table to B | New state -> Invalid | Exploring action Move E from C to table | New state -> Stack 1: [A, B], Stack 2: [D], Stack 3: [E], Stack 4: [F, C] | Exploring action Move F from table to B | New state -> Invalid | Taking action Move C from F to table | Moved to state -> Stack 1: [C], Stack 2: [D, B, A], Stack 3: [E], Stack 4: [F] | Plan so far [Move E from C to table | Move C from F to table] | Exploring action Move B from D to E | New state -> Invalid | Exploring action Move A from B to table | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, B], Stack 4: [E], Stack 5: [F] | Exploring action Move A from B to E | New state -> Stack 1: [C], Stack 2: [D, B], Stack 3: [E, A], Stack 4: [F] | Exploring action Move F from table to C | New state -> Stack 1: [C, F], Stack 2: [D, B, A], Stack 3: [E] | Taking action Move E from C to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [D], Stack 4: [E], Stack 5: [F, C] | Plan so far [Move A from B to table | Move B from D to table | Move E from C to table] | Exploring action Move C from F to D | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, C], Stack 4: [E], Stack 5: [F] | Exploring action Move C from F to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Exploring action Move F from table to E | New state -> Invalid | Exploring action Move C from F to E | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D], Stack 4: [E, C], Stack 5: [F] | Taking action Move F from table to C | Moved to state -> Stack 1: [C, F], Stack 2: [D, B, A], Stack 3: [E] | Plan so far [Move E from C to table | Move C from F to table | Move F from table to C] | Exploring action Move A from B to F | New state -> Stack 1: [C, F, A], Stack 2: [D, B], Stack 3: [E] | Exploring action Move A from B to table | New state -> Stack 1: [A], Stack 2: [C, F], Stack 3: [D, B], Stack 4: [E] | Exploring action Move E from table to F | New state -> Stack 1: [C, F, E], Stack 2: [D, B, A] | Exploring action Move C from table to F | New state -> Invalid | Taking action Move C from F to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Plan so far [Move A from B to table | Move B from D to table | Move E from C to table | Move C from F to table] | Exploring action Move A from table to B | New state -> Stack 1: [B, A], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Exploring action Move F from table to C | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, F], Stack 4: [D], Stack 5: [E] | Exploring action Move B from table to A | New state -> Stack 1: [A, B], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Taking action Move E from C to table | Moved to state -> Stack 1: [A], Stack 2: [D, B], Stack 3: [E], Stack 4: [F, C] | Plan so far [Move A from B to table | Move E from C to table] | Exploring action Move B from D to A | New state -> Stack 1: [A, B], Stack 2: [D], Stack 3: [E], Stack 4: [F, C] | Exploring action Move F from table to A | New state -> Invalid | Exploring action Move F from table to C | New state -> Invalid | Exploring action Move B from D to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D], Stack 4: [E], Stack 5: [F, C] | Exploring action Move C from F to table | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, B], Stack 4: [E], Stack 5: [F] | Taking action Move F from table to C | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, F], Stack 4: [D], Stack 5: [E] | Plan so far [Move A from B to table | Move B from D to table | Move E from C to table | Move C from F to table | Move F from table to C] | Exploring action Move A from table to E | New state -> Stack 1: [B], Stack 2: [C, F], Stack 3: [D], Stack 4: [E, A] | Exploring action Move B from table to A | New state -> Stack 1: [A, B], Stack 2: [C, F], Stack 3: [D], Stack 4: [E] | Exploring action Move E from table to F | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, F, E], Stack 4: [D] | Exploring action Move C from table to B | New state -> Invalid | Taking action Move B from D to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [D], Stack 4: [E], Stack 5: [F, C] | Plan so far [Move A from B to table | Move E from C to table | Move B from D to table] | Taking action Move C from F to table | Moved to state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, B], Stack 4: [E], Stack 5: [F] | Plan so far [Move A from B to table | Move E from C to table | Move C from F to table] | Exploring action Move D from table to C | New state -> Invalid | Exploring action Move D from table to A | New state -> Invalid | Exploring action Move B from D to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Exploring action Move F from table to C | New state -> Stack 1: [A], Stack 2: [C, F], Stack 3: [D, B], Stack 4: [E] | Exploring action Move B from D to A | New state -> Stack 1: [A, B], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Taking action Move B from D to A | Moved to state -> Stack 1: [A, B], Stack 2: [D], Stack 3: [E], Stack 4: [F, C] | Plan so far [Move A from B to table | Move E from C to table | Move B from D to A] | Exploring action Move A from table to B | New state -> Invalid | Exploring action Move F from table to C | New state -> Invalid | Exploring action Move C from F to table | New state -> Stack 1: [A, B], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Exploring action Move C from F to D | New state -> Stack 1: [A, B], Stack 2: [D, C], Stack 3: [E], Stack 4: [F] | Exploring action Move B from A to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D], Stack 4: [E], Stack 5: [F, C] | Taking action Move A from B to table | Moved to state -> Stack 1: [A], Stack 2: [D, B], Stack 3: [E], Stack 4: [F, C] | Plan so far [Move E from C to table | Move A from B to table] | Taking action Move E from C to table | Moved to state -> Stack 1: [A, B], Stack 2: [D], Stack 3: [E], Stack 4: [F, C] | Plan so far [Move A from B to table | Move B from D to A | Move E from C to table] | Taking action Move C from F to table | Moved to state -> Stack 1: [A, B], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Plan so far [Move A from B to table | Move E from C to table | Move B from D to A | Move C from F to table] | Exploring action Move B from A to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Exploring action Move F from table to C | New state -> Stack 1: [A, B], Stack 2: [C, F], Stack 3: [D], Stack 4: [E] | Exploring action Move A from table to B | New state -> Invalid | Exploring action Move A from table to E | New state -> Invalid | Exploring action Move B from A to D | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, B], Stack 4: [E], Stack 5: [F] | Taking action Move A from B to table | Moved to state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, B], Stack 4: [E], Stack 5: [F] | Plan so far [Move E from C to table | Move C from F to table | Move A from B to table] | Taking action Move F from table to C | Moved to state -> Stack 1: [A], Stack 2: [C, F], Stack 3: [D, B], Stack 4: [E] | Plan so far [Move A from B to table | Move E from C to table | Move C from F to table | Move F from table to C] | Exploring action Move B from D to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, F], Stack 4: [D], Stack 5: [E] | Exploring action Move B from D to A | New state -> Stack 1: [A, B], Stack 2: [C, F], Stack 3: [D], Stack 4: [E] | Exploring action Move C from table to A | New state -> Invalid | Exploring action Move E from table to F | New state -> Stack 1: [A], Stack 2: [C, F, E], Stack 3: [D, B] | Exploring action Move C from table to E | New state -> Invalid | Taking action Move F from table to C | Moved to state -> Stack 1: [A, B], Stack 2: [C, F], Stack 3: [D], Stack 4: [E] | Plan so far [Move A from B to table | Move E from C to table | Move B from D to A | Move C from F to table | Move F from table to C] | Exploring action Move A from table to E | New state -> Invalid | Exploring action Move B from A to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, F], Stack 4: [D], Stack 5: [E] | Exploring action Move B from A to E | New state -> Stack 1: [A], Stack 2: [C, F], Stack 3: [D], Stack 4: [E, B] | Exploring action Move C from table to B | New state -> Invalid | Exploring action Move E from table to F | New state -> Stack 1: [A, B], Stack 2: [C, F, E], Stack 3: [D] | Taking action Move E from table to F | Moved to state -> Stack 1: [A], Stack 2: [C, F, E], Stack 3: [D, B] | Plan so far [Move A from B to table | Move E from C to table | Move C from F to table | Move F from table to C | Move E from table to F] | Exploring action Move F from C to A | New state -> Invalid | Exploring action Move B from D to A | New state -> Stack 1: [A, B], Stack 2: [C, F, E], Stack 3: [D] | Exploring action Move C from table to B | New state -> Invalid | Exploring action Move B from D to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, F, E], Stack 4: [D] | Exploring action Move B from D to E | New state -> Stack 1: [A], Stack 2: [C, F, E, B], Stack 3: [D] | Taking action Move E from table to F | Moved to state -> Stack 1: [A, B], Stack 2: [C, F, E], Stack 3: [D] | Plan so far [Move A from B to table | Move E from C to table | Move B from D to A | Move C from F to table | Move F from table to C | Move E from table to F] | Exploring action Move B from A to E | New state -> Stack 1: [A], Stack 2: [C, F, E, B], Stack 3: [D] | Exploring action Move D from table to E | New state -> Stack 1: [A, B], Stack 2: [C, F, E, D] | Exploring action Move B from A to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, F, E], Stack 4: [D] | Exploring action Move F from C to table | New state -> Invalid | Taking action Move B from D to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, F, E], Stack 4: [D] | Plan so far [Move A from B to table | Move E from C to table | Move C from F to table | Move F from table to C | Move E from table to F | Move B from D to table] | Exploring action Move F from C to A | New state -> Invalid | Exploring action Move A from table to E | New state -> Stack 1: [B], Stack 2: [C, F, E, A], Stack 3: [D] | Exploring action Move F from C to table | New state -> Invalid | Exploring action Move D from table to E | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, F, E, D] | Exploring action Move B from table to A | New state -> Stack 1: [A, B], Stack 2: [C, F, E], Stack 3: [D] | Taking action Move B from D to A | Moved to state -> Stack 1: [A, B], Stack 2: [C, F, E], Stack 3: [D] | Plan so far [Move A from B to table | Move E from C to table | Move C from F to table | Move F from table to C | Move E from table to F | Move B from D to A] | Taking action Move D from table to E | Moved to state -> Stack 1: [A, B], Stack 2: [C, F, E, D] | Plan so far [Move A from B to table | Move E from C to table | Move B from D to A | Move C from F to table | Move F from table to C | Move E from table to F | Move D from table to E] | Exploring action Move E from F to D | New state -> Invalid | Exploring action Move D from E to table | New state -> Stack 1: [A, B], Stack 2: [C, F, E], Stack 3: [D] | Exploring action Move B from A to D | New state -> Stack 1: [A], Stack 2: [C, F, E, D, B] | Exploring action Move B from A to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, F, E, D] | Taking action Move D from table to E | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, F, E, D] | Plan so far [Move A from B to table | Move E from C to table | Move C from F to table | Move F from table to C | Move E from table to F | Move B from D to table | Move D from table to E] | Exploring action Move F from C to D | New state -> Invalid | Exploring action Move A from table to B | New state -> Stack 1: [B, A], Stack 2: [C, F, E, D] | Exploring action Move A from table to D | New state -> Stack 1: [B], Stack 2: [C, F, E, D, A] | Exploring action Move B from table to A | New state -> Stack 1: [A, B], Stack 2: [C, F, E, D] | Exploring action Move F from C to B | New state -> Invalid | Taking action Move E from table to F | Moved to state -> Stack 1: [C, F, E], Stack 2: [D, B, A] | Plan so far [Move E from C to table | Move C from F to table | Move F from table to C | Move E from table to F] | Exploring action Move E from F to table | New state -> Stack 1: [C, F], Stack 2: [D, B, A], Stack 3: [E] | Exploring action Move A from B to E | New state -> Stack 1: [C, F, E, A], Stack 2: [D, B] | Exploring action Move F from C to A | New state -> Invalid | Exploring action Move A from B to table | New state -> Stack 1: [A], Stack 2: [C, F, E], Stack 3: [D, B] | Taking action Move A from table to D | Moved to state -> Stack 1: [B], Stack 2: [C, F, E, D, A] | Plan so far [Move A from B to table | Move E from C to table | Move C from F to table | Move F from table to C | Move E from table to F | Move B from D to table | Move D from table to E | Move A from table to D] | Exploring action Move B from table to A | New state -> Stack 1: [C, F, E, D, A, B] | Exploring action Move A from D to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, F, E, D] | Exploring action Move A from D to B | New state -> Stack 1: [B, A], Stack 2: [C, F, E, D] | Exploring action Move F from C to B | New state -> Invalid | Taking action Move B from table to A | Moved to state -> Stack 1: [C, F, E, D, A, B] | Plan so far [Move A from B to table | Move E from C to table | Move C from F to table | Move F from table to C | Move E from table to F | Move B from D to table | Move D from table to E | Move A from table to D | Move B from table to A] | Reached goal state!",
        "system2_states_v1": 102
    },
    {
        "idx": 592,
        "start": [
            [
                "table",
                "B",
                "D"
            ],
            [
                "table",
                "C",
                "A",
                "E"
            ]
        ],
        "goal": [
            [
                "table",
                "C",
                "E",
                "B",
                "D",
                "A"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": false,
                "on": "C",
                "under": "E",
                "ontable": false
            },
            "B": {
                "clear": false,
                "on": -1,
                "under": "D",
                "ontable": true
            },
            "C": {
                "clear": false,
                "on": -1,
                "under": "A",
                "ontable": true
            },
            "D": {
                "clear": true,
                "on": "B",
                "under": -1,
                "ontable": false
            },
            "E": {
                "clear": true,
                "on": "A",
                "under": -1,
                "ontable": false
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": true,
                "on": "D",
                "under": -1,
                "ontable": false
            },
            "B": {
                "clear": false,
                "on": "E",
                "under": "D",
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": -1,
                "under": "E",
                "ontable": true
            },
            "D": {
                "clear": false,
                "on": "B",
                "under": "A",
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": "C",
                "under": "B",
                "ontable": false
            }
        },
        "plan_len": 7,
        "num_blocks": 5,
        "prompt": "The initial state:\nThe hand is empty.\nB is on the table. D is on B. D is clear.\nC is on the table. A is on C. E is on A. E is clear.\n\nThe goal is:\nC is on the table. E is on C. B is on E. D is on B. A is on D. A is clear.\n",
        "system1_plan": "Move E from A to table | Move D from B to table | Move A from C to table | Move E from table to C | Move B from table to E | Move D from table to B | Move A from table to D",
        "system1_states": 7,
        "system2_plan_v1": "Moved to state -> Stack 1: [B, D], Stack 2: [C, A, E] | Plan so far [] | Exploring action Move B from table to D | New state -> Invalid | Exploring action Move D from B to E | New state -> Stack 1: [B], Stack 2: [C, A, E, D] | Exploring action Move D from B to table | New state -> Stack 1: [B], Stack 2: [C, A, E], Stack 3: [D] | Exploring action Move E from A to table | New state -> Stack 1: [B, D], Stack 2: [C, A], Stack 3: [E] | Taking action Move D from B to table | Moved to state -> Stack 1: [B], Stack 2: [C, A, E], Stack 3: [D] | Plan so far [Move D from B to table] | Exploring action Move E from A to B | New state -> Stack 1: [B, E], Stack 2: [C, A], Stack 3: [D] | Exploring action Move A from C to B | New state -> Invalid | Exploring action Move A from C to E | New state -> Invalid | Exploring action Move E from A to table | New state -> Stack 1: [B], Stack 2: [C, A], Stack 3: [D], Stack 4: [E] | Exploring action Move E from A to D | New state -> Stack 1: [B], Stack 2: [C, A], Stack 3: [D, E] | Taking action Move E from A to table | Moved to state -> Stack 1: [B, D], Stack 2: [C, A], Stack 3: [E] | Plan so far [Move E from A to table] | Exploring action Move A from C to D | New state -> Stack 1: [B, D, A], Stack 2: [C], Stack 3: [E] | Exploring action Move C from table to D | New state -> Invalid | Exploring action Move A from C to table | New state -> Stack 1: [A], Stack 2: [B, D], Stack 3: [C], Stack 4: [E] | Exploring action Move B from table to A | New state -> Invalid | Exploring action Move D from B to table | New state -> Stack 1: [B], Stack 2: [C, A], Stack 3: [D], Stack 4: [E] | Taking action Move A from C to D | Moved to state -> Stack 1: [B, D, A], Stack 2: [C], Stack 3: [E] | Plan so far [Move E from A to table | Move A from C to D] | Exploring action Move B from table to E | New state -> Invalid | Exploring action Move C from table to E | New state -> Stack 1: [B, D, A], Stack 2: [E, C] | Exploring action Move E from table to A | New state -> Stack 1: [B, D, A, E], Stack 2: [C] | Exploring action Move E from table to C | New state -> Stack 1: [B, D, A], Stack 2: [C, E] | Exploring action Move B from table to A | New state -> Invalid | Taking action Move E from table to C | Moved to state -> Stack 1: [B, D, A], Stack 2: [C, E] | Plan so far [Move E from A to table | Move A from C to D | Move E from table to C] | Exploring action Move A from D to table | New state -> Stack 1: [A], Stack 2: [B, D], Stack 3: [C, E] | Exploring action Move E from C to table | New state -> Stack 1: [B, D, A], Stack 2: [C], Stack 3: [E] | Exploring action Move A from D to E | New state -> Stack 1: [B, D], Stack 2: [C, E, A] | Exploring action Move C from table to A | New state -> Invalid | Taking action Move D from B to table | Moved to state -> Stack 1: [B], Stack 2: [C, A], Stack 3: [D], Stack 4: [E] | Plan so far [Move E from A to table | Move D from B to table] | Exploring action Move A from C to D | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, A], Stack 4: [E] | Exploring action Move A from C to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Exploring action Move C from table to A | New state -> Invalid | Exploring action Move A from C to B | New state -> Stack 1: [B, A], Stack 2: [C], Stack 3: [D], Stack 4: [E] | Taking action Move E from C to table | Moved to state -> Stack 1: [B, D, A], Stack 2: [C], Stack 3: [E] | Plan so far [Move E from A to table | Move A from C to D | Move E from table to C | Move E from C to table] | Taking action Move A from C to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Plan so far [Move E from A to table | Move D from B to table | Move A from C to table] | Exploring action Move A from table to D | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, A], Stack 4: [E] | Exploring action Move A from table to B | New state -> Stack 1: [B, A], Stack 2: [C], Stack 3: [D], Stack 4: [E] | Exploring action Move E from table to C | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, E], Stack 4: [D] | Taking action Move A from C to D | Moved to state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, A], Stack 4: [E] | Plan so far [Move E from A to table | Move D from B to table | Move A from C to D] | Exploring action Move B from table to E | New state -> Stack 1: [C], Stack 2: [D, A], Stack 3: [E, B] | Exploring action Move D from table to E | New state -> Invalid | Exploring action Move E from table to C | New state -> Stack 1: [B], Stack 2: [C, E], Stack 3: [D, A] | Exploring action Move A from D to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Taking action Move E from table to C | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, E], Stack 4: [D] | Plan so far [Move E from A to table | Move D from B to table | Move A from C to table | Move E from table to C] | Exploring action Move A from table to D | New state -> Stack 1: [B], Stack 2: [C, E], Stack 3: [D, A] | Exploring action Move C from table to A | New state -> Invalid | Exploring action Move B from table to E | New state -> Stack 1: [A], Stack 2: [C, E, B], Stack 3: [D] | Exploring action Move C from table to B | New state -> Invalid | Exploring action Move D from table to A | New state -> Stack 1: [A, D], Stack 2: [B], Stack 3: [C, E] | Taking action Move E from A to table | Moved to state -> Stack 1: [B], Stack 2: [C, A], Stack 3: [D], Stack 4: [E] | Plan so far [Move D from B to table | Move E from A to table] | Taking action Move A from C to table | Moved to state -> Stack 1: [A], Stack 2: [B, D], Stack 3: [C], Stack 4: [E] | Plan so far [Move E from A to table | Move A from C to table] | Exploring action Move D from B to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Exploring action Move A from table to D | New state -> Stack 1: [B, D, A], Stack 2: [C], Stack 3: [E] | Exploring action Move B from table to D | New state -> Invalid | Exploring action Move E from table to C | New state -> Stack 1: [A], Stack 2: [B, D], Stack 3: [C, E] | Taking action Move A from table to D | Moved to state -> Stack 1: [B, D, A], Stack 2: [C], Stack 3: [E] | Plan so far [Move E from A to table | Move A from C to table | Move A from table to D] | Taking action Move C from table to E | Moved to state -> Stack 1: [B, D, A], Stack 2: [E, C] | Plan so far [Move E from A to table | Move A from C to D | Move C from table to E] | Exploring action Move A from D to table | New state -> Stack 1: [A], Stack 2: [B, D], Stack 3: [E, C] | Exploring action Move D from B to A | New state -> Invalid | Exploring action Move C from E to table | New state -> Stack 1: [B, D, A], Stack 2: [C], Stack 3: [E] | Exploring action Move C from E to A | New state -> Stack 1: [B, D, A, C], Stack 2: [E] | Taking action Move E from table to C | Moved to state -> Stack 1: [B], Stack 2: [C, E], Stack 3: [D, A] | Plan so far [Move E from A to table | Move D from B to table | Move A from C to D | Move E from table to C] | Exploring action Move D from table to E | New state -> Invalid | Exploring action Move A from D to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, E], Stack 4: [D] | Exploring action Move B from table to E | New state -> Stack 1: [C, E, B], Stack 2: [D, A] | Exploring action Move A from D to E | New state -> Stack 1: [B], Stack 2: [C, E, A], Stack 3: [D] | Exploring action Move D from table to B | New state -> Invalid | Taking action Move E from table to C | Moved to state -> Stack 1: [A], Stack 2: [B, D], Stack 3: [C, E] | Plan so far [Move E from A to table | Move A from C to table | Move E from table to C] | Exploring action Move C from table to E | New state -> Invalid | Exploring action Move D from B to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, E], Stack 4: [D] | Exploring action Move A from table to D | New state -> Stack 1: [B, D, A], Stack 2: [C, E] | Exploring action Move D from B to A | New state -> Stack 1: [A, D], Stack 2: [B], Stack 3: [C, E] | Taking action Move A from table to D | Moved to state -> Stack 1: [B, D, A], Stack 2: [C, E] | Plan so far [Move E from A to table | Move A from C to table | Move E from table to C | Move A from table to D] | Taking action Move B from table to E | Moved to state -> Stack 1: [C, E, B], Stack 2: [D, A] | Plan so far [Move E from A to table | Move D from B to table | Move A from C to D | Move E from table to C | Move B from table to E] | Exploring action Move A from D to table | New state -> Stack 1: [A], Stack 2: [C, E, B], Stack 3: [D] | Exploring action Move E from C to B | New state -> Invalid | Exploring action Move A from D to B | New state -> Stack 1: [C, E, B, A], Stack 2: [D] | Exploring action Move B from E to table | New state -> Stack 1: [B], Stack 2: [C, E], Stack 3: [D, A] | Taking action Move D from B to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, E], Stack 4: [D] | Plan so far [Move E from A to table | Move A from C to table | Move E from table to C | Move D from B to table] | Taking action Move D from B to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Plan so far [Move E from A to table | Move A from C to table | Move D from B to table] | Taking action Move C from E to table | Moved to state -> Stack 1: [B, D, A], Stack 2: [C], Stack 3: [E] | Plan so far [Move E from A to table | Move A from C to D | Move C from table to E | Move C from E to table] | Taking action Move B from table to E | Moved to state -> Stack 1: [A], Stack 2: [C, E, B], Stack 3: [D] | Plan so far [Move E from A to table | Move D from B to table | Move A from C to table | Move E from table to C | Move B from table to E] | Exploring action Move E from C to table | New state -> Invalid | Exploring action Move A from table to D | New state -> Stack 1: [C, E, B], Stack 2: [D, A] | Exploring action Move D from table to B | New state -> Stack 1: [A], Stack 2: [C, E, B, D] | Exploring action Move D from table to A | New state -> Stack 1: [A, D], Stack 2: [C, E, B] | Exploring action Move C from table to D | New state -> Invalid | Taking action Move D from table to B | Moved to state -> Stack 1: [A], Stack 2: [C, E, B, D] | Plan so far [Move E from A to table | Move D from B to table | Move A from C to table | Move E from table to C | Move B from table to E | Move D from table to B] | Exploring action Move D from B to A | New state -> Stack 1: [A, D], Stack 2: [C, E, B] | Exploring action Move D from B to table | New state -> Stack 1: [A], Stack 2: [C, E, B], Stack 3: [D] | Exploring action Move B from E to table | New state -> Invalid | Exploring action Move A from table to D | New state -> Stack 1: [C, E, B, D, A] | Taking action Move A from table to D | Moved to state -> Stack 1: [C, E, B, D, A] | Plan so far [Move E from A to table | Move D from B to table | Move A from C to table | Move E from table to C | Move B from table to E | Move D from table to B | Move A from table to D] | Reached goal state!",
        "system2_states_v1": 69
    },
    {
        "idx": 582,
        "start": [
            [
                "table",
                "A",
                "C",
                "B",
                "E",
                "D"
            ]
        ],
        "goal": [
            [
                "table",
                "C",
                "A",
                "B",
                "E"
            ],
            [
                "table",
                "D"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": false,
                "on": -1,
                "under": "C",
                "ontable": true
            },
            "B": {
                "clear": false,
                "on": "C",
                "under": "E",
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": "A",
                "under": "B",
                "ontable": false
            },
            "D": {
                "clear": true,
                "on": "E",
                "under": -1,
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": "B",
                "under": "D",
                "ontable": false
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": false,
                "on": "C",
                "under": "B",
                "ontable": false
            },
            "B": {
                "clear": false,
                "on": "A",
                "under": "E",
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": -1,
                "under": "A",
                "ontable": true
            },
            "D": {
                "clear": true,
                "on": -1,
                "under": -1,
                "ontable": true
            },
            "E": {
                "clear": true,
                "on": "B",
                "under": -1,
                "ontable": false
            }
        },
        "plan_len": 7,
        "num_blocks": 5,
        "prompt": "The initial state:\nThe hand is empty.\nA is on the table. C is on A. B is on C. E is on B. D is on E. D is clear.\n\nThe goal is:\nC is on the table. A is on C. B is on A. E is on B. E is clear.\nD is on the table. D is clear.\n",
        "system1_plan": "Move D from E to table | Move E from B to table | Move B from C to table | Move C from A to table | Move A from table to C | Move B from table to A | Move E from table to B",
        "system1_states": 7,
        "system2_plan_v1": "Moved to state -> Stack 1: [A, C, B, E, D] | Plan so far [] | Exploring action Move D from E to table | New state -> Stack 1: [A, C, B, E], Stack 2: [D] | Exploring action Move B from C to D | New state -> Invalid | Taking action Move D from E to table | Moved to state -> Stack 1: [A, C, B, E], Stack 2: [D] | Plan so far [Move D from E to table] | Exploring action Move E from B to table | New state -> Stack 1: [A, C, B], Stack 2: [D], Stack 3: [E] | Exploring action Move C from A to E | New state -> Invalid | Exploring action Move D from table to E | New state -> Stack 1: [A, C, B, E, D] | Exploring action Move E from B to D | New state -> Stack 1: [A, C, B], Stack 2: [D, E] | Taking action Move E from B to table | Moved to state -> Stack 1: [A, C, B], Stack 2: [D], Stack 3: [E] | Plan so far [Move D from E to table | Move E from B to table] | Exploring action Move B from C to E | New state -> Stack 1: [A, C], Stack 2: [D], Stack 3: [E, B] | Exploring action Move E from table to B | New state -> Stack 1: [A, C, B, E], Stack 2: [D] | Exploring action Move B from C to table | New state -> Stack 1: [A, C], Stack 2: [B], Stack 3: [D], Stack 4: [E] | Exploring action Move C from A to E | New state -> Invalid | Taking action Move B from C to table | Moved to state -> Stack 1: [A, C], Stack 2: [B], Stack 3: [D], Stack 4: [E] | Plan so far [Move D from E to table | Move E from B to table | Move B from C to table] | Exploring action Move C from A to E | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D], Stack 4: [E, C] | Exploring action Move C from A to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Exploring action Move A from table to E | New state -> Invalid | Exploring action Move C from A to B | New state -> Stack 1: [A], Stack 2: [B, C], Stack 3: [D], Stack 4: [E] | Exploring action Move A from table to B | New state -> Invalid | Taking action Move C from A to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Plan so far [Move D from E to table | Move E from B to table | Move B from C to table | Move C from A to table] | Exploring action Move E from table to B | New state -> Stack 1: [A], Stack 2: [B, E], Stack 3: [C], Stack 4: [D] | Exploring action Move A from table to C | New state -> Stack 1: [B], Stack 2: [C, A], Stack 3: [D], Stack 4: [E] | Exploring action Move B from table to C | New state -> Stack 1: [A], Stack 2: [C, B], Stack 3: [D], Stack 4: [E] | Taking action Move A from table to C | Moved to state -> Stack 1: [B], Stack 2: [C, A], Stack 3: [D], Stack 4: [E] | Plan so far [Move D from E to table | Move E from B to table | Move B from C to table | Move C from A to table | Move A from table to C] | Exploring action Move C from table to A | New state -> Invalid | Exploring action Move C from table to E | New state -> Invalid | Exploring action Move E from table to B | New state -> Stack 1: [B, E], Stack 2: [C, A], Stack 3: [D] | Exploring action Move B from table to E | New state -> Stack 1: [C, A], Stack 2: [D], Stack 3: [E, B] | Exploring action Move B from table to A | New state -> Stack 1: [C, A, B], Stack 2: [D], Stack 3: [E] | Taking action Move B from table to A | Moved to state -> Stack 1: [C, A, B], Stack 2: [D], Stack 3: [E] | Plan so far [Move D from E to table | Move E from B to table | Move B from C to table | Move C from A to table | Move A from table to C | Move B from table to A] | Exploring action Move E from table to B | New state -> Stack 1: [C, A, B, E], Stack 2: [D] | Exploring action Move B from A to E | New state -> Stack 1: [C, A], Stack 2: [D], Stack 3: [E, B] | Exploring action Move A from C to B | New state -> Invalid | Exploring action Move B from A to table | New state -> Stack 1: [B], Stack 2: [C, A], Stack 3: [D], Stack 4: [E] | Taking action Move E from table to B | Moved to state -> Stack 1: [C, A, B, E], Stack 2: [D] | Plan so far [Move D from E to table | Move E from B to table | Move B from C to table | Move C from A to table | Move A from table to C | Move B from table to A | Move E from table to B] | Reached goal state!",
        "system2_states_v1": 27
    },
    {
        "idx": 905,
        "start": [
            [
                "table",
                "E",
                "C",
                "A",
                "B",
                "D"
            ],
            [
                "table",
                "F",
                "G"
            ]
        ],
        "goal": [
            [
                "table",
                "B",
                "D",
                "F",
                "C",
                "G",
                "A",
                "E"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": false,
                "on": "C",
                "under": "B",
                "ontable": false
            },
            "B": {
                "clear": false,
                "on": "A",
                "under": "D",
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": "E",
                "under": "A",
                "ontable": false
            },
            "D": {
                "clear": true,
                "on": "B",
                "under": -1,
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": -1,
                "under": "C",
                "ontable": true
            },
            "F": {
                "clear": false,
                "on": -1,
                "under": "G",
                "ontable": true
            },
            "G": {
                "clear": true,
                "on": "F",
                "under": -1,
                "ontable": false
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": false,
                "on": "G",
                "under": "E",
                "ontable": false
            },
            "B": {
                "clear": false,
                "on": -1,
                "under": "D",
                "ontable": true
            },
            "C": {
                "clear": false,
                "on": "F",
                "under": "G",
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": "B",
                "under": "F",
                "ontable": false
            },
            "E": {
                "clear": true,
                "on": "A",
                "under": -1,
                "ontable": false
            },
            "F": {
                "clear": false,
                "on": "D",
                "under": "C",
                "ontable": false
            },
            "G": {
                "clear": false,
                "on": "C",
                "under": "A",
                "ontable": false
            }
        },
        "plan_len": 10,
        "num_blocks": 7,
        "prompt": "The initial state:\nThe hand is empty.\nE is on the table. C is on E. A is on C. B is on A. D is on B. D is clear.\nF is on the table. G is on F. G is clear.\n\nThe goal is:\nB is on the table. D is on B. F is on D. C is on F. G is on C. A is on G. E is on A. E is clear.\n",
        "system1_plan": "Move D from B to table | Move B from A to table | Move G from F to table | Move D from table to B | Move F from table to D | Move A from C to table | Move C from E to F | Move G from table to C | Move A from table to G | Move E from table to A",
        "system1_states": 10,
        "system2_plan_v1": "Moved to state -> Stack 1: [E, C, A, B, D], Stack 2: [F, G] | Plan so far [] | Exploring action Move D from B to G | New state -> Stack 1: [E, C, A, B], Stack 2: [F, G, D] | Exploring action Move F from table to D | New state -> Invalid | Exploring action Move G from F to table | New state -> Stack 1: [E, C, A, B, D], Stack 2: [F], Stack 3: [G] | Exploring action Move D from B to table | New state -> Stack 1: [D], Stack 2: [E, C, A, B], Stack 3: [F, G] | Taking action Move D from B to table | Moved to state -> Stack 1: [D], Stack 2: [E, C, A, B], Stack 3: [F, G] | Plan so far [Move D from B to table] | Exploring action Move G from F to table | New state -> Stack 1: [D], Stack 2: [E, C, A, B], Stack 3: [F], Stack 4: [G] | Exploring action Move A from C to D | New state -> Invalid | Exploring action Move G from F to B | New state -> Stack 1: [D], Stack 2: [E, C, A, B, G], Stack 3: [F] | Exploring action Move B from A to table | New state -> Stack 1: [B], Stack 2: [D], Stack 3: [E, C, A], Stack 4: [F, G] | Taking action Move G from F to table | Moved to state -> Stack 1: [E, C, A, B, D], Stack 2: [F], Stack 3: [G] | Plan so far [Move G from F to table] | Exploring action Move F from table to D | New state -> Stack 1: [E, C, A, B, D, F], Stack 2: [G] | Exploring action Move C from E to table | New state -> Invalid | Exploring action Move D from B to G | New state -> Stack 1: [E, C, A, B], Stack 2: [F], Stack 3: [G, D] | Exploring action Move D from B to table | New state -> Stack 1: [D], Stack 2: [E, C, A, B], Stack 3: [F], Stack 4: [G] | Taking action Move B from A to table | Moved to state -> Stack 1: [B], Stack 2: [D], Stack 3: [E, C, A], Stack 4: [F, G] | Plan so far [Move D from B to table | Move B from A to table] | Exploring action Move C from E to D | New state -> Invalid | Exploring action Move A from C to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D], Stack 4: [E, C], Stack 5: [F, G] | Exploring action Move G from F to table | New state -> Stack 1: [B], Stack 2: [D], Stack 3: [E, C, A], Stack 4: [F], Stack 5: [G] | Exploring action Move D from table to B | New state -> Stack 1: [B, D], Stack 2: [E, C, A], Stack 3: [F, G] | Taking action Move F from table to D | Moved to state -> Stack 1: [E, C, A, B, D, F], Stack 2: [G] | Plan so far [Move G from F to table | Move F from table to D] | Exploring action Move G from table to F | New state -> Stack 1: [E, C, A, B, D, F, G] | Exploring action Move E from table to G | New state -> Invalid | Exploring action Move D from B to table | New state -> Invalid | Exploring action Move F from D to table | New state -> Stack 1: [E, C, A, B, D], Stack 2: [F], Stack 3: [G] | Exploring action Move F from D to G | New state -> Stack 1: [E, C, A, B, D], Stack 2: [G, F] | Taking action Move D from table to B | Moved to state -> Stack 1: [B, D], Stack 2: [E, C, A], Stack 3: [F, G] | Plan so far [Move D from B to table | Move B from A to table | Move D from table to B] | Exploring action Move A from C to table | New state -> Stack 1: [A], Stack 2: [B, D], Stack 3: [E, C], Stack 4: [F, G] | Exploring action Move A from C to G | New state -> Stack 1: [B, D], Stack 2: [E, C], Stack 3: [F, G, A] | Exploring action Move C from E to table | New state -> Invalid | Exploring action Move E from table to A | New state -> Invalid | Exploring action Move G from F to table | New state -> Stack 1: [B, D], Stack 2: [E, C, A], Stack 3: [F], Stack 4: [G] | Taking action Move G from F to table | Moved to state -> Stack 1: [B], Stack 2: [D], Stack 3: [E, C, A], Stack 4: [F], Stack 5: [G] | Plan so far [Move D from B to table | Move B from A to table | Move G from F to table] | Exploring action Move D from table to B | New state -> Stack 1: [B, D], Stack 2: [E, C, A], Stack 3: [F], Stack 4: [G] | Exploring action Move A from C to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D], Stack 4: [E, C], Stack 5: [F], Stack 6: [G] | Exploring action Move C from E to A | New state -> Invalid | Exploring action Move E from table to D | New state -> Invalid | Exploring action Move A from C to D | New state -> Stack 1: [B], Stack 2: [D, A], Stack 3: [E, C], Stack 4: [F], Stack 5: [G] | Taking action Move G from F to table | Moved to state -> Stack 1: [D], Stack 2: [E, C, A, B], Stack 3: [F], Stack 4: [G] | Plan so far [Move D from B to table | Move G from F to table] | Exploring action Move A from C to F | New state -> Invalid | Exploring action Move B from A to F | New state -> Stack 1: [D], Stack 2: [E, C, A], Stack 3: [F, B], Stack 4: [G] | Exploring action Move B from A to D | New state -> Stack 1: [D, B], Stack 2: [E, C, A], Stack 3: [F], Stack 4: [G] | Exploring action Move B from A to table | New state -> Stack 1: [B], Stack 2: [D], Stack 3: [E, C, A], Stack 4: [F], Stack 5: [G] | Taking action Move D from table to B | Moved to state -> Stack 1: [B, D], Stack 2: [E, C, A], Stack 3: [F], Stack 4: [G] | Plan so far [Move D from B to table | Move B from A to table | Move G from F to table | Move D from table to B] | Exploring action Move F from table to D | New state -> Stack 1: [B, D, F], Stack 2: [E, C, A], Stack 3: [G] | Exploring action Move A from C to F | New state -> Stack 1: [B, D], Stack 2: [E, C], Stack 3: [F, A], Stack 4: [G] | Exploring action Move C from E to A | New state -> Invalid | Exploring action Move A from C to table | New state -> Stack 1: [A], Stack 2: [B, D], Stack 3: [E, C], Stack 4: [F], Stack 5: [G] | Taking action Move B from A to table | Moved to state -> Stack 1: [B], Stack 2: [D], Stack 3: [E, C, A], Stack 4: [F], Stack 5: [G] | Plan so far [Move D from B to table | Move G from F to table | Move B from A to table] | Taking action Move D from B to table | Moved to state -> Stack 1: [D], Stack 2: [E, C, A, B], Stack 3: [F], Stack 4: [G] | Plan so far [Move G from F to table | Move D from B to table] | Taking action Move A from C to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [D], Stack 4: [E, C], Stack 5: [F], Stack 6: [G] | Plan so far [Move D from B to table | Move B from A to table | Move G from F to table | Move A from C to table] | Exploring action Move E from table to G | New state -> Invalid | Exploring action Move C from E to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F], Stack 7: [G] | Exploring action Move D from table to B | New state -> Stack 1: [A], Stack 2: [B, D], Stack 3: [E, C], Stack 4: [F], Stack 5: [G] | Exploring action Move C from E to A | New state -> Stack 1: [A, C], Stack 2: [B], Stack 3: [D], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Taking action Move F from table to D | Moved to state -> Stack 1: [B, D, F], Stack 2: [E, C, A], Stack 3: [G] | Plan so far [Move D from B to table | Move B from A to table | Move G from F to table | Move D from table to B | Move F from table to D] | Exploring action Move A from C to G | New state -> Stack 1: [B, D, F], Stack 2: [E, C], Stack 3: [G, A] | Exploring action Move B from table to G | New state -> Invalid | Exploring action Move A from C to table | New state -> Stack 1: [A], Stack 2: [B, D, F], Stack 3: [E, C], Stack 4: [G] | Exploring action Move A from C to F | New state -> Stack 1: [B, D, F, A], Stack 2: [E, C], Stack 3: [G] | Taking action Move D from table to B | Moved to state -> Stack 1: [A], Stack 2: [B, D], Stack 3: [E, C], Stack 4: [F], Stack 5: [G] | Plan so far [Move D from B to table | Move B from A to table | Move G from F to table | Move A from C to table | Move D from table to B] | Exploring action Move F from table to D | New state -> Stack 1: [A], Stack 2: [B, D, F], Stack 3: [E, C], Stack 4: [G] | Exploring action Move E from table to A | New state -> Invalid | Exploring action Move B from table to F | New state -> Invalid | Exploring action Move C from E to A | New state -> Stack 1: [A, C], Stack 2: [B, D], Stack 3: [E], Stack 4: [F], Stack 5: [G] | Exploring action Move C from E to table | New state -> Stack 1: [A], Stack 2: [B, D], Stack 3: [C], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Taking action Move A from C to table | Moved to state -> Stack 1: [A], Stack 2: [B, D, F], Stack 3: [E, C], Stack 4: [G] | Plan so far [Move D from B to table | Move B from A to table | Move G from F to table | Move D from table to B | Move F from table to D | Move A from C to table] | Exploring action Move C from E to F | New state -> Stack 1: [A], Stack 2: [B, D, F, C], Stack 3: [E], Stack 4: [G] | Exploring action Move C from E to table | New state -> Stack 1: [A], Stack 2: [B, D, F], Stack 3: [C], Stack 4: [E], Stack 5: [G] | Exploring action Move E from table to F | New state -> Invalid | Exploring action Move C from E to G | New state -> Stack 1: [A], Stack 2: [B, D, F], Stack 3: [E], Stack 4: [G, C] | Taking action Move C from E to F | Moved to state -> Stack 1: [A], Stack 2: [B, D, F, C], Stack 3: [E], Stack 4: [G] | Plan so far [Move D from B to table | Move B from A to table | Move G from F to table | Move D from table to B | Move F from table to D | Move A from C to table | Move C from E to F] | Exploring action Move E from table to A | New state -> Stack 1: [A, E], Stack 2: [B, D, F, C], Stack 3: [G] | Exploring action Move A from table to G | New state -> Stack 1: [B, D, F, C], Stack 2: [E], Stack 3: [G, A] | Exploring action Move G from table to C | New state -> Stack 1: [A], Stack 2: [B, D, F, C, G], Stack 3: [E] | Exploring action Move F from D to E | New state -> Invalid | Taking action Move G from table to C | Moved to state -> Stack 1: [A], Stack 2: [B, D, F, C, G], Stack 3: [E] | Plan so far [Move D from B to table | Move B from A to table | Move G from F to table | Move D from table to B | Move F from table to D | Move A from C to table | Move C from E to F | Move G from table to C] | Exploring action Move F from D to G | New state -> Invalid | Exploring action Move E from table to A | New state -> Stack 1: [A, E], Stack 2: [B, D, F, C, G] | Exploring action Move A from table to G | New state -> Stack 1: [B, D, F, C, G, A], Stack 2: [E] | Exploring action Move A from table to E | New state -> Stack 1: [B, D, F, C, G], Stack 2: [E, A] | Exploring action Move F from D to A | New state -> Invalid | Taking action Move A from table to G | Moved to state -> Stack 1: [B, D, F, C, G, A], Stack 2: [E] | Plan so far [Move D from B to table | Move B from A to table | Move G from F to table | Move D from table to B | Move F from table to D | Move A from C to table | Move C from E to F | Move G from table to C | Move A from table to G] | Exploring action Move E from table to A | New state -> Stack 1: [B, D, F, C, G, A, E] | Exploring action Move G from C to table | New state -> Invalid | Exploring action Move A from G to E | New state -> Stack 1: [B, D, F, C, G], Stack 2: [E, A] | Exploring action Move A from G to table | New state -> Stack 1: [A], Stack 2: [B, D, F, C, G], Stack 3: [E] | Taking action Move E from table to A | Moved to state -> Stack 1: [B, D, F, C, G, A, E] | Plan so far [Move D from B to table | Move B from A to table | Move G from F to table | Move D from table to B | Move F from table to D | Move A from C to table | Move C from E to F | Move G from table to C | Move A from table to G | Move E from table to A] | Reached goal state!",
        "system2_states_v1": 69
    },
    {
        "idx": 878,
        "start": [
            [
                "table",
                "C",
                "F",
                "B"
            ],
            [
                "table",
                "G",
                "D",
                "E",
                "A"
            ]
        ],
        "goal": [
            [
                "table",
                "C",
                "A",
                "D",
                "B",
                "F"
            ],
            [
                "table",
                "G",
                "E"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": true,
                "on": "E",
                "under": -1,
                "ontable": false
            },
            "B": {
                "clear": true,
                "on": "F",
                "under": -1,
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": -1,
                "under": "F",
                "ontable": true
            },
            "D": {
                "clear": false,
                "on": "G",
                "under": "E",
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": "D",
                "under": "A",
                "ontable": false
            },
            "F": {
                "clear": false,
                "on": "C",
                "under": "B",
                "ontable": false
            },
            "G": {
                "clear": false,
                "on": -1,
                "under": "D",
                "ontable": true
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": false,
                "on": "C",
                "under": "D",
                "ontable": false
            },
            "B": {
                "clear": false,
                "on": "D",
                "under": "F",
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": -1,
                "under": "A",
                "ontable": true
            },
            "D": {
                "clear": false,
                "on": "A",
                "under": "B",
                "ontable": false
            },
            "E": {
                "clear": true,
                "on": "G",
                "under": -1,
                "ontable": false
            },
            "F": {
                "clear": true,
                "on": "B",
                "under": -1,
                "ontable": false
            },
            "G": {
                "clear": false,
                "on": -1,
                "under": "E",
                "ontable": true
            }
        },
        "plan_len": 10,
        "num_blocks": 7,
        "prompt": "The initial state:\nThe hand is empty.\nC is on the table. F is on C. B is on F. B is clear.\nG is on the table. D is on G. E is on D. A is on E. A is clear.\n\nThe goal is:\nC is on the table. A is on C. D is on A. B is on D. F is on B. F is clear.\nG is on the table. E is on G. E is clear.\n",
        "system1_plan": "Move A from E to table | Move B from F to table | Move E from D to table | Move D from G to table | Move E from table to G | Move F from C to table | Move A from table to C | Move D from table to A | Move B from table to D | Move F from table to B",
        "system1_states": 10,
        "system2_plan_v1": "Moved to state -> Stack 1: [C, F, B], Stack 2: [G, D, E, A] | Plan so far [] | Exploring action Move A from E to table | New state -> Stack 1: [A], Stack 2: [C, F, B], Stack 3: [G, D, E] | Exploring action Move A from E to B | New state -> Stack 1: [C, F, B, A], Stack 2: [G, D, E] | Exploring action Move C from table to B | New state -> Invalid | Exploring action Move B from F to table | New state -> Stack 1: [B], Stack 2: [C, F], Stack 3: [G, D, E, A] | Taking action Move A from E to table | Moved to state -> Stack 1: [A], Stack 2: [C, F, B], Stack 3: [G, D, E] | Plan so far [Move A from E to table] | Exploring action Move E from D to table | New state -> Stack 1: [A], Stack 2: [C, F, B], Stack 3: [E], Stack 4: [G, D] | Exploring action Move E from D to A | New state -> Stack 1: [A, E], Stack 2: [C, F, B], Stack 3: [G, D] | Exploring action Move C from table to E | New state -> Invalid | Exploring action Move B from F to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, F], Stack 4: [G, D, E] | Taking action Move B from F to table | Moved to state -> Stack 1: [B], Stack 2: [C, F], Stack 3: [G, D, E, A] | Plan so far [Move B from F to table] | Exploring action Move A from E to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, F], Stack 4: [G, D, E] | Exploring action Move E from D to F | New state -> Invalid | Exploring action Move D from G to B | New state -> Invalid | Exploring action Move F from C to B | New state -> Stack 1: [B, F], Stack 2: [C], Stack 3: [G, D, E, A] | Exploring action Move F from C to table | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [F], Stack 4: [G, D, E, A] | Taking action Move B from F to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, F], Stack 4: [G, D, E] | Plan so far [Move A from E to table | Move B from F to table] | Exploring action Move E from D to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, F], Stack 4: [E], Stack 5: [G, D] | Exploring action Move G from table to F | New state -> Invalid | Exploring action Move F from C to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [F], Stack 5: [G, D, E] | Exploring action Move F from C to B | New state -> Stack 1: [A], Stack 2: [B, F], Stack 3: [C], Stack 4: [G, D, E] | Taking action Move E from D to table | Moved to state -> Stack 1: [A], Stack 2: [C, F, B], Stack 3: [E], Stack 4: [G, D] | Plan so far [Move A from E to table | Move E from D to table] | Exploring action Move B from F to D | New state -> Stack 1: [A], Stack 2: [C, F], Stack 3: [E], Stack 4: [G, D, B] | Exploring action Move D from G to table | New state -> Stack 1: [A], Stack 2: [C, F, B], Stack 3: [D], Stack 4: [E], Stack 5: [G] | Exploring action Move F from C to A | New state -> Invalid | Exploring action Move B from F to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, F], Stack 4: [E], Stack 5: [G, D] | Taking action Move E from D to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, F], Stack 4: [E], Stack 5: [G, D] | Plan so far [Move A from E to table | Move B from F to table | Move E from D to table] | Exploring action Move G from table to D | New state -> Invalid | Exploring action Move D from G to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, F], Stack 4: [D], Stack 5: [E], Stack 6: [G] | Exploring action Move F from C to B | New state -> Stack 1: [A], Stack 2: [B, F], Stack 3: [C], Stack 4: [E], Stack 5: [G, D] | Exploring action Move F from C to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [E], Stack 5: [F], Stack 6: [G, D] | Exploring action Move C from table to D | New state -> Invalid | Taking action Move F from C to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [F], Stack 5: [G, D, E] | Plan so far [Move A from E to table | Move B from F to table | Move F from C to table] | Exploring action Move G from table to E | New state -> Invalid | Exploring action Move A from table to C | New state -> Stack 1: [B], Stack 2: [C, A], Stack 3: [F], Stack 4: [G, D, E] | Exploring action Move D from G to B | New state -> Invalid | Exploring action Move E from D to A | New state -> Stack 1: [A, E], Stack 2: [B], Stack 3: [C], Stack 4: [F], Stack 5: [G, D] | Exploring action Move E from D to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [E], Stack 5: [F], Stack 6: [G, D] | Taking action Move F from C to B | Moved to state -> Stack 1: [A], Stack 2: [B, F], Stack 3: [C], Stack 4: [G, D, E] | Plan so far [Move A from E to table | Move B from F to table | Move F from C to B] | Exploring action Move D from G to table | New state -> Invalid | Exploring action Move E from D to table | New state -> Stack 1: [A], Stack 2: [B, F], Stack 3: [C], Stack 4: [E], Stack 5: [G, D] | Exploring action Move A from table to C | New state -> Stack 1: [B, F], Stack 2: [C, A], Stack 3: [G, D, E] | Exploring action Move B from table to F | New state -> Invalid | Exploring action Move E from D to A | New state -> Stack 1: [A, E], Stack 2: [B, F], Stack 3: [C], Stack 4: [G, D] | Taking action Move F from C to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [E], Stack 5: [F], Stack 6: [G, D] | Plan so far [Move A from E to table | Move B from F to table | Move E from D to table | Move F from C to table] | Exploring action Move D from G to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F], Stack 7: [G] | Exploring action Move G from table to D | New state -> Invalid | Exploring action Move G from table to B | New state -> Invalid | Exploring action Move F from table to B | New state -> Stack 1: [A], Stack 2: [B, F], Stack 3: [C], Stack 4: [E], Stack 5: [G, D] | Exploring action Move A from table to C | New state -> Stack 1: [B], Stack 2: [C, A], Stack 3: [E], Stack 4: [F], Stack 5: [G, D] | Taking action Move F from C to B | Moved to state -> Stack 1: [A], Stack 2: [B, F], Stack 3: [C], Stack 4: [E], Stack 5: [G, D] | Plan so far [Move A from E to table | Move B from F to table | Move E from D to table | Move F from C to B] | Exploring action Move A from table to C | New state -> Stack 1: [B, F], Stack 2: [C, A], Stack 3: [E], Stack 4: [G, D] | Exploring action Move B from table to C | New state -> Invalid | Exploring action Move D from G to table | New state -> Stack 1: [A], Stack 2: [B, F], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [G] | Exploring action Move B from table to F | New state -> Invalid | Exploring action Move D from G to E | New state -> Stack 1: [A], Stack 2: [B, F], Stack 3: [C], Stack 4: [E, D], Stack 5: [G] | Taking action Move D from G to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, F], Stack 4: [D], Stack 5: [E], Stack 6: [G] | Plan so far [Move A from E to table | Move B from F to table | Move E from D to table | Move D from G to table] | Exploring action Move C from table to G | New state -> Invalid | Exploring action Move F from C to B | New state -> Stack 1: [A], Stack 2: [B, F], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [G] | Exploring action Move E from table to G | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, F], Stack 4: [D], Stack 5: [G, E] | Exploring action Move C from table to E | New state -> Invalid | Exploring action Move F from C to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F], Stack 7: [G] | Taking action Move E from table to G | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, F], Stack 4: [D], Stack 5: [G, E] | Plan so far [Move A from E to table | Move B from F to table | Move E from D to table | Move D from G to table | Move E from table to G] | Exploring action Move F from C to B | New state -> Stack 1: [A], Stack 2: [B, F], Stack 3: [C], Stack 4: [D], Stack 5: [G, E] | Exploring action Move F from C to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [F], Stack 6: [G, E] | Exploring action Move F from C to A | New state -> Stack 1: [A, F], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [G, E] | Exploring action Move C from table to E | New state -> Invalid | Taking action Move F from C to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [F], Stack 6: [G, E] | Plan so far [Move A from E to table | Move B from F to table | Move E from D to table | Move D from G to table | Move E from table to G | Move F from C to table] | Exploring action Move F from table to B | New state -> Stack 1: [A], Stack 2: [B, F], Stack 3: [C], Stack 4: [D], Stack 5: [G, E] | Exploring action Move A from table to D | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, A], Stack 4: [F], Stack 5: [G, E] | Exploring action Move G from table to D | New state -> Invalid | Exploring action Move A from table to C | New state -> Stack 1: [B], Stack 2: [C, A], Stack 3: [D], Stack 4: [F], Stack 5: [G, E] | Taking action Move F from C to B | Moved to state -> Stack 1: [A], Stack 2: [B, F], Stack 3: [C], Stack 4: [D], Stack 5: [G, E] | Plan so far [Move A from E to table | Move B from F to table | Move E from D to table | Move D from G to table | Move E from table to G | Move F from C to B] | Exploring action Move F from B to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [F], Stack 6: [G, E] | Exploring action Move A from table to C | New state -> Stack 1: [B, F], Stack 2: [C, A], Stack 3: [D], Stack 4: [G, E] | Exploring action Move B from table to C | New state -> Invalid | Exploring action Move C from table to D | New state -> Stack 1: [A], Stack 2: [B, F], Stack 3: [D, C], Stack 4: [G, E] | Taking action Move A from table to C | Moved to state -> Stack 1: [B], Stack 2: [C, A], Stack 3: [D], Stack 4: [F], Stack 5: [G, E] | Plan so far [Move A from E to table | Move B from F to table | Move E from D to table | Move D from G to table | Move E from table to G | Move F from C to table | Move A from table to C] | Exploring action Move C from table to E | New state -> Invalid | Exploring action Move B from table to A | New state -> Stack 1: [C, A, B], Stack 2: [D], Stack 3: [F], Stack 4: [G, E] | Exploring action Move F from table to B | New state -> Stack 1: [B, F], Stack 2: [C, A], Stack 3: [D], Stack 4: [G, E] | Exploring action Move D from table to A | New state -> Stack 1: [B], Stack 2: [C, A, D], Stack 3: [F], Stack 4: [G, E] | Taking action Move A from table to C | Moved to state -> Stack 1: [B, F], Stack 2: [C, A], Stack 3: [D], Stack 4: [G, E] | Plan so far [Move A from E to table | Move B from F to table | Move E from D to table | Move D from G to table | Move E from table to G | Move F from C to B | Move A from table to C] | Exploring action Move F from B to table | New state -> Stack 1: [B], Stack 2: [C, A], Stack 3: [D], Stack 4: [F], Stack 5: [G, E] | Exploring action Move G from table to D | New state -> Invalid | Exploring action Move C from table to A | New state -> Invalid | Exploring action Move D from table to A | New state -> Stack 1: [B, F], Stack 2: [C, A, D], Stack 3: [G, E] | Exploring action Move F from B to D | New state -> Stack 1: [B], Stack 2: [C, A], Stack 3: [D, F], Stack 4: [G, E] | Taking action Move D from table to A | Moved to state -> Stack 1: [B], Stack 2: [C, A, D], Stack 3: [F], Stack 4: [G, E] | Plan so far [Move A from E to table | Move B from F to table | Move E from D to table | Move D from G to table | Move E from table to G | Move F from C to table | Move A from table to C | Move D from table to A] | Exploring action Move B from table to F | New state -> Stack 1: [C, A, D], Stack 2: [F, B], Stack 3: [G, E] | Exploring action Move G from table to F | New state -> Invalid | Exploring action Move B from table to D | New state -> Stack 1: [C, A, D, B], Stack 2: [F], Stack 3: [G, E] | Exploring action Move F from table to B | New state -> Stack 1: [B, F], Stack 2: [C, A, D], Stack 3: [G, E] | Exploring action Move A from C to table | New state -> Invalid | Taking action Move D from table to A | Moved to state -> Stack 1: [B, F], Stack 2: [C, A, D], Stack 3: [G, E] | Plan so far [Move A from E to table | Move B from F to table | Move E from D to table | Move D from G to table | Move E from table to G | Move F from C to B | Move A from table to C | Move D from table to A] | Exploring action Move G from table to D | New state -> Invalid | Exploring action Move F from B to table | New state -> Stack 1: [B], Stack 2: [C, A, D], Stack 3: [F], Stack 4: [G, E] | Exploring action Move F from B to D | New state -> Stack 1: [B], Stack 2: [C, A, D, F], Stack 3: [G, E] | Exploring action Move D from A to table | New state -> Stack 1: [B, F], Stack 2: [C, A], Stack 3: [D], Stack 4: [G, E] | Exploring action Move C from table to F | New state -> Invalid | Taking action Move B from table to D | Moved to state -> Stack 1: [C, A, D, B], Stack 2: [F], Stack 3: [G, E] | Plan so far [Move A from E to table | Move B from F to table | Move E from D to table | Move D from G to table | Move E from table to G | Move F from C to table | Move A from table to C | Move D from table to A | Move B from table to D] | Exploring action Move B from D to table | New state -> Stack 1: [B], Stack 2: [C, A, D], Stack 3: [F], Stack 4: [G, E] | Exploring action Move A from C to B | New state -> Invalid | Exploring action Move B from D to F | New state -> Stack 1: [C, A, D], Stack 2: [F, B], Stack 3: [G, E] | Exploring action Move F from table to B | New state -> Stack 1: [C, A, D, B, F], Stack 2: [G, E] | Taking action Move F from table to B | Moved to state -> Stack 1: [C, A, D, B, F], Stack 2: [G, E] | Plan so far [Move A from E to table | Move B from F to table | Move E from D to table | Move D from G to table | Move E from table to G | Move F from C to table | Move A from table to C | Move D from table to A | Move B from table to D | Move F from table to B] | Reached goal state!",
        "system2_states_v1": 86
    },
    {
        "idx": 595,
        "start": [
            [
                "table",
                "E",
                "A",
                "C",
                "B",
                "D"
            ]
        ],
        "goal": [
            [
                "table",
                "A",
                "B",
                "C"
            ],
            [
                "table",
                "D",
                "E"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": false,
                "on": "E",
                "under": "C",
                "ontable": false
            },
            "B": {
                "clear": false,
                "on": "C",
                "under": "D",
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": "A",
                "under": "B",
                "ontable": false
            },
            "D": {
                "clear": true,
                "on": "B",
                "under": -1,
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": -1,
                "under": "A",
                "ontable": true
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": false,
                "on": -1,
                "under": "B",
                "ontable": true
            },
            "B": {
                "clear": false,
                "on": "A",
                "under": "C",
                "ontable": false
            },
            "C": {
                "clear": true,
                "on": "B",
                "under": -1,
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": -1,
                "under": "E",
                "ontable": true
            },
            "E": {
                "clear": true,
                "on": "D",
                "under": -1,
                "ontable": false
            }
        },
        "plan_len": 7,
        "num_blocks": 5,
        "prompt": "The initial state:\nThe hand is empty.\nE is on the table. A is on E. C is on A. B is on C. D is on B. D is clear.\n\nThe goal is:\nA is on the table. B is on A. C is on B. C is clear.\nD is on the table. E is on D. E is clear.\n",
        "system1_plan": "Move D from B to table | Move B from C to table | Move C from A to table | Move A from E to table | Move E from table to D | Move B from table to A | Move C from table to B",
        "system1_states": 7,
        "system2_plan_v1": "Moved to state -> Stack 1: [E, A, C, B, D] | Plan so far [] | Exploring action Move D from B to table | New state -> Stack 1: [D], Stack 2: [E, A, C, B] | Exploring action Move C from A to table | New state -> Invalid | Taking action Move D from B to table | Moved to state -> Stack 1: [D], Stack 2: [E, A, C, B] | Plan so far [Move D from B to table] | Exploring action Move B from C to D | New state -> Stack 1: [D, B], Stack 2: [E, A, C] | Exploring action Move B from C to table | New state -> Stack 1: [B], Stack 2: [D], Stack 3: [E, A, C] | Exploring action Move C from A to table | New state -> Invalid | Exploring action Move A from E to B | New state -> Invalid | Exploring action Move D from table to B | New state -> Stack 1: [E, A, C, B, D] | Taking action Move B from C to table | Moved to state -> Stack 1: [B], Stack 2: [D], Stack 3: [E, A, C] | Plan so far [Move D from B to table | Move B from C to table] | Exploring action Move C from A to table | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D], Stack 4: [E, A] | Exploring action Move C from A to B | New state -> Stack 1: [B, C], Stack 2: [D], Stack 3: [E, A] | Exploring action Move C from A to D | New state -> Stack 1: [B], Stack 2: [D, C], Stack 3: [E, A] | Exploring action Move E from table to B | New state -> Invalid | Taking action Move C from A to table | Moved to state -> Stack 1: [B], Stack 2: [C], Stack 3: [D], Stack 4: [E, A] | Plan so far [Move D from B to table | Move B from C to table | Move C from A to table] | Exploring action Move A from E to C | New state -> Stack 1: [B], Stack 2: [C, A], Stack 3: [D], Stack 4: [E] | Exploring action Move E from table to A | New state -> Invalid | Exploring action Move E from table to C | New state -> Invalid | Exploring action Move A from E to B | New state -> Stack 1: [B, A], Stack 2: [C], Stack 3: [D], Stack 4: [E] | Exploring action Move A from E to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Taking action Move C from A to B | Moved to state -> Stack 1: [B, C], Stack 2: [D], Stack 3: [E, A] | Plan so far [Move D from B to table | Move B from C to table | Move C from A to B] | Exploring action Move C from B to table | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D], Stack 4: [E, A] | Exploring action Move E from table to D | New state -> Invalid | Exploring action Move B from table to C | New state -> Invalid | Exploring action Move A from E to table | New state -> Stack 1: [A], Stack 2: [B, C], Stack 3: [D], Stack 4: [E] | Exploring action Move A from E to D | New state -> Stack 1: [B, C], Stack 2: [D, A], Stack 3: [E] | Taking action Move A from E to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Plan so far [Move D from B to table | Move B from C to table | Move C from A to table | Move A from E to table] | Exploring action Move E from table to D | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D, E] | Exploring action Move C from table to B | New state -> Stack 1: [A], Stack 2: [B, C], Stack 3: [D], Stack 4: [E] | Exploring action Move B from table to A | New state -> Stack 1: [A, B], Stack 2: [C], Stack 3: [D], Stack 4: [E] | Taking action Move E from table to D | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D, E] | Plan so far [Move D from B to table | Move B from C to table | Move C from A to table | Move A from E to table | Move E from table to D] | Exploring action Move C from table to A | New state -> Stack 1: [A, C], Stack 2: [B], Stack 3: [D, E] | Exploring action Move C from table to B | New state -> Stack 1: [A], Stack 2: [B, C], Stack 3: [D, E] | Exploring action Move B from table to A | New state -> Stack 1: [A, B], Stack 2: [C], Stack 3: [D, E] | Exploring action Move D from table to E | New state -> Invalid | Exploring action Move D from table to A | New state -> Invalid | Taking action Move B from table to A | Moved to state -> Stack 1: [A, B], Stack 2: [C], Stack 3: [D, E] | Plan so far [Move D from B to table | Move B from C to table | Move C from A to table | Move A from E to table | Move E from table to D | Move B from table to A] | Exploring action Move A from table to E | New state -> Invalid | Exploring action Move B from A to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D, E] | Exploring action Move E from D to table | New state -> Stack 1: [A, B], Stack 2: [C], Stack 3: [D], Stack 4: [E] | Exploring action Move C from table to B | New state -> Stack 1: [A, B, C], Stack 2: [D, E] | Taking action Move C from table to B | Moved to state -> Stack 1: [A, B, C], Stack 2: [D, E] | Plan so far [Move D from B to table | Move B from C to table | Move C from A to table | Move A from E to table | Move E from table to D | Move B from table to A | Move C from table to B] | Reached goal state!",
        "system2_states_v1": 33
    },
    {
        "idx": 780,
        "start": [
            [
                "table",
                "D",
                "A",
                "F",
                "B",
                "C",
                "E"
            ]
        ],
        "goal": [
            [
                "table",
                "A",
                "F"
            ],
            [
                "table",
                "C",
                "D",
                "E",
                "B"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": false,
                "on": "D",
                "under": "F",
                "ontable": false
            },
            "B": {
                "clear": false,
                "on": "F",
                "under": "C",
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": "B",
                "under": "E",
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": -1,
                "under": "A",
                "ontable": true
            },
            "E": {
                "clear": true,
                "on": "C",
                "under": -1,
                "ontable": false
            },
            "F": {
                "clear": false,
                "on": "A",
                "under": "B",
                "ontable": false
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": false,
                "on": -1,
                "under": "F",
                "ontable": true
            },
            "B": {
                "clear": true,
                "on": "E",
                "under": -1,
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": -1,
                "under": "D",
                "ontable": true
            },
            "D": {
                "clear": false,
                "on": "C",
                "under": "E",
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": "D",
                "under": "B",
                "ontable": false
            },
            "F": {
                "clear": true,
                "on": "A",
                "under": -1,
                "ontable": false
            }
        },
        "plan_len": 9,
        "num_blocks": 6,
        "prompt": "The initial state:\nThe hand is empty.\nD is on the table. A is on D. F is on A. B is on F. C is on B. E is on C. E is clear.\n\nThe goal is:\nA is on the table. F is on A. F is clear.\nC is on the table. D is on C. E is on D. B is on E. B is clear.\n",
        "system1_plan": "Move E from C to table | Move C from B to table | Move B from F to table | Move F from A to table | Move A from D to table | Move F from table to A | Move D from table to C | Move E from table to D | Move B from table to E",
        "system1_states": 9,
        "system2_plan_v1": "Moved to state -> Stack 1: [D, A, F, B, C, E] | Plan so far [] | Exploring action Move B from F to E | New state -> Invalid | Exploring action Move E from C to table | New state -> Stack 1: [D, A, F, B, C], Stack 2: [E] | Exploring action Move F from A to table | New state -> Invalid | Taking action Move E from C to table | Moved to state -> Stack 1: [D, A, F, B, C], Stack 2: [E] | Plan so far [Move E from C to table] | Exploring action Move C from B to E | New state -> Stack 1: [D, A, F, B], Stack 2: [E, C] | Exploring action Move F from A to E | New state -> Invalid | Exploring action Move A from D to table | New state -> Invalid | Exploring action Move C from B to table | New state -> Stack 1: [C], Stack 2: [D, A, F, B], Stack 3: [E] | Exploring action Move E from table to C | New state -> Stack 1: [D, A, F, B, C, E] | Taking action Move C from B to table | Moved to state -> Stack 1: [C], Stack 2: [D, A, F, B], Stack 3: [E] | Plan so far [Move E from C to table | Move C from B to table] | Exploring action Move B from F to table | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, A, F], Stack 4: [E] | Exploring action Move B from F to E | New state -> Stack 1: [C], Stack 2: [D, A, F], Stack 3: [E, B] | Exploring action Move B from F to C | New state -> Stack 1: [C, B], Stack 2: [D, A, F], Stack 3: [E] | Exploring action Move D from table to C | New state -> Invalid | Taking action Move B from F to table | Moved to state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, A, F], Stack 4: [E] | Plan so far [Move E from C to table | Move C from B to table | Move B from F to table] | Exploring action Move A from D to C | New state -> Invalid | Exploring action Move E from table to B | New state -> Stack 1: [B, E], Stack 2: [C], Stack 3: [D, A, F] | Exploring action Move B from table to E | New state -> Stack 1: [C], Stack 2: [D, A, F], Stack 3: [E, B] | Exploring action Move F from A to table | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, A], Stack 4: [E], Stack 5: [F] | Taking action Move B from F to E | Moved to state -> Stack 1: [C], Stack 2: [D, A, F], Stack 3: [E, B] | Plan so far [Move E from C to table | Move C from B to table | Move B from F to E] | Exploring action Move E from table to F | New state -> Invalid | Exploring action Move B from E to table | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, A, F], Stack 4: [E] | Exploring action Move B from E to C | New state -> Stack 1: [C, B], Stack 2: [D, A, F], Stack 3: [E] | Exploring action Move F from A to table | New state -> Stack 1: [C], Stack 2: [D, A], Stack 3: [E, B], Stack 4: [F] | Taking action Move B from F to C | Moved to state -> Stack 1: [C, B], Stack 2: [D, A, F], Stack 3: [E] | Plan so far [Move E from C to table | Move C from B to table | Move B from F to C] | Exploring action Move B from C to E | New state -> Stack 1: [C], Stack 2: [D, A, F], Stack 3: [E, B] | Exploring action Move F from A to table | New state -> Stack 1: [C, B], Stack 2: [D, A], Stack 3: [E], Stack 4: [F] | Exploring action Move B from C to table | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, A, F], Stack 4: [E] | Exploring action Move D from table to B | New state -> Invalid | Taking action Move F from A to table | Moved to state -> Stack 1: [C], Stack 2: [D, A], Stack 3: [E, B], Stack 4: [F] | Plan so far [Move E from C to table | Move C from B to table | Move B from F to E | Move F from A to table] | Exploring action Move D from table to F | New state -> Invalid | Exploring action Move A from D to table | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D], Stack 4: [E, B], Stack 5: [F] | Exploring action Move F from table to A | New state -> Stack 1: [C], Stack 2: [D, A, F], Stack 3: [E, B] | Exploring action Move A from D to C | New state -> Stack 1: [C, A], Stack 2: [D], Stack 3: [E, B], Stack 4: [F] | Exploring action Move E from table to C | New state -> Invalid | Taking action Move B from C to table | Moved to state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, A, F], Stack 4: [E] | Plan so far [Move E from C to table | Move C from B to table | Move B from F to C | Move B from C to table] | Taking action Move B from C to E | Moved to state -> Stack 1: [C], Stack 2: [D, A, F], Stack 3: [E, B] | Plan so far [Move E from C to table | Move C from B to table | Move B from F to C | Move B from C to E] | Taking action Move B from table to E | Moved to state -> Stack 1: [C], Stack 2: [D, A, F], Stack 3: [E, B] | Plan so far [Move E from C to table | Move C from B to table | Move B from F to table | Move B from table to E] | Taking action Move B from E to table | Moved to state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, A, F], Stack 4: [E] | Plan so far [Move E from C to table | Move C from B to table | Move B from F to E | Move B from E to table] | Taking action Move F from A to table | Moved to state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, A], Stack 4: [E], Stack 5: [F] | Plan so far [Move E from C to table | Move C from B to table | Move B from F to table | Move F from A to table] | Exploring action Move A from D to B | New state -> Stack 1: [B, A], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Exploring action Move A from D to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Exploring action Move D from table to B | New state -> Invalid | Exploring action Move D from table to A | New state -> Invalid | Exploring action Move A from D to C | New state -> Stack 1: [B], Stack 2: [C, A], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Taking action Move A from D to table | Moved to state -> Stack 1: [A], Stack 2: [C], Stack 3: [D], Stack 4: [E, B], Stack 5: [F] | Plan so far [Move E from C to table | Move C from B to table | Move B from F to E | Move F from A to table | Move A from D to table] | Exploring action Move E from table to C | New state -> Invalid | Exploring action Move D from table to C | New state -> Stack 1: [A], Stack 2: [C, D], Stack 3: [E, B], Stack 4: [F] | Exploring action Move B from E to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Exploring action Move E from table to D | New state -> Invalid | Exploring action Move F from table to A | New state -> Stack 1: [A, F], Stack 2: [C], Stack 3: [D], Stack 4: [E, B] | Taking action Move F from table to A | Moved to state -> Stack 1: [A, F], Stack 2: [C], Stack 3: [D], Stack 4: [E, B] | Plan so far [Move E from C to table | Move C from B to table | Move B from F to E | Move F from A to table | Move A from D to table | Move F from table to A] | Exploring action Move D from table to C | New state -> Stack 1: [A, F], Stack 2: [C, D], Stack 3: [E, B] | Exploring action Move B from E to table | New state -> Stack 1: [A, F], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Exploring action Move B from E to D | New state -> Stack 1: [A, F], Stack 2: [C], Stack 3: [D, B], Stack 4: [E] | Exploring action Move E from table to B | New state -> Invalid | Exploring action Move A from table to B | New state -> Invalid | Taking action Move D from table to C | Moved to state -> Stack 1: [A, F], Stack 2: [C, D], Stack 3: [E, B] | Plan so far [Move E from C to table | Move C from B to table | Move B from F to E | Move F from A to table | Move A from D to table | Move F from table to A | Move D from table to C] | Exploring action Move E from table to B | New state -> Invalid | Exploring action Move B from E to table | New state -> Stack 1: [A, F], Stack 2: [B], Stack 3: [C, D], Stack 4: [E] | Exploring action Move D from C to table | New state -> Stack 1: [A, F], Stack 2: [C], Stack 3: [D], Stack 4: [E, B] | Exploring action Move C from table to F | New state -> Invalid | Exploring action Move B from E to D | New state -> Stack 1: [A, F], Stack 2: [C, D, B], Stack 3: [E] | Taking action Move A from D to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Plan so far [Move E from C to table | Move C from B to table | Move B from F to table | Move F from A to table | Move A from D to table] | Exploring action Move D from table to C | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, D], Stack 4: [E], Stack 5: [F] | Exploring action Move B from table to E | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D], Stack 4: [E, B], Stack 5: [F] | Exploring action Move F from table to A | New state -> Stack 1: [A, F], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Taking action Move F from table to A | Moved to state -> Stack 1: [A, F], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Plan so far [Move E from C to table | Move C from B to table | Move B from F to table | Move F from A to table | Move A from D to table | Move F from table to A] | Exploring action Move B from table to E | New state -> Stack 1: [A, F], Stack 2: [C], Stack 3: [D], Stack 4: [E, B] | Exploring action Move D from table to C | New state -> Stack 1: [A, F], Stack 2: [B], Stack 3: [C, D], Stack 4: [E] | Exploring action Move B from table to C | New state -> Stack 1: [A, F], Stack 2: [C, B], Stack 3: [D], Stack 4: [E] | Exploring action Move A from table to D | New state -> Invalid | Taking action Move D from table to C | Moved to state -> Stack 1: [A, F], Stack 2: [B], Stack 3: [C, D], Stack 4: [E] | Plan so far [Move E from C to table | Move C from B to table | Move B from F to table | Move F from A to table | Move A from D to table | Move F from table to A | Move D from table to C] | Exploring action Move A from table to E | New state -> Invalid | Exploring action Move E from table to D | New state -> Stack 1: [A, F], Stack 2: [B], Stack 3: [C, D, E] | Exploring action Move B from table to E | New state -> Stack 1: [A, F], Stack 2: [C, D], Stack 3: [E, B] | Exploring action Move B from table to D | New state -> Stack 1: [A, F], Stack 2: [C, D, B], Stack 3: [E] | Taking action Move E from table to D | Moved to state -> Stack 1: [A, F], Stack 2: [B], Stack 3: [C, D, E] | Plan so far [Move E from C to table | Move C from B to table | Move B from F to table | Move F from A to table | Move A from D to table | Move F from table to A | Move D from table to C | Move E from table to D] | Exploring action Move D from C to B | New state -> Invalid | Exploring action Move C from table to B | New state -> Invalid | Exploring action Move E from D to table | New state -> Stack 1: [A, F], Stack 2: [B], Stack 3: [C, D], Stack 4: [E] | Exploring action Move B from table to E | New state -> Stack 1: [A, F], Stack 2: [C, D, E, B] | Exploring action Move F from A to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, D, E], Stack 4: [F] | Taking action Move B from table to E | Moved to state -> Stack 1: [A, F], Stack 2: [C, D, E, B] | Plan so far [Move E from C to table | Move C from B to table | Move B from F to table | Move F from A to table | Move A from D to table | Move F from table to A | Move D from table to C | Move E from table to D | Move B from table to E] | Reached goal state!",
        "system2_states_v1": 65
    },
    {
        "idx": 620,
        "start": [
            [
                "table",
                "A",
                "B",
                "D",
                "E",
                "C"
            ]
        ],
        "goal": [
            [
                "table",
                "A"
            ],
            [
                "table",
                "D",
                "C",
                "B",
                "E"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": false,
                "on": -1,
                "under": "B",
                "ontable": true
            },
            "B": {
                "clear": false,
                "on": "A",
                "under": "D",
                "ontable": false
            },
            "C": {
                "clear": true,
                "on": "E",
                "under": -1,
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": "B",
                "under": "E",
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": "D",
                "under": "C",
                "ontable": false
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": true,
                "on": -1,
                "under": -1,
                "ontable": true
            },
            "B": {
                "clear": false,
                "on": "C",
                "under": "E",
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": "D",
                "under": "B",
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": -1,
                "under": "C",
                "ontable": true
            },
            "E": {
                "clear": true,
                "on": "B",
                "under": -1,
                "ontable": false
            }
        },
        "plan_len": 7,
        "num_blocks": 5,
        "prompt": "The initial state:\nThe hand is empty.\nA is on the table. B is on A. D is on B. E is on D. C is on E. C is clear.\n\nThe goal is:\nA is on the table. A is clear.\nD is on the table. C is on D. B is on C. E is on B. E is clear.\n",
        "system1_plan": "Move C from E to table | Move E from D to table | Move D from B to table | Move B from A to table | Move C from table to D | Move B from table to C | Move E from table to B",
        "system1_states": 7,
        "system2_plan_v1": "Moved to state -> Stack 1: [A, B, D, E, C] | Plan so far [] | Exploring action Move D from B to table | New state -> Invalid | Exploring action Move E from D to table | New state -> Invalid | Exploring action Move C from E to table | New state -> Stack 1: [A, B, D, E], Stack 2: [C] | Taking action Move C from E to table | Moved to state -> Stack 1: [A, B, D, E], Stack 2: [C] | Plan so far [Move C from E to table] | Exploring action Move D from B to C | New state -> Invalid | Exploring action Move E from D to table | New state -> Stack 1: [A, B, D], Stack 2: [C], Stack 3: [E] | Exploring action Move B from A to table | New state -> Invalid | Exploring action Move E from D to C | New state -> Stack 1: [A, B, D], Stack 2: [C, E] | Exploring action Move C from table to E | New state -> Stack 1: [A, B, D, E, C] | Taking action Move E from D to table | Moved to state -> Stack 1: [A, B, D], Stack 2: [C], Stack 3: [E] | Plan so far [Move C from E to table | Move E from D to table] | Exploring action Move A from table to D | New state -> Invalid | Exploring action Move D from B to E | New state -> Stack 1: [A, B], Stack 2: [C], Stack 3: [E, D] | Exploring action Move D from B to table | New state -> Stack 1: [A, B], Stack 2: [C], Stack 3: [D], Stack 4: [E] | Exploring action Move D from B to C | New state -> Stack 1: [A, B], Stack 2: [C, D], Stack 3: [E] | Taking action Move D from B to table | Moved to state -> Stack 1: [A, B], Stack 2: [C], Stack 3: [D], Stack 4: [E] | Plan so far [Move C from E to table | Move E from D to table | Move D from B to table] | Exploring action Move B from A to D | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, B], Stack 4: [E] | Exploring action Move A from table to D | New state -> Invalid | Exploring action Move B from A to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Exploring action Move A from table to E | New state -> Invalid | Exploring action Move C from table to D | New state -> Stack 1: [A, B], Stack 2: [D, C], Stack 3: [E] | Taking action Move B from A to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Plan so far [Move C from E to table | Move E from D to table | Move D from B to table | Move B from A to table] | Exploring action Move E from table to B | New state -> Stack 1: [A], Stack 2: [B, E], Stack 3: [C], Stack 4: [D] | Exploring action Move B from table to D | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, B], Stack 4: [E] | Exploring action Move C from table to D | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, C], Stack 4: [E] | Taking action Move C from table to D | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, C], Stack 4: [E] | Plan so far [Move C from E to table | Move E from D to table | Move D from B to table | Move B from A to table | Move C from table to D] | Exploring action Move C from D to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Exploring action Move D from table to A | New state -> Invalid | Exploring action Move B from table to C | New state -> Stack 1: [A], Stack 2: [D, C, B], Stack 3: [E] | Exploring action Move E from table to B | New state -> Stack 1: [A], Stack 2: [B, E], Stack 3: [D, C] | Taking action Move B from table to C | Moved to state -> Stack 1: [A], Stack 2: [D, C, B], Stack 3: [E] | Plan so far [Move C from E to table | Move E from D to table | Move D from B to table | Move B from A to table | Move C from table to D | Move B from table to C] | Exploring action Move E from table to A | New state -> Stack 1: [A, E], Stack 2: [D, C, B] | Exploring action Move E from table to B | New state -> Stack 1: [A], Stack 2: [D, C, B, E] | Exploring action Move C from D to table | New state -> Invalid | Exploring action Move B from C to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, C], Stack 4: [E] | Exploring action Move C from D to A | New state -> Invalid | Taking action Move E from table to B | Moved to state -> Stack 1: [A], Stack 2: [D, C, B, E] | Plan so far [Move C from E to table | Move E from D to table | Move D from B to table | Move B from A to table | Move C from table to D | Move B from table to C | Move E from table to B] | Reached goal state!",
        "system2_states_v1": 29
    },
    {
        "idx": 575,
        "start": [
            [
                "table",
                "A"
            ],
            [
                "table",
                "E",
                "B",
                "D",
                "C"
            ]
        ],
        "goal": [
            [
                "table",
                "B",
                "E",
                "A",
                "D",
                "C"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": true,
                "on": -1,
                "under": -1,
                "ontable": true
            },
            "B": {
                "clear": false,
                "on": "E",
                "under": "D",
                "ontable": false
            },
            "C": {
                "clear": true,
                "on": "D",
                "under": -1,
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": "B",
                "under": "C",
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": -1,
                "under": "B",
                "ontable": true
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": false,
                "on": "E",
                "under": "D",
                "ontable": false
            },
            "B": {
                "clear": false,
                "on": -1,
                "under": "E",
                "ontable": true
            },
            "C": {
                "clear": true,
                "on": "D",
                "under": -1,
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": "A",
                "under": "C",
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": "B",
                "under": "A",
                "ontable": false
            }
        },
        "plan_len": 7,
        "num_blocks": 5,
        "prompt": "The initial state:\nThe hand is empty.\nA is on the table. A is clear.\nE is on the table. B is on E. D is on B. C is on D. C is clear.\n\nThe goal is:\nB is on the table. E is on B. A is on E. D is on A. C is on D. C is clear.\n",
        "system1_plan": "Move C from D to table | Move D from B to table | Move B from E to table | Move E from table to B | Move A from table to E | Move D from table to A | Move C from table to D",
        "system1_states": 7,
        "system2_plan_v1": "Moved to state -> Stack 1: [A], Stack 2: [E, B, D, C] | Plan so far [] | Exploring action Move B from E to table | New state -> Invalid | Exploring action Move A from table to C | New state -> Stack 1: [E, B, D, C, A] | Exploring action Move C from D to A | New state -> Stack 1: [A, C], Stack 2: [E, B, D] | Exploring action Move C from D to table | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [E, B, D] | Exploring action Move E from table to C | New state -> Invalid | Taking action Move C from D to table | Moved to state -> Stack 1: [A], Stack 2: [C], Stack 3: [E, B, D] | Plan so far [Move C from D to table] | Exploring action Move D from B to A | New state -> Stack 1: [A, D], Stack 2: [C], Stack 3: [E, B] | Exploring action Move D from B to table | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D], Stack 4: [E, B] | Exploring action Move B from E to table | New state -> Invalid | Exploring action Move B from E to D | New state -> Invalid | Exploring action Move D from B to C | New state -> Stack 1: [A], Stack 2: [C, D], Stack 3: [E, B] | Taking action Move D from B to table | Moved to state -> Stack 1: [A], Stack 2: [C], Stack 3: [D], Stack 4: [E, B] | Plan so far [Move C from D to table | Move D from B to table] | Exploring action Move B from E to D | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, B], Stack 4: [E] | Exploring action Move E from table to B | New state -> Invalid | Exploring action Move B from E to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Exploring action Move B from E to C | New state -> Stack 1: [A], Stack 2: [C, B], Stack 3: [D], Stack 4: [E] | Exploring action Move E from table to C | New state -> Invalid | Taking action Move B from E to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Plan so far [Move C from D to table | Move D from B to table | Move B from E to table] | Exploring action Move E from table to B | New state -> Stack 1: [A], Stack 2: [B, E], Stack 3: [C], Stack 4: [D] | Exploring action Move C from table to D | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, C], Stack 4: [E] | Exploring action Move A from table to D | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, A], Stack 4: [E] | Taking action Move E from table to B | Moved to state -> Stack 1: [A], Stack 2: [B, E], Stack 3: [C], Stack 4: [D] | Plan so far [Move C from D to table | Move D from B to table | Move B from E to table | Move E from table to B] | Exploring action Move C from table to D | New state -> Stack 1: [A], Stack 2: [B, E], Stack 3: [D, C] | Exploring action Move A from table to E | New state -> Stack 1: [B, E, A], Stack 2: [C], Stack 3: [D] | Exploring action Move A from table to C | New state -> Stack 1: [B, E], Stack 2: [C, A], Stack 3: [D] | Exploring action Move B from table to C | New state -> Invalid | Exploring action Move B from table to E | New state -> Invalid | Taking action Move A from table to E | Moved to state -> Stack 1: [B, E, A], Stack 2: [C], Stack 3: [D] | Plan so far [Move C from D to table | Move D from B to table | Move B from E to table | Move E from table to B | Move A from table to E] | Exploring action Move D from table to C | New state -> Stack 1: [B, E, A], Stack 2: [C, D] | Exploring action Move D from table to A | New state -> Stack 1: [B, E, A, D], Stack 2: [C] | Exploring action Move B from table to C | New state -> Invalid | Exploring action Move B from table to A | New state -> Invalid | Exploring action Move C from table to D | New state -> Stack 1: [B, E, A], Stack 2: [D, C] | Taking action Move D from table to A | Moved to state -> Stack 1: [B, E, A, D], Stack 2: [C] | Plan so far [Move C from D to table | Move D from B to table | Move B from E to table | Move E from table to B | Move A from table to E | Move D from table to A] | Exploring action Move D from A to C | New state -> Stack 1: [B, E, A], Stack 2: [C, D] | Exploring action Move A from E to C | New state -> Invalid | Exploring action Move D from A to table | New state -> Stack 1: [B, E, A], Stack 2: [C], Stack 3: [D] | Exploring action Move C from table to D | New state -> Stack 1: [B, E, A, D, C] | Taking action Move C from table to D | Moved to state -> Stack 1: [B, E, A, D, C] | Plan so far [Move C from D to table | Move D from B to table | Move B from E to table | Move E from table to B | Move A from table to E | Move D from table to A | Move C from table to D] | Reached goal state!",
        "system2_states_v1": 32
    },
    {
        "idx": 716,
        "start": [
            [
                "table",
                "B"
            ],
            [
                "table",
                "F",
                "D",
                "A",
                "E",
                "C"
            ]
        ],
        "goal": [
            [
                "table",
                "C"
            ],
            [
                "table",
                "D",
                "F",
                "E",
                "A",
                "B"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": false,
                "on": "D",
                "under": "E",
                "ontable": false
            },
            "B": {
                "clear": true,
                "on": -1,
                "under": -1,
                "ontable": true
            },
            "C": {
                "clear": true,
                "on": "E",
                "under": -1,
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": "F",
                "under": "A",
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": "A",
                "under": "C",
                "ontable": false
            },
            "F": {
                "clear": false,
                "on": -1,
                "under": "D",
                "ontable": true
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": false,
                "on": "E",
                "under": "B",
                "ontable": false
            },
            "B": {
                "clear": true,
                "on": "A",
                "under": -1,
                "ontable": false
            },
            "C": {
                "clear": true,
                "on": -1,
                "under": -1,
                "ontable": true
            },
            "D": {
                "clear": false,
                "on": -1,
                "under": "F",
                "ontable": true
            },
            "E": {
                "clear": false,
                "on": "F",
                "under": "A",
                "ontable": false
            },
            "F": {
                "clear": false,
                "on": "D",
                "under": "E",
                "ontable": false
            }
        },
        "plan_len": 8,
        "num_blocks": 6,
        "prompt": "The initial state:\nThe hand is empty.\nB is on the table. B is clear.\nF is on the table. D is on F. A is on D. E is on A. C is on E. C is clear.\n\nThe goal is:\nC is on the table. C is clear.\nD is on the table. F is on D. E is on F. A is on E. B is on A. B is clear.\n",
        "system1_plan": "Move C from E to table | Move E from A to table | Move A from D to table | Move D from F to table | Move F from table to D | Move E from table to F | Move A from table to E | Move B from table to A",
        "system1_states": 8,
        "system2_plan_v1": "Moved to state -> Stack 1: [B], Stack 2: [F, D, A, E, C] | Plan so far [] | Exploring action Move C from E to table | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [F, D, A, E] | Exploring action Move C from E to B | New state -> Stack 1: [B, C], Stack 2: [F, D, A, E] | Exploring action Move B from table to C | New state -> Stack 1: [F, D, A, E, C, B] | Exploring action Move E from A to table | New state -> Invalid | Taking action Move C from E to table | Moved to state -> Stack 1: [B], Stack 2: [C], Stack 3: [F, D, A, E] | Plan so far [Move C from E to table] | Exploring action Move E from A to C | New state -> Stack 1: [B], Stack 2: [C, E], Stack 3: [F, D, A] | Exploring action Move F from table to B | New state -> Invalid | Exploring action Move E from A to table | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [E], Stack 4: [F, D, A] | Exploring action Move E from A to B | New state -> Stack 1: [B, E], Stack 2: [C], Stack 3: [F, D, A] | Taking action Move E from A to table | Moved to state -> Stack 1: [B], Stack 2: [C], Stack 3: [E], Stack 4: [F, D, A] | Plan so far [Move C from E to table | Move E from A to table] | Exploring action Move A from D to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [E], Stack 5: [F, D] | Exploring action Move A from D to B | New state -> Stack 1: [B, A], Stack 2: [C], Stack 3: [E], Stack 4: [F, D] | Exploring action Move D from F to A | New state -> Invalid | Exploring action Move B from table to A | New state -> Stack 1: [C], Stack 2: [E], Stack 3: [F, D, A, B] | Exploring action Move F from table to A | New state -> Invalid | Taking action Move A from D to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [E], Stack 5: [F, D] | Plan so far [Move C from E to table | Move E from A to table | Move A from D to table] | Exploring action Move F from table to E | New state -> Invalid | Exploring action Move F from table to A | New state -> Invalid | Exploring action Move B from table to A | New state -> Stack 1: [A, B], Stack 2: [C], Stack 3: [E], Stack 4: [F, D] | Exploring action Move D from F to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Exploring action Move D from F to A | New state -> Stack 1: [A, D], Stack 2: [B], Stack 3: [C], Stack 4: [E], Stack 5: [F] | Taking action Move D from F to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Plan so far [Move C from E to table | Move E from A to table | Move A from D to table | Move D from F to table] | Exploring action Move B from table to A | New state -> Stack 1: [A, B], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Exploring action Move A from table to B | New state -> Stack 1: [B, A], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Exploring action Move F from table to D | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D, F], Stack 5: [E] | Taking action Move F from table to D | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D, F], Stack 5: [E] | Plan so far [Move C from E to table | Move E from A to table | Move A from D to table | Move D from F to table | Move F from table to D] | Exploring action Move A from table to E | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, F], Stack 4: [E, A] | Exploring action Move B from table to A | New state -> Stack 1: [A, B], Stack 2: [C], Stack 3: [D, F], Stack 4: [E] | Exploring action Move D from table to C | New state -> Invalid | Exploring action Move E from table to F | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D, F, E] | Taking action Move E from table to F | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D, F, E] | Plan so far [Move C from E to table | Move E from A to table | Move A from D to table | Move D from F to table | Move F from table to D | Move E from table to F] | Exploring action Move A from table to B | New state -> Stack 1: [B, A], Stack 2: [C], Stack 3: [D, F, E] | Exploring action Move A from table to E | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, F, E, A] | Exploring action Move B from table to A | New state -> Stack 1: [A, B], Stack 2: [C], Stack 3: [D, F, E] | Exploring action Move D from table to B | New state -> Invalid | Taking action Move A from table to E | Moved to state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, F, E, A] | Plan so far [Move C from E to table | Move E from A to table | Move A from D to table | Move D from F to table | Move F from table to D | Move E from table to F | Move A from table to E] | Exploring action Move E from F to C | New state -> Invalid | Exploring action Move F from D to A | New state -> Invalid | Exploring action Move C from table to A | New state -> Stack 1: [B], Stack 2: [D, F, E, A, C] | Exploring action Move A from E to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D, F, E] | Exploring action Move B from table to A | New state -> Stack 1: [C], Stack 2: [D, F, E, A, B] | Taking action Move B from table to A | Moved to state -> Stack 1: [C], Stack 2: [D, F, E, A, B] | Plan so far [Move C from E to table | Move E from A to table | Move A from D to table | Move D from F to table | Move F from table to D | Move E from table to F | Move A from table to E | Move B from table to A] | Reached goal state!",
        "system2_states_v1": 34
    },
    {
        "idx": 692,
        "start": [
            [
                "table",
                "D",
                "F",
                "A",
                "B"
            ],
            [
                "table",
                "E",
                "C"
            ]
        ],
        "goal": [
            [
                "table",
                "B",
                "E",
                "F"
            ],
            [
                "table",
                "C",
                "D",
                "A"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": false,
                "on": "F",
                "under": "B",
                "ontable": false
            },
            "B": {
                "clear": true,
                "on": "A",
                "under": -1,
                "ontable": false
            },
            "C": {
                "clear": true,
                "on": "E",
                "under": -1,
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": -1,
                "under": "F",
                "ontable": true
            },
            "E": {
                "clear": false,
                "on": -1,
                "under": "C",
                "ontable": true
            },
            "F": {
                "clear": false,
                "on": "D",
                "under": "A",
                "ontable": false
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": true,
                "on": "D",
                "under": -1,
                "ontable": false
            },
            "B": {
                "clear": false,
                "on": -1,
                "under": "E",
                "ontable": true
            },
            "C": {
                "clear": false,
                "on": -1,
                "under": "D",
                "ontable": true
            },
            "D": {
                "clear": false,
                "on": "C",
                "under": "A",
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": "B",
                "under": "F",
                "ontable": false
            },
            "F": {
                "clear": true,
                "on": "E",
                "under": -1,
                "ontable": false
            }
        },
        "plan_len": 8,
        "num_blocks": 6,
        "prompt": "The initial state:\nThe hand is empty.\nD is on the table. F is on D. A is on F. B is on A. B is clear.\nE is on the table. C is on E. C is clear.\n\nThe goal is:\nB is on the table. E is on B. F is on E. F is clear.\nC is on the table. D is on C. A is on D. A is clear.\n",
        "system1_plan": "Move B from A to table | Move A from F to table | Move F from D to table | Move C from E to table | Move D from table to C | Move A from table to D | Move E from table to B | Move F from table to E",
        "system1_states": 8,
        "system2_plan_v1": "Moved to state -> Stack 1: [D, F, A, B], Stack 2: [E, C] | Plan so far [] | Exploring action Move D from table to B | New state -> Invalid | Exploring action Move F from D to table | New state -> Invalid | Exploring action Move C from E to table | New state -> Stack 1: [C], Stack 2: [D, F, A, B], Stack 3: [E] | Exploring action Move B from A to table | New state -> Stack 1: [B], Stack 2: [D, F, A], Stack 3: [E, C] | Exploring action Move B from A to C | New state -> Stack 1: [D, F, A], Stack 2: [E, C, B] | Taking action Move B from A to table | Moved to state -> Stack 1: [B], Stack 2: [D, F, A], Stack 3: [E, C] | Plan so far [Move B from A to table] | Exploring action Move D from table to B | New state -> Invalid | Exploring action Move A from F to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, F], Stack 4: [E, C] | Exploring action Move C from E to A | New state -> Stack 1: [B], Stack 2: [D, F, A, C], Stack 3: [E] | Exploring action Move C from E to table | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, F, A], Stack 4: [E] | Exploring action Move F from D to A | New state -> Invalid | Taking action Move C from E to table | Moved to state -> Stack 1: [C], Stack 2: [D, F, A, B], Stack 3: [E] | Plan so far [Move C from E to table] | Exploring action Move B from A to table | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, F, A], Stack 4: [E] | Exploring action Move B from A to E | New state -> Stack 1: [C], Stack 2: [D, F, A], Stack 3: [E, B] | Exploring action Move F from D to table | New state -> Invalid | Exploring action Move B from A to C | New state -> Stack 1: [C, B], Stack 2: [D, F, A], Stack 3: [E] | Exploring action Move A from F to B | New state -> Invalid | Taking action Move A from F to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, F], Stack 4: [E, C] | Plan so far [Move B from A to table | Move A from F to table] | Exploring action Move F from D to A | New state -> Stack 1: [A, F], Stack 2: [B], Stack 3: [D], Stack 4: [E, C] | Exploring action Move C from E to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D, F], Stack 5: [E] | Exploring action Move D from table to A | New state -> Invalid | Exploring action Move D from table to C | New state -> Invalid | Exploring action Move F from D to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D], Stack 4: [E, C], Stack 5: [F] | Taking action Move C from E to table | Moved to state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, F, A], Stack 4: [E] | Plan so far [Move B from A to table | Move C from E to table] | Exploring action Move A from F to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D, F], Stack 5: [E] | Exploring action Move F from D to table | New state -> Invalid | Exploring action Move A from F to C | New state -> Stack 1: [B], Stack 2: [C, A], Stack 3: [D, F], Stack 4: [E] | Exploring action Move E from table to B | New state -> Stack 1: [B, E], Stack 2: [C], Stack 3: [D, F, A] | Taking action Move F from D to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [D], Stack 4: [E, C], Stack 5: [F] | Plan so far [Move B from A to table | Move A from F to table | Move F from D to table] | Exploring action Move E from table to D | New state -> Invalid | Exploring action Move E from table to C | New state -> Invalid | Exploring action Move C from E to D | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, C], Stack 4: [E], Stack 5: [F] | Exploring action Move C from E to F | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D], Stack 4: [E], Stack 5: [F, C] | Exploring action Move C from E to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Taking action Move A from F to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D, F], Stack 5: [E] | Plan so far [Move B from A to table | Move C from E to table | Move A from F to table] | Exploring action Move F from D to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Exploring action Move F from D to E | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E, F] | Exploring action Move E from table to B | New state -> Stack 1: [A], Stack 2: [B, E], Stack 3: [C], Stack 4: [D, F] | Exploring action Move D from table to E | New state -> Invalid | Taking action Move C from E to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Plan so far [Move B from A to table | Move A from F to table | Move F from D to table | Move C from E to table] | Exploring action Move F from table to E | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E, F] | Exploring action Move E from table to B | New state -> Stack 1: [A], Stack 2: [B, E], Stack 3: [C], Stack 4: [D], Stack 5: [F] | Exploring action Move D from table to C | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, D], Stack 4: [E], Stack 5: [F] | Taking action Move B from A to table | Moved to state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, F, A], Stack 4: [E] | Plan so far [Move C from E to table | Move B from A to table] | Taking action Move D from table to C | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, D], Stack 4: [E], Stack 5: [F] | Plan so far [Move B from A to table | Move A from F to table | Move F from D to table | Move C from E to table | Move D from table to C] | Exploring action Move F from table to E | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, D], Stack 4: [E, F] | Exploring action Move C from table to E | New state -> Invalid | Exploring action Move C from table to D | New state -> Invalid | Exploring action Move A from table to D | New state -> Stack 1: [B], Stack 2: [C, D, A], Stack 3: [E], Stack 4: [F] | Exploring action Move E from table to B | New state -> Stack 1: [A], Stack 2: [B, E], Stack 3: [C, D], Stack 4: [F] | Taking action Move A from table to D | Moved to state -> Stack 1: [B], Stack 2: [C, D, A], Stack 3: [E], Stack 4: [F] | Plan so far [Move B from A to table | Move A from F to table | Move F from D to table | Move C from E to table | Move D from table to C | Move A from table to D] | Exploring action Move F from table to E | New state -> Stack 1: [B], Stack 2: [C, D, A], Stack 3: [E, F] | Exploring action Move E from table to B | New state -> Stack 1: [B, E], Stack 2: [C, D, A], Stack 3: [F] | Exploring action Move B from table to F | New state -> Stack 1: [C, D, A], Stack 2: [E], Stack 3: [F, B] | Exploring action Move D from C to E | New state -> Invalid | Exploring action Move C from table to F | New state -> Invalid | Taking action Move E from table to B | Moved to state -> Stack 1: [B, E], Stack 2: [C, D, A], Stack 3: [F] | Plan so far [Move B from A to table | Move A from F to table | Move F from D to table | Move C from E to table | Move D from table to C | Move A from table to D | Move E from table to B] | Exploring action Move E from B to F | New state -> Stack 1: [B], Stack 2: [C, D, A], Stack 3: [F, E] | Exploring action Move F from table to E | New state -> Stack 1: [B, E, F], Stack 2: [C, D, A] | Exploring action Move B from table to A | New state -> Invalid | Exploring action Move E from B to table | New state -> Stack 1: [B], Stack 2: [C, D, A], Stack 3: [E], Stack 4: [F] | Taking action Move F from table to E | Moved to state -> Stack 1: [B, E, F], Stack 2: [C, D, A] | Plan so far [Move B from A to table | Move A from F to table | Move F from D to table | Move C from E to table | Move D from table to C | Move A from table to D | Move E from table to B | Move F from table to E] | Reached goal state!",
        "system2_states_v1": 50
    },
    {
        "idx": 896,
        "start": [
            [
                "table",
                "A",
                "G",
                "F"
            ],
            [
                "table",
                "B",
                "E",
                "D",
                "C"
            ]
        ],
        "goal": [
            [
                "table",
                "D",
                "B",
                "A"
            ],
            [
                "table",
                "G",
                "C",
                "F",
                "E"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": false,
                "on": -1,
                "under": "G",
                "ontable": true
            },
            "B": {
                "clear": false,
                "on": -1,
                "under": "E",
                "ontable": true
            },
            "C": {
                "clear": true,
                "on": "D",
                "under": -1,
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": "E",
                "under": "C",
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": "B",
                "under": "D",
                "ontable": false
            },
            "F": {
                "clear": true,
                "on": "G",
                "under": -1,
                "ontable": false
            },
            "G": {
                "clear": false,
                "on": "A",
                "under": "F",
                "ontable": false
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": true,
                "on": "B",
                "under": -1,
                "ontable": false
            },
            "B": {
                "clear": false,
                "on": "D",
                "under": "A",
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": "G",
                "under": "F",
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": -1,
                "under": "B",
                "ontable": true
            },
            "E": {
                "clear": true,
                "on": "F",
                "under": -1,
                "ontable": false
            },
            "F": {
                "clear": false,
                "on": "C",
                "under": "E",
                "ontable": false
            },
            "G": {
                "clear": false,
                "on": -1,
                "under": "C",
                "ontable": true
            }
        },
        "plan_len": 10,
        "num_blocks": 7,
        "prompt": "The initial state:\nThe hand is empty.\nA is on the table. G is on A. F is on G. F is clear.\nB is on the table. E is on B. D is on E. C is on D. C is clear.\n\nThe goal is:\nD is on the table. B is on D. A is on B. A is clear.\nG is on the table. C is on G. F is on C. E is on F. E is clear.\n",
        "system1_plan": "Move C from D to table | Move D from E to table | Move E from B to table | Move F from G to table | Move G from A to table | Move C from table to G | Move B from table to D | Move A from table to B | Move F from table to C | Move E from table to F",
        "system1_states": 10,
        "system2_plan_v1": "Moved to state -> Stack 1: [A, G, F], Stack 2: [B, E, D, C] | Plan so far [] | Exploring action Move C from D to F | New state -> Stack 1: [A, G, F, C], Stack 2: [B, E, D] | Exploring action Move C from D to table | New state -> Stack 1: [A, G, F], Stack 2: [B, E, D], Stack 3: [C] | Exploring action Move B from table to F | New state -> Invalid | Exploring action Move F from G to table | New state -> Stack 1: [A, G], Stack 2: [B, E, D, C], Stack 3: [F] | Taking action Move C from D to table | Moved to state -> Stack 1: [A, G, F], Stack 2: [B, E, D], Stack 3: [C] | Plan so far [Move C from D to table] | Exploring action Move F from G to table | New state -> Stack 1: [A, G], Stack 2: [B, E, D], Stack 3: [C], Stack 4: [F] | Exploring action Move F from G to C | New state -> Stack 1: [A, G], Stack 2: [B, E, D], Stack 3: [C, F] | Exploring action Move D from E to table | New state -> Stack 1: [A, G, F], Stack 2: [B, E], Stack 3: [C], Stack 4: [D] | Exploring action Move G from A to table | New state -> Invalid | Taking action Move F from G to table | Moved to state -> Stack 1: [A, G], Stack 2: [B, E, D, C], Stack 3: [F] | Plan so far [Move F from G to table] | Exploring action Move E from B to table | New state -> Invalid | Exploring action Move C from D to table | New state -> Stack 1: [A, G], Stack 2: [B, E, D], Stack 3: [C], Stack 4: [F] | Exploring action Move G from A to C | New state -> Stack 1: [A], Stack 2: [B, E, D, C, G], Stack 3: [F] | Exploring action Move B from table to F | New state -> Invalid | Exploring action Move G from A to table | New state -> Stack 1: [A], Stack 2: [B, E, D, C], Stack 3: [F], Stack 4: [G] | Taking action Move D from E to table | Moved to state -> Stack 1: [A, G, F], Stack 2: [B, E], Stack 3: [C], Stack 4: [D] | Plan so far [Move C from D to table | Move D from E to table] | Exploring action Move E from B to F | New state -> Stack 1: [A, G, F, E], Stack 2: [B], Stack 3: [C], Stack 4: [D] | Exploring action Move E from B to table | New state -> Stack 1: [A, G, F], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Exploring action Move A from table to D | New state -> Invalid | Exploring action Move F from G to table | New state -> Stack 1: [A, G], Stack 2: [B, E], Stack 3: [C], Stack 4: [D], Stack 5: [F] | Taking action Move F from G to table | Moved to state -> Stack 1: [A, G], Stack 2: [B, E, D], Stack 3: [C], Stack 4: [F] | Plan so far [Move C from D to table | Move F from G to table] | Exploring action Move D from E to F | New state -> Stack 1: [A, G], Stack 2: [B, E], Stack 3: [C], Stack 4: [F, D] | Exploring action Move G from A to table | New state -> Stack 1: [A], Stack 2: [B, E, D], Stack 3: [C], Stack 4: [F], Stack 5: [G] | Exploring action Move B from table to F | New state -> Invalid | Exploring action Move D from E to table | New state -> Stack 1: [A, G], Stack 2: [B, E], Stack 3: [C], Stack 4: [D], Stack 5: [F] | Taking action Move E from B to table | Moved to state -> Stack 1: [A, G, F], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Plan so far [Move C from D to table | Move D from E to table | Move E from B to table] | Exploring action Move B from table to D | New state -> Stack 1: [A, G, F], Stack 2: [C], Stack 3: [D, B], Stack 4: [E] | Exploring action Move G from A to table | New state -> Invalid | Exploring action Move F from G to D | New state -> Stack 1: [A, G], Stack 2: [B], Stack 3: [C], Stack 4: [D, F], Stack 5: [E] | Exploring action Move F from G to table | New state -> Stack 1: [A, G], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Taking action Move F from G to table | Moved to state -> Stack 1: [A, G], Stack 2: [B, E], Stack 3: [C], Stack 4: [D], Stack 5: [F] | Plan so far [Move C from D to table | Move D from E to table | Move F from G to table] | Exploring action Move E from B to F | New state -> Stack 1: [A, G], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [F, E] | Exploring action Move E from B to table | New state -> Stack 1: [A, G], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Exploring action Move B from table to C | New state -> Invalid | Exploring action Move G from A to table | New state -> Stack 1: [A], Stack 2: [B, E], Stack 3: [C], Stack 4: [D], Stack 5: [F], Stack 6: [G] | Taking action Move E from B to F | Moved to state -> Stack 1: [A, G, F, E], Stack 2: [B], Stack 3: [C], Stack 4: [D] | Plan so far [Move C from D to table | Move D from E to table | Move E from B to F] | Exploring action Move E from F to table | New state -> Stack 1: [A, G, F], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Exploring action Move G from A to B | New state -> Invalid | Exploring action Move B from table to D | New state -> Stack 1: [A, G, F, E], Stack 2: [C], Stack 3: [D, B] | Exploring action Move D from table to B | New state -> Stack 1: [A, G, F, E], Stack 2: [B, D], Stack 3: [C] | Taking action Move F from G to table | Moved to state -> Stack 1: [A, G], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Plan so far [Move C from D to table | Move D from E to table | Move E from B to table | Move F from G to table] | Exploring action Move G from A to C | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, G], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Exploring action Move A from table to F | New state -> Invalid | Exploring action Move B from table to D | New state -> Stack 1: [A, G], Stack 2: [C], Stack 3: [D, B], Stack 4: [E], Stack 5: [F] | Exploring action Move G from A to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F], Stack 7: [G] | Exploring action Move A from table to G | New state -> Invalid | Taking action Move C from D to table | Moved to state -> Stack 1: [A, G], Stack 2: [B, E, D], Stack 3: [C], Stack 4: [F] | Plan so far [Move F from G to table | Move C from D to table] | Taking action Move B from table to D | Moved to state -> Stack 1: [A, G], Stack 2: [C], Stack 3: [D, B], Stack 4: [E], Stack 5: [F] | Plan so far [Move C from D to table | Move D from E to table | Move E from B to table | Move F from G to table | Move B from table to D] | Exploring action Move E from table to F | New state -> Stack 1: [A, G], Stack 2: [C], Stack 3: [D, B], Stack 4: [F, E] | Exploring action Move D from table to C | New state -> Invalid | Exploring action Move G from A to table | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, B], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Exploring action Move G from A to C | New state -> Stack 1: [A], Stack 2: [C, G], Stack 3: [D, B], Stack 4: [E], Stack 5: [F] | Taking action Move G from A to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F], Stack 7: [G] | Plan so far [Move C from D to table | Move D from E to table | Move E from B to table | Move F from G to table | Move G from A to table] | Exploring action Move B from table to D | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, B], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Exploring action Move C from table to G | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D], Stack 4: [E], Stack 5: [F], Stack 6: [G, C] | Exploring action Move E from table to F | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [F, E], Stack 6: [G] | Taking action Move G from A to table | Moved to state -> Stack 1: [A], Stack 2: [B, E, D], Stack 3: [C], Stack 4: [F], Stack 5: [G] | Plan so far [Move C from D to table | Move F from G to table | Move G from A to table] | Exploring action Move D from E to table | New state -> Stack 1: [A], Stack 2: [B, E], Stack 3: [C], Stack 4: [D], Stack 5: [F], Stack 6: [G] | Exploring action Move C from table to G | New state -> Stack 1: [A], Stack 2: [B, E, D], Stack 3: [F], Stack 4: [G, C] | Exploring action Move D from E to F | New state -> Stack 1: [A], Stack 2: [B, E], Stack 3: [C], Stack 4: [F, D], Stack 5: [G] | Exploring action Move B from table to G | New state -> Invalid | Exploring action Move B from table to A | New state -> Invalid | Taking action Move B from table to D | Moved to state -> Stack 1: [A, G, F], Stack 2: [C], Stack 3: [D, B], Stack 4: [E] | Plan so far [Move C from D to table | Move D from E to table | Move E from B to table | Move B from table to D] | Exploring action Move F from G to table | New state -> Stack 1: [A, G], Stack 2: [C], Stack 3: [D, B], Stack 4: [E], Stack 5: [F] | Exploring action Move F from G to E | New state -> Stack 1: [A, G], Stack 2: [C], Stack 3: [D, B], Stack 4: [E, F] | Exploring action Move G from A to F | New state -> Invalid | Exploring action Move F from G to B | New state -> Stack 1: [A, G], Stack 2: [C], Stack 3: [D, B, F], Stack 4: [E] | Exploring action Move G from A to E | New state -> Invalid | Taking action Move C from table to G | Moved to state -> Stack 1: [A], Stack 2: [B, E, D], Stack 3: [F], Stack 4: [G, C] | Plan so far [Move C from D to table | Move F from G to table | Move G from A to table | Move C from table to G] | Exploring action Move G from table to C | New state -> Invalid | Exploring action Move D from E to table | New state -> Stack 1: [A], Stack 2: [B, E], Stack 3: [D], Stack 4: [F], Stack 5: [G, C] | Exploring action Move F from table to C | New state -> Stack 1: [A], Stack 2: [B, E, D], Stack 3: [G, C, F] | Exploring action Move E from B to C | New state -> Invalid | Exploring action Move D from E to A | New state -> Stack 1: [A, D], Stack 2: [B, E], Stack 3: [F], Stack 4: [G, C] | Taking action Move D from E to table | Moved to state -> Stack 1: [A], Stack 2: [B, E], Stack 3: [C], Stack 4: [D], Stack 5: [F], Stack 6: [G] | Plan so far [Move C from D to table | Move F from G to table | Move G from A to table | Move D from E to table] | Exploring action Move C from table to G | New state -> Stack 1: [A], Stack 2: [B, E], Stack 3: [D], Stack 4: [F], Stack 5: [G, C] | Exploring action Move E from B to F | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [F, E], Stack 6: [G] | Exploring action Move E from B to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F], Stack 7: [G] | Exploring action Move B from table to A | New state -> Invalid | Taking action Move F from G to table | Moved to state -> Stack 1: [A, G], Stack 2: [C], Stack 3: [D, B], Stack 4: [E], Stack 5: [F] | Plan so far [Move C from D to table | Move D from E to table | Move E from B to table | Move B from table to D | Move F from G to table] | Taking action Move D from E to table | Moved to state -> Stack 1: [A], Stack 2: [B, E], Stack 3: [D], Stack 4: [F], Stack 5: [G, C] | Plan so far [Move C from D to table | Move F from G to table | Move G from A to table | Move C from table to G | Move D from E to table] | Exploring action Move E from B to F | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D], Stack 4: [F, E], Stack 5: [G, C] | Exploring action Move E from B to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D], Stack 4: [E], Stack 5: [F], Stack 6: [G, C] | Exploring action Move F from table to C | New state -> Stack 1: [A], Stack 2: [B, E], Stack 3: [D], Stack 4: [G, C, F] | Exploring action Move G from table to A | New state -> Invalid | Exploring action Move B from table to C | New state -> Invalid | Taking action Move F from table to C | Moved to state -> Stack 1: [A], Stack 2: [B, E, D], Stack 3: [G, C, F] | Plan so far [Move C from D to table | Move F from G to table | Move G from A to table | Move C from table to G | Move F from table to C] | Exploring action Move C from G to A | New state -> Invalid | Exploring action Move D from E to A | New state -> Stack 1: [A, D], Stack 2: [B, E], Stack 3: [G, C, F] | Exploring action Move D from E to table | New state -> Stack 1: [A], Stack 2: [B, E], Stack 3: [D], Stack 4: [G, C, F] | Exploring action Move D from E to F | New state -> Stack 1: [A], Stack 2: [B, E], Stack 3: [G, C, F, D] | Taking action Move C from table to G | Moved to state -> Stack 1: [A], Stack 2: [B, E], Stack 3: [D], Stack 4: [F], Stack 5: [G, C] | Plan so far [Move C from D to table | Move F from G to table | Move G from A to table | Move D from E to table | Move C from table to G] | Taking action Move E from B to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F], Stack 7: [G] | Plan so far [Move C from D to table | Move F from G to table | Move G from A to table | Move D from E to table | Move E from B to table] | Taking action Move E from B to F | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [F, E], Stack 6: [G] | Plan so far [Move C from D to table | Move F from G to table | Move G from A to table | Move D from E to table | Move E from B to F] | Exploring action Move F from table to E | New state -> Invalid | Exploring action Move C from table to G | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D], Stack 4: [F, E], Stack 5: [G, C] | Exploring action Move A from table to B | New state -> Stack 1: [B, A], Stack 2: [C], Stack 3: [D], Stack 4: [F, E], Stack 5: [G] | Exploring action Move F from table to B | New state -> Invalid | Exploring action Move B from table to D | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, B], Stack 4: [F, E], Stack 5: [G] | Taking action Move G from A to table | Moved to state -> Stack 1: [A], Stack 2: [B, E], Stack 3: [C], Stack 4: [D], Stack 5: [F], Stack 6: [G] | Plan so far [Move C from D to table | Move D from E to table | Move F from G to table | Move G from A to table] | Taking action Move B from table to D | Moved to state -> Stack 1: [A, G, F, E], Stack 2: [C], Stack 3: [D, B] | Plan so far [Move C from D to table | Move D from E to table | Move E from B to F | Move B from table to D] | Exploring action Move B from D to table | New state -> Stack 1: [A, G, F, E], Stack 2: [B], Stack 3: [C], Stack 4: [D] | Exploring action Move E from F to table | New state -> Stack 1: [A, G, F], Stack 2: [C], Stack 3: [D, B], Stack 4: [E] | Exploring action Move E from F to B | New state -> Stack 1: [A, G, F], Stack 2: [C], Stack 3: [D, B, E] | Exploring action Move A from table to E | New state -> Invalid | Exploring action Move G from A to B | New state -> Invalid | Taking action Move C from table to G | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [D], Stack 4: [E], Stack 5: [F], Stack 6: [G, C] | Plan so far [Move C from D to table | Move D from E to table | Move E from B to table | Move F from G to table | Move G from A to table | Move C from table to G] | Exploring action Move B from table to D | New state -> Stack 1: [A], Stack 2: [D, B], Stack 3: [E], Stack 4: [F], Stack 5: [G, C] | Exploring action Move G from table to A | New state -> Invalid | Exploring action Move G from table to E | New state -> Invalid | Exploring action Move F from table to C | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D], Stack 4: [E], Stack 5: [G, C, F] | Exploring action Move E from table to F | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D], Stack 4: [F, E], Stack 5: [G, C] | Taking action Move G from A to table | Moved to state -> Stack 1: [A], Stack 2: [B, E, D, C], Stack 3: [F], Stack 4: [G] | Plan so far [Move F from G to table | Move G from A to table] | Exploring action Move C from D to F | New state -> Stack 1: [A], Stack 2: [B, E, D], Stack 3: [F, C], Stack 4: [G] | Exploring action Move C from D to table | New state -> Stack 1: [A], Stack 2: [B, E, D], Stack 3: [C], Stack 4: [F], Stack 5: [G] | Exploring action Move E from B to C | New state -> Invalid | Exploring action Move C from D to G | New state -> Stack 1: [A], Stack 2: [B, E, D], Stack 3: [F], Stack 4: [G, C] | Exploring action Move B from table to F | New state -> Invalid | Taking action Move C from D to G | Moved to state -> Stack 1: [A], Stack 2: [B, E, D], Stack 3: [F], Stack 4: [G, C] | Plan so far [Move F from G to table | Move G from A to table | Move C from D to G] | Taking action Move E from B to table | Moved to state -> Stack 1: [A, G], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Plan so far [Move C from D to table | Move D from E to table | Move F from G to table | Move E from B to table] | Taking action Move B from table to D | Moved to state -> Stack 1: [A], Stack 2: [D, B], Stack 3: [E], Stack 4: [F], Stack 5: [G, C] | Plan so far [Move C from D to table | Move D from E to table | Move E from B to table | Move F from G to table | Move G from A to table | Move C from table to G | Move B from table to D] | Exploring action Move F from table to C | New state -> Stack 1: [A], Stack 2: [D, B], Stack 3: [E], Stack 4: [G, C, F] | Exploring action Move G from table to E | New state -> Invalid | Exploring action Move A from table to B | New state -> Stack 1: [D, B, A], Stack 2: [E], Stack 3: [F], Stack 4: [G, C] | Exploring action Move E from table to F | New state -> Stack 1: [A], Stack 2: [D, B], Stack 3: [F, E], Stack 4: [G, C] | Taking action Move A from table to B | Moved to state -> Stack 1: [D, B, A], Stack 2: [E], Stack 3: [F], Stack 4: [G, C] | Plan so far [Move C from D to table | Move D from E to table | Move E from B to table | Move F from G to table | Move G from A to table | Move C from table to G | Move B from table to D | Move A from table to B] | Exploring action Move E from table to F | New state -> Stack 1: [D, B, A], Stack 2: [F, E], Stack 3: [G, C] | Exploring action Move F from table to E | New state -> Stack 1: [D, B, A], Stack 2: [E, F], Stack 3: [G, C] | Exploring action Move D from table to C | New state -> Invalid | Exploring action Move G from table to A | New state -> Invalid | Exploring action Move F from table to C | New state -> Stack 1: [D, B, A], Stack 2: [E], Stack 3: [G, C, F] | Taking action Move F from table to C | Moved to state -> Stack 1: [D, B, A], Stack 2: [E], Stack 3: [G, C, F] | Plan so far [Move C from D to table | Move D from E to table | Move E from B to table | Move F from G to table | Move G from A to table | Move C from table to G | Move B from table to D | Move A from table to B | Move F from table to C] | Exploring action Move E from table to F | New state -> Stack 1: [D, B, A], Stack 2: [G, C, F, E] | Exploring action Move B from D to A | New state -> Invalid | Exploring action Move F from C to table | New state -> Stack 1: [D, B, A], Stack 2: [E], Stack 3: [F], Stack 4: [G, C] | Exploring action Move G from table to A | New state -> Invalid | Exploring action Move A from B to table | New state -> Stack 1: [A], Stack 2: [D, B], Stack 3: [E], Stack 4: [G, C, F] | Taking action Move E from table to F | Moved to state -> Stack 1: [D, B, A], Stack 2: [G, C, F, E] | Plan so far [Move C from D to table | Move D from E to table | Move E from B to table | Move F from G to table | Move G from A to table | Move C from table to G | Move B from table to D | Move A from table to B | Move F from table to C | Move E from table to F] | Reached goal state!",
        "system2_states_v1": 107
    },
    {
        "idx": 921,
        "start": [
            [
                "table",
                "E",
                "F",
                "D",
                "B",
                "A",
                "G",
                "C"
            ]
        ],
        "goal": [
            [
                "table",
                "A"
            ],
            [
                "table",
                "D",
                "G",
                "C"
            ],
            [
                "table",
                "F",
                "E",
                "B"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": false,
                "on": "B",
                "under": "G",
                "ontable": false
            },
            "B": {
                "clear": false,
                "on": "D",
                "under": "A",
                "ontable": false
            },
            "C": {
                "clear": true,
                "on": "G",
                "under": -1,
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": "F",
                "under": "B",
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": -1,
                "under": "F",
                "ontable": true
            },
            "F": {
                "clear": false,
                "on": "E",
                "under": "D",
                "ontable": false
            },
            "G": {
                "clear": false,
                "on": "A",
                "under": "C",
                "ontable": false
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": true,
                "on": -1,
                "under": -1,
                "ontable": true
            },
            "B": {
                "clear": true,
                "on": "E",
                "under": -1,
                "ontable": false
            },
            "C": {
                "clear": true,
                "on": "G",
                "under": -1,
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": -1,
                "under": "G",
                "ontable": true
            },
            "E": {
                "clear": false,
                "on": "F",
                "under": "B",
                "ontable": false
            },
            "F": {
                "clear": false,
                "on": -1,
                "under": "E",
                "ontable": true
            },
            "G": {
                "clear": false,
                "on": "D",
                "under": "C",
                "ontable": false
            }
        },
        "plan_len": 10,
        "num_blocks": 7,
        "prompt": "The initial state:\nThe hand is empty.\nE is on the table. F is on E. D is on F. B is on D. A is on B. G is on A. C is on G. C is clear.\n\nThe goal is:\nA is on the table. A is clear.\nD is on the table. G is on D. C is on G. C is clear.\nF is on the table. E is on F. B is on E. B is clear.\n",
        "system1_plan": "Move C from G to table | Move G from A to table | Move A from B to table | Move B from D to table | Move D from F to table | Move G from table to D | Move C from table to G | Move F from E to table | Move E from table to F | Move B from table to E",
        "system1_states": 10,
        "system2_plan_v1": "Moved to state -> Stack 1: [E, F, D, B, A, G, C] | Plan so far [] | Exploring action Move F from E to table | New state -> Invalid | Exploring action Move C from G to table | New state -> Stack 1: [C], Stack 2: [E, F, D, B, A, G] | Taking action Move C from G to table | Moved to state -> Stack 1: [C], Stack 2: [E, F, D, B, A, G] | Plan so far [Move C from G to table] | Exploring action Move G from A to C | New state -> Stack 1: [C, G], Stack 2: [E, F, D, B, A] | Exploring action Move G from A to table | New state -> Stack 1: [C], Stack 2: [E, F, D, B, A], Stack 3: [G] | Exploring action Move F from E to table | New state -> Invalid | Exploring action Move C from table to G | New state -> Stack 1: [E, F, D, B, A, G, C] | Exploring action Move D from F to G | New state -> Invalid | Taking action Move G from A to table | Moved to state -> Stack 1: [C], Stack 2: [E, F, D, B, A], Stack 3: [G] | Plan so far [Move C from G to table | Move G from A to table] | Exploring action Move A from B to table | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [E, F, D, B], Stack 4: [G] | Exploring action Move A from B to G | New state -> Stack 1: [C], Stack 2: [E, F, D, B], Stack 3: [G, A] | Exploring action Move A from B to C | New state -> Stack 1: [C, A], Stack 2: [E, F, D, B], Stack 3: [G] | Exploring action Move F from E to A | New state -> Invalid | Exploring action Move D from F to A | New state -> Invalid | Taking action Move A from B to table | Moved to state -> Stack 1: [A], Stack 2: [C], Stack 3: [E, F, D, B], Stack 4: [G] | Plan so far [Move C from G to table | Move G from A to table | Move A from B to table] | Exploring action Move E from table to C | New state -> Invalid | Exploring action Move B from D to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [E, F, D], Stack 5: [G] | Exploring action Move F from E to A | New state -> Invalid | Exploring action Move B from D to C | New state -> Stack 1: [A], Stack 2: [C, B], Stack 3: [E, F, D], Stack 4: [G] | Exploring action Move B from D to G | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [E, F, D], Stack 4: [G, B] | Taking action Move B from D to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [E, F, D], Stack 5: [G] | Plan so far [Move C from G to table | Move G from A to table | Move A from B to table | Move B from D to table] | Exploring action Move C from table to G | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [E, F, D], Stack 4: [G, C] | Exploring action Move E from table to G | New state -> Invalid | Exploring action Move D from F to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E, F], Stack 6: [G] | Exploring action Move D from F to B | New state -> Stack 1: [A], Stack 2: [B, D], Stack 3: [C], Stack 4: [E, F], Stack 5: [G] | Taking action Move D from F to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E, F], Stack 6: [G] | Plan so far [Move C from G to table | Move G from A to table | Move A from B to table | Move B from D to table | Move D from F to table] | Exploring action Move F from E to C | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, F], Stack 4: [D], Stack 5: [E], Stack 6: [G] | Exploring action Move F from E to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F], Stack 7: [G] | Exploring action Move G from table to D | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D, G], Stack 5: [E, F] | Exploring action Move E from table to B | New state -> Invalid | Exploring action Move E from table to D | New state -> Invalid | Taking action Move F from E to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F], Stack 7: [G] | Plan so far [Move C from G to table | Move G from A to table | Move A from B to table | Move B from D to table | Move D from F to table | Move F from E to table] | Exploring action Move B from table to E | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D], Stack 4: [E, B], Stack 5: [F], Stack 6: [G] | Exploring action Move G from table to D | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D, G], Stack 5: [E], Stack 6: [F] | Exploring action Move E from table to F | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [F, E], Stack 6: [G] | Taking action Move G from table to D | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D, G], Stack 5: [E, F] | Plan so far [Move C from G to table | Move G from A to table | Move A from B to table | Move B from D to table | Move D from F to table | Move G from table to D] | Exploring action Move F from E to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D, G], Stack 5: [E], Stack 6: [F] | Exploring action Move D from table to C | New state -> Invalid | Exploring action Move C from table to G | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, G, C], Stack 4: [E, F] | Exploring action Move F from E to B | New state -> Stack 1: [A], Stack 2: [B, F], Stack 3: [C], Stack 4: [D, G], Stack 5: [E] | Taking action Move C from table to G | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, G, C], Stack 4: [E, F] | Plan so far [Move C from G to table | Move G from A to table | Move A from B to table | Move B from D to table | Move D from F to table | Move G from table to D | Move C from table to G] | Exploring action Move D from table to C | New state -> Invalid | Exploring action Move F from E to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, G, C], Stack 4: [E], Stack 5: [F] | Exploring action Move F from E to B | New state -> Stack 1: [A], Stack 2: [B, F], Stack 3: [D, G, C], Stack 4: [E] | Exploring action Move F from E to C | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, G, C, F], Stack 4: [E] | Taking action Move F from E to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, G, C], Stack 4: [E], Stack 5: [F] | Plan so far [Move C from G to table | Move G from A to table | Move A from B to table | Move B from D to table | Move D from F to table | Move G from table to D | Move C from table to G | Move F from E to table] | Exploring action Move D from table to B | New state -> Invalid | Exploring action Move E from table to F | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, G, C], Stack 4: [F, E] | Exploring action Move E from table to B | New state -> Stack 1: [A], Stack 2: [B, E], Stack 3: [D, G, C], Stack 4: [F] | Exploring action Move B from table to E | New state -> Stack 1: [A], Stack 2: [D, G, C], Stack 3: [E, B], Stack 4: [F] | Taking action Move E from table to F | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, G, C], Stack 4: [F, E] | Plan so far [Move C from G to table | Move G from A to table | Move A from B to table | Move B from D to table | Move D from F to table | Move G from table to D | Move C from table to G | Move F from E to table | Move E from table to F] | Exploring action Move E from F to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, G, C], Stack 4: [E], Stack 5: [F] | Exploring action Move A from table to B | New state -> Stack 1: [B, A], Stack 2: [D, G, C], Stack 3: [F, E] | Exploring action Move G from D to C | New state -> Invalid | Exploring action Move B from table to E | New state -> Stack 1: [A], Stack 2: [D, G, C], Stack 3: [F, E, B] | Exploring action Move D from table to C | New state -> Invalid | Taking action Move B from table to E | Moved to state -> Stack 1: [A], Stack 2: [D, G, C], Stack 3: [F, E, B] | Plan so far [Move C from G to table | Move G from A to table | Move A from B to table | Move B from D to table | Move D from F to table | Move G from table to D | Move C from table to G | Move F from E to table | Move E from table to F | Move B from table to E] | Reached goal state!",
        "system2_states_v1": 46
    },
    {
        "idx": 682,
        "start": [
            [
                "table",
                "A",
                "E",
                "C",
                "F",
                "D",
                "B"
            ]
        ],
        "goal": [
            [
                "table",
                "A",
                "F",
                "C"
            ],
            [
                "table",
                "D",
                "E",
                "B"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": false,
                "on": -1,
                "under": "E",
                "ontable": true
            },
            "B": {
                "clear": true,
                "on": "D",
                "under": -1,
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": "E",
                "under": "F",
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": "F",
                "under": "B",
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": "A",
                "under": "C",
                "ontable": false
            },
            "F": {
                "clear": false,
                "on": "C",
                "under": "D",
                "ontable": false
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": false,
                "on": -1,
                "under": "F",
                "ontable": true
            },
            "B": {
                "clear": true,
                "on": "E",
                "under": -1,
                "ontable": false
            },
            "C": {
                "clear": true,
                "on": "F",
                "under": -1,
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": -1,
                "under": "E",
                "ontable": true
            },
            "E": {
                "clear": false,
                "on": "D",
                "under": "B",
                "ontable": false
            },
            "F": {
                "clear": false,
                "on": "A",
                "under": "C",
                "ontable": false
            }
        },
        "plan_len": 8,
        "num_blocks": 6,
        "prompt": "The initial state:\nThe hand is empty.\nA is on the table. E is on A. C is on E. F is on C. D is on F. B is on D. B is clear.\n\nThe goal is:\nA is on the table. F is on A. C is on F. C is clear.\nD is on the table. E is on D. B is on E. B is clear.\n",
        "system1_plan": "Move B from D to table | Move D from F to table | Move F from C to table | Move C from E to table | Move E from A to D | Move B from table to E | Move F from table to A | Move C from table to F",
        "system1_states": 8,
        "system2_plan_v1": "Moved to state -> Stack 1: [A, E, C, F, D, B] | Plan so far [] | Exploring action Move B from D to table | New state -> Stack 1: [A, E, C, F, D], Stack 2: [B] | Exploring action Move D from F to table | New state -> Invalid | Exploring action Move C from E to B | New state -> Invalid | Taking action Move B from D to table | Moved to state -> Stack 1: [A, E, C, F, D], Stack 2: [B] | Plan so far [Move B from D to table] | Exploring action Move E from A to table | New state -> Invalid | Exploring action Move D from F to table | New state -> Stack 1: [A, E, C, F], Stack 2: [B], Stack 3: [D] | Exploring action Move B from table to D | New state -> Stack 1: [A, E, C, F, D, B] | Exploring action Move D from F to B | New state -> Stack 1: [A, E, C, F], Stack 2: [B, D] | Taking action Move D from F to table | Moved to state -> Stack 1: [A, E, C, F], Stack 2: [B], Stack 3: [D] | Plan so far [Move B from D to table | Move D from F to table] | Exploring action Move F from C to B | New state -> Stack 1: [A, E, C], Stack 2: [B, F], Stack 3: [D] | Exploring action Move F from C to D | New state -> Stack 1: [A, E, C], Stack 2: [B], Stack 3: [D, F] | Exploring action Move C from E to D | New state -> Invalid | Exploring action Move F from C to table | New state -> Stack 1: [A, E, C], Stack 2: [B], Stack 3: [D], Stack 4: [F] | Taking action Move F from C to table | Moved to state -> Stack 1: [A, E, C], Stack 2: [B], Stack 3: [D], Stack 4: [F] | Plan so far [Move B from D to table | Move D from F to table | Move F from C to table] | Exploring action Move C from E to D | New state -> Stack 1: [A, E], Stack 2: [B], Stack 3: [D, C], Stack 4: [F] | Exploring action Move A from table to F | New state -> Invalid | Exploring action Move C from E to F | New state -> Stack 1: [A, E], Stack 2: [B], Stack 3: [D], Stack 4: [F, C] | Exploring action Move C from E to table | New state -> Stack 1: [A, E], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [F] | Taking action Move C from E to table | Moved to state -> Stack 1: [A, E], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [F] | Plan so far [Move B from D to table | Move D from F to table | Move F from C to table | Move C from E to table] | Exploring action Move B from table to E | New state -> Stack 1: [A, E, B], Stack 2: [C], Stack 3: [D], Stack 4: [F] | Exploring action Move E from A to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Exploring action Move E from A to D | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D, E], Stack 5: [F] | Exploring action Move A from table to C | New state -> Invalid | Exploring action Move A from table to D | New state -> Invalid | Taking action Move E from A to D | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D, E], Stack 5: [F] | Plan so far [Move B from D to table | Move D from F to table | Move F from C to table | Move C from E to table | Move E from A to D] | Exploring action Move C from table to F | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, E], Stack 4: [F, C] | Exploring action Move F from table to A | New state -> Stack 1: [A, F], Stack 2: [B], Stack 3: [C], Stack 4: [D, E] | Exploring action Move B from table to E | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, E, B], Stack 4: [F] | Exploring action Move D from table to B | New state -> Invalid | Taking action Move B from table to E | Moved to state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, E, B], Stack 4: [F] | Plan so far [Move B from D to table | Move D from F to table | Move F from C to table | Move C from E to table | Move E from A to D | Move B from table to E] | Exploring action Move A from table to F | New state -> Stack 1: [C], Stack 2: [D, E, B], Stack 3: [F, A] | Exploring action Move D from table to F | New state -> Invalid | Exploring action Move F from table to A | New state -> Stack 1: [A, F], Stack 2: [C], Stack 3: [D, E, B] | Exploring action Move C from table to F | New state -> Stack 1: [A], Stack 2: [D, E, B], Stack 3: [F, C] | Taking action Move F from table to A | Moved to state -> Stack 1: [A, F], Stack 2: [C], Stack 3: [D, E, B] | Plan so far [Move B from D to table | Move D from F to table | Move F from C to table | Move C from E to table | Move E from A to D | Move B from table to E | Move F from table to A] | Exploring action Move C from table to F | New state -> Stack 1: [A, F, C], Stack 2: [D, E, B] | Exploring action Move F from A to table | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, E, B], Stack 4: [F] | Exploring action Move D from table to C | New state -> Invalid | Exploring action Move E from D to C | New state -> Invalid | Exploring action Move B from E to table | New state -> Stack 1: [A, F], Stack 2: [B], Stack 3: [C], Stack 4: [D, E] | Taking action Move C from table to F | Moved to state -> Stack 1: [A, F, C], Stack 2: [D, E, B] | Plan so far [Move B from D to table | Move D from F to table | Move F from C to table | Move C from E to table | Move E from A to D | Move B from table to E | Move F from table to A | Move C from table to F] | Reached goal state!",
        "system2_states_v1": 33
    },
    {
        "idx": 586,
        "start": [
            [
                "table",
                "B"
            ],
            [
                "table",
                "E",
                "D",
                "A",
                "C"
            ]
        ],
        "goal": [
            [
                "table",
                "E",
                "A",
                "C",
                "D",
                "B"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": false,
                "on": "D",
                "under": "C",
                "ontable": false
            },
            "B": {
                "clear": true,
                "on": -1,
                "under": -1,
                "ontable": true
            },
            "C": {
                "clear": true,
                "on": "A",
                "under": -1,
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": "E",
                "under": "A",
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": -1,
                "under": "D",
                "ontable": true
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": false,
                "on": "E",
                "under": "C",
                "ontable": false
            },
            "B": {
                "clear": true,
                "on": "D",
                "under": -1,
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": "A",
                "under": "D",
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": "C",
                "under": "B",
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": -1,
                "under": "A",
                "ontable": true
            }
        },
        "plan_len": 7,
        "num_blocks": 5,
        "prompt": "The initial state:\nThe hand is empty.\nB is on the table. B is clear.\nE is on the table. D is on E. A is on D. C is on A. C is clear.\n\nThe goal is:\nE is on the table. A is on E. C is on A. D is on C. B is on D. B is clear.\n",
        "system1_plan": "Move C from A to table | Move A from D to table | Move D from E to table | Move A from table to E | Move C from table to A | Move D from table to C | Move B from table to D",
        "system1_states": 7,
        "system2_plan_v1": "Moved to state -> Stack 1: [B], Stack 2: [E, D, A, C] | Plan so far [] | Exploring action Move C from A to B | New state -> Stack 1: [B, C], Stack 2: [E, D, A] | Exploring action Move D from E to B | New state -> Invalid | Exploring action Move E from table to C | New state -> Invalid | Exploring action Move C from A to table | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [E, D, A] | Exploring action Move B from table to C | New state -> Stack 1: [E, D, A, C, B] | Taking action Move C from A to table | Moved to state -> Stack 1: [B], Stack 2: [C], Stack 3: [E, D, A] | Plan so far [Move C from A to table] | Exploring action Move A from D to B | New state -> Stack 1: [B, A], Stack 2: [C], Stack 3: [E, D] | Exploring action Move D from E to A | New state -> Invalid | Exploring action Move A from D to C | New state -> Stack 1: [B], Stack 2: [C, A], Stack 3: [E, D] | Exploring action Move A from D to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [E, D] | Taking action Move A from D to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [E, D] | Plan so far [Move C from A to table | Move A from D to table] | Exploring action Move D from E to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Exploring action Move D from E to C | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, D], Stack 4: [E] | Exploring action Move E from table to C | New state -> Invalid | Exploring action Move D from E to B | New state -> Stack 1: [A], Stack 2: [B, D], Stack 3: [C], Stack 4: [E] | Exploring action Move E from table to D | New state -> Invalid | Taking action Move D from E to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Plan so far [Move C from A to table | Move A from D to table | Move D from E to table] | Exploring action Move B from table to D | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, B], Stack 4: [E] | Exploring action Move A from table to E | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D], Stack 4: [E, A] | Exploring action Move A from table to D | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, A], Stack 4: [E] | Taking action Move A from table to E | Moved to state -> Stack 1: [B], Stack 2: [C], Stack 3: [D], Stack 4: [E, A] | Plan so far [Move C from A to table | Move A from D to table | Move D from E to table | Move A from table to E] | Exploring action Move E from table to A | New state -> Invalid | Exploring action Move E from table to C | New state -> Invalid | Exploring action Move B from table to D | New state -> Stack 1: [C], Stack 2: [D, B], Stack 3: [E, A] | Exploring action Move A from E to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Exploring action Move C from table to A | New state -> Stack 1: [B], Stack 2: [D], Stack 3: [E, A, C] | Taking action Move C from table to A | Moved to state -> Stack 1: [B], Stack 2: [D], Stack 3: [E, A, C] | Plan so far [Move C from A to table | Move A from D to table | Move D from E to table | Move A from table to E | Move C from table to A] | Exploring action Move E from table to D | New state -> Invalid | Exploring action Move E from table to C | New state -> Invalid | Exploring action Move D from table to C | New state -> Stack 1: [B], Stack 2: [E, A, C, D] | Exploring action Move D from table to B | New state -> Stack 1: [B, D], Stack 2: [E, A, C] | Exploring action Move B from table to D | New state -> Stack 1: [D, B], Stack 2: [E, A, C] | Taking action Move D from table to C | Moved to state -> Stack 1: [B], Stack 2: [E, A, C, D] | Plan so far [Move C from A to table | Move A from D to table | Move D from E to table | Move A from table to E | Move C from table to A | Move D from table to C] | Exploring action Move B from table to D | New state -> Stack 1: [E, A, C, D, B] | Exploring action Move D from C to table | New state -> Stack 1: [B], Stack 2: [D], Stack 3: [E, A, C] | Exploring action Move C from A to B | New state -> Invalid | Exploring action Move D from C to B | New state -> Stack 1: [B, D], Stack 2: [E, A, C] | Taking action Move B from table to D | Moved to state -> Stack 1: [E, A, C, D, B] | Plan so far [Move C from A to table | Move A from D to table | Move D from E to table | Move A from table to E | Move C from table to A | Move D from table to C | Move B from table to D] | Reached goal state!",
        "system2_states_v1": 31
    },
    {
        "idx": 774,
        "start": [
            [
                "table",
                "B",
                "A",
                "F",
                "D",
                "C"
            ],
            [
                "table",
                "E"
            ]
        ],
        "goal": [
            [
                "table",
                "A",
                "D",
                "F",
                "E",
                "B",
                "C"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": false,
                "on": "B",
                "under": "F",
                "ontable": false
            },
            "B": {
                "clear": false,
                "on": -1,
                "under": "A",
                "ontable": true
            },
            "C": {
                "clear": true,
                "on": "D",
                "under": -1,
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": "F",
                "under": "C",
                "ontable": false
            },
            "E": {
                "clear": true,
                "on": -1,
                "under": -1,
                "ontable": true
            },
            "F": {
                "clear": false,
                "on": "A",
                "under": "D",
                "ontable": false
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": false,
                "on": -1,
                "under": "D",
                "ontable": true
            },
            "B": {
                "clear": false,
                "on": "E",
                "under": "C",
                "ontable": false
            },
            "C": {
                "clear": true,
                "on": "B",
                "under": -1,
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": "A",
                "under": "F",
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": "F",
                "under": "B",
                "ontable": false
            },
            "F": {
                "clear": false,
                "on": "D",
                "under": "E",
                "ontable": false
            }
        },
        "plan_len": 9,
        "num_blocks": 6,
        "prompt": "The initial state:\nThe hand is empty.\nB is on the table. A is on B. F is on A. D is on F. C is on D. C is clear.\nE is on the table. E is clear.\n\nThe goal is:\nA is on the table. D is on A. F is on D. E is on F. B is on E. C is on B. C is clear.\n",
        "system1_plan": "Move C from D to table | Move D from F to table | Move F from A to table | Move A from B to table | Move D from table to A | Move F from table to D | Move E from table to F | Move B from table to E | Move C from table to B",
        "system1_states": 9,
        "system2_plan_v1": "Moved to state -> Stack 1: [B, A, F, D, C], Stack 2: [E] | Plan so far [] | Exploring action Move C from D to E | New state -> Stack 1: [B, A, F, D], Stack 2: [E, C] | Exploring action Move C from D to table | New state -> Stack 1: [B, A, F, D], Stack 2: [C], Stack 3: [E] | Exploring action Move E from table to C | New state -> Stack 1: [B, A, F, D, C, E] | Exploring action Move F from A to C | New state -> Invalid | Exploring action Move B from table to E | New state -> Invalid | Taking action Move C from D to table | Moved to state -> Stack 1: [B, A, F, D], Stack 2: [C], Stack 3: [E] | Plan so far [Move C from D to table] | Exploring action Move D from F to E | New state -> Stack 1: [B, A, F], Stack 2: [C], Stack 3: [E, D] | Exploring action Move F from A to D | New state -> Invalid | Exploring action Move D from F to C | New state -> Stack 1: [B, A, F], Stack 2: [C, D], Stack 3: [E] | Exploring action Move A from B to table | New state -> Invalid | Exploring action Move D from F to table | New state -> Stack 1: [B, A, F], Stack 2: [C], Stack 3: [D], Stack 4: [E] | Taking action Move D from F to table | Moved to state -> Stack 1: [B, A, F], Stack 2: [C], Stack 3: [D], Stack 4: [E] | Plan so far [Move C from D to table | Move D from F to table] | Exploring action Move F from A to table | New state -> Stack 1: [B, A], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Exploring action Move F from A to D | New state -> Stack 1: [B, A], Stack 2: [C], Stack 3: [D, F], Stack 4: [E] | Exploring action Move B from table to D | New state -> Invalid | Exploring action Move F from A to E | New state -> Stack 1: [B, A], Stack 2: [C], Stack 3: [D], Stack 4: [E, F] | Taking action Move F from A to table | Moved to state -> Stack 1: [B, A], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Plan so far [Move C from D to table | Move D from F to table | Move F from A to table] | Exploring action Move B from table to F | New state -> Invalid | Exploring action Move A from B to D | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, A], Stack 4: [E], Stack 5: [F] | Exploring action Move A from B to C | New state -> Stack 1: [B], Stack 2: [C, A], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Exploring action Move B from table to E | New state -> Invalid | Exploring action Move A from B to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Taking action Move A from B to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Plan so far [Move C from D to table | Move D from F to table | Move F from A to table | Move A from B to table] | Exploring action Move D from table to A | New state -> Stack 1: [A, D], Stack 2: [B], Stack 3: [C], Stack 4: [E], Stack 5: [F] | Exploring action Move A from table to B | New state -> Stack 1: [B, A], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Exploring action Move C from table to B | New state -> Stack 1: [A], Stack 2: [B, C], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Taking action Move D from table to A | Moved to state -> Stack 1: [A, D], Stack 2: [B], Stack 3: [C], Stack 4: [E], Stack 5: [F] | Plan so far [Move C from D to table | Move D from F to table | Move F from A to table | Move A from B to table | Move D from table to A] | Exploring action Move C from table to B | New state -> Stack 1: [A, D], Stack 2: [B, C], Stack 3: [E], Stack 4: [F] | Exploring action Move A from table to F | New state -> Invalid | Exploring action Move A from table to E | New state -> Invalid | Exploring action Move B from table to E | New state -> Stack 1: [A, D], Stack 2: [C], Stack 3: [E, B], Stack 4: [F] | Exploring action Move F from table to D | New state -> Stack 1: [A, D, F], Stack 2: [B], Stack 3: [C], Stack 4: [E] | Taking action Move F from table to D | Moved to state -> Stack 1: [A, D, F], Stack 2: [B], Stack 3: [C], Stack 4: [E] | Plan so far [Move C from D to table | Move D from F to table | Move F from A to table | Move A from B to table | Move D from table to A | Move F from table to D] | Exploring action Move D from A to C | New state -> Invalid | Exploring action Move B from table to F | New state -> Stack 1: [A, D, F, B], Stack 2: [C], Stack 3: [E] | Exploring action Move D from A to table | New state -> Invalid | Exploring action Move E from table to F | New state -> Stack 1: [A, D, F, E], Stack 2: [B], Stack 3: [C] | Exploring action Move C from table to B | New state -> Stack 1: [A, D, F], Stack 2: [B, C], Stack 3: [E] | Taking action Move E from table to F | Moved to state -> Stack 1: [A, D, F, E], Stack 2: [B], Stack 3: [C] | Plan so far [Move C from D to table | Move D from F to table | Move F from A to table | Move A from B to table | Move D from table to A | Move F from table to D | Move E from table to F] | Exploring action Move B from table to C | New state -> Stack 1: [A, D, F, E], Stack 2: [C, B] | Exploring action Move B from table to E | New state -> Stack 1: [A, D, F, E, B], Stack 2: [C] | Exploring action Move C from table to B | New state -> Stack 1: [A, D, F, E], Stack 2: [B, C] | Exploring action Move D from A to B | New state -> Invalid | Taking action Move B from table to E | Moved to state -> Stack 1: [A, D, F, E, B], Stack 2: [C] | Plan so far [Move C from D to table | Move D from F to table | Move F from A to table | Move A from B to table | Move D from table to A | Move F from table to D | Move E from table to F | Move B from table to E] | Exploring action Move B from E to C | New state -> Stack 1: [A, D, F, E], Stack 2: [C, B] | Exploring action Move B from E to table | New state -> Stack 1: [A, D, F, E], Stack 2: [B], Stack 3: [C] | Exploring action Move C from table to B | New state -> Stack 1: [A, D, F, E, B, C] | Exploring action Move D from A to table | New state -> Invalid | Taking action Move C from table to B | Moved to state -> Stack 1: [A, D, F, E, B, C] | Plan so far [Move C from D to table | Move D from F to table | Move F from A to table | Move A from B to table | Move D from table to A | Move F from table to D | Move E from table to F | Move B from table to E | Move C from table to B] | Reached goal state!",
        "system2_states_v1": 40
    },
    {
        "idx": 802,
        "start": [
            [
                "table",
                "A",
                "B",
                "F",
                "E",
                "C",
                "D"
            ]
        ],
        "goal": [
            [
                "table",
                "A",
                "E",
                "C"
            ],
            [
                "table",
                "F",
                "D",
                "B"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": false,
                "on": -1,
                "under": "B",
                "ontable": true
            },
            "B": {
                "clear": false,
                "on": "A",
                "under": "F",
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": "E",
                "under": "D",
                "ontable": false
            },
            "D": {
                "clear": true,
                "on": "C",
                "under": -1,
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": "F",
                "under": "C",
                "ontable": false
            },
            "F": {
                "clear": false,
                "on": "B",
                "under": "E",
                "ontable": false
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": false,
                "on": -1,
                "under": "E",
                "ontable": true
            },
            "B": {
                "clear": true,
                "on": "D",
                "under": -1,
                "ontable": false
            },
            "C": {
                "clear": true,
                "on": "E",
                "under": -1,
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": "F",
                "under": "B",
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": "A",
                "under": "C",
                "ontable": false
            },
            "F": {
                "clear": false,
                "on": -1,
                "under": "D",
                "ontable": true
            }
        },
        "plan_len": 9,
        "num_blocks": 6,
        "prompt": "The initial state:\nThe hand is empty.\nA is on the table. B is on A. F is on B. E is on F. C is on E. D is on C. D is clear.\n\nThe goal is:\nA is on the table. E is on A. C is on E. C is clear.\nF is on the table. D is on F. B is on D. B is clear.\n",
        "system1_plan": "Move D from C to table | Move C from E to table | Move E from F to table | Move F from B to table | Move B from A to table | Move D from table to F | Move B from table to D | Move E from table to A | Move C from table to E",
        "system1_states": 9,
        "system2_plan_v1": "Moved to state -> Stack 1: [A, B, F, E, C, D] | Plan so far [] | Exploring action Move B from A to D | New state -> Invalid | Exploring action Move D from C to table | New state -> Stack 1: [A, B, F, E, C], Stack 2: [D] | Taking action Move D from C to table | Moved to state -> Stack 1: [A, B, F, E, C], Stack 2: [D] | Plan so far [Move D from C to table] | Exploring action Move C from E to D | New state -> Stack 1: [A, B, F, E], Stack 2: [D, C] | Exploring action Move C from E to table | New state -> Stack 1: [A, B, F, E], Stack 2: [C], Stack 3: [D] | Exploring action Move F from B to table | New state -> Invalid | Exploring action Move D from table to C | New state -> Stack 1: [A, B, F, E, C, D] | Taking action Move C from E to table | Moved to state -> Stack 1: [A, B, F, E], Stack 2: [C], Stack 3: [D] | Plan so far [Move D from C to table | Move C from E to table] | Exploring action Move A from table to D | New state -> Invalid | Exploring action Move E from F to D | New state -> Stack 1: [A, B, F], Stack 2: [C], Stack 3: [D, E] | Exploring action Move E from F to C | New state -> Stack 1: [A, B, F], Stack 2: [C, E], Stack 3: [D] | Exploring action Move E from F to table | New state -> Stack 1: [A, B, F], Stack 2: [C], Stack 3: [D], Stack 4: [E] | Taking action Move E from F to table | Moved to state -> Stack 1: [A, B, F], Stack 2: [C], Stack 3: [D], Stack 4: [E] | Plan so far [Move D from C to table | Move C from E to table | Move E from F to table] | Exploring action Move A from table to E | New state -> Invalid | Exploring action Move F from B to table | New state -> Stack 1: [A, B], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Exploring action Move F from B to E | New state -> Stack 1: [A, B], Stack 2: [C], Stack 3: [D], Stack 4: [E, F] | Exploring action Move F from B to D | New state -> Stack 1: [A, B], Stack 2: [C], Stack 3: [D, F], Stack 4: [E] | Exploring action Move A from table to D | New state -> Invalid | Taking action Move F from B to table | Moved to state -> Stack 1: [A, B], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Plan so far [Move D from C to table | Move C from E to table | Move E from F to table | Move F from B to table] | Exploring action Move A from table to D | New state -> Invalid | Exploring action Move B from A to D | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, B], Stack 4: [E], Stack 5: [F] | Exploring action Move D from table to F | New state -> Stack 1: [A, B], Stack 2: [C], Stack 3: [E], Stack 4: [F, D] | Exploring action Move B from A to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Exploring action Move A from table to C | New state -> Invalid | Taking action Move B from A to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Plan so far [Move D from C to table | Move C from E to table | Move E from F to table | Move F from B to table | Move B from A to table] | Exploring action Move D from table to F | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [E], Stack 5: [F, D] | Exploring action Move E from table to A | New state -> Stack 1: [A, E], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [F] | Exploring action Move C from table to E | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D], Stack 4: [E, C], Stack 5: [F] | Taking action Move B from A to D | Moved to state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, B], Stack 4: [E], Stack 5: [F] | Plan so far [Move D from C to table | Move C from E to table | Move E from F to table | Move F from B to table | Move B from A to D] | Exploring action Move E from table to A | New state -> Stack 1: [A, E], Stack 2: [C], Stack 3: [D, B], Stack 4: [F] | Exploring action Move C from table to E | New state -> Stack 1: [A], Stack 2: [D, B], Stack 3: [E, C], Stack 4: [F] | Exploring action Move D from table to E | New state -> Invalid | Exploring action Move B from D to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Taking action Move D from table to F | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [E], Stack 5: [F, D] | Plan so far [Move D from C to table | Move C from E to table | Move E from F to table | Move F from B to table | Move B from A to table | Move D from table to F] | Exploring action Move C from table to E | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [E, C], Stack 4: [F, D] | Exploring action Move F from table to D | New state -> Invalid | Exploring action Move B from table to D | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [E], Stack 4: [F, D, B] | Exploring action Move E from table to A | New state -> Stack 1: [A, E], Stack 2: [B], Stack 3: [C], Stack 4: [F, D] | Exploring action Move F from table to B | New state -> Invalid | Taking action Move B from table to D | Moved to state -> Stack 1: [A], Stack 2: [C], Stack 3: [E], Stack 4: [F, D, B] | Plan so far [Move D from C to table | Move C from E to table | Move E from F to table | Move F from B to table | Move B from A to table | Move D from table to F | Move B from table to D] | Exploring action Move C from table to E | New state -> Stack 1: [A], Stack 2: [E, C], Stack 3: [F, D, B] | Exploring action Move A from table to E | New state -> Stack 1: [C], Stack 2: [E, A], Stack 3: [F, D, B] | Exploring action Move E from table to A | New state -> Stack 1: [A, E], Stack 2: [C], Stack 3: [F, D, B] | Exploring action Move D from F to B | New state -> Invalid | Taking action Move E from table to A | Moved to state -> Stack 1: [A, E], Stack 2: [C], Stack 3: [F, D, B] | Plan so far [Move D from C to table | Move C from E to table | Move E from F to table | Move F from B to table | Move B from A to table | Move D from table to F | Move B from table to D | Move E from table to A] | Exploring action Move F from table to B | New state -> Invalid | Exploring action Move B from D to table | New state -> Stack 1: [A, E], Stack 2: [B], Stack 3: [C], Stack 4: [F, D] | Exploring action Move D from F to E | New state -> Invalid | Exploring action Move E from A to table | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [E], Stack 4: [F, D, B] | Exploring action Move C from table to E | New state -> Stack 1: [A, E, C], Stack 2: [F, D, B] | Taking action Move C from table to E | Moved to state -> Stack 1: [A, E, C], Stack 2: [F, D, B] | Plan so far [Move D from C to table | Move C from E to table | Move E from F to table | Move F from B to table | Move B from A to table | Move D from table to F | Move B from table to D | Move E from table to A | Move C from table to E] | Reached goal state!",
        "system2_states_v1": 41
    },
    {
        "idx": 594,
        "start": [
            [
                "table",
                "E",
                "D",
                "B",
                "C",
                "A"
            ]
        ],
        "goal": [
            [
                "table",
                "C"
            ],
            [
                "table",
                "E",
                "B",
                "A",
                "D"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": true,
                "on": "C",
                "under": -1,
                "ontable": false
            },
            "B": {
                "clear": false,
                "on": "D",
                "under": "C",
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": "B",
                "under": "A",
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": "E",
                "under": "B",
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": -1,
                "under": "D",
                "ontable": true
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": false,
                "on": "B",
                "under": "D",
                "ontable": false
            },
            "B": {
                "clear": false,
                "on": "E",
                "under": "A",
                "ontable": false
            },
            "C": {
                "clear": true,
                "on": -1,
                "under": -1,
                "ontable": true
            },
            "D": {
                "clear": true,
                "on": "A",
                "under": -1,
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": -1,
                "under": "B",
                "ontable": true
            }
        },
        "plan_len": 7,
        "num_blocks": 5,
        "prompt": "The initial state:\nThe hand is empty.\nE is on the table. D is on E. B is on D. C is on B. A is on C. A is clear.\n\nThe goal is:\nC is on the table. C is clear.\nE is on the table. B is on E. A is on B. D is on A. D is clear.\n",
        "system1_plan": "Move A from C to table | Move C from B to table | Move B from D to table | Move D from E to table | Move B from table to E | Move A from table to B | Move D from table to A",
        "system1_states": 7,
        "system2_plan_v1": "Moved to state -> Stack 1: [E, D, B, C, A] | Plan so far [] | Exploring action Move C from B to table | New state -> Invalid | Exploring action Move C from B to A | New state -> Invalid | Exploring action Move A from C to table | New state -> Stack 1: [A], Stack 2: [E, D, B, C] | Taking action Move A from C to table | Moved to state -> Stack 1: [A], Stack 2: [E, D, B, C] | Plan so far [Move A from C to table] | Exploring action Move C from B to A | New state -> Stack 1: [A, C], Stack 2: [E, D, B] | Exploring action Move E from table to A | New state -> Invalid | Exploring action Move A from table to C | New state -> Stack 1: [E, D, B, C, A] | Exploring action Move C from B to table | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [E, D, B] | Taking action Move C from B to table | Moved to state -> Stack 1: [A], Stack 2: [C], Stack 3: [E, D, B] | Plan so far [Move A from C to table | Move C from B to table] | Exploring action Move A from table to B | New state -> Stack 1: [C], Stack 2: [E, D, B, A] | Exploring action Move B from D to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [E, D] | Exploring action Move B from D to A | New state -> Stack 1: [A, B], Stack 2: [C], Stack 3: [E, D] | Exploring action Move E from table to A | New state -> Invalid | Exploring action Move D from E to table | New state -> Invalid | Taking action Move B from D to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [E, D] | Plan so far [Move A from C to table | Move C from B to table | Move B from D to table] | Exploring action Move D from E to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Exploring action Move D from E to B | New state -> Stack 1: [A], Stack 2: [B, D], Stack 3: [C], Stack 4: [E] | Exploring action Move D from E to A | New state -> Stack 1: [A, D], Stack 2: [B], Stack 3: [C], Stack 4: [E] | Exploring action Move E from table to D | New state -> Invalid | Taking action Move D from E to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Plan so far [Move A from C to table | Move C from B to table | Move B from D to table | Move D from E to table] | Exploring action Move B from table to E | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D], Stack 4: [E, B] | Exploring action Move B from table to D | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, B], Stack 4: [E] | Exploring action Move D from table to A | New state -> Stack 1: [A, D], Stack 2: [B], Stack 3: [C], Stack 4: [E] | Taking action Move D from E to A | Moved to state -> Stack 1: [A, D], Stack 2: [B], Stack 3: [C], Stack 4: [E] | Plan so far [Move A from C to table | Move C from B to table | Move B from D to table | Move D from E to A] | Exploring action Move A from table to C | New state -> Invalid | Exploring action Move D from A to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Exploring action Move A from table to E | New state -> Invalid | Exploring action Move B from table to E | New state -> Stack 1: [A, D], Stack 2: [C], Stack 3: [E, B] | Exploring action Move D from A to B | New state -> Stack 1: [A], Stack 2: [B, D], Stack 3: [C], Stack 4: [E] | Taking action Move B from table to E | Moved to state -> Stack 1: [A], Stack 2: [C], Stack 3: [D], Stack 4: [E, B] | Plan so far [Move A from C to table | Move C from B to table | Move B from D to table | Move D from E to table | Move B from table to E] | Exploring action Move D from table to A | New state -> Stack 1: [A, D], Stack 2: [C], Stack 3: [E, B] | Exploring action Move E from table to B | New state -> Invalid | Exploring action Move A from table to D | New state -> Stack 1: [C], Stack 2: [D, A], Stack 3: [E, B] | Exploring action Move A from table to B | New state -> Stack 1: [C], Stack 2: [D], Stack 3: [E, B, A] | Taking action Move B from table to E | Moved to state -> Stack 1: [A, D], Stack 2: [C], Stack 3: [E, B] | Plan so far [Move A from C to table | Move C from B to table | Move B from D to table | Move D from E to A | Move B from table to E] | Exploring action Move D from A to B | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [E, B, D] | Exploring action Move A from table to B | New state -> Invalid | Exploring action Move B from E to table | New state -> Stack 1: [A, D], Stack 2: [B], Stack 3: [C], Stack 4: [E] | Exploring action Move D from A to table | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D], Stack 4: [E, B] | Taking action Move A from table to B | Moved to state -> Stack 1: [C], Stack 2: [D], Stack 3: [E, B, A] | Plan so far [Move A from C to table | Move C from B to table | Move B from D to table | Move D from E to table | Move B from table to E | Move A from table to B] | Exploring action Move A from B to D | New state -> Stack 1: [C], Stack 2: [D, A], Stack 3: [E, B] | Exploring action Move B from E to A | New state -> Invalid | Exploring action Move D from table to A | New state -> Stack 1: [C], Stack 2: [E, B, A, D] | Exploring action Move A from B to table | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D], Stack 4: [E, B] | Exploring action Move E from table to D | New state -> Invalid | Taking action Move D from table to A | Moved to state -> Stack 1: [C], Stack 2: [E, B, A, D] | Plan so far [Move A from C to table | Move C from B to table | Move B from D to table | Move D from E to table | Move B from table to E | Move A from table to B | Move D from table to A] | Reached goal state!",
        "system2_states_v1": 37
    },
    {
        "idx": 900,
        "start": [
            [
                "table",
                "D",
                "F",
                "C",
                "G",
                "B",
                "A",
                "E"
            ]
        ],
        "goal": [
            [
                "table",
                "A"
            ],
            [
                "table",
                "F"
            ],
            [
                "table",
                "G",
                "D",
                "B",
                "C",
                "E"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": false,
                "on": "B",
                "under": "E",
                "ontable": false
            },
            "B": {
                "clear": false,
                "on": "G",
                "under": "A",
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": "F",
                "under": "G",
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": -1,
                "under": "F",
                "ontable": true
            },
            "E": {
                "clear": true,
                "on": "A",
                "under": -1,
                "ontable": false
            },
            "F": {
                "clear": false,
                "on": "D",
                "under": "C",
                "ontable": false
            },
            "G": {
                "clear": false,
                "on": "C",
                "under": "B",
                "ontable": false
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": true,
                "on": -1,
                "under": -1,
                "ontable": true
            },
            "B": {
                "clear": false,
                "on": "D",
                "under": "C",
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": "B",
                "under": "E",
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": "G",
                "under": "B",
                "ontable": false
            },
            "E": {
                "clear": true,
                "on": "C",
                "under": -1,
                "ontable": false
            },
            "F": {
                "clear": true,
                "on": -1,
                "under": -1,
                "ontable": true
            },
            "G": {
                "clear": false,
                "on": -1,
                "under": "D",
                "ontable": true
            }
        },
        "plan_len": 10,
        "num_blocks": 7,
        "prompt": "The initial state:\nThe hand is empty.\nD is on the table. F is on D. C is on F. G is on C. B is on G. A is on B. E is on A. E is clear.\n\nThe goal is:\nA is on the table. A is clear.\nF is on the table. F is clear.\nG is on the table. D is on G. B is on D. C is on B. E is on C. E is clear.\n",
        "system1_plan": "Move E from A to table | Move A from B to table | Move B from G to table | Move G from C to table | Move C from F to table | Move F from D to table | Move D from table to G | Move B from table to D | Move C from table to B | Move E from table to C",
        "system1_states": 10,
        "system2_plan_v1": "Moved to state -> Stack 1: [D, F, C, G, B, A, E] | Plan so far [] | Exploring action Move F from D to table | New state -> Invalid | Exploring action Move E from A to table | New state -> Stack 1: [D, F, C, G, B, A], Stack 2: [E] | Taking action Move E from A to table | Moved to state -> Stack 1: [D, F, C, G, B, A], Stack 2: [E] | Plan so far [Move E from A to table] | Exploring action Move C from F to A | New state -> Invalid | Exploring action Move A from B to E | New state -> Stack 1: [D, F, C, G, B], Stack 2: [E, A] | Exploring action Move E from table to A | New state -> Stack 1: [D, F, C, G, B, A, E] | Exploring action Move A from B to table | New state -> Stack 1: [A], Stack 2: [D, F, C, G, B], Stack 3: [E] | Taking action Move A from B to table | Moved to state -> Stack 1: [A], Stack 2: [D, F, C, G, B], Stack 3: [E] | Plan so far [Move E from A to table | Move A from B to table] | Exploring action Move F from D to E | New state -> Invalid | Exploring action Move B from G to E | New state -> Stack 1: [A], Stack 2: [D, F, C, G], Stack 3: [E, B] | Exploring action Move E from table to B | New state -> Stack 1: [A], Stack 2: [D, F, C, G, B, E] | Exploring action Move D from table to E | New state -> Invalid | Exploring action Move B from G to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, F, C, G], Stack 4: [E] | Taking action Move B from G to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, F, C, G], Stack 4: [E] | Plan so far [Move E from A to table | Move A from B to table | Move B from G to table] | Exploring action Move F from D to A | New state -> Invalid | Exploring action Move G from C to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, F, C], Stack 4: [E], Stack 5: [G] | Exploring action Move G from C to B | New state -> Stack 1: [A], Stack 2: [B, G], Stack 3: [D, F, C], Stack 4: [E] | Exploring action Move G from C to E | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, F, C], Stack 4: [E, G] | Exploring action Move D from table to G | New state -> Invalid | Taking action Move G from C to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, F, C], Stack 4: [E], Stack 5: [G] | Plan so far [Move E from A to table | Move A from B to table | Move B from G to table | Move G from C to table] | Exploring action Move C from F to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D, F], Stack 5: [E], Stack 6: [G] | Exploring action Move C from F to G | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, F], Stack 4: [E], Stack 5: [G, C] | Exploring action Move F from D to E | New state -> Invalid | Exploring action Move C from F to E | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, F], Stack 4: [E, C], Stack 5: [G] | Taking action Move C from F to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D, F], Stack 5: [E], Stack 6: [G] | Plan so far [Move E from A to table | Move A from B to table | Move B from G to table | Move G from C to table | Move C from F to table] | Exploring action Move F from D to C | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, F], Stack 4: [D], Stack 5: [E], Stack 6: [G] | Exploring action Move D from table to G | New state -> Invalid | Exploring action Move F from D to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F], Stack 7: [G] | Exploring action Move F from D to E | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E, F], Stack 6: [G] | Taking action Move F from D to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F], Stack 7: [G] | Plan so far [Move E from A to table | Move A from B to table | Move B from G to table | Move G from C to table | Move C from F to table | Move F from D to table] | Exploring action Move E from table to C | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, E], Stack 4: [D], Stack 5: [F], Stack 6: [G] | Exploring action Move C from table to B | New state -> Stack 1: [A], Stack 2: [B, C], Stack 3: [D], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Exploring action Move D from table to G | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [E], Stack 5: [F], Stack 6: [G, D] | Taking action Move D from table to G | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [E], Stack 5: [F], Stack 6: [G, D] | Plan so far [Move E from A to table | Move A from B to table | Move B from G to table | Move G from C to table | Move C from F to table | Move F from D to table | Move D from table to G] | Exploring action Move C from table to E | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [E, C], Stack 4: [F], Stack 5: [G, D] | Exploring action Move E from table to C | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, E], Stack 4: [F], Stack 5: [G, D] | Exploring action Move G from table to C | New state -> Invalid | Exploring action Move B from table to D | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [E], Stack 4: [F], Stack 5: [G, D, B] | Taking action Move B from table to D | Moved to state -> Stack 1: [A], Stack 2: [C], Stack 3: [E], Stack 4: [F], Stack 5: [G, D, B] | Plan so far [Move E from A to table | Move A from B to table | Move B from G to table | Move G from C to table | Move C from F to table | Move F from D to table | Move D from table to G | Move B from table to D] | Exploring action Move C from table to E | New state -> Stack 1: [A], Stack 2: [E, C], Stack 3: [F], Stack 4: [G, D, B] | Exploring action Move C from table to B | New state -> Stack 1: [A], Stack 2: [E], Stack 3: [F], Stack 4: [G, D, B, C] | Exploring action Move D from G to table | New state -> Invalid | Exploring action Move E from table to C | New state -> Stack 1: [A], Stack 2: [C, E], Stack 3: [F], Stack 4: [G, D, B] | Taking action Move C from table to B | Moved to state -> Stack 1: [A], Stack 2: [E], Stack 3: [F], Stack 4: [G, D, B, C] | Plan so far [Move E from A to table | Move A from B to table | Move B from G to table | Move G from C to table | Move C from F to table | Move F from D to table | Move D from table to G | Move B from table to D | Move C from table to B] | Exploring action Move E from table to C | New state -> Stack 1: [A], Stack 2: [F], Stack 3: [G, D, B, C, E] | Exploring action Move D from G to C | New state -> Invalid | Exploring action Move C from B to table | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [E], Stack 4: [F], Stack 5: [G, D, B] | Exploring action Move C from B to E | New state -> Stack 1: [A], Stack 2: [E, C], Stack 3: [F], Stack 4: [G, D, B] | Taking action Move E from table to C | Moved to state -> Stack 1: [A], Stack 2: [F], Stack 3: [G, D, B, C, E] | Plan so far [Move E from A to table | Move A from B to table | Move B from G to table | Move G from C to table | Move C from F to table | Move F from D to table | Move D from table to G | Move B from table to D | Move C from table to B | Move E from table to C] | Reached goal state!",
        "system2_states_v1": 39
    },
    {
        "idx": 886,
        "start": [
            [
                "table",
                "B",
                "C",
                "G"
            ],
            [
                "table",
                "F",
                "A",
                "E",
                "D"
            ]
        ],
        "goal": [
            [
                "table",
                "A"
            ],
            [
                "table",
                "G",
                "F",
                "B",
                "D",
                "C",
                "E"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": false,
                "on": "F",
                "under": "E",
                "ontable": false
            },
            "B": {
                "clear": false,
                "on": -1,
                "under": "C",
                "ontable": true
            },
            "C": {
                "clear": false,
                "on": "B",
                "under": "G",
                "ontable": false
            },
            "D": {
                "clear": true,
                "on": "E",
                "under": -1,
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": "A",
                "under": "D",
                "ontable": false
            },
            "F": {
                "clear": false,
                "on": -1,
                "under": "A",
                "ontable": true
            },
            "G": {
                "clear": true,
                "on": "C",
                "under": -1,
                "ontable": false
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": true,
                "on": -1,
                "under": -1,
                "ontable": true
            },
            "B": {
                "clear": false,
                "on": "F",
                "under": "D",
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": "D",
                "under": "E",
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": "B",
                "under": "C",
                "ontable": false
            },
            "E": {
                "clear": true,
                "on": "C",
                "under": -1,
                "ontable": false
            },
            "F": {
                "clear": false,
                "on": "G",
                "under": "B",
                "ontable": false
            },
            "G": {
                "clear": false,
                "on": -1,
                "under": "F",
                "ontable": true
            }
        },
        "plan_len": 10,
        "num_blocks": 7,
        "prompt": "The initial state:\nThe hand is empty.\nB is on the table. C is on B. G is on C. G is clear.\nF is on the table. A is on F. E is on A. D is on E. D is clear.\n\nThe goal is:\nA is on the table. A is clear.\nG is on the table. F is on G. B is on F. D is on B. C is on D. E is on C. E is clear.\n",
        "system1_plan": "Move D from E to table | Move E from A to table | Move A from F to table | Move G from C to table | Move C from B to table | Move F from table to G | Move B from table to F | Move D from table to B | Move C from table to D | Move E from table to C",
        "system1_states": 10,
        "system2_plan_v1": "Moved to state -> Stack 1: [B, C, G], Stack 2: [F, A, E, D] | Plan so far [] | Exploring action Move G from C to table | New state -> Stack 1: [B, C], Stack 2: [F, A, E, D], Stack 3: [G] | Exploring action Move D from E to table | New state -> Stack 1: [B, C, G], Stack 2: [D], Stack 3: [F, A, E] | Exploring action Move D from E to G | New state -> Stack 1: [B, C, G, D], Stack 2: [F, A, E] | Exploring action Move E from A to table | New state -> Invalid | Taking action Move D from E to table | Moved to state -> Stack 1: [B, C, G], Stack 2: [D], Stack 3: [F, A, E] | Plan so far [Move D from E to table] | Exploring action Move A from F to E | New state -> Invalid | Exploring action Move A from F to table | New state -> Invalid | Exploring action Move E from A to table | New state -> Stack 1: [B, C, G], Stack 2: [D], Stack 3: [E], Stack 4: [F, A] | Exploring action Move G from C to table | New state -> Stack 1: [B, C], Stack 2: [D], Stack 3: [F, A, E], Stack 4: [G] | Exploring action Move G from C to D | New state -> Stack 1: [B, C], Stack 2: [D, G], Stack 3: [F, A, E] | Taking action Move G from C to table | Moved to state -> Stack 1: [B, C], Stack 2: [F, A, E, D], Stack 3: [G] | Plan so far [Move G from C to table] | Exploring action Move D from E to table | New state -> Stack 1: [B, C], Stack 2: [D], Stack 3: [F, A, E], Stack 4: [G] | Exploring action Move B from table to D | New state -> Invalid | Exploring action Move C from B to table | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [F, A, E, D], Stack 4: [G] | Exploring action Move C from B to G | New state -> Stack 1: [B], Stack 2: [F, A, E, D], Stack 3: [G, C] | Taking action Move E from A to table | Moved to state -> Stack 1: [B, C, G], Stack 2: [D], Stack 3: [E], Stack 4: [F, A] | Plan so far [Move D from E to table | Move E from A to table] | Exploring action Move A from F to table | New state -> Stack 1: [A], Stack 2: [B, C, G], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Exploring action Move G from C to table | New state -> Stack 1: [B, C], Stack 2: [D], Stack 3: [E], Stack 4: [F, A], Stack 5: [G] | Exploring action Move A from F to E | New state -> Stack 1: [B, C, G], Stack 2: [D], Stack 3: [E, A], Stack 4: [F] | Exploring action Move F from table to D | New state -> Invalid | Taking action Move A from F to table | Moved to state -> Stack 1: [A], Stack 2: [B, C, G], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Plan so far [Move D from E to table | Move E from A to table | Move A from F to table] | Exploring action Move C from B to F | New state -> Invalid | Exploring action Move G from C to D | New state -> Stack 1: [A], Stack 2: [B, C], Stack 3: [D, G], Stack 4: [E], Stack 5: [F] | Exploring action Move B from table to G | New state -> Invalid | Exploring action Move G from C to table | New state -> Stack 1: [A], Stack 2: [B, C], Stack 3: [D], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Exploring action Move G from C to E | New state -> Stack 1: [A], Stack 2: [B, C], Stack 3: [D], Stack 4: [E, G], Stack 5: [F] | Taking action Move G from C to table | Moved to state -> Stack 1: [A], Stack 2: [B, C], Stack 3: [D], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Plan so far [Move D from E to table | Move E from A to table | Move A from F to table | Move G from C to table] | Exploring action Move F from table to G | New state -> Stack 1: [A], Stack 2: [B, C], Stack 3: [D], Stack 4: [E], Stack 5: [G, F] | Exploring action Move C from B to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F], Stack 7: [G] | Exploring action Move C from B to D | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, C], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Exploring action Move B from table to D | New state -> Invalid | Taking action Move C from B to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F], Stack 7: [G] | Plan so far [Move D from E to table | Move E from A to table | Move A from F to table | Move G from C to table | Move C from B to table] | Exploring action Move E from table to C | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, E], Stack 4: [D], Stack 5: [F], Stack 6: [G] | Exploring action Move B from table to C | New state -> Stack 1: [A], Stack 2: [C, B], Stack 3: [D], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Exploring action Move F from table to G | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [G, F] | Taking action Move F from table to G | Moved to state -> Stack 1: [A], Stack 2: [B, C], Stack 3: [D], Stack 4: [E], Stack 5: [G, F] | Plan so far [Move D from E to table | Move E from A to table | Move A from F to table | Move G from C to table | Move F from table to G] | Exploring action Move E from table to C | New state -> Stack 1: [A], Stack 2: [B, C, E], Stack 3: [D], Stack 4: [G, F] | Exploring action Move C from B to D | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, C], Stack 4: [E], Stack 5: [G, F] | Exploring action Move B from table to E | New state -> Invalid | Exploring action Move C from B to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [G, F] | Exploring action Move G from table to A | New state -> Invalid | Taking action Move F from table to G | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [G, F] | Plan so far [Move D from E to table | Move E from A to table | Move A from F to table | Move G from C to table | Move C from B to table | Move F from table to G] | Exploring action Move B from table to F | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [G, F, B] | Exploring action Move E from table to C | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, E], Stack 4: [D], Stack 5: [G, F] | Exploring action Move G from table to A | New state -> Invalid | Exploring action Move C from table to B | New state -> Stack 1: [A], Stack 2: [B, C], Stack 3: [D], Stack 4: [E], Stack 5: [G, F] | Taking action Move C from B to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [G, F] | Plan so far [Move D from E to table | Move E from A to table | Move A from F to table | Move G from C to table | Move F from table to G | Move C from B to table] | Taking action Move B from table to F | Moved to state -> Stack 1: [A], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [G, F, B] | Plan so far [Move D from E to table | Move E from A to table | Move A from F to table | Move G from C to table | Move C from B to table | Move F from table to G | Move B from table to F] | Exploring action Move D from table to B | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [E], Stack 4: [G, F, B, D] | Exploring action Move G from table to C | New state -> Invalid | Exploring action Move E from table to C | New state -> Stack 1: [A], Stack 2: [C, E], Stack 3: [D], Stack 4: [G, F, B] | Exploring action Move B from F to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [G, F] | Taking action Move D from table to B | Moved to state -> Stack 1: [A], Stack 2: [C], Stack 3: [E], Stack 4: [G, F, B, D] | Plan so far [Move D from E to table | Move E from A to table | Move A from F to table | Move G from C to table | Move C from B to table | Move F from table to G | Move B from table to F | Move D from table to B] | Exploring action Move B from F to E | New state -> Invalid | Exploring action Move C from table to D | New state -> Stack 1: [A], Stack 2: [E], Stack 3: [G, F, B, D, C] | Exploring action Move D from B to table | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [G, F, B] | Exploring action Move E from table to C | New state -> Stack 1: [A], Stack 2: [C, E], Stack 3: [G, F, B, D] | Taking action Move C from table to D | Moved to state -> Stack 1: [A], Stack 2: [E], Stack 3: [G, F, B, D, C] | Plan so far [Move D from E to table | Move E from A to table | Move A from F to table | Move G from C to table | Move C from B to table | Move F from table to G | Move B from table to F | Move D from table to B | Move C from table to D] | Exploring action Move E from table to A | New state -> Stack 1: [A, E], Stack 2: [G, F, B, D, C] | Exploring action Move G from table to A | New state -> Invalid | Exploring action Move E from table to C | New state -> Stack 1: [A], Stack 2: [G, F, B, D, C, E] | Exploring action Move C from D to table | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [E], Stack 4: [G, F, B, D] | Taking action Move E from table to C | Moved to state -> Stack 1: [A], Stack 2: [G, F, B, D, C, E] | Plan so far [Move D from E to table | Move E from A to table | Move A from F to table | Move G from C to table | Move C from B to table | Move F from table to G | Move B from table to F | Move D from table to B | Move C from table to D | Move E from table to C] | Reached goal state!",
        "system2_states_v1": 50
    },
    {
        "idx": 904,
        "start": [
            [
                "table",
                "A",
                "D",
                "B",
                "F"
            ],
            [
                "table",
                "C",
                "G"
            ],
            [
                "table",
                "E"
            ]
        ],
        "goal": [
            [
                "table",
                "A",
                "E",
                "C",
                "B",
                "G"
            ],
            [
                "table",
                "D",
                "F"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": false,
                "on": -1,
                "under": "D",
                "ontable": true
            },
            "B": {
                "clear": false,
                "on": "D",
                "under": "F",
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": -1,
                "under": "G",
                "ontable": true
            },
            "D": {
                "clear": false,
                "on": "A",
                "under": "B",
                "ontable": false
            },
            "E": {
                "clear": true,
                "on": -1,
                "under": -1,
                "ontable": true
            },
            "F": {
                "clear": true,
                "on": "B",
                "under": -1,
                "ontable": false
            },
            "G": {
                "clear": true,
                "on": "C",
                "under": -1,
                "ontable": false
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": false,
                "on": -1,
                "under": "E",
                "ontable": true
            },
            "B": {
                "clear": false,
                "on": "C",
                "under": "G",
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": "E",
                "under": "B",
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": -1,
                "under": "F",
                "ontable": true
            },
            "E": {
                "clear": false,
                "on": "A",
                "under": "C",
                "ontable": false
            },
            "F": {
                "clear": true,
                "on": "D",
                "under": -1,
                "ontable": false
            },
            "G": {
                "clear": true,
                "on": "B",
                "under": -1,
                "ontable": false
            }
        },
        "plan_len": 10,
        "num_blocks": 7,
        "prompt": "The initial state:\nThe hand is empty.\nA is on the table. D is on A. B is on D. F is on B. F is clear.\nC is on the table. G is on C. G is clear.\nE is on the table. E is clear.\n\nThe goal is:\nA is on the table. E is on A. C is on E. B is on C. G is on B. G is clear.\nD is on the table. F is on D. F is clear.\n",
        "system1_plan": "Move F from B to table | Move B from D to table | Move G from C to B | Move D from A to table | Move F from table to D | Move E from table to A | Move C from table to E | Move G from B to table | Move B from table to C | Move G from table to B",
        "system1_states": 10,
        "system2_plan_v1": "Moved to state -> Stack 1: [A, D, B, F], Stack 2: [C, G], Stack 3: [E] | Plan so far [] | Exploring action Move F from B to table | New state -> Stack 1: [A, D, B], Stack 2: [C, G], Stack 3: [E], Stack 4: [F] | Exploring action Move G from C to E | New state -> Stack 1: [A, D, B, F], Stack 2: [C], Stack 3: [E, G] | Exploring action Move B from D to E | New state -> Invalid | Exploring action Move G from C to table | New state -> Stack 1: [A, D, B, F], Stack 2: [C], Stack 3: [E], Stack 4: [G] | Taking action Move F from B to table | Moved to state -> Stack 1: [A, D, B], Stack 2: [C, G], Stack 3: [E], Stack 4: [F] | Plan so far [Move F from B to table] | Exploring action Move G from C to B | New state -> Stack 1: [A, D, B, G], Stack 2: [C], Stack 3: [E], Stack 4: [F] | Exploring action Move C from table to B | New state -> Invalid | Exploring action Move B from D to table | New state -> Stack 1: [A, D], Stack 2: [B], Stack 3: [C, G], Stack 4: [E], Stack 5: [F] | Exploring action Move G from C to table | New state -> Stack 1: [A, D, B], Stack 2: [C], Stack 3: [E], Stack 4: [F], Stack 5: [G] | Taking action Move G from C to table | Moved to state -> Stack 1: [A, D, B, F], Stack 2: [C], Stack 3: [E], Stack 4: [G] | Plan so far [Move G from C to table] | Exploring action Move F from B to table | New state -> Stack 1: [A, D, B], Stack 2: [C], Stack 3: [E], Stack 4: [F], Stack 5: [G] | Exploring action Move D from A to table | New state -> Invalid | Exploring action Move F from B to C | New state -> Stack 1: [A, D, B], Stack 2: [C, F], Stack 3: [E], Stack 4: [G] | Exploring action Move F from B to G | New state -> Stack 1: [A, D, B], Stack 2: [C], Stack 3: [E], Stack 4: [G, F] | Taking action Move B from D to table | Moved to state -> Stack 1: [A, D], Stack 2: [B], Stack 3: [C, G], Stack 4: [E], Stack 5: [F] | Plan so far [Move F from B to table | Move B from D to table] | Exploring action Move C from table to B | New state -> Invalid | Exploring action Move C from table to E | New state -> Invalid | Exploring action Move G from C to table | New state -> Stack 1: [A, D], Stack 2: [B], Stack 3: [C], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Exploring action Move G from C to B | New state -> Stack 1: [A, D], Stack 2: [B, G], Stack 3: [C], Stack 4: [E], Stack 5: [F] | Exploring action Move D from A to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, G], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Taking action Move F from B to table | Moved to state -> Stack 1: [A, D, B], Stack 2: [C], Stack 3: [E], Stack 4: [F], Stack 5: [G] | Plan so far [Move G from C to table | Move F from B to table] | Exploring action Move A from table to C | New state -> Invalid | Exploring action Move B from D to table | New state -> Stack 1: [A, D], Stack 2: [B], Stack 3: [C], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Exploring action Move B from D to C | New state -> Stack 1: [A, D], Stack 2: [C, B], Stack 3: [E], Stack 4: [F], Stack 5: [G] | Exploring action Move B from D to E | New state -> Stack 1: [A, D], Stack 2: [C], Stack 3: [E, B], Stack 4: [F], Stack 5: [G] | Taking action Move G from C to table | Moved to state -> Stack 1: [A, D], Stack 2: [B], Stack 3: [C], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Plan so far [Move F from B to table | Move B from D to table | Move G from C to table] | Exploring action Move A from table to C | New state -> Invalid | Exploring action Move A from table to G | New state -> Invalid | Exploring action Move D from A to E | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [E, D], Stack 5: [F], Stack 6: [G] | Exploring action Move D from A to B | New state -> Stack 1: [A], Stack 2: [B, D], Stack 3: [C], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Exploring action Move D from A to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F], Stack 7: [G] | Taking action Move G from C to B | Moved to state -> Stack 1: [A, D], Stack 2: [B, G], Stack 3: [C], Stack 4: [E], Stack 5: [F] | Plan so far [Move F from B to table | Move B from D to table | Move G from C to B] | Exploring action Move B from table to F | New state -> Invalid | Exploring action Move D from A to E | New state -> Stack 1: [A], Stack 2: [B, G], Stack 3: [C], Stack 4: [E, D], Stack 5: [F] | Exploring action Move D from A to C | New state -> Stack 1: [A], Stack 2: [B, G], Stack 3: [C, D], Stack 4: [E], Stack 5: [F] | Exploring action Move D from A to table | New state -> Stack 1: [A], Stack 2: [B, G], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Taking action Move B from D to table | Moved to state -> Stack 1: [A, D], Stack 2: [B], Stack 3: [C], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Plan so far [Move G from C to table | Move F from B to table | Move B from D to table] | Taking action Move D from A to table | Moved to state -> Stack 1: [A], Stack 2: [B, G], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Plan so far [Move F from B to table | Move B from D to table | Move G from C to B | Move D from A to table] | Exploring action Move E from table to A | New state -> Stack 1: [A, E], Stack 2: [B, G], Stack 3: [C], Stack 4: [D], Stack 5: [F] | Exploring action Move F from table to D | New state -> Stack 1: [A], Stack 2: [B, G], Stack 3: [C], Stack 4: [D, F], Stack 5: [E] | Exploring action Move B from table to D | New state -> Invalid | Exploring action Move G from B to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F], Stack 7: [G] | Taking action Move F from table to D | Moved to state -> Stack 1: [A], Stack 2: [B, G], Stack 3: [C], Stack 4: [D, F], Stack 5: [E] | Plan so far [Move F from B to table | Move B from D to table | Move G from C to B | Move D from A to table | Move F from table to D] | Exploring action Move E from table to A | New state -> Stack 1: [A, E], Stack 2: [B, G], Stack 3: [C], Stack 4: [D, F] | Exploring action Move C from table to E | New state -> Stack 1: [A], Stack 2: [B, G], Stack 3: [D, F], Stack 4: [E, C] | Exploring action Move G from B to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D, F], Stack 5: [E], Stack 6: [G] | Exploring action Move D from table to G | New state -> Invalid | Taking action Move E from table to A | Moved to state -> Stack 1: [A, E], Stack 2: [B, G], Stack 3: [C], Stack 4: [D, F] | Plan so far [Move F from B to table | Move B from D to table | Move G from C to B | Move D from A to table | Move F from table to D | Move E from table to A] | Exploring action Move D from table to F | New state -> Invalid | Exploring action Move C from table to E | New state -> Stack 1: [A, E, C], Stack 2: [B, G], Stack 3: [D, F] | Exploring action Move G from B to E | New state -> Stack 1: [A, E, G], Stack 2: [B], Stack 3: [C], Stack 4: [D, F] | Exploring action Move G from B to table | New state -> Stack 1: [A, E], Stack 2: [B], Stack 3: [C], Stack 4: [D, F], Stack 5: [G] | Taking action Move C from table to E | Moved to state -> Stack 1: [A, E, C], Stack 2: [B, G], Stack 3: [D, F] | Plan so far [Move F from B to table | Move B from D to table | Move G from C to B | Move D from A to table | Move F from table to D | Move E from table to A | Move C from table to E] | Exploring action Move D from table to F | New state -> Invalid | Exploring action Move C from E to table | New state -> Stack 1: [A, E], Stack 2: [B, G], Stack 3: [C], Stack 4: [D, F] | Exploring action Move G from B to table | New state -> Stack 1: [A, E, C], Stack 2: [B], Stack 3: [D, F], Stack 4: [G] | Exploring action Move G from B to C | New state -> Stack 1: [A, E, C, G], Stack 2: [B], Stack 3: [D, F] | Taking action Move G from C to table | Moved to state -> Stack 1: [A, D, B], Stack 2: [C], Stack 3: [E], Stack 4: [F], Stack 5: [G] | Plan so far [Move F from B to table | Move G from C to table] | Taking action Move G from B to table | Moved to state -> Stack 1: [A, E, C], Stack 2: [B], Stack 3: [D, F], Stack 4: [G] | Plan so far [Move F from B to table | Move B from D to table | Move G from C to B | Move D from A to table | Move F from table to D | Move E from table to A | Move C from table to E | Move G from B to table] | Exploring action Move B from table to C | New state -> Stack 1: [A, E, C, B], Stack 2: [D, F], Stack 3: [G] | Exploring action Move G from table to B | New state -> Stack 1: [A, E, C], Stack 2: [B, G], Stack 3: [D, F] | Exploring action Move A from table to G | New state -> Invalid | Exploring action Move E from A to C | New state -> Invalid | Exploring action Move B from table to G | New state -> Stack 1: [A, E, C], Stack 2: [D, F], Stack 3: [G, B] | Taking action Move D from A to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F], Stack 7: [G] | Plan so far [Move F from B to table | Move B from D to table | Move G from C to table | Move D from A to table] | Exploring action Move G from table to B | New state -> Stack 1: [A], Stack 2: [B, G], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Exploring action Move E from table to A | New state -> Stack 1: [A, E], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [F], Stack 6: [G] | Exploring action Move F from table to D | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D, F], Stack 5: [E], Stack 6: [G] | Taking action Move F from table to D | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D, F], Stack 5: [E], Stack 6: [G] | Plan so far [Move F from B to table | Move B from D to table | Move G from C to table | Move D from A to table | Move F from table to D] | Exploring action Move A from table to E | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, F], Stack 4: [E, A], Stack 5: [G] | Exploring action Move D from table to C | New state -> Invalid | Exploring action Move G from table to B | New state -> Stack 1: [A], Stack 2: [B, G], Stack 3: [C], Stack 4: [D, F], Stack 5: [E] | Exploring action Move E from table to A | New state -> Stack 1: [A, E], Stack 2: [B], Stack 3: [C], Stack 4: [D, F], Stack 5: [G] | Exploring action Move D from table to E | New state -> Invalid | Taking action Move E from table to A | Moved to state -> Stack 1: [A, E], Stack 2: [B], Stack 3: [C], Stack 4: [D, F], Stack 5: [G] | Plan so far [Move F from B to table | Move B from D to table | Move G from C to table | Move D from A to table | Move F from table to D | Move E from table to A] | Exploring action Move C from table to E | New state -> Stack 1: [A, E, C], Stack 2: [B], Stack 3: [D, F], Stack 4: [G] | Exploring action Move G from table to B | New state -> Stack 1: [A, E], Stack 2: [B, G], Stack 3: [C], Stack 4: [D, F] | Exploring action Move D from table to G | New state -> Invalid | Exploring action Move B from table to C | New state -> Stack 1: [A, E], Stack 2: [C, B], Stack 3: [D, F], Stack 4: [G] | Exploring action Move A from table to B | New state -> Invalid | Taking action Move C from table to E | Moved to state -> Stack 1: [A, E, C], Stack 2: [B], Stack 3: [D, F], Stack 4: [G] | Plan so far [Move F from B to table | Move B from D to table | Move G from C to table | Move D from A to table | Move F from table to D | Move E from table to A | Move C from table to E] | Taking action Move E from table to A | Moved to state -> Stack 1: [A, E], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [F], Stack 6: [G] | Plan so far [Move F from B to table | Move B from D to table | Move G from C to table | Move D from A to table | Move E from table to A] | Exploring action Move G from table to B | New state -> Stack 1: [A, E], Stack 2: [B, G], Stack 3: [C], Stack 4: [D], Stack 5: [F] | Exploring action Move F from table to D | New state -> Stack 1: [A, E], Stack 2: [B], Stack 3: [C], Stack 4: [D, F], Stack 5: [G] | Exploring action Move A from table to B | New state -> Invalid | Exploring action Move A from table to F | New state -> Invalid | Exploring action Move C from table to E | New state -> Stack 1: [A, E, C], Stack 2: [B], Stack 3: [D], Stack 4: [F], Stack 5: [G] | Taking action Move F from table to D | Moved to state -> Stack 1: [A, E], Stack 2: [B], Stack 3: [C], Stack 4: [D, F], Stack 5: [G] | Plan so far [Move F from B to table | Move B from D to table | Move G from C to table | Move D from A to table | Move E from table to A | Move F from table to D] | Taking action Move G from B to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D, F], Stack 5: [E], Stack 6: [G] | Plan so far [Move F from B to table | Move B from D to table | Move G from C to B | Move D from A to table | Move F from table to D | Move G from B to table] | Taking action Move B from table to C | Moved to state -> Stack 1: [A, E, C, B], Stack 2: [D, F], Stack 3: [G] | Plan so far [Move F from B to table | Move B from D to table | Move G from C to B | Move D from A to table | Move F from table to D | Move E from table to A | Move C from table to E | Move G from B to table | Move B from table to C] | Exploring action Move B from C to table | New state -> Stack 1: [A, E, C], Stack 2: [B], Stack 3: [D, F], Stack 4: [G] | Exploring action Move G from table to B | New state -> Stack 1: [A, E, C, B, G], Stack 2: [D, F] | Exploring action Move B from C to G | New state -> Stack 1: [A, E, C], Stack 2: [D, F], Stack 3: [G, B] | Exploring action Move C from E to F | New state -> Invalid | Taking action Move G from table to B | Moved to state -> Stack 1: [A, E, C, B, G], Stack 2: [D, F] | Plan so far [Move F from B to table | Move B from D to table | Move G from C to B | Move D from A to table | Move F from table to D | Move E from table to A | Move C from table to E | Move G from B to table | Move B from table to C | Move G from table to B] | Reached goal state!",
        "system2_states_v1": 73
    },
    {
        "idx": 881,
        "start": [
            [
                "table",
                "B",
                "F"
            ],
            [
                "table",
                "G",
                "C",
                "A",
                "D",
                "E"
            ]
        ],
        "goal": [
            [
                "table",
                "C",
                "D",
                "E",
                "B"
            ],
            [
                "table",
                "F",
                "G",
                "A"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": false,
                "on": "C",
                "under": "D",
                "ontable": false
            },
            "B": {
                "clear": false,
                "on": -1,
                "under": "F",
                "ontable": true
            },
            "C": {
                "clear": false,
                "on": "G",
                "under": "A",
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": "A",
                "under": "E",
                "ontable": false
            },
            "E": {
                "clear": true,
                "on": "D",
                "under": -1,
                "ontable": false
            },
            "F": {
                "clear": true,
                "on": "B",
                "under": -1,
                "ontable": false
            },
            "G": {
                "clear": false,
                "on": -1,
                "under": "C",
                "ontable": true
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": true,
                "on": "G",
                "under": -1,
                "ontable": false
            },
            "B": {
                "clear": true,
                "on": "E",
                "under": -1,
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": -1,
                "under": "D",
                "ontable": true
            },
            "D": {
                "clear": false,
                "on": "C",
                "under": "E",
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": "D",
                "under": "B",
                "ontable": false
            },
            "F": {
                "clear": false,
                "on": -1,
                "under": "G",
                "ontable": true
            },
            "G": {
                "clear": false,
                "on": "F",
                "under": "A",
                "ontable": false
            }
        },
        "plan_len": 10,
        "num_blocks": 7,
        "prompt": "The initial state:\nThe hand is empty.\nB is on the table. F is on B. F is clear.\nG is on the table. C is on G. A is on C. D is on A. E is on D. E is clear.\n\nThe goal is:\nC is on the table. D is on C. E is on D. B is on E. B is clear.\nF is on the table. G is on F. A is on G. A is clear.\n",
        "system1_plan": "Move E from D to table | Move D from A to table | Move A from C to table | Move C from G to table | Move D from table to C | Move E from table to D | Move F from B to table | Move B from table to E | Move G from table to F | Move A from table to G",
        "system1_states": 10,
        "system2_plan_v1": "Moved to state -> Stack 1: [B, F], Stack 2: [G, C, A, D, E] | Plan so far [] | Exploring action Move A from C to F | New state -> Invalid | Exploring action Move F from B to table | New state -> Stack 1: [B], Stack 2: [F], Stack 3: [G, C, A, D, E] | Exploring action Move C from G to E | New state -> Invalid | Exploring action Move E from D to table | New state -> Stack 1: [B, F], Stack 2: [E], Stack 3: [G, C, A, D] | Exploring action Move E from D to F | New state -> Stack 1: [B, F, E], Stack 2: [G, C, A, D] | Taking action Move E from D to table | Moved to state -> Stack 1: [B, F], Stack 2: [E], Stack 3: [G, C, A, D] | Plan so far [Move E from D to table] | Exploring action Move C from G to F | New state -> Invalid | Exploring action Move F from B to table | New state -> Stack 1: [B], Stack 2: [E], Stack 3: [F], Stack 4: [G, C, A, D] | Exploring action Move D from A to table | New state -> Stack 1: [B, F], Stack 2: [D], Stack 3: [E], Stack 4: [G, C, A] | Exploring action Move F from B to D | New state -> Stack 1: [B], Stack 2: [E], Stack 3: [G, C, A, D, F] | Exploring action Move B from table to D | New state -> Invalid | Taking action Move F from B to table | Moved to state -> Stack 1: [B], Stack 2: [F], Stack 3: [G, C, A, D, E] | Plan so far [Move F from B to table] | Exploring action Move E from D to B | New state -> Stack 1: [B, E], Stack 2: [F], Stack 3: [G, C, A, D] | Exploring action Move B from table to E | New state -> Stack 1: [F], Stack 2: [G, C, A, D, E, B] | Exploring action Move E from D to table | New state -> Stack 1: [B], Stack 2: [E], Stack 3: [F], Stack 4: [G, C, A, D] | Exploring action Move D from A to E | New state -> Invalid | Taking action Move B from table to E | Moved to state -> Stack 1: [F], Stack 2: [G, C, A, D, E, B] | Plan so far [Move F from B to table | Move B from table to E] | Exploring action Move B from E to table | New state -> Stack 1: [B], Stack 2: [F], Stack 3: [G, C, A, D, E] | Exploring action Move F from table to B | New state -> Stack 1: [G, C, A, D, E, B, F] | Exploring action Move B from E to F | New state -> Stack 1: [F, B], Stack 2: [G, C, A, D, E] | Exploring action Move C from G to table | New state -> Invalid | Taking action Move E from D to table | Moved to state -> Stack 1: [B], Stack 2: [E], Stack 3: [F], Stack 4: [G, C, A, D] | Plan so far [Move F from B to table | Move E from D to table] | Exploring action Move C from G to table | New state -> Invalid | Exploring action Move D from A to table | New state -> Stack 1: [B], Stack 2: [D], Stack 3: [E], Stack 4: [F], Stack 5: [G, C, A] | Exploring action Move D from A to E | New state -> Stack 1: [B], Stack 2: [E, D], Stack 3: [F], Stack 4: [G, C, A] | Exploring action Move G from table to B | New state -> Invalid | Exploring action Move D from A to F | New state -> Stack 1: [B], Stack 2: [E], Stack 3: [F, D], Stack 4: [G, C, A] | Taking action Move D from A to table | Moved to state -> Stack 1: [B, F], Stack 2: [D], Stack 3: [E], Stack 4: [G, C, A] | Plan so far [Move E from D to table | Move D from A to table] | Exploring action Move A from C to E | New state -> Stack 1: [B, F], Stack 2: [D], Stack 3: [E, A], Stack 4: [G, C] | Exploring action Move F from B to table | New state -> Stack 1: [B], Stack 2: [D], Stack 3: [E], Stack 4: [F], Stack 5: [G, C, A] | Exploring action Move G from table to D | New state -> Invalid | Exploring action Move A from C to table | New state -> Stack 1: [A], Stack 2: [B, F], Stack 3: [D], Stack 4: [E], Stack 5: [G, C] | Taking action Move F from B to table | Moved to state -> Stack 1: [B], Stack 2: [E], Stack 3: [F], Stack 4: [G, C, A, D] | Plan so far [Move E from D to table | Move F from B to table] | Taking action Move A from C to table | Moved to state -> Stack 1: [A], Stack 2: [B, F], Stack 3: [D], Stack 4: [E], Stack 5: [G, C] | Plan so far [Move E from D to table | Move D from A to table | Move A from C to table] | Exploring action Move C from G to A | New state -> Stack 1: [A, C], Stack 2: [B, F], Stack 3: [D], Stack 4: [E], Stack 5: [G] | Exploring action Move F from B to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D], Stack 4: [E], Stack 5: [F], Stack 6: [G, C] | Exploring action Move B from table to A | New state -> Invalid | Exploring action Move C from G to table | New state -> Stack 1: [A], Stack 2: [B, F], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [G] | Taking action Move D from A to table | Moved to state -> Stack 1: [B], Stack 2: [D], Stack 3: [E], Stack 4: [F], Stack 5: [G, C, A] | Plan so far [Move F from B to table | Move E from D to table | Move D from A to table] | Exploring action Move A from C to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D], Stack 4: [E], Stack 5: [F], Stack 6: [G, C] | Exploring action Move A from C to B | New state -> Stack 1: [B, A], Stack 2: [D], Stack 3: [E], Stack 4: [F], Stack 5: [G, C] | Exploring action Move C from G to B | New state -> Invalid | Exploring action Move A from C to D | New state -> Stack 1: [B], Stack 2: [D, A], Stack 3: [E], Stack 4: [F], Stack 5: [G, C] | Exploring action Move C from G to E | New state -> Invalid | Taking action Move F from B to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [D], Stack 4: [E], Stack 5: [F], Stack 6: [G, C] | Plan so far [Move E from D to table | Move D from A to table | Move A from C to table | Move F from B to table] | Exploring action Move C from G to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F], Stack 7: [G] | Exploring action Move C from G to A | New state -> Stack 1: [A, C], Stack 2: [B], Stack 3: [D], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Exploring action Move C from G to D | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, C], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Exploring action Move G from table to C | New state -> Invalid | Exploring action Move G from table to F | New state -> Invalid | Taking action Move F from B to table | Moved to state -> Stack 1: [B], Stack 2: [D], Stack 3: [E], Stack 4: [F], Stack 5: [G, C, A] | Plan so far [Move E from D to table | Move D from A to table | Move F from B to table] | Taking action Move C from G to table | Moved to state -> Stack 1: [A], Stack 2: [B, F], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [G] | Plan so far [Move E from D to table | Move D from A to table | Move A from C to table | Move C from G to table] | Exploring action Move B from table to A | New state -> Invalid | Exploring action Move D from table to C | New state -> Stack 1: [A], Stack 2: [B, F], Stack 3: [C, D], Stack 4: [E], Stack 5: [G] | Exploring action Move F from B to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F], Stack 7: [G] | Exploring action Move A from table to G | New state -> Stack 1: [B, F], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [G, A] | Taking action Move C from G to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F], Stack 7: [G] | Plan so far [Move E from D to table | Move D from A to table | Move A from C to table | Move F from B to table | Move C from G to table] | Exploring action Move G from table to F | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F, G] | Exploring action Move A from table to G | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [F], Stack 6: [G, A] | Exploring action Move D from table to C | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, D], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Taking action Move D from table to C | Moved to state -> Stack 1: [A], Stack 2: [B, F], Stack 3: [C, D], Stack 4: [E], Stack 5: [G] | Plan so far [Move E from D to table | Move D from A to table | Move A from C to table | Move C from G to table | Move D from table to C] | Exploring action Move C from table to D | New state -> Invalid | Exploring action Move E from table to D | New state -> Stack 1: [A], Stack 2: [B, F], Stack 3: [C, D, E], Stack 4: [G] | Exploring action Move C from table to A | New state -> Invalid | Exploring action Move F from B to A | New state -> Stack 1: [A, F], Stack 2: [B], Stack 3: [C, D], Stack 4: [E], Stack 5: [G] | Exploring action Move F from B to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, D], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Taking action Move A from C to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [D], Stack 4: [E], Stack 5: [F], Stack 6: [G, C] | Plan so far [Move F from B to table | Move E from D to table | Move D from A to table | Move A from C to table] | Taking action Move E from table to D | Moved to state -> Stack 1: [A], Stack 2: [B, F], Stack 3: [C, D, E], Stack 4: [G] | Plan so far [Move E from D to table | Move D from A to table | Move A from C to table | Move C from G to table | Move D from table to C | Move E from table to D] | Exploring action Move A from table to G | New state -> Stack 1: [B, F], Stack 2: [C, D, E], Stack 3: [G, A] | Exploring action Move F from B to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, D, E], Stack 4: [F], Stack 5: [G] | Exploring action Move C from table to G | New state -> Invalid | Exploring action Move F from B to E | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, D, E, F], Stack 4: [G] | Taking action Move F from B to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, D], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Plan so far [Move E from D to table | Move D from A to table | Move A from C to table | Move C from G to table | Move D from table to C | Move F from B to table] | Exploring action Move E from table to D | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, D, E], Stack 4: [F], Stack 5: [G] | Exploring action Move G from table to F | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, D], Stack 4: [E], Stack 5: [F, G] | Exploring action Move C from table to A | New state -> Invalid | Exploring action Move C from table to E | New state -> Invalid | Exploring action Move A from table to G | New state -> Stack 1: [B], Stack 2: [C, D], Stack 3: [E], Stack 4: [F], Stack 5: [G, A] | Taking action Move F from B to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, D, E], Stack 4: [F], Stack 5: [G] | Plan so far [Move E from D to table | Move D from A to table | Move A from C to table | Move C from G to table | Move D from table to C | Move E from table to D | Move F from B to table] | Exploring action Move B from table to E | New state -> Stack 1: [A], Stack 2: [C, D, E, B], Stack 3: [F], Stack 4: [G] | Exploring action Move C from table to G | New state -> Invalid | Exploring action Move G from table to F | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, D, E], Stack 4: [F, G] | Exploring action Move C from table to B | New state -> Invalid | Exploring action Move A from table to G | New state -> Stack 1: [B], Stack 2: [C, D, E], Stack 3: [F], Stack 4: [G, A] | Taking action Move B from table to E | Moved to state -> Stack 1: [A], Stack 2: [C, D, E, B], Stack 3: [F], Stack 4: [G] | Plan so far [Move E from D to table | Move D from A to table | Move A from C to table | Move C from G to table | Move D from table to C | Move E from table to D | Move F from B to table | Move B from table to E] | Exploring action Move A from table to F | New state -> Stack 1: [C, D, E, B], Stack 2: [F, A], Stack 3: [G] | Exploring action Move A from table to G | New state -> Stack 1: [C, D, E, B], Stack 2: [F], Stack 3: [G, A] | Exploring action Move D from C to G | New state -> Invalid | Exploring action Move G from table to F | New state -> Stack 1: [A], Stack 2: [C, D, E, B], Stack 3: [F, G] | Taking action Move G from table to F | Moved to state -> Stack 1: [A], Stack 2: [C, D, E, B], Stack 3: [F, G] | Plan so far [Move E from D to table | Move D from A to table | Move A from C to table | Move C from G to table | Move D from table to C | Move E from table to D | Move F from B to table | Move B from table to E | Move G from table to F] | Exploring action Move G from F to table | New state -> Stack 1: [A], Stack 2: [C, D, E, B], Stack 3: [F], Stack 4: [G] | Exploring action Move C from table to G | New state -> Invalid | Exploring action Move G from F to A | New state -> Stack 1: [A, G], Stack 2: [C, D, E, B], Stack 3: [F] | Exploring action Move A from table to G | New state -> Stack 1: [C, D, E, B], Stack 2: [F, G, A] | Exploring action Move D from C to A | New state -> Invalid | Taking action Move A from table to G | Moved to state -> Stack 1: [C, D, E, B], Stack 2: [F, G, A] | Plan so far [Move E from D to table | Move D from A to table | Move A from C to table | Move C from G to table | Move D from table to C | Move E from table to D | Move F from B to table | Move B from table to E | Move G from table to F | Move A from table to G] | Reached goal state!",
        "system2_states_v1": 76
    },
    {
        "idx": 888,
        "start": [
            [
                "table",
                "C",
                "B",
                "G",
                "D",
                "A",
                "E"
            ],
            [
                "table",
                "F"
            ]
        ],
        "goal": [
            [
                "table",
                "D",
                "A"
            ],
            [
                "table",
                "E",
                "C",
                "G",
                "B",
                "F"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": false,
                "on": "D",
                "under": "E",
                "ontable": false
            },
            "B": {
                "clear": false,
                "on": "C",
                "under": "G",
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": -1,
                "under": "B",
                "ontable": true
            },
            "D": {
                "clear": false,
                "on": "G",
                "under": "A",
                "ontable": false
            },
            "E": {
                "clear": true,
                "on": "A",
                "under": -1,
                "ontable": false
            },
            "F": {
                "clear": true,
                "on": -1,
                "under": -1,
                "ontable": true
            },
            "G": {
                "clear": false,
                "on": "B",
                "under": "D",
                "ontable": false
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": true,
                "on": "D",
                "under": -1,
                "ontable": false
            },
            "B": {
                "clear": false,
                "on": "G",
                "under": "F",
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": "E",
                "under": "G",
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": -1,
                "under": "A",
                "ontable": true
            },
            "E": {
                "clear": false,
                "on": -1,
                "under": "C",
                "ontable": true
            },
            "F": {
                "clear": true,
                "on": "B",
                "under": -1,
                "ontable": false
            },
            "G": {
                "clear": false,
                "on": "C",
                "under": "B",
                "ontable": false
            }
        },
        "plan_len": 10,
        "num_blocks": 7,
        "prompt": "The initial state:\nThe hand is empty.\nC is on the table. B is on C. G is on B. D is on G. A is on D. E is on A. E is clear.\nF is on the table. F is clear.\n\nThe goal is:\nD is on the table. A is on D. A is clear.\nE is on the table. C is on E. G is on C. B is on G. F is on B. F is clear.\n",
        "system1_plan": "Move E from A to table | Move A from D to table | Move D from G to table | Move A from table to D | Move G from B to table | Move B from C to table | Move C from table to E | Move G from table to C | Move B from table to G | Move F from table to B",
        "system1_states": 10,
        "system2_plan_v1": "Moved to state -> Stack 1: [C, B, G, D, A, E], Stack 2: [F] | Plan so far [] | Exploring action Move F from table to E | New state -> Stack 1: [C, B, G, D, A, E, F] | Exploring action Move D from G to E | New state -> Invalid | Exploring action Move E from A to F | New state -> Stack 1: [C, B, G, D, A], Stack 2: [F, E] | Exploring action Move E from A to table | New state -> Stack 1: [C, B, G, D, A], Stack 2: [E], Stack 3: [F] | Taking action Move E from A to table | Moved to state -> Stack 1: [C, B, G, D, A], Stack 2: [E], Stack 3: [F] | Plan so far [Move E from A to table] | Exploring action Move D from G to A | New state -> Invalid | Exploring action Move F from table to E | New state -> Stack 1: [C, B, G, D, A], Stack 2: [E, F] | Exploring action Move D from G to E | New state -> Invalid | Exploring action Move A from D to table | New state -> Stack 1: [A], Stack 2: [C, B, G, D], Stack 3: [E], Stack 4: [F] | Exploring action Move A from D to F | New state -> Stack 1: [C, B, G, D], Stack 2: [E], Stack 3: [F, A] | Taking action Move E from A to F | Moved to state -> Stack 1: [C, B, G, D, A], Stack 2: [F, E] | Plan so far [Move E from A to F] | Exploring action Move E from F to table | New state -> Stack 1: [C, B, G, D, A], Stack 2: [E], Stack 3: [F] | Exploring action Move B from C to table | New state -> Invalid | Exploring action Move B from C to E | New state -> Invalid | Exploring action Move A from D to table | New state -> Stack 1: [A], Stack 2: [C, B, G, D], Stack 3: [F, E] | Exploring action Move A from D to E | New state -> Stack 1: [C, B, G, D], Stack 2: [F, E, A] | Taking action Move A from D to table | Moved to state -> Stack 1: [A], Stack 2: [C, B, G, D], Stack 3: [E], Stack 4: [F] | Plan so far [Move E from A to table | Move A from D to table] | Exploring action Move B from C to F | New state -> Invalid | Exploring action Move D from G to table | New state -> Stack 1: [A], Stack 2: [C, B, G], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Exploring action Move D from G to F | New state -> Stack 1: [A], Stack 2: [C, B, G], Stack 3: [E], Stack 4: [F, D] | Exploring action Move D from G to E | New state -> Stack 1: [A], Stack 2: [C, B, G], Stack 3: [E, D], Stack 4: [F] | Taking action Move E from F to table | Moved to state -> Stack 1: [C, B, G, D, A], Stack 2: [E], Stack 3: [F] | Plan so far [Move E from A to F | Move E from F to table] | Taking action Move D from G to table | Moved to state -> Stack 1: [A], Stack 2: [C, B, G], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Plan so far [Move E from A to table | Move A from D to table | Move D from G to table] | Exploring action Move G from B to E | New state -> Stack 1: [A], Stack 2: [C, B], Stack 3: [D], Stack 4: [E, G], Stack 5: [F] | Exploring action Move G from B to table | New state -> Stack 1: [A], Stack 2: [C, B], Stack 3: [D], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Exploring action Move B from C to E | New state -> Invalid | Exploring action Move A from table to D | New state -> Stack 1: [C, B, G], Stack 2: [D, A], Stack 3: [E], Stack 4: [F] | Exploring action Move C from table to E | New state -> Invalid | Taking action Move A from table to D | Moved to state -> Stack 1: [C, B, G], Stack 2: [D, A], Stack 3: [E], Stack 4: [F] | Plan so far [Move E from A to table | Move A from D to table | Move D from G to table | Move A from table to D] | Exploring action Move G from B to E | New state -> Stack 1: [C, B], Stack 2: [D, A], Stack 3: [E, G], Stack 4: [F] | Exploring action Move G from B to F | New state -> Stack 1: [C, B], Stack 2: [D, A], Stack 3: [E], Stack 4: [F, G] | Exploring action Move D from table to E | New state -> Invalid | Exploring action Move G from B to table | New state -> Stack 1: [C, B], Stack 2: [D, A], Stack 3: [E], Stack 4: [F], Stack 5: [G] | Taking action Move G from B to table | Moved to state -> Stack 1: [C, B], Stack 2: [D, A], Stack 3: [E], Stack 4: [F], Stack 5: [G] | Plan so far [Move E from A to table | Move A from D to table | Move D from G to table | Move A from table to D | Move G from B to table] | Exploring action Move B from C to table | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, A], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Exploring action Move B from C to G | New state -> Stack 1: [C], Stack 2: [D, A], Stack 3: [E], Stack 4: [F], Stack 5: [G, B] | Exploring action Move D from table to B | New state -> Invalid | Exploring action Move B from C to E | New state -> Stack 1: [C], Stack 2: [D, A], Stack 3: [E, B], Stack 4: [F], Stack 5: [G] | Exploring action Move D from table to G | New state -> Invalid | Taking action Move B from C to table | Moved to state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, A], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Plan so far [Move E from A to table | Move A from D to table | Move D from G to table | Move A from table to D | Move G from B to table | Move B from C to table] | Exploring action Move B from table to C | New state -> Stack 1: [C, B], Stack 2: [D, A], Stack 3: [E], Stack 4: [F], Stack 5: [G] | Exploring action Move D from table to A | New state -> Invalid | Exploring action Move D from table to C | New state -> Invalid | Exploring action Move C from table to E | New state -> Stack 1: [B], Stack 2: [D, A], Stack 3: [E, C], Stack 4: [F], Stack 5: [G] | Exploring action Move F from table to B | New state -> Stack 1: [B, F], Stack 2: [C], Stack 3: [D, A], Stack 4: [E], Stack 5: [G] | Taking action Move C from table to E | Moved to state -> Stack 1: [B], Stack 2: [D, A], Stack 3: [E, C], Stack 4: [F], Stack 5: [G] | Plan so far [Move E from A to table | Move A from D to table | Move D from G to table | Move A from table to D | Move G from B to table | Move B from C to table | Move C from table to E] | Exploring action Move F from table to B | New state -> Stack 1: [B, F], Stack 2: [D, A], Stack 3: [E, C], Stack 4: [G] | Exploring action Move B from table to C | New state -> Stack 1: [D, A], Stack 2: [E, C, B], Stack 3: [F], Stack 4: [G] | Exploring action Move G from table to C | New state -> Stack 1: [B], Stack 2: [D, A], Stack 3: [E, C, G], Stack 4: [F] | Exploring action Move E from table to A | New state -> Invalid | Taking action Move G from table to C | Moved to state -> Stack 1: [B], Stack 2: [D, A], Stack 3: [E, C, G], Stack 4: [F] | Plan so far [Move E from A to table | Move A from D to table | Move D from G to table | Move A from table to D | Move G from B to table | Move B from C to table | Move C from table to E | Move G from table to C] | Exploring action Move F from table to B | New state -> Stack 1: [B, F], Stack 2: [D, A], Stack 3: [E, C, G] | Exploring action Move E from table to B | New state -> Invalid | Exploring action Move B from table to F | New state -> Stack 1: [D, A], Stack 2: [E, C, G], Stack 3: [F, B] | Exploring action Move B from table to G | New state -> Stack 1: [D, A], Stack 2: [E, C, G, B], Stack 3: [F] | Taking action Move B from table to G | Moved to state -> Stack 1: [D, A], Stack 2: [E, C, G, B], Stack 3: [F] | Plan so far [Move E from A to table | Move A from D to table | Move D from G to table | Move A from table to D | Move G from B to table | Move B from C to table | Move C from table to E | Move G from table to C | Move B from table to G] | Exploring action Move C from E to F | New state -> Invalid | Exploring action Move F from table to B | New state -> Stack 1: [D, A], Stack 2: [E, C, G, B, F] | Exploring action Move B from G to table | New state -> Stack 1: [B], Stack 2: [D, A], Stack 3: [E, C, G], Stack 4: [F] | Exploring action Move B from G to F | New state -> Stack 1: [D, A], Stack 2: [E, C, G], Stack 3: [F, B] | Taking action Move F from table to B | Moved to state -> Stack 1: [D, A], Stack 2: [E, C, G, B, F] | Plan so far [Move E from A to table | Move A from D to table | Move D from G to table | Move A from table to D | Move G from B to table | Move B from C to table | Move C from table to E | Move G from table to C | Move B from table to G | Move F from table to B] | Reached goal state!",
        "system2_states_v1": 49
    },
    {
        "idx": 894,
        "start": [
            [
                "table",
                "E",
                "B",
                "C"
            ],
            [
                "table",
                "F",
                "G",
                "A",
                "D"
            ]
        ],
        "goal": [
            [
                "table",
                "D",
                "F",
                "B",
                "C",
                "A",
                "G"
            ],
            [
                "table",
                "E"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": false,
                "on": "G",
                "under": "D",
                "ontable": false
            },
            "B": {
                "clear": false,
                "on": "E",
                "under": "C",
                "ontable": false
            },
            "C": {
                "clear": true,
                "on": "B",
                "under": -1,
                "ontable": false
            },
            "D": {
                "clear": true,
                "on": "A",
                "under": -1,
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": -1,
                "under": "B",
                "ontable": true
            },
            "F": {
                "clear": false,
                "on": -1,
                "under": "G",
                "ontable": true
            },
            "G": {
                "clear": false,
                "on": "F",
                "under": "A",
                "ontable": false
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": false,
                "on": "C",
                "under": "G",
                "ontable": false
            },
            "B": {
                "clear": false,
                "on": "F",
                "under": "C",
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": "B",
                "under": "A",
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": -1,
                "under": "F",
                "ontable": true
            },
            "E": {
                "clear": true,
                "on": -1,
                "under": -1,
                "ontable": true
            },
            "F": {
                "clear": false,
                "on": "D",
                "under": "B",
                "ontable": false
            },
            "G": {
                "clear": true,
                "on": "A",
                "under": -1,
                "ontable": false
            }
        },
        "plan_len": 10,
        "num_blocks": 7,
        "prompt": "The initial state:\nThe hand is empty.\nE is on the table. B is on E. C is on B. C is clear.\nF is on the table. G is on F. A is on G. D is on A. D is clear.\n\nThe goal is:\nD is on the table. F is on D. B is on F. C is on B. A is on C. G is on A. G is clear.\nE is on the table. E is clear.\n",
        "system1_plan": "Move C from B to table | Move B from E to table | Move D from A to table | Move A from G to table | Move G from F to table | Move F from table to D | Move B from table to F | Move C from table to B | Move A from table to C | Move G from table to A",
        "system1_states": 10,
        "system2_plan_v1": "Moved to state -> Stack 1: [E, B, C], Stack 2: [F, G, A, D] | Plan so far [] | Exploring action Move C from B to D | New state -> Stack 1: [E, B], Stack 2: [F, G, A, D, C] | Exploring action Move D from A to table | New state -> Stack 1: [D], Stack 2: [E, B, C], Stack 3: [F, G, A] | Exploring action Move G from F to table | New state -> Invalid | Exploring action Move C from B to table | New state -> Stack 1: [C], Stack 2: [E, B], Stack 3: [F, G, A, D] | Taking action Move C from B to table | Moved to state -> Stack 1: [C], Stack 2: [E, B], Stack 3: [F, G, A, D] | Plan so far [Move C from B to table] | Exploring action Move B from E to table | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [E], Stack 4: [F, G, A, D] | Exploring action Move E from table to B | New state -> Invalid | Exploring action Move D from A to table | New state -> Stack 1: [C], Stack 2: [D], Stack 3: [E, B], Stack 4: [F, G, A] | Exploring action Move B from E to D | New state -> Stack 1: [C], Stack 2: [E], Stack 3: [F, G, A, D, B] | Exploring action Move G from F to D | New state -> Invalid | Taking action Move B from E to table | Moved to state -> Stack 1: [B], Stack 2: [C], Stack 3: [E], Stack 4: [F, G, A, D] | Plan so far [Move C from B to table | Move B from E to table] | Exploring action Move A from G to E | New state -> Invalid | Exploring action Move D from A to C | New state -> Stack 1: [B], Stack 2: [C, D], Stack 3: [E], Stack 4: [F, G, A] | Exploring action Move D from A to B | New state -> Stack 1: [B, D], Stack 2: [C], Stack 3: [E], Stack 4: [F, G, A] | Exploring action Move D from A to table | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [F, G, A] | Taking action Move D from A to table | Moved to state -> Stack 1: [B], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [F, G, A] | Plan so far [Move C from B to table | Move B from E to table | Move D from A to table] | Exploring action Move A from G to C | New state -> Stack 1: [B], Stack 2: [C, A], Stack 3: [D], Stack 4: [E], Stack 5: [F, G] | Exploring action Move A from G to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F, G] | Exploring action Move F from table to B | New state -> Invalid | Exploring action Move G from F to E | New state -> Invalid | Exploring action Move A from G to B | New state -> Stack 1: [B, A], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [F, G] | Taking action Move A from G to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F, G] | Plan so far [Move C from B to table | Move B from E to table | Move D from A to table | Move A from G to table] | Exploring action Move F from table to A | New state -> Invalid | Exploring action Move G from F to B | New state -> Stack 1: [A], Stack 2: [B, G], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Exploring action Move G from F to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F], Stack 7: [G] | Exploring action Move G from F to A | New state -> Stack 1: [A, G], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Exploring action Move F from table to E | New state -> Invalid | Taking action Move G from F to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F], Stack 7: [G] | Plan so far [Move C from B to table | Move B from E to table | Move D from A to table | Move A from G to table | Move G from F to table] | Exploring action Move F from table to D | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D, F], Stack 5: [E], Stack 6: [G] | Exploring action Move G from table to A | New state -> Stack 1: [A, G], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Exploring action Move A from table to D | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, A], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Taking action Move G from F to A | Moved to state -> Stack 1: [A, G], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Plan so far [Move C from B to table | Move B from E to table | Move D from A to table | Move A from G to table | Move G from F to A] | Exploring action Move C from table to D | New state -> Stack 1: [A, G], Stack 2: [B], Stack 3: [D, C], Stack 4: [E], Stack 5: [F] | Exploring action Move A from table to C | New state -> Invalid | Exploring action Move G from A to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F], Stack 7: [G] | Exploring action Move A from table to E | New state -> Invalid | Exploring action Move F from table to D | New state -> Stack 1: [A, G], Stack 2: [B], Stack 3: [C], Stack 4: [D, F], Stack 5: [E] | Taking action Move F from table to D | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D, F], Stack 5: [E], Stack 6: [G] | Plan so far [Move C from B to table | Move B from E to table | Move D from A to table | Move A from G to table | Move G from F to table | Move F from table to D] | Exploring action Move D from table to G | New state -> Invalid | Exploring action Move B from table to F | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, F, B], Stack 4: [E], Stack 5: [G] | Exploring action Move B from table to C | New state -> Stack 1: [A], Stack 2: [C, B], Stack 3: [D, F], Stack 4: [E], Stack 5: [G] | Exploring action Move G from table to A | New state -> Stack 1: [A, G], Stack 2: [B], Stack 3: [C], Stack 4: [D, F], Stack 5: [E] | Taking action Move F from table to D | Moved to state -> Stack 1: [A, G], Stack 2: [B], Stack 3: [C], Stack 4: [D, F], Stack 5: [E] | Plan so far [Move C from B to table | Move B from E to table | Move D from A to table | Move A from G to table | Move G from F to A | Move F from table to D] | Exploring action Move A from table to B | New state -> Invalid | Exploring action Move B from table to F | New state -> Stack 1: [A, G], Stack 2: [C], Stack 3: [D, F, B], Stack 4: [E] | Exploring action Move G from A to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D, F], Stack 5: [E], Stack 6: [G] | Exploring action Move A from table to G | New state -> Invalid | Exploring action Move B from table to C | New state -> Stack 1: [A, G], Stack 2: [C, B], Stack 3: [D, F], Stack 4: [E] | Taking action Move B from table to F | Moved to state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, F, B], Stack 4: [E], Stack 5: [G] | Plan so far [Move C from B to table | Move B from E to table | Move D from A to table | Move A from G to table | Move G from F to table | Move F from table to D | Move B from table to F] | Exploring action Move C from table to G | New state -> Stack 1: [A], Stack 2: [D, F, B], Stack 3: [E], Stack 4: [G, C] | Exploring action Move G from table to A | New state -> Stack 1: [A, G], Stack 2: [C], Stack 3: [D, F, B], Stack 4: [E] | Exploring action Move D from table to B | New state -> Invalid | Exploring action Move C from table to B | New state -> Stack 1: [A], Stack 2: [D, F, B, C], Stack 3: [E], Stack 4: [G] | Taking action Move B from table to F | Moved to state -> Stack 1: [A, G], Stack 2: [C], Stack 3: [D, F, B], Stack 4: [E] | Plan so far [Move C from B to table | Move B from E to table | Move D from A to table | Move A from G to table | Move G from F to A | Move F from table to D | Move B from table to F] | Exploring action Move F from D to G | New state -> Invalid | Exploring action Move G from A to table | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, F, B], Stack 4: [E], Stack 5: [G] | Exploring action Move C from table to B | New state -> Stack 1: [A, G], Stack 2: [D, F, B, C], Stack 3: [E] | Exploring action Move G from A to B | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, F, B, G], Stack 4: [E] | Taking action Move C from table to B | Moved to state -> Stack 1: [A], Stack 2: [D, F, B, C], Stack 3: [E], Stack 4: [G] | Plan so far [Move C from B to table | Move B from E to table | Move D from A to table | Move A from G to table | Move G from F to table | Move F from table to D | Move B from table to F | Move C from table to B] | Exploring action Move D from table to C | New state -> Invalid | Exploring action Move A from table to C | New state -> Stack 1: [D, F, B, C, A], Stack 2: [E], Stack 3: [G] | Exploring action Move G from table to A | New state -> Stack 1: [A, G], Stack 2: [D, F, B, C], Stack 3: [E] | Exploring action Move A from table to G | New state -> Stack 1: [D, F, B, C], Stack 2: [E], Stack 3: [G, A] | Taking action Move C from table to B | Moved to state -> Stack 1: [A, G], Stack 2: [D, F, B, C], Stack 3: [E] | Plan so far [Move C from B to table | Move B from E to table | Move D from A to table | Move A from G to table | Move G from F to A | Move F from table to D | Move B from table to F | Move C from table to B] | Exploring action Move G from A to table | New state -> Stack 1: [A], Stack 2: [D, F, B, C], Stack 3: [E], Stack 4: [G] | Exploring action Move C from B to table | New state -> Stack 1: [A, G], Stack 2: [C], Stack 3: [D, F, B], Stack 4: [E] | Exploring action Move G from A to C | New state -> Stack 1: [A], Stack 2: [D, F, B, C, G], Stack 3: [E] | Exploring action Move F from D to E | New state -> Invalid | Exploring action Move B from F to G | New state -> Invalid | Taking action Move A from table to C | Moved to state -> Stack 1: [D, F, B, C, A], Stack 2: [E], Stack 3: [G] | Plan so far [Move C from B to table | Move B from E to table | Move D from A to table | Move A from G to table | Move G from F to table | Move F from table to D | Move B from table to F | Move C from table to B | Move A from table to C] | Exploring action Move A from C to G | New state -> Stack 1: [D, F, B, C], Stack 2: [E], Stack 3: [G, A] | Exploring action Move A from C to table | New state -> Stack 1: [A], Stack 2: [D, F, B, C], Stack 3: [E], Stack 4: [G] | Exploring action Move G from table to A | New state -> Stack 1: [D, F, B, C, A, G], Stack 2: [E] | Exploring action Move C from B to G | New state -> Invalid | Exploring action Move C from B to table | New state -> Invalid | Taking action Move G from table to A | Moved to state -> Stack 1: [D, F, B, C, A, G], Stack 2: [E] | Plan so far [Move C from B to table | Move B from E to table | Move D from A to table | Move A from G to table | Move G from F to table | Move F from table to D | Move B from table to F | Move C from table to B | Move A from table to C | Move G from table to A] | Reached goal state!",
        "system2_states_v1": 62
    },
    {
        "idx": 694,
        "start": [
            [
                "table",
                "B",
                "E"
            ],
            [
                "table",
                "C",
                "A"
            ],
            [
                "table",
                "F",
                "D"
            ]
        ],
        "goal": [
            [
                "table",
                "D",
                "F",
                "C",
                "A",
                "E",
                "B"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": true,
                "on": "C",
                "under": -1,
                "ontable": false
            },
            "B": {
                "clear": false,
                "on": -1,
                "under": "E",
                "ontable": true
            },
            "C": {
                "clear": false,
                "on": -1,
                "under": "A",
                "ontable": true
            },
            "D": {
                "clear": true,
                "on": "F",
                "under": -1,
                "ontable": false
            },
            "E": {
                "clear": true,
                "on": "B",
                "under": -1,
                "ontable": false
            },
            "F": {
                "clear": false,
                "on": -1,
                "under": "D",
                "ontable": true
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": false,
                "on": "C",
                "under": "E",
                "ontable": false
            },
            "B": {
                "clear": true,
                "on": "E",
                "under": -1,
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": "F",
                "under": "A",
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": -1,
                "under": "F",
                "ontable": true
            },
            "E": {
                "clear": false,
                "on": "A",
                "under": "B",
                "ontable": false
            },
            "F": {
                "clear": false,
                "on": "D",
                "under": "C",
                "ontable": false
            }
        },
        "plan_len": 8,
        "num_blocks": 6,
        "prompt": "The initial state:\nThe hand is empty.\nB is on the table. E is on B. E is clear.\nC is on the table. A is on C. A is clear.\nF is on the table. D is on F. D is clear.\n\nThe goal is:\nD is on the table. F is on D. C is on F. A is on C. E is on A. B is on E. B is clear.\n",
        "system1_plan": "Move D from F to table | Move E from B to table | Move A from C to table | Move F from table to D | Move C from table to F | Move A from table to C | Move E from table to A | Move B from table to E",
        "system1_states": 8,
        "system2_plan_v1": "Moved to state -> Stack 1: [B, E], Stack 2: [C, A], Stack 3: [F, D] | Plan so far [] | Exploring action Move F from table to D | New state -> Invalid | Exploring action Move E from B to A | New state -> Stack 1: [B], Stack 2: [C, A, E], Stack 3: [F, D] | Exploring action Move F from table to A | New state -> Invalid | Exploring action Move A from C to table | New state -> Stack 1: [A], Stack 2: [B, E], Stack 3: [C], Stack 4: [F, D] | Exploring action Move E from B to table | New state -> Stack 1: [B], Stack 2: [C, A], Stack 3: [E], Stack 4: [F, D] | Taking action Move E from B to A | Moved to state -> Stack 1: [B], Stack 2: [C, A, E], Stack 3: [F, D] | Plan so far [Move E from B to A] | Exploring action Move D from F to table | New state -> Stack 1: [B], Stack 2: [C, A, E], Stack 3: [D], Stack 4: [F] | Exploring action Move B from table to E | New state -> Stack 1: [C, A, E, B], Stack 2: [F, D] | Exploring action Move C from table to D | New state -> Invalid | Exploring action Move D from F to B | New state -> Stack 1: [B, D], Stack 2: [C, A, E], Stack 3: [F] | Exploring action Move A from C to table | New state -> Invalid | Taking action Move B from table to E | Moved to state -> Stack 1: [C, A, E, B], Stack 2: [F, D] | Plan so far [Move E from B to A | Move B from table to E] | Exploring action Move C from table to D | New state -> Invalid | Exploring action Move D from F to table | New state -> Stack 1: [C, A, E, B], Stack 2: [D], Stack 3: [F] | Exploring action Move D from F to B | New state -> Stack 1: [C, A, E, B, D], Stack 2: [F] | Exploring action Move B from E to table | New state -> Stack 1: [B], Stack 2: [C, A, E], Stack 3: [F, D] | Exploring action Move A from C to table | New state -> Invalid | Taking action Move D from F to table | Moved to state -> Stack 1: [C, A, E, B], Stack 2: [D], Stack 3: [F] | Plan so far [Move E from B to A | Move B from table to E | Move D from F to table] | Exploring action Move E from A to B | New state -> Invalid | Exploring action Move F from table to B | New state -> Stack 1: [C, A, E, B, F], Stack 2: [D] | Exploring action Move F from table to D | New state -> Stack 1: [C, A, E, B], Stack 2: [D, F] | Exploring action Move D from table to F | New state -> Stack 1: [C, A, E, B], Stack 2: [F, D] | Taking action Move F from table to D | Moved to state -> Stack 1: [C, A, E, B], Stack 2: [D, F] | Plan so far [Move E from B to A | Move B from table to E | Move D from F to table | Move F from table to D] | Exploring action Move B from E to table | New state -> Stack 1: [B], Stack 2: [C, A, E], Stack 3: [D, F] | Exploring action Move F from D to table | New state -> Stack 1: [C, A, E, B], Stack 2: [D], Stack 3: [F] | Exploring action Move B from E to F | New state -> Stack 1: [C, A, E], Stack 2: [D, F, B] | Exploring action Move A from C to B | New state -> Invalid | Taking action Move D from F to table | Moved to state -> Stack 1: [B], Stack 2: [C, A, E], Stack 3: [D], Stack 4: [F] | Plan so far [Move E from B to A | Move D from F to table] | Exploring action Move C from table to E | New state -> Invalid | Exploring action Move B from table to E | New state -> Stack 1: [C, A, E, B], Stack 2: [D], Stack 3: [F] | Exploring action Move E from A to table | New state -> Stack 1: [B], Stack 2: [C, A], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Exploring action Move F from table to D | New state -> Stack 1: [B], Stack 2: [C, A, E], Stack 3: [D, F] | Taking action Move B from table to E | Moved to state -> Stack 1: [C, A, E, B], Stack 2: [D], Stack 3: [F] | Plan so far [Move E from B to A | Move D from F to table | Move B from table to E] | Taking action Move F from table to D | Moved to state -> Stack 1: [B], Stack 2: [C, A, E], Stack 3: [D, F] | Plan so far [Move E from B to A | Move D from F to table | Move F from table to D] | Exploring action Move C from table to E | New state -> Invalid | Exploring action Move F from D to table | New state -> Stack 1: [B], Stack 2: [C, A, E], Stack 3: [D], Stack 4: [F] | Exploring action Move E from A to table | New state -> Stack 1: [B], Stack 2: [C, A], Stack 3: [D, F], Stack 4: [E] | Exploring action Move A from C to E | New state -> Invalid | Exploring action Move B from table to E | New state -> Stack 1: [C, A, E, B], Stack 2: [D, F] | Taking action Move B from table to E | Moved to state -> Stack 1: [C, A, E, B], Stack 2: [D, F] | Plan so far [Move E from B to A | Move D from F to table | Move F from table to D | Move B from table to E] | Taking action Move D from F to E | Moved to state -> Stack 1: [B], Stack 2: [C, A, E, D], Stack 3: [F] | Plan so far [Move E from B to A | Move D from F to E] | Exploring action Move D from E to B | New state -> Stack 1: [B, D], Stack 2: [C, A, E], Stack 3: [F] | Exploring action Move D from E to F | New state -> Stack 1: [B], Stack 2: [C, A, E], Stack 3: [F, D] | Exploring action Move D from E to table | New state -> Stack 1: [B], Stack 2: [C, A, E], Stack 3: [D], Stack 4: [F] | Exploring action Move C from table to F | New state -> Invalid | Exploring action Move E from A to table | New state -> Invalid | Taking action Move F from D to table | Moved to state -> Stack 1: [C, A, E, B], Stack 2: [D], Stack 3: [F] | Plan so far [Move E from B to A | Move B from table to E | Move D from F to table | Move F from table to D | Move F from D to table] | Taking action Move D from F to B | Moved to state -> Stack 1: [B, D], Stack 2: [C, A, E], Stack 3: [F] | Plan so far [Move E from B to A | Move D from F to B] | Exploring action Move D from B to E | New state -> Stack 1: [B], Stack 2: [C, A, E, D], Stack 3: [F] | Exploring action Move C from table to F | New state -> Invalid | Exploring action Move D from B to table | New state -> Stack 1: [B], Stack 2: [C, A, E], Stack 3: [D], Stack 4: [F] | Exploring action Move D from B to F | New state -> Stack 1: [B], Stack 2: [C, A, E], Stack 3: [F, D] | Taking action Move D from table to F | Moved to state -> Stack 1: [C, A, E, B], Stack 2: [F, D] | Plan so far [Move E from B to A | Move B from table to E | Move D from F to table | Move D from table to F] | Taking action Move D from B to table | Moved to state -> Stack 1: [B], Stack 2: [C, A, E], Stack 3: [D], Stack 4: [F] | Plan so far [Move E from B to A | Move D from F to B | Move D from B to table] | Taking action Move D from E to table | Moved to state -> Stack 1: [B], Stack 2: [C, A, E], Stack 3: [D], Stack 4: [F] | Plan so far [Move E from B to A | Move D from F to E | Move D from E to table] | Taking action Move D from F to B | Moved to state -> Stack 1: [C, A, E, B, D], Stack 2: [F] | Plan so far [Move E from B to A | Move B from table to E | Move D from F to B] | Exploring action Move D from B to F | New state -> Stack 1: [C, A, E, B], Stack 2: [F, D] | Exploring action Move D from B to table | New state -> Stack 1: [C, A, E, B], Stack 2: [D], Stack 3: [F] | Exploring action Move C from table to F | New state -> Invalid | Exploring action Move E from A to F | New state -> Invalid | Exploring action Move F from table to D | New state -> Stack 1: [C, A, E, B, D, F] | Taking action Move D from B to table | Moved to state -> Stack 1: [C, A, E, B], Stack 2: [D], Stack 3: [F] | Plan so far [Move E from B to A | Move B from table to E | Move D from F to B | Move D from B to table] | Taking action Move A from C to table | Moved to state -> Stack 1: [A], Stack 2: [B, E], Stack 3: [C], Stack 4: [F, D] | Plan so far [Move A from C to table] | Exploring action Move E from B to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [E], Stack 5: [F, D] | Exploring action Move E from B to A | New state -> Stack 1: [A, E], Stack 2: [B], Stack 3: [C], Stack 4: [F, D] | Exploring action Move B from table to E | New state -> Invalid | Exploring action Move B from table to D | New state -> Invalid | Exploring action Move D from F to table | New state -> Stack 1: [A], Stack 2: [B, E], Stack 3: [C], Stack 4: [D], Stack 5: [F] | Taking action Move D from B to F | Moved to state -> Stack 1: [C, A, E, B], Stack 2: [F, D] | Plan so far [Move E from B to A | Move B from table to E | Move D from F to B | Move D from B to F] | Taking action Move D from F to table | Moved to state -> Stack 1: [A], Stack 2: [B, E], Stack 3: [C], Stack 4: [D], Stack 5: [F] | Plan so far [Move A from C to table | Move D from F to table] | Exploring action Move E from B to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Exploring action Move E from B to A | New state -> Stack 1: [A, E], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [F] | Exploring action Move F from table to D | New state -> Stack 1: [A], Stack 2: [B, E], Stack 3: [C], Stack 4: [D, F] | Exploring action Move B from table to E | New state -> Invalid | Taking action Move E from B to table | Moved to state -> Stack 1: [B], Stack 2: [C, A], Stack 3: [E], Stack 4: [F, D] | Plan so far [Move E from B to table] | Exploring action Move E from table to A | New state -> Stack 1: [B], Stack 2: [C, A, E], Stack 3: [F, D] | Exploring action Move A from C to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [E], Stack 5: [F, D] | Exploring action Move D from F to table | New state -> Stack 1: [B], Stack 2: [C, A], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Exploring action Move F from table to E | New state -> Invalid | Taking action Move D from F to table | Moved to state -> Stack 1: [B, E], Stack 2: [C, A], Stack 3: [D], Stack 4: [F] | Plan so far [Move D from F to table] | Exploring action Move B from table to F | New state -> Invalid | Exploring action Move E from B to A | New state -> Stack 1: [B], Stack 2: [C, A, E], Stack 3: [D], Stack 4: [F] | Exploring action Move A from C to table | New state -> Stack 1: [A], Stack 2: [B, E], Stack 3: [C], Stack 4: [D], Stack 5: [F] | Exploring action Move C from table to A | New state -> Invalid | Exploring action Move F from table to D | New state -> Stack 1: [B, E], Stack 2: [C, A], Stack 3: [D, F] | Taking action Move E from B to A | Moved to state -> Stack 1: [B], Stack 2: [C, A, E], Stack 3: [D], Stack 4: [F] | Plan so far [Move D from F to table | Move E from B to A] | Taking action Move E from table to A | Moved to state -> Stack 1: [B], Stack 2: [C, A, E], Stack 3: [F, D] | Plan so far [Move E from B to table | Move E from table to A] | Taking action Move F from table to D | Moved to state -> Stack 1: [B, E], Stack 2: [C, A], Stack 3: [D, F] | Plan so far [Move D from F to table | Move F from table to D] | Exploring action Move E from B to table | New state -> Stack 1: [B], Stack 2: [C, A], Stack 3: [D, F], Stack 4: [E] | Exploring action Move D from table to F | New state -> Invalid | Exploring action Move E from B to A | New state -> Stack 1: [B], Stack 2: [C, A, E], Stack 3: [D, F] | Exploring action Move A from C to table | New state -> Stack 1: [A], Stack 2: [B, E], Stack 3: [C], Stack 4: [D, F] | Taking action Move E from B to A | Moved to state -> Stack 1: [B], Stack 2: [C, A, E], Stack 3: [D, F] | Plan so far [Move D from F to table | Move F from table to D | Move E from B to A] | Taking action Move A from C to table | Moved to state -> Stack 1: [A], Stack 2: [B, E], Stack 3: [C], Stack 4: [D], Stack 5: [F] | Plan so far [Move D from F to table | Move A from C to table] | Taking action Move E from B to table | Moved to state -> Stack 1: [B], Stack 2: [C, A], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Plan so far [Move D from F to table | Move E from B to table] | Exploring action Move C from table to F | New state -> Invalid | Exploring action Move F from table to D | New state -> Stack 1: [B], Stack 2: [C, A], Stack 3: [D, F], Stack 4: [E] | Exploring action Move A from C to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Exploring action Move E from table to A | New state -> Stack 1: [B], Stack 2: [C, A, E], Stack 3: [D], Stack 4: [F] | Taking action Move E from B to table | Moved to state -> Stack 1: [B], Stack 2: [C, A], Stack 3: [D, F], Stack 4: [E] | Plan so far [Move D from F to table | Move F from table to D | Move E from B to table] | Exploring action Move A from C to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D, F], Stack 5: [E] | Exploring action Move D from table to F | New state -> Invalid | Exploring action Move A from C to E | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, F], Stack 4: [E, A] | Exploring action Move C from table to F | New state -> Invalid | Exploring action Move E from table to A | New state -> Stack 1: [B], Stack 2: [C, A, E], Stack 3: [D, F] | Taking action Move A from C to table | Moved to state -> Stack 1: [A], Stack 2: [B, E], Stack 3: [C], Stack 4: [D, F] | Plan so far [Move D from F to table | Move F from table to D | Move A from C to table] | Exploring action Move B from table to F | New state -> Invalid | Exploring action Move B from table to C | New state -> Invalid | Exploring action Move E from B to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D, F], Stack 5: [E] | Exploring action Move C from table to F | New state -> Stack 1: [A], Stack 2: [B, E], Stack 3: [D, F, C] | Exploring action Move E from B to A | New state -> Stack 1: [A, E], Stack 2: [B], Stack 3: [C], Stack 4: [D, F] | Taking action Move A from C to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Plan so far [Move D from F to table | Move E from B to table | Move A from C to table] | Exploring action Move F from table to D | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D, F], Stack 5: [E] | Exploring action Move A from table to D | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, A], Stack 4: [E], Stack 5: [F] | Exploring action Move B from table to E | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D], Stack 4: [E, B], Stack 5: [F] | Taking action Move F from table to D | Moved to state -> Stack 1: [A], Stack 2: [B, E], Stack 3: [C], Stack 4: [D, F] | Plan so far [Move A from C to table | Move D from F to table | Move F from table to D] | Taking action Move A from C to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [E], Stack 5: [F, D] | Plan so far [Move E from B to table | Move A from C to table] | Exploring action Move D from F to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Exploring action Move B from table to E | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [E, B], Stack 4: [F, D] | Exploring action Move F from table to E | New state -> Invalid | Exploring action Move F from table to A | New state -> Invalid | Exploring action Move D from F to A | New state -> Stack 1: [A, D], Stack 2: [B], Stack 3: [C], Stack 4: [E], Stack 5: [F] | Taking action Move D from F to table | Moved to state -> Stack 1: [B], Stack 2: [C, A], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Plan so far [Move E from B to table | Move D from F to table] | Taking action Move D from F to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Plan so far [Move E from B to table | Move A from C to table | Move D from F to table] | Taking action Move F from table to D | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D, F], Stack 5: [E] | Plan so far [Move D from F to table | Move E from B to table | Move A from C to table | Move F from table to D] | Exploring action Move D from table to C | New state -> Invalid | Exploring action Move B from table to E | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, F], Stack 4: [E, B] | Exploring action Move A from table to E | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, F], Stack 4: [E, A] | Exploring action Move C from table to F | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, F, C], Stack 4: [E] | Exploring action Move D from table to B | New state -> Invalid | Taking action Move E from B to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [E], Stack 5: [F, D] | Plan so far [Move A from C to table | Move E from B to table] | Taking action Move C from table to F | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, F, C], Stack 4: [E] | Plan so far [Move D from F to table | Move E from B to table | Move A from C to table | Move F from table to D | Move C from table to F] | Exploring action Move A from table to C | New state -> Stack 1: [B], Stack 2: [D, F, C, A], Stack 3: [E] | Exploring action Move C from F to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D, F], Stack 5: [E] | Exploring action Move F from D to A | New state -> Invalid | Exploring action Move F from D to E | New state -> Invalid | Exploring action Move B from table to E | New state -> Stack 1: [A], Stack 2: [D, F, C], Stack 3: [E, B] | Taking action Move E from B to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Plan so far [Move A from C to table | Move D from F to table | Move E from B to table] | Taking action Move A from table to C | Moved to state -> Stack 1: [B], Stack 2: [D, F, C, A], Stack 3: [E] | Plan so far [Move D from F to table | Move E from B to table | Move A from C to table | Move F from table to D | Move C from table to F | Move A from table to C] | Exploring action Move B from table to E | New state -> Stack 1: [D, F, C, A], Stack 2: [E, B] | Exploring action Move E from table to B | New state -> Stack 1: [B, E], Stack 2: [D, F, C, A] | Exploring action Move C from F to E | New state -> Invalid | Exploring action Move E from table to A | New state -> Stack 1: [B], Stack 2: [D, F, C, A, E] | Taking action Move C from table to F | Moved to state -> Stack 1: [A], Stack 2: [B, E], Stack 3: [D, F, C] | Plan so far [Move D from F to table | Move F from table to D | Move A from C to table | Move C from table to F] | Exploring action Move B from table to C | New state -> Invalid | Exploring action Move E from B to A | New state -> Stack 1: [A, E], Stack 2: [B], Stack 3: [D, F, C] | Exploring action Move B from table to A | New state -> Invalid | Exploring action Move A from table to C | New state -> Stack 1: [B, E], Stack 2: [D, F, C, A] | Exploring action Move E from B to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, F, C], Stack 4: [E] | Taking action Move E from table to A | Moved to state -> Stack 1: [B], Stack 2: [D, F, C, A, E] | Plan so far [Move D from F to table | Move E from B to table | Move A from C to table | Move F from table to D | Move C from table to F | Move A from table to C | Move E from table to A] | Exploring action Move E from A to table | New state -> Stack 1: [B], Stack 2: [D, F, C, A], Stack 3: [E] | Exploring action Move B from table to E | New state -> Stack 1: [D, F, C, A, E, B] | Exploring action Move E from A to B | New state -> Stack 1: [B, E], Stack 2: [D, F, C, A] | Exploring action Move C from F to B | New state -> Invalid | Taking action Move B from table to E | Moved to state -> Stack 1: [D, F, C, A, E, B] | Plan so far [Move D from F to table | Move E from B to table | Move A from C to table | Move F from table to D | Move C from table to F | Move A from table to C | Move E from table to A | Move B from table to E] | Reached goal state!",
        "system2_states_v1": 113
    },
    {
        "idx": 919,
        "start": [
            [
                "table",
                "B",
                "A",
                "F",
                "D"
            ],
            [
                "table",
                "C",
                "E",
                "G"
            ]
        ],
        "goal": [
            [
                "table",
                "E",
                "B",
                "A",
                "F"
            ],
            [
                "table",
                "G",
                "C",
                "D"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": false,
                "on": "B",
                "under": "F",
                "ontable": false
            },
            "B": {
                "clear": false,
                "on": -1,
                "under": "A",
                "ontable": true
            },
            "C": {
                "clear": false,
                "on": -1,
                "under": "E",
                "ontable": true
            },
            "D": {
                "clear": true,
                "on": "F",
                "under": -1,
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": "C",
                "under": "G",
                "ontable": false
            },
            "F": {
                "clear": false,
                "on": "A",
                "under": "D",
                "ontable": false
            },
            "G": {
                "clear": true,
                "on": "E",
                "under": -1,
                "ontable": false
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": false,
                "on": "B",
                "under": "F",
                "ontable": false
            },
            "B": {
                "clear": false,
                "on": "E",
                "under": "A",
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": "G",
                "under": "D",
                "ontable": false
            },
            "D": {
                "clear": true,
                "on": "C",
                "under": -1,
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": -1,
                "under": "B",
                "ontable": true
            },
            "F": {
                "clear": true,
                "on": "A",
                "under": -1,
                "ontable": false
            },
            "G": {
                "clear": false,
                "on": -1,
                "under": "C",
                "ontable": true
            }
        },
        "plan_len": 10,
        "num_blocks": 7,
        "prompt": "The initial state:\nThe hand is empty.\nB is on the table. A is on B. F is on A. D is on F. D is clear.\nC is on the table. E is on C. G is on E. G is clear.\n\nThe goal is:\nE is on the table. B is on E. A is on B. F is on A. F is clear.\nG is on the table. C is on G. D is on C. D is clear.\n",
        "system1_plan": "Move D from F to table | Move G from E to table | Move E from C to table | Move C from table to G | Move D from table to C | Move F from A to table | Move A from B to table | Move B from table to E | Move A from table to B | Move F from table to A",
        "system1_states": 10,
        "system2_plan_v1": "Moved to state -> Stack 1: [B, A, F, D], Stack 2: [C, E, G] | Plan so far [] | Exploring action Move G from E to table | New state -> Stack 1: [B, A, F, D], Stack 2: [C, E], Stack 3: [G] | Exploring action Move B from table to D | New state -> Invalid | Exploring action Move D from F to G | New state -> Stack 1: [B, A, F], Stack 2: [C, E, G, D] | Exploring action Move D from F to table | New state -> Stack 1: [B, A, F], Stack 2: [C, E, G], Stack 3: [D] | Taking action Move D from F to table | Moved to state -> Stack 1: [B, A, F], Stack 2: [C, E, G], Stack 3: [D] | Plan so far [Move D from F to table] | Exploring action Move A from B to D | New state -> Invalid | Exploring action Move D from table to G | New state -> Stack 1: [B, A, F], Stack 2: [C, E, G, D] | Exploring action Move G from E to D | New state -> Stack 1: [B, A, F], Stack 2: [C, E], Stack 3: [D, G] | Exploring action Move G from E to table | New state -> Stack 1: [B, A, F], Stack 2: [C, E], Stack 3: [D], Stack 4: [G] | Taking action Move G from E to table | Moved to state -> Stack 1: [B, A, F], Stack 2: [C, E], Stack 3: [D], Stack 4: [G] | Plan so far [Move D from F to table | Move G from E to table] | Exploring action Move C from table to D | New state -> Invalid | Exploring action Move E from C to G | New state -> Stack 1: [B, A, F], Stack 2: [C], Stack 3: [D], Stack 4: [G, E] | Exploring action Move C from table to G | New state -> Invalid | Exploring action Move E from C to table | New state -> Stack 1: [B, A, F], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [G] | Exploring action Move E from C to D | New state -> Stack 1: [B, A, F], Stack 2: [C], Stack 3: [D, E], Stack 4: [G] | Taking action Move E from C to table | Moved to state -> Stack 1: [B, A, F], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [G] | Plan so far [Move D from F to table | Move G from E to table | Move E from C to table] | Exploring action Move D from table to C | New state -> Stack 1: [B, A, F], Stack 2: [C, D], Stack 3: [E], Stack 4: [G] | Exploring action Move A from B to C | New state -> Invalid | Exploring action Move A from B to D | New state -> Invalid | Exploring action Move C from table to G | New state -> Stack 1: [B, A, F], Stack 2: [D], Stack 3: [E], Stack 4: [G, C] | Exploring action Move D from table to E | New state -> Stack 1: [B, A, F], Stack 2: [C], Stack 3: [E, D], Stack 4: [G] | Taking action Move C from table to G | Moved to state -> Stack 1: [B, A, F], Stack 2: [D], Stack 3: [E], Stack 4: [G, C] | Plan so far [Move D from F to table | Move G from E to table | Move E from C to table | Move C from table to G] | Exploring action Move C from G to table | New state -> Stack 1: [B, A, F], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [G] | Exploring action Move A from B to E | New state -> Invalid | Exploring action Move G from table to D | New state -> Invalid | Exploring action Move D from table to C | New state -> Stack 1: [B, A, F], Stack 2: [E], Stack 3: [G, C, D] | Exploring action Move D from table to E | New state -> Stack 1: [B, A, F], Stack 2: [E, D], Stack 3: [G, C] | Taking action Move D from table to C | Moved to state -> Stack 1: [B, A, F], Stack 2: [E], Stack 3: [G, C, D] | Plan so far [Move D from F to table | Move G from E to table | Move E from C to table | Move C from table to G | Move D from table to C] | Exploring action Move D from C to table | New state -> Stack 1: [B, A, F], Stack 2: [D], Stack 3: [E], Stack 4: [G, C] | Exploring action Move C from G to E | New state -> Invalid | Exploring action Move F from A to table | New state -> Stack 1: [B, A], Stack 2: [E], Stack 3: [F], Stack 4: [G, C, D] | Exploring action Move E from table to D | New state -> Stack 1: [B, A, F], Stack 2: [G, C, D, E] | Taking action Move G from E to table | Moved to state -> Stack 1: [B, A, F, D], Stack 2: [C, E], Stack 3: [G] | Plan so far [Move G from E to table] | Exploring action Move A from B to table | New state -> Invalid | Exploring action Move D from F to G | New state -> Stack 1: [B, A, F], Stack 2: [C, E], Stack 3: [G, D] | Exploring action Move C from table to G | New state -> Invalid | Exploring action Move D from F to E | New state -> Stack 1: [B, A, F], Stack 2: [C, E, D], Stack 3: [G] | Exploring action Move D from F to table | New state -> Stack 1: [B, A, F], Stack 2: [C, E], Stack 3: [D], Stack 4: [G] | Taking action Move D from F to table | Moved to state -> Stack 1: [B, A, F], Stack 2: [C, E], Stack 3: [D], Stack 4: [G] | Plan so far [Move G from E to table | Move D from F to table] | Taking action Move E from C to D | Moved to state -> Stack 1: [B, A, F], Stack 2: [C], Stack 3: [D, E], Stack 4: [G] | Plan so far [Move D from F to table | Move G from E to table | Move E from C to D] | Exploring action Move E from D to table | New state -> Stack 1: [B, A, F], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [G] | Exploring action Move C from table to G | New state -> Stack 1: [B, A, F], Stack 2: [D, E], Stack 3: [G, C] | Exploring action Move E from D to G | New state -> Stack 1: [B, A, F], Stack 2: [C], Stack 3: [D], Stack 4: [G, E] | Exploring action Move D from table to C | New state -> Invalid | Taking action Move D from table to C | Moved to state -> Stack 1: [B, A, F], Stack 2: [C, D], Stack 3: [E], Stack 4: [G] | Plan so far [Move D from F to table | Move G from E to table | Move E from C to table | Move D from table to C] | Exploring action Move D from C to table | New state -> Stack 1: [B, A, F], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [G] | Exploring action Move E from table to G | New state -> Stack 1: [B, A, F], Stack 2: [C, D], Stack 3: [G, E] | Exploring action Move C from table to G | New state -> Invalid | Exploring action Move G from table to E | New state -> Stack 1: [B, A, F], Stack 2: [C, D], Stack 3: [E, G] | Exploring action Move C from table to E | New state -> Invalid | Taking action Move G from E to D | Moved to state -> Stack 1: [B, A, F], Stack 2: [C, E], Stack 3: [D, G] | Plan so far [Move D from F to table | Move G from E to D] | Exploring action Move G from D to table | New state -> Stack 1: [B, A, F], Stack 2: [C, E], Stack 3: [D], Stack 4: [G] | Exploring action Move E from C to G | New state -> Stack 1: [B, A, F], Stack 2: [C], Stack 3: [D, G, E] | Exploring action Move B from table to F | New state -> Invalid | Exploring action Move E from C to table | New state -> Stack 1: [B, A, F], Stack 2: [C], Stack 3: [D, G], Stack 4: [E] | Taking action Move D from F to G | Moved to state -> Stack 1: [B, A, F], Stack 2: [C, E, G, D] | Plan so far [Move D from F to G] | Exploring action Move B from table to F | New state -> Invalid | Exploring action Move D from G to table | New state -> Stack 1: [B, A, F], Stack 2: [C, E, G], Stack 3: [D] | Exploring action Move C from table to F | New state -> Invalid | Exploring action Move D from G to F | New state -> Stack 1: [B, A, F, D], Stack 2: [C, E, G] | Exploring action Move F from A to table | New state -> Stack 1: [B, A], Stack 2: [C, E, G, D], Stack 3: [F] | Taking action Move E from C to table | Moved to state -> Stack 1: [B, A, F], Stack 2: [C], Stack 3: [D, G], Stack 4: [E] | Plan so far [Move D from F to table | Move G from E to D | Move E from C to table] | Exploring action Move D from table to F | New state -> Invalid | Exploring action Move G from D to table | New state -> Stack 1: [B, A, F], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [G] | Exploring action Move D from table to E | New state -> Invalid | Exploring action Move G from D to E | New state -> Stack 1: [B, A, F], Stack 2: [C], Stack 3: [D], Stack 4: [E, G] | Exploring action Move G from D to C | New state -> Stack 1: [B, A, F], Stack 2: [C, G], Stack 3: [D], Stack 4: [E] | Taking action Move G from D to table | Moved to state -> Stack 1: [B, A, F], Stack 2: [C, E], Stack 3: [D], Stack 4: [G] | Plan so far [Move D from F to table | Move G from E to D | Move G from D to table] | Taking action Move D from G to table | Moved to state -> Stack 1: [B, A, F], Stack 2: [C, E, G], Stack 3: [D] | Plan so far [Move D from F to G | Move D from G to table] | Taking action Move G from D to table | Moved to state -> Stack 1: [B, A, F], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [G] | Plan so far [Move D from F to table | Move G from E to D | Move E from C to table | Move G from D to table] | Taking action Move C from table to G | Moved to state -> Stack 1: [B, A, F], Stack 2: [D, E], Stack 3: [G, C] | Plan so far [Move D from F to table | Move G from E to table | Move E from C to D | Move C from table to G] | Exploring action Move E from D to F | New state -> Stack 1: [B, A, F, E], Stack 2: [D], Stack 3: [G, C] | Exploring action Move E from D to C | New state -> Stack 1: [B, A, F], Stack 2: [D], Stack 3: [G, C, E] | Exploring action Move E from D to table | New state -> Stack 1: [B, A, F], Stack 2: [D], Stack 3: [E], Stack 4: [G, C] | Exploring action Move B from table to F | New state -> Invalid | Exploring action Move G from table to E | New state -> Invalid | Taking action Move E from D to table | Moved to state -> Stack 1: [B, A, F], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [G] | Plan so far [Move D from F to table | Move G from E to table | Move E from C to D | Move E from D to table] | Taking action Move E from D to table | Moved to state -> Stack 1: [B, A, F], Stack 2: [D], Stack 3: [E], Stack 4: [G, C] | Plan so far [Move D from F to table | Move G from E to table | Move E from C to D | Move C from table to G | Move E from D to table] | Taking action Move E from C to G | Moved to state -> Stack 1: [B, A, F], Stack 2: [C], Stack 3: [D], Stack 4: [G, E] | Plan so far [Move D from F to table | Move G from E to table | Move E from C to G] | Exploring action Move E from G to table | New state -> Stack 1: [B, A, F], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [G] | Exploring action Move E from G to C | New state -> Stack 1: [B, A, F], Stack 2: [C, E], Stack 3: [D], Stack 4: [G] | Exploring action Move A from B to C | New state -> Invalid | Exploring action Move D from table to C | New state -> Stack 1: [B, A, F], Stack 2: [C, D], Stack 3: [G, E] | Taking action Move D from F to G | Moved to state -> Stack 1: [B, A, F], Stack 2: [C, E], Stack 3: [G, D] | Plan so far [Move G from E to table | Move D from F to G] | Exploring action Move B from table to D | New state -> Invalid | Exploring action Move E from C to table | New state -> Stack 1: [B, A, F], Stack 2: [C], Stack 3: [E], Stack 4: [G, D] | Exploring action Move E from C to D | New state -> Stack 1: [B, A, F], Stack 2: [C], Stack 3: [G, D, E] | Exploring action Move D from G to table | New state -> Stack 1: [B, A, F], Stack 2: [C, E], Stack 3: [D], Stack 4: [G] | Taking action Move E from C to table | Moved to state -> Stack 1: [B, A, F, D], Stack 2: [C], Stack 3: [E], Stack 4: [G] | Plan so far [Move G from E to table | Move E from C to table] | Exploring action Move B from table to D | New state -> Invalid | Exploring action Move D from F to E | New state -> Stack 1: [B, A, F], Stack 2: [C], Stack 3: [E, D], Stack 4: [G] | Exploring action Move D from F to table | New state -> Stack 1: [B, A, F], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [G] | Exploring action Move A from B to C | New state -> Invalid | Exploring action Move D from F to C | New state -> Stack 1: [B, A, F], Stack 2: [C, D], Stack 3: [E], Stack 4: [G] | Taking action Move D from F to table | Moved to state -> Stack 1: [B, A, F], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [G] | Plan so far [Move G from E to table | Move E from C to table | Move D from F to table] | Taking action Move D from F to C | Moved to state -> Stack 1: [B, A, F], Stack 2: [C, D], Stack 3: [E], Stack 4: [G] | Plan so far [Move G from E to table | Move E from C to table | Move D from F to C] | Taking action Move D from F to E | Moved to state -> Stack 1: [B, A, F], Stack 2: [C, E, D], Stack 3: [G] | Plan so far [Move G from E to table | Move D from F to E] | Exploring action Move D from E to table | New state -> Stack 1: [B, A, F], Stack 2: [C, E], Stack 3: [D], Stack 4: [G] | Exploring action Move G from table to D | New state -> Stack 1: [B, A, F], Stack 2: [C, E, D, G] | Exploring action Move E from C to G | New state -> Invalid | Exploring action Move D from E to G | New state -> Stack 1: [B, A, F], Stack 2: [C, E], Stack 3: [G, D] | Taking action Move E from G to table | Moved to state -> Stack 1: [B, A, F], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [G] | Plan so far [Move D from F to table | Move G from E to table | Move E from C to G | Move E from G to table] | Taking action Move D from G to table | Moved to state -> Stack 1: [B, A, F], Stack 2: [C, E], Stack 3: [D], Stack 4: [G] | Plan so far [Move G from E to table | Move D from F to G | Move D from G to table] | Taking action Move C from table to G | Moved to state -> Stack 1: [B, A, F, D], Stack 2: [E], Stack 3: [G, C] | Plan so far [Move G from E to table | Move E from C to table | Move C from table to G] | Exploring action Move D from F to E | New state -> Stack 1: [B, A, F], Stack 2: [E, D], Stack 3: [G, C] | Exploring action Move D from F to C | New state -> Stack 1: [B, A, F], Stack 2: [E], Stack 3: [G, C, D] | Exploring action Move D from F to table | New state -> Stack 1: [B, A, F], Stack 2: [D], Stack 3: [E], Stack 4: [G, C] | Exploring action Move B from table to C | New state -> Invalid | Taking action Move D from F to C | Moved to state -> Stack 1: [B, A, F], Stack 2: [E], Stack 3: [G, C, D] | Plan so far [Move G from E to table | Move E from C to table | Move C from table to G | Move D from F to C] | Taking action Move D from F to table | Moved to state -> Stack 1: [B, A, F], Stack 2: [D], Stack 3: [E], Stack 4: [G, C] | Plan so far [Move G from E to table | Move E from C to table | Move C from table to G | Move D from F to table] | Taking action Move D from F to G | Moved to state -> Stack 1: [B, A, F], Stack 2: [C], Stack 3: [E], Stack 4: [G, D] | Plan so far [Move G from E to table | Move E from C to table | Move D from F to G] | Exploring action Move D from G to table | New state -> Stack 1: [B, A, F], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [G] | Exploring action Move G from table to E | New state -> Invalid | Exploring action Move D from G to E | New state -> Stack 1: [B, A, F], Stack 2: [C], Stack 3: [E, D], Stack 4: [G] | Exploring action Move B from table to F | New state -> Invalid | Exploring action Move D from G to C | New state -> Stack 1: [B, A, F], Stack 2: [C, D], Stack 3: [E], Stack 4: [G] | Taking action Move D from E to table | Moved to state -> Stack 1: [B, A, F], Stack 2: [C, E], Stack 3: [D], Stack 4: [G] | Plan so far [Move G from E to table | Move D from F to E | Move D from E to table] | Taking action Move D from F to E | Moved to state -> Stack 1: [B, A, F], Stack 2: [E, D], Stack 3: [G, C] | Plan so far [Move G from E to table | Move E from C to table | Move C from table to G | Move D from F to E] | Exploring action Move A from B to F | New state -> Invalid | Exploring action Move D from E to C | New state -> Stack 1: [B, A, F], Stack 2: [E], Stack 3: [G, C, D] | Exploring action Move D from E to table | New state -> Stack 1: [B, A, F], Stack 2: [D], Stack 3: [E], Stack 4: [G, C] | Exploring action Move D from E to F | New state -> Stack 1: [B, A, F, D], Stack 2: [E], Stack 3: [G, C] | Taking action Move D from E to C | Moved to state -> Stack 1: [B, A, F], Stack 2: [E], Stack 3: [G, C, D] | Plan so far [Move G from E to table | Move E from C to table | Move C from table to G | Move D from F to E | Move D from E to C] | Taking action Move D from G to table | Moved to state -> Stack 1: [B, A, F], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [G] | Plan so far [Move G from E to table | Move E from C to table | Move D from F to G | Move D from G to table] | Taking action Move D from G to C | Moved to state -> Stack 1: [B, A, F], Stack 2: [C, D], Stack 3: [E], Stack 4: [G] | Plan so far [Move G from E to table | Move E from C to table | Move D from F to G | Move D from G to C] | Taking action Move D from E to table | Moved to state -> Stack 1: [B, A, F], Stack 2: [D], Stack 3: [E], Stack 4: [G, C] | Plan so far [Move G from E to table | Move E from C to table | Move C from table to G | Move D from F to E | Move D from E to table] | Taking action Move D from F to E | Moved to state -> Stack 1: [B, A, F], Stack 2: [C], Stack 3: [E, D], Stack 4: [G] | Plan so far [Move G from E to table | Move E from C to table | Move D from F to E] | Exploring action Move C from table to G | New state -> Stack 1: [B, A, F], Stack 2: [E, D], Stack 3: [G, C] | Exploring action Move D from E to table | New state -> Stack 1: [B, A, F], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [G] | Exploring action Move A from B to D | New state -> Invalid | Exploring action Move D from E to C | New state -> Stack 1: [B, A, F], Stack 2: [C, D], Stack 3: [E], Stack 4: [G] | Taking action Move E from C to table | Moved to state -> Stack 1: [B, A, F], Stack 2: [C], Stack 3: [E], Stack 4: [G, D] | Plan so far [Move G from E to table | Move D from F to G | Move E from C to table] | Taking action Move C from table to G | Moved to state -> Stack 1: [B, A, F], Stack 2: [E, D], Stack 3: [G, C] | Plan so far [Move G from E to table | Move E from C to table | Move D from F to E | Move C from table to G] | Taking action Move D from E to table | Moved to state -> Stack 1: [B, A, F], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [G] | Plan so far [Move G from E to table | Move E from C to table | Move D from F to E | Move D from E to table] | Taking action Move D from E to C | Moved to state -> Stack 1: [B, A, F], Stack 2: [C, D], Stack 3: [E], Stack 4: [G] | Plan so far [Move G from E to table | Move E from C to table | Move D from F to E | Move D from E to C] | Taking action Move F from A to table | Moved to state -> Stack 1: [B, A], Stack 2: [E], Stack 3: [F], Stack 4: [G, C, D] | Plan so far [Move D from F to table | Move G from E to table | Move E from C to table | Move C from table to G | Move D from table to C | Move F from A to table] | Exploring action Move C from G to A | New state -> Invalid | Exploring action Move A from B to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [E], Stack 4: [F], Stack 5: [G, C, D] | Exploring action Move F from table to A | New state -> Stack 1: [B, A, F], Stack 2: [E], Stack 3: [G, C, D] | Exploring action Move A from B to E | New state -> Stack 1: [B], Stack 2: [E, A], Stack 3: [F], Stack 4: [G, C, D] | Taking action Move F from table to A | Moved to state -> Stack 1: [B, A, F], Stack 2: [E], Stack 3: [G, C, D] | Plan so far [Move D from F to table | Move G from E to table | Move E from C to table | Move C from table to G | Move D from table to C | Move F from A to table | Move F from table to A] | Taking action Move E from table to F | Moved to state -> Stack 1: [B, A, F, E], Stack 2: [G, C, D] | Plan so far [Move D from F to table | Move G from E to table | Move E from C to table | Move C from table to G | Move D from table to C | Move E from table to F] | Exploring action Move D from C to table | New state -> Stack 1: [B, A, F, E], Stack 2: [D], Stack 3: [G, C] | Exploring action Move C from G to D | New state -> Invalid | Exploring action Move A from B to D | New state -> Invalid | Exploring action Move E from F to table | New state -> Stack 1: [B, A, F], Stack 2: [E], Stack 3: [G, C, D] | Exploring action Move E from F to D | New state -> Stack 1: [B, A, F], Stack 2: [G, C, D, E] | Taking action Move E from F to table | Moved to state -> Stack 1: [B, A, F], Stack 2: [E], Stack 3: [G, C, D] | Plan so far [Move D from F to table | Move G from E to table | Move E from C to table | Move C from table to G | Move D from table to C | Move E from table to F | Move E from F to table] | Taking action Move D from table to C | Moved to state -> Stack 1: [B, A, F], Stack 2: [C, D], Stack 3: [G, E] | Plan so far [Move D from F to table | Move G from E to table | Move E from C to G | Move D from table to C] | Exploring action Move E from G to F | New state -> Stack 1: [B, A, F, E], Stack 2: [C, D], Stack 3: [G] | Exploring action Move D from C to table | New state -> Stack 1: [B, A, F], Stack 2: [C], Stack 3: [D], Stack 4: [G, E] | Exploring action Move E from G to table | New state -> Stack 1: [B, A, F], Stack 2: [C, D], Stack 3: [E], Stack 4: [G] | Exploring action Move A from B to E | New state -> Invalid | Exploring action Move G from table to F | New state -> Invalid | Taking action Move E from table to D | Moved to state -> Stack 1: [B, A, F], Stack 2: [G, C, D, E] | Plan so far [Move D from F to table | Move G from E to table | Move E from C to table | Move C from table to G | Move D from table to C | Move E from table to D] | Exploring action Move E from D to F | New state -> Stack 1: [B, A, F, E], Stack 2: [G, C, D] | Exploring action Move A from B to table | New state -> Invalid | Exploring action Move E from D to table | New state -> Stack 1: [B, A, F], Stack 2: [E], Stack 3: [G, C, D] | Exploring action Move F from A to table | New state -> Stack 1: [B, A], Stack 2: [F], Stack 3: [G, C, D, E] | Taking action Move E from D to table | Moved to state -> Stack 1: [B, A, F], Stack 2: [E], Stack 3: [G, C, D] | Plan so far [Move D from F to table | Move G from E to table | Move E from C to table | Move C from table to G | Move D from table to C | Move E from table to D | Move E from D to table] | Taking action Move G from E to D | Moved to state -> Stack 1: [B, A, F, D, G], Stack 2: [C, E] | Plan so far [Move G from E to D] | Exploring action Move C from table to G | New state -> Invalid | Exploring action Move E from C to G | New state -> Stack 1: [B, A, F, D, G, E], Stack 2: [C] | Exploring action Move E from C to table | New state -> Stack 1: [B, A, F, D, G], Stack 2: [C], Stack 3: [E] | Exploring action Move G from D to table | New state -> Stack 1: [B, A, F, D], Stack 2: [C, E], Stack 3: [G] | Taking action Move D from table to E | Moved to state -> Stack 1: [B, A, F], Stack 2: [C], Stack 3: [E, D], Stack 4: [G] | Plan so far [Move D from F to table | Move G from E to table | Move E from C to table | Move D from table to E] | Taking action Move D from C to table | Moved to state -> Stack 1: [B, A, F], Stack 2: [D], Stack 3: [E], Stack 4: [G, C] | Plan so far [Move D from F to table | Move G from E to table | Move E from C to table | Move C from table to G | Move D from table to C | Move D from C to table] | Taking action Move G from D to C | Moved to state -> Stack 1: [B, A, F], Stack 2: [C, G], Stack 3: [D], Stack 4: [E] | Plan so far [Move D from F to table | Move G from E to D | Move E from C to table | Move G from D to C] | Exploring action Move A from B to G | New state -> Invalid | Exploring action Move G from C to E | New state -> Stack 1: [B, A, F], Stack 2: [C], Stack 3: [D], Stack 4: [E, G] | Exploring action Move G from C to D | New state -> Stack 1: [B, A, F], Stack 2: [C], Stack 3: [D, G], Stack 4: [E] | Exploring action Move G from C to table | New state -> Stack 1: [B, A, F], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [G] | Taking action Move E from D to C | Moved to state -> Stack 1: [B, A, F], Stack 2: [D], Stack 3: [G, C, E] | Plan so far [Move D from F to table | Move G from E to table | Move E from C to D | Move C from table to G | Move E from D to C] | Exploring action Move E from C to table | New state -> Stack 1: [B, A, F], Stack 2: [D], Stack 3: [E], Stack 4: [G, C] | Exploring action Move D from table to E | New state -> Stack 1: [B, A, F], Stack 2: [G, C, E, D] | Exploring action Move A from B to table | New state -> Invalid | Exploring action Move E from C to D | New state -> Stack 1: [B, A, F], Stack 2: [D, E], Stack 3: [G, C] | Taking action Move E from C to table | Moved to state -> Stack 1: [B, A, F, D, G], Stack 2: [C], Stack 3: [E] | Plan so far [Move G from E to D | Move E from C to table] | Exploring action Move G from D to table | New state -> Stack 1: [B, A, F, D], Stack 2: [C], Stack 3: [E], Stack 4: [G] | Exploring action Move D from F to E | New state -> Invalid | Exploring action Move G from D to E | New state -> Stack 1: [B, A, F, D], Stack 2: [C], Stack 3: [E, G] | Exploring action Move G from D to C | New state -> Stack 1: [B, A, F, D], Stack 2: [C, G], Stack 3: [E] | Taking action Move G from C to table | Moved to state -> Stack 1: [B, A, F], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [G] | Plan so far [Move D from F to table | Move G from E to D | Move E from C to table | Move G from D to C | Move G from C to table] | Taking action Move E from C to table | Moved to state -> Stack 1: [B, A, F], Stack 2: [D], Stack 3: [E], Stack 4: [G, C] | Plan so far [Move D from F to table | Move G from E to table | Move E from C to D | Move C from table to G | Move E from D to C | Move E from C to table] | Taking action Move G from D to table | Moved to state -> Stack 1: [B, A, F, D], Stack 2: [C], Stack 3: [E], Stack 4: [G] | Plan so far [Move G from E to D | Move E from C to table | Move G from D to table] | Taking action Move G from D to table | Moved to state -> Stack 1: [B, A, F, D], Stack 2: [C, E], Stack 3: [G] | Plan so far [Move G from E to D | Move G from D to table] | Taking action Move G from D to E | Moved to state -> Stack 1: [B, A, F], Stack 2: [C], Stack 3: [D], Stack 4: [E, G] | Plan so far [Move D from F to table | Move G from E to D | Move E from C to table | Move G from D to E] | Exploring action Move G from E to table | New state -> Stack 1: [B, A, F], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [G] | Exploring action Move A from B to D | New state -> Invalid | Exploring action Move G from E to C | New state -> Stack 1: [B, A, F], Stack 2: [C, G], Stack 3: [D], Stack 4: [E] | Exploring action Move G from E to D | New state -> Stack 1: [B, A, F], Stack 2: [C], Stack 3: [D, G], Stack 4: [E] | Taking action Move E from table to D | Moved to state -> Stack 1: [B, A, F], Stack 2: [D, E], Stack 3: [G, C] | Plan so far [Move D from F to table | Move G from E to table | Move E from C to table | Move C from table to G | Move E from table to D] | Taking action Move E from table to C | Moved to state -> Stack 1: [B, A, F], Stack 2: [D], Stack 3: [G, C, E] | Plan so far [Move D from F to table | Move G from E to table | Move E from C to table | Move C from table to G | Move E from table to C] | Taking action Move G from E to table | Moved to state -> Stack 1: [B, A, F], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [G] | Plan so far [Move D from F to table | Move G from E to D | Move E from C to table | Move G from D to E | Move G from E to table] | Taking action Move G from D to E | Moved to state -> Stack 1: [B, A, F], Stack 2: [C, E, G], Stack 3: [D] | Plan so far [Move D from F to table | Move G from E to D | Move G from D to E] | Taking action Move E from G to table | Moved to state -> Stack 1: [B, A, F], Stack 2: [C, D], Stack 3: [E], Stack 4: [G] | Plan so far [Move D from F to table | Move G from E to table | Move E from C to G | Move D from table to C | Move E from G to table] | Taking action Move D from table to G | Moved to state -> Stack 1: [B, A, F], Stack 2: [C], Stack 3: [E], Stack 4: [G, D] | Plan so far [Move D from F to table | Move G from E to table | Move E from C to table | Move D from table to G] | Taking action Move D from table to G | Moved to state -> Stack 1: [B, A, F], Stack 2: [C, E], Stack 3: [G, D] | Plan so far [Move D from F to table | Move G from E to table | Move D from table to G] | Taking action Move C from table to E | Moved to state -> Stack 1: [B, A, F], Stack 2: [D], Stack 3: [E, C], Stack 4: [G] | Plan so far [Move D from F to table | Move G from E to table | Move E from C to table | Move C from table to E] | Exploring action Move A from B to G | New state -> Invalid | Exploring action Move C from E to table | New state -> Stack 1: [B, A, F], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [G] | Exploring action Move D from table to C | New state -> Stack 1: [B, A, F], Stack 2: [E, C, D], Stack 3: [G] | Exploring action Move A from B to F | New state -> Invalid | Exploring action Move C from E to G | New state -> Stack 1: [B, A, F], Stack 2: [D], Stack 3: [E], Stack 4: [G, C] | Taking action Move C from E to G | Moved to state -> Stack 1: [B, A, F], Stack 2: [D], Stack 3: [E], Stack 4: [G, C] | Plan so far [Move D from F to table | Move G from E to table | Move E from C to table | Move C from table to E | Move C from E to G] | Taking action Move D from table to E | Moved to state -> Stack 1: [B, A, F], Stack 2: [E, D], Stack 3: [G, C] | Plan so far [Move D from F to table | Move G from E to table | Move E from C to table | Move C from table to G | Move D from table to E] | Taking action Move E from C to G | Moved to state -> Stack 1: [B, A, F], Stack 2: [C], Stack 3: [D, G, E] | Plan so far [Move D from F to table | Move G from E to D | Move E from C to G] | Exploring action Move G from D to C | New state -> Invalid | Exploring action Move C from table to E | New state -> Stack 1: [B, A, F], Stack 2: [D, G, E, C] | Exploring action Move E from G to C | New state -> Stack 1: [B, A, F], Stack 2: [C, E], Stack 3: [D, G] | Exploring action Move E from G to table | New state -> Stack 1: [B, A, F], Stack 2: [C], Stack 3: [D, G], Stack 4: [E] | Taking action Move C from E to table | Moved to state -> Stack 1: [B, A, F], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [G] | Plan so far [Move D from F to table | Move G from E to table | Move E from C to table | Move C from table to E | Move C from E to table] | Taking action Move C from table to D | Moved to state -> Stack 1: [B, A, F], Stack 2: [D, C], Stack 3: [E], Stack 4: [G] | Plan so far [Move D from F to table | Move G from E to table | Move E from C to table | Move C from table to D] | Exploring action Move C from D to E | New state -> Stack 1: [B, A, F], Stack 2: [D], Stack 3: [E, C], Stack 4: [G] | Exploring action Move C from D to table | New state -> Stack 1: [B, A, F], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [G] | Exploring action Move B from table to E | New state -> Invalid | Exploring action Move C from D to G | New state -> Stack 1: [B, A, F], Stack 2: [D], Stack 3: [E], Stack 4: [G, C] | Exploring action Move A from B to C | New state -> Invalid | Taking action Move C from D to G | Moved to state -> Stack 1: [B, A, F], Stack 2: [D], Stack 3: [E], Stack 4: [G, C] | Plan so far [Move D from F to table | Move G from E to table | Move E from C to table | Move C from table to D | Move C from D to G] | Taking action Move E from G to table | Moved to state -> Stack 1: [B, A, F], Stack 2: [C], Stack 3: [D, G], Stack 4: [E] | Plan so far [Move D from F to table | Move G from E to D | Move E from C to G | Move E from G to table] | Taking action Move D from E to G | Moved to state -> Stack 1: [B, A, F], Stack 2: [C], Stack 3: [E], Stack 4: [G, D] | Plan so far [Move G from E to table | Move E from C to table | Move D from F to E | Move D from E to G] | Taking action Move G from table to D | Moved to state -> Stack 1: [B, A, F], Stack 2: [C, E], Stack 3: [D, G] | Plan so far [Move D from F to table | Move G from E to table | Move G from table to D] | Taking action Move A from B to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [E], Stack 4: [F], Stack 5: [G, C, D] | Plan so far [Move D from F to table | Move G from E to table | Move E from C to table | Move C from table to G | Move D from table to C | Move F from A to table | Move A from B to table] | Exploring action Move F from table to A | New state -> Stack 1: [A, F], Stack 2: [B], Stack 3: [E], Stack 4: [G, C, D] | Exploring action Move G from table to D | New state -> Invalid | Exploring action Move A from table to B | New state -> Stack 1: [B, A], Stack 2: [E], Stack 3: [F], Stack 4: [G, C, D] | Exploring action Move B from table to E | New state -> Stack 1: [A], Stack 2: [E, B], Stack 3: [F], Stack 4: [G, C, D] | Taking action Move C from G to table | Moved to state -> Stack 1: [B, A, F], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [G] | Plan so far [Move D from F to table | Move G from E to table | Move E from C to table | Move C from table to G | Move C from G to table] | Taking action Move D from table to E | Moved to state -> Stack 1: [B, A, F], Stack 2: [C, E, D], Stack 3: [G] | Plan so far [Move D from F to table | Move G from E to table | Move D from table to E] | Taking action Move G from table to E | Moved to state -> Stack 1: [B, A, F], Stack 2: [C], Stack 3: [D], Stack 4: [E, G] | Plan so far [Move D from F to table | Move G from E to table | Move E from C to table | Move G from table to E] | Taking action Move D from G to E | Moved to state -> Stack 1: [B, A, F], Stack 2: [C], Stack 3: [E, D], Stack 4: [G] | Plan so far [Move G from E to table | Move E from C to table | Move D from F to G | Move D from G to E] | Taking action Move G from table to D | Moved to state -> Stack 1: [B, A, F], Stack 2: [C], Stack 3: [D, G], Stack 4: [E] | Plan so far [Move D from F to table | Move G from E to table | Move E from C to table | Move G from table to D] | Taking action Move D from table to G | Moved to state -> Stack 1: [B, A, F], Stack 2: [C, E, G, D] | Plan so far [Move D from F to table | Move D from table to G] | Taking action Move D from C to table | Moved to state -> Stack 1: [B, A, F], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [G] | Plan so far [Move D from F to table | Move G from E to table | Move E from C to table | Move D from table to C | Move D from C to table] | Taking action Move G from E to F | Moved to state -> Stack 1: [B, A, F, G], Stack 2: [C, E], Stack 3: [D] | Plan so far [Move D from F to table | Move G from E to F] | Exploring action Move E from C to table | New state -> Stack 1: [B, A, F, G], Stack 2: [C], Stack 3: [D], Stack 4: [E] | Exploring action Move G from F to table | New state -> Stack 1: [B, A, F], Stack 2: [C, E], Stack 3: [D], Stack 4: [G] | Exploring action Move F from A to E | New state -> Invalid | Exploring action Move G from F to D | New state -> Stack 1: [B, A, F], Stack 2: [C, E], Stack 3: [D, G] | Taking action Move G from F to table | Moved to state -> Stack 1: [B, A, F], Stack 2: [C, E], Stack 3: [D], Stack 4: [G] | Plan so far [Move D from F to table | Move G from E to F | Move G from F to table] | Taking action Move G from table to C | Moved to state -> Stack 1: [B, A, F], Stack 2: [C, G], Stack 3: [D], Stack 4: [E] | Plan so far [Move D from F to table | Move G from E to table | Move E from C to table | Move G from table to C] | Taking action Move G from table to E | Moved to state -> Stack 1: [B, A, F], Stack 2: [C, E, G], Stack 3: [D] | Plan so far [Move D from F to table | Move G from E to table | Move G from table to E] | Taking action Move E from D to C | Moved to state -> Stack 1: [B, A, F], Stack 2: [C, E], Stack 3: [D], Stack 4: [G] | Plan so far [Move D from F to table | Move G from E to table | Move E from C to D | Move E from D to C] | Taking action Move G from F to E | Moved to state -> Stack 1: [B, A, F], Stack 2: [C, E, G], Stack 3: [D] | Plan so far [Move D from F to table | Move G from E to F | Move G from F to E] | Taking action Move E from D to G | Moved to state -> Stack 1: [B, A, F], Stack 2: [C], Stack 3: [D], Stack 4: [G, E] | Plan so far [Move D from F to table | Move G from E to table | Move E from C to D | Move E from D to G] | Taking action Move D from E to G | Moved to state -> Stack 1: [B, A, F], Stack 2: [C, E], Stack 3: [G, D] | Plan so far [Move G from E to table | Move D from F to E | Move D from E to G] | Taking action Move E from table to G | Moved to state -> Stack 1: [B, A, F], Stack 2: [C], Stack 3: [D], Stack 4: [G, E] | Plan so far [Move D from F to table | Move G from E to table | Move E from C to table | Move E from table to G] | Taking action Move E from C to table | Moved to state -> Stack 1: [B, A, F, G], Stack 2: [C], Stack 3: [D], Stack 4: [E] | Plan so far [Move D from F to table | Move G from E to F | Move E from C to table] | Exploring action Move G from F to D | New state -> Stack 1: [B, A, F], Stack 2: [C], Stack 3: [D, G], Stack 4: [E] | Exploring action Move A from B to E | New state -> Invalid | Exploring action Move F from A to G | New state -> Invalid | Exploring action Move G from F to E | New state -> Stack 1: [B, A, F], Stack 2: [C], Stack 3: [D], Stack 4: [E, G] | Exploring action Move G from F to table | New state -> Stack 1: [B, A, F], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [G] | Taking action Move G from F to table | Moved to state -> Stack 1: [B, A, F], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [G] | Plan so far [Move D from F to table | Move G from E to F | Move E from C to table | Move G from F to table] | Taking action Move G from F to D | Moved to state -> Stack 1: [B, A, F], Stack 2: [C, E], Stack 3: [D, G] | Plan so far [Move D from F to table | Move G from E to F | Move G from F to D] | Taking action Move E from C to D | Moved to state -> Stack 1: [B, A, F, D, E], Stack 2: [C], Stack 3: [G] | Plan so far [Move G from E to table | Move E from C to D] | Exploring action Move E from D to table | New state -> Stack 1: [B, A, F, D], Stack 2: [C], Stack 3: [E], Stack 4: [G] | Exploring action Move C from table to G | New state -> Stack 1: [B, A, F, D, E], Stack 2: [G, C] | Exploring action Move D from F to C | New state -> Invalid | Exploring action Move E from D to C | New state -> Stack 1: [B, A, F, D], Stack 2: [C, E], Stack 3: [G] | Taking action Move E from C to G | Moved to state -> Stack 1: [B, A, F, D], Stack 2: [C], Stack 3: [G, E] | Plan so far [Move G from E to table | Move E from C to G] | Exploring action Move D from F to C | New state -> Stack 1: [B, A, F], Stack 2: [C, D], Stack 3: [G, E] | Exploring action Move E from G to table | New state -> Stack 1: [B, A, F, D], Stack 2: [C], Stack 3: [E], Stack 4: [G] | Exploring action Move D from F to table | New state -> Stack 1: [B, A, F], Stack 2: [C], Stack 3: [D], Stack 4: [G, E] | Exploring action Move F from A to table | New state -> Invalid | Exploring action Move G from table to C | New state -> Invalid | Taking action Move D from F to table | Moved to state -> Stack 1: [B, A, F], Stack 2: [C], Stack 3: [D], Stack 4: [G, E] | Plan so far [Move G from E to table | Move E from C to G | Move D from F to table] | Taking action Move D from F to C | Moved to state -> Stack 1: [B, A, F], Stack 2: [C, D], Stack 3: [G, E] | Plan so far [Move G from E to table | Move E from C to G | Move D from F to C] | Taking action Move G from F to C | Moved to state -> Stack 1: [B, A, F], Stack 2: [C, G], Stack 3: [D], Stack 4: [E] | Plan so far [Move D from F to table | Move G from E to F | Move E from C to table | Move G from F to C] | Taking action Move G from F to D | Moved to state -> Stack 1: [B, A, F], Stack 2: [C], Stack 3: [D, G], Stack 4: [E] | Plan so far [Move D from F to table | Move G from E to F | Move E from C to table | Move G from F to D] | Taking action Move G from F to E | Moved to state -> Stack 1: [B, A, F], Stack 2: [C], Stack 3: [D], Stack 4: [E, G] | Plan so far [Move D from F to table | Move G from E to F | Move E from C to table | Move G from F to E] | Taking action Move C from table to G | Moved to state -> Stack 1: [B, A, F, D, E], Stack 2: [G, C] | Plan so far [Move G from E to table | Move E from C to D | Move C from table to G] | Exploring action Move C from G to table | New state -> Stack 1: [B, A, F, D, E], Stack 2: [C], Stack 3: [G] | Exploring action Move E from D to C | New state -> Stack 1: [B, A, F, D], Stack 2: [G, C, E] | Exploring action Move E from D to table | New state -> Stack 1: [B, A, F, D], Stack 2: [E], Stack 3: [G, C] | Exploring action Move F from A to C | New state -> Invalid | Exploring action Move B from table to C | New state -> Invalid | Taking action Move D from F to E | Moved to state -> Stack 1: [B, A, F], Stack 2: [C], Stack 3: [G, E, D] | Plan so far [Move G from E to table | Move E from C to G | Move D from F to E] | Exploring action Move C from table to D | New state -> Stack 1: [B, A, F], Stack 2: [G, E, D, C] | Exploring action Move D from E to table | New state -> Stack 1: [B, A, F], Stack 2: [C], Stack 3: [D], Stack 4: [G, E] | Exploring action Move E from G to F | New state -> Invalid | Exploring action Move D from E to C | New state -> Stack 1: [B, A, F], Stack 2: [C, D], Stack 3: [G, E] | Exploring action Move G from table to F | New state -> Invalid | Taking action Move E from G to table | Moved to state -> Stack 1: [B, A, F, D], Stack 2: [C], Stack 3: [E], Stack 4: [G] | Plan so far [Move G from E to table | Move E from C to G | Move E from G to table] | Taking action Move E from D to table | Moved to state -> Stack 1: [B, A, F, D], Stack 2: [C], Stack 3: [E], Stack 4: [G] | Plan so far [Move G from E to table | Move E from C to D | Move E from D to table] | Taking action Move E from D to table | Moved to state -> Stack 1: [B, A, F, D], Stack 2: [E], Stack 3: [G, C] | Plan so far [Move G from E to table | Move E from C to D | Move C from table to G | Move E from D to table] | Taking action Move D from E to table | Moved to state -> Stack 1: [B, A, F], Stack 2: [C], Stack 3: [D], Stack 4: [G, E] | Plan so far [Move G from E to table | Move E from C to G | Move D from F to E | Move D from E to table] | Taking action Move D from E to C | Moved to state -> Stack 1: [B, A, F], Stack 2: [C, D], Stack 3: [G, E] | Plan so far [Move G from E to table | Move E from C to G | Move D from F to E | Move D from E to C] | Taking action Move D from G to E | Moved to state -> Stack 1: [B, A, F], Stack 2: [C, E, D], Stack 3: [G] | Plan so far [Move G from E to table | Move D from F to G | Move D from G to E] | Taking action Move B from table to E | Moved to state -> Stack 1: [A], Stack 2: [E, B], Stack 3: [F], Stack 4: [G, C, D] | Plan so far [Move D from F to table | Move G from E to table | Move E from C to table | Move C from table to G | Move D from table to C | Move F from A to table | Move A from B to table | Move B from table to E] | Exploring action Move A from table to F | New state -> Stack 1: [E, B], Stack 2: [F, A], Stack 3: [G, C, D] | Exploring action Move A from table to B | New state -> Stack 1: [E, B, A], Stack 2: [F], Stack 3: [G, C, D] | Exploring action Move G from table to A | New state -> Invalid | Exploring action Move E from table to D | New state -> Invalid | Exploring action Move F from table to A | New state -> Stack 1: [A, F], Stack 2: [E, B], Stack 3: [G, C, D] | Taking action Move E from C to D | Moved to state -> Stack 1: [B, A, F], Stack 2: [C], Stack 3: [G, D, E] | Plan so far [Move G from E to table | Move D from F to G | Move E from C to D] | Exploring action Move D from G to C | New state -> Invalid | Exploring action Move C from table to E | New state -> Stack 1: [B, A, F], Stack 2: [G, D, E, C] | Exploring action Move E from D to C | New state -> Stack 1: [B, A, F], Stack 2: [C, E], Stack 3: [G, D] | Exploring action Move E from D to table | New state -> Stack 1: [B, A, F], Stack 2: [C], Stack 3: [E], Stack 4: [G, D] | Taking action Move E from C to F | Moved to state -> Stack 1: [B, A, F, E], Stack 2: [C], Stack 3: [D], Stack 4: [G] | Plan so far [Move D from F to table | Move G from E to table | Move E from C to F] | Exploring action Move C from table to G | New state -> Stack 1: [B, A, F, E], Stack 2: [D], Stack 3: [G, C] | Exploring action Move E from F to C | New state -> Stack 1: [B, A, F], Stack 2: [C, E], Stack 3: [D], Stack 4: [G] | Exploring action Move A from B to E | New state -> Invalid | Exploring action Move E from F to table | New state -> Stack 1: [B, A, F], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [G] | Taking action Move E from F to table | Moved to state -> Stack 1: [B, A, F], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [G] | Plan so far [Move D from F to table | Move G from E to table | Move E from C to F | Move E from F to table] | Taking action Move E from table to D | Moved to state -> Stack 1: [B, A, F], Stack 2: [C], Stack 3: [D, E], Stack 4: [G] | Plan so far [Move D from F to table | Move G from E to table | Move E from C to table | Move E from table to D] | Taking action Move A from table to B | Moved to state -> Stack 1: [E, B, A], Stack 2: [F], Stack 3: [G, C, D] | Plan so far [Move D from F to table | Move G from E to table | Move E from C to table | Move C from table to G | Move D from table to C | Move F from A to table | Move A from B to table | Move B from table to E | Move A from table to B] | Exploring action Move G from table to F | New state -> Invalid | Exploring action Move F from table to A | New state -> Stack 1: [E, B, A, F], Stack 2: [G, C, D] | Exploring action Move A from B to table | New state -> Stack 1: [A], Stack 2: [E, B], Stack 3: [F], Stack 4: [G, C, D] | Exploring action Move A from B to F | New state -> Stack 1: [E, B], Stack 2: [F, A], Stack 3: [G, C, D] | Taking action Move F from table to A | Moved to state -> Stack 1: [E, B, A, F], Stack 2: [G, C, D] | Plan so far [Move D from F to table | Move G from E to table | Move E from C to table | Move C from table to G | Move D from table to C | Move F from A to table | Move A from B to table | Move B from table to E | Move A from table to B | Move F from table to A] | Reached goal state!",
        "system2_states_v1": 195
    },
    {
        "idx": 795,
        "start": [
            [
                "table",
                "D",
                "E",
                "F",
                "A",
                "C",
                "B"
            ]
        ],
        "goal": [
            [
                "table",
                "B"
            ],
            [
                "table",
                "E",
                "A",
                "D",
                "C",
                "F"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": false,
                "on": "F",
                "under": "C",
                "ontable": false
            },
            "B": {
                "clear": true,
                "on": "C",
                "under": -1,
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": "A",
                "under": "B",
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": -1,
                "under": "E",
                "ontable": true
            },
            "E": {
                "clear": false,
                "on": "D",
                "under": "F",
                "ontable": false
            },
            "F": {
                "clear": false,
                "on": "E",
                "under": "A",
                "ontable": false
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": false,
                "on": "E",
                "under": "D",
                "ontable": false
            },
            "B": {
                "clear": true,
                "on": -1,
                "under": -1,
                "ontable": true
            },
            "C": {
                "clear": false,
                "on": "D",
                "under": "F",
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": "A",
                "under": "C",
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": -1,
                "under": "A",
                "ontable": true
            },
            "F": {
                "clear": true,
                "on": "C",
                "under": -1,
                "ontable": false
            }
        },
        "plan_len": 9,
        "num_blocks": 6,
        "prompt": "The initial state:\nThe hand is empty.\nD is on the table. E is on D. F is on E. A is on F. C is on A. B is on C. B is clear.\n\nThe goal is:\nB is on the table. B is clear.\nE is on the table. A is on E. D is on A. C is on D. F is on C. F is clear.\n",
        "system1_plan": "Move B from C to table | Move C from A to table | Move A from F to table | Move F from E to table | Move E from D to table | Move A from table to E | Move D from table to A | Move C from table to D | Move F from table to C",
        "system1_states": 9,
        "system2_plan_v1": "Moved to state -> Stack 1: [D, E, F, A, C, B] | Plan so far [] | Exploring action Move A from F to table | New state -> Invalid | Exploring action Move B from C to table | New state -> Stack 1: [B], Stack 2: [D, E, F, A, C] | Exploring action Move A from F to B | New state -> Invalid | Taking action Move B from C to table | Moved to state -> Stack 1: [B], Stack 2: [D, E, F, A, C] | Plan so far [Move B from C to table] | Exploring action Move C from A to B | New state -> Stack 1: [B, C], Stack 2: [D, E, F, A] | Exploring action Move C from A to table | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, E, F, A] | Exploring action Move A from F to C | New state -> Invalid | Exploring action Move B from table to C | New state -> Stack 1: [D, E, F, A, C, B] | Taking action Move C from A to table | Moved to state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, E, F, A] | Plan so far [Move B from C to table | Move C from A to table] | Exploring action Move A from F to C | New state -> Stack 1: [B], Stack 2: [C, A], Stack 3: [D, E, F] | Exploring action Move D from table to B | New state -> Invalid | Exploring action Move A from F to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D, E, F] | Exploring action Move C from table to A | New state -> Stack 1: [B], Stack 2: [D, E, F, A, C] | Exploring action Move F from E to C | New state -> Invalid | Taking action Move A from F to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D, E, F] | Plan so far [Move B from C to table | Move C from A to table | Move A from F to table] | Exploring action Move E from D to F | New state -> Invalid | Exploring action Move D from table to F | New state -> Invalid | Exploring action Move F from E to A | New state -> Stack 1: [A, F], Stack 2: [B], Stack 3: [C], Stack 4: [D, E] | Exploring action Move F from E to C | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, F], Stack 4: [D, E] | Exploring action Move F from E to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D, E], Stack 5: [F] | Taking action Move F from E to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D, E], Stack 5: [F] | Plan so far [Move B from C to table | Move C from A to table | Move A from F to table | Move F from E to table] | Exploring action Move E from D to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Exploring action Move D from table to A | New state -> Invalid | Exploring action Move E from D to C | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, E], Stack 4: [D], Stack 5: [F] | Exploring action Move D from table to F | New state -> Invalid | Exploring action Move E from D to A | New state -> Stack 1: [A, E], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [F] | Taking action Move F from E to C | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, F], Stack 4: [D, E] | Plan so far [Move B from C to table | Move C from A to table | Move A from F to table | Move F from E to C] | Exploring action Move E from D to A | New state -> Stack 1: [A, E], Stack 2: [B], Stack 3: [C, F], Stack 4: [D] | Exploring action Move D from table to A | New state -> Invalid | Exploring action Move F from C to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D, E], Stack 5: [F] | Exploring action Move E from D to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, F], Stack 4: [D], Stack 5: [E] | Taking action Move E from D to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Plan so far [Move B from C to table | Move C from A to table | Move A from F to table | Move F from E to table | Move E from D to table] | Exploring action Move A from table to D | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, A], Stack 4: [E], Stack 5: [F] | Exploring action Move A from table to E | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D], Stack 4: [E, A], Stack 5: [F] | Exploring action Move F from table to C | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, F], Stack 4: [D], Stack 5: [E] | Taking action Move E from D to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, F], Stack 4: [D], Stack 5: [E] | Plan so far [Move B from C to table | Move C from A to table | Move A from F to table | Move F from E to C | Move E from D to table] | Exploring action Move A from table to E | New state -> Stack 1: [B], Stack 2: [C, F], Stack 3: [D], Stack 4: [E, A] | Exploring action Move A from table to D | New state -> Stack 1: [B], Stack 2: [C, F], Stack 3: [D, A], Stack 4: [E] | Exploring action Move F from C to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Exploring action Move C from table to B | New state -> Invalid | Taking action Move A from table to E | Moved to state -> Stack 1: [B], Stack 2: [C], Stack 3: [D], Stack 4: [E, A], Stack 5: [F] | Plan so far [Move B from C to table | Move C from A to table | Move A from F to table | Move F from E to table | Move E from D to table | Move A from table to E] | Exploring action Move D from table to A | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [E, A, D], Stack 4: [F] | Exploring action Move E from table to D | New state -> Invalid | Exploring action Move F from table to C | New state -> Stack 1: [B], Stack 2: [C, F], Stack 3: [D], Stack 4: [E, A] | Exploring action Move A from E to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Taking action Move A from table to E | Moved to state -> Stack 1: [B], Stack 2: [C, F], Stack 3: [D], Stack 4: [E, A] | Plan so far [Move B from C to table | Move C from A to table | Move A from F to table | Move F from E to C | Move E from D to table | Move A from table to E] | Exploring action Move D from table to A | New state -> Stack 1: [B], Stack 2: [C, F], Stack 3: [E, A, D] | Exploring action Move F from C to table | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D], Stack 4: [E, A], Stack 5: [F] | Exploring action Move F from C to A | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D], Stack 4: [E, A, F] | Exploring action Move C from table to D | New state -> Invalid | Taking action Move D from table to A | Moved to state -> Stack 1: [B], Stack 2: [C], Stack 3: [E, A, D], Stack 4: [F] | Plan so far [Move B from C to table | Move C from A to table | Move A from F to table | Move F from E to table | Move E from D to table | Move A from table to E | Move D from table to A] | Exploring action Move F from table to C | New state -> Stack 1: [B], Stack 2: [C, F], Stack 3: [E, A, D] | Exploring action Move D from A to table | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D], Stack 4: [E, A], Stack 5: [F] | Exploring action Move C from table to D | New state -> Stack 1: [B], Stack 2: [E, A, D, C], Stack 3: [F] | Exploring action Move E from table to C | New state -> Invalid | Taking action Move D from table to A | Moved to state -> Stack 1: [B], Stack 2: [C, F], Stack 3: [E, A, D] | Plan so far [Move B from C to table | Move C from A to table | Move A from F to table | Move F from E to C | Move E from D to table | Move A from table to E | Move D from table to A] | Exploring action Move F from C to table | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [E, A, D], Stack 4: [F] | Exploring action Move C from table to B | New state -> Invalid | Exploring action Move D from A to table | New state -> Stack 1: [B], Stack 2: [C, F], Stack 3: [D], Stack 4: [E, A] | Exploring action Move F from C to D | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [E, A, D, F] | Exploring action Move A from E to table | New state -> Invalid | Taking action Move C from table to D | Moved to state -> Stack 1: [B], Stack 2: [E, A, D, C], Stack 3: [F] | Plan so far [Move B from C to table | Move C from A to table | Move A from F to table | Move F from E to table | Move E from D to table | Move A from table to E | Move D from table to A | Move C from table to D] | Exploring action Move F from table to C | New state -> Stack 1: [B], Stack 2: [E, A, D, C, F] | Exploring action Move F from table to B | New state -> Stack 1: [B, F], Stack 2: [E, A, D, C] | Exploring action Move A from E to C | New state -> Invalid | Exploring action Move C from D to table | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [E, A, D], Stack 4: [F] | Exploring action Move D from A to F | New state -> Invalid | Taking action Move F from table to C | Moved to state -> Stack 1: [B], Stack 2: [E, A, D, C, F] | Plan so far [Move B from C to table | Move C from A to table | Move A from F to table | Move F from E to table | Move E from D to table | Move A from table to E | Move D from table to A | Move C from table to D | Move F from table to C] | Reached goal state!",
        "system2_states_v1": 55
    },
    {
        "idx": 587,
        "start": [
            [
                "table",
                "D",
                "C",
                "E",
                "A",
                "B"
            ]
        ],
        "goal": [
            [
                "table",
                "A",
                "D",
                "B",
                "E"
            ],
            [
                "table",
                "C"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": false,
                "on": "E",
                "under": "B",
                "ontable": false
            },
            "B": {
                "clear": true,
                "on": "A",
                "under": -1,
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": "D",
                "under": "E",
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": -1,
                "under": "C",
                "ontable": true
            },
            "E": {
                "clear": false,
                "on": "C",
                "under": "A",
                "ontable": false
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": false,
                "on": -1,
                "under": "D",
                "ontable": true
            },
            "B": {
                "clear": false,
                "on": "D",
                "under": "E",
                "ontable": false
            },
            "C": {
                "clear": true,
                "on": -1,
                "under": -1,
                "ontable": true
            },
            "D": {
                "clear": false,
                "on": "A",
                "under": "B",
                "ontable": false
            },
            "E": {
                "clear": true,
                "on": "B",
                "under": -1,
                "ontable": false
            }
        },
        "plan_len": 7,
        "num_blocks": 5,
        "prompt": "The initial state:\nThe hand is empty.\nD is on the table. C is on D. E is on C. A is on E. B is on A. B is clear.\n\nThe goal is:\nA is on the table. D is on A. B is on D. E is on B. E is clear.\nC is on the table. C is clear.\n",
        "system1_plan": "Move B from A to table | Move A from E to table | Move E from C to table | Move C from D to table | Move D from table to A | Move B from table to D | Move E from table to B",
        "system1_states": 7,
        "system2_plan_v1": "Moved to state -> Stack 1: [D, C, E, A, B] | Plan so far [] | Exploring action Move B from A to table | New state -> Stack 1: [B], Stack 2: [D, C, E, A] | Exploring action Move A from E to B | New state -> Invalid | Exploring action Move C from D to B | New state -> Invalid | Taking action Move B from A to table | Moved to state -> Stack 1: [B], Stack 2: [D, C, E, A] | Plan so far [Move B from A to table] | Exploring action Move B from table to A | New state -> Stack 1: [D, C, E, A, B] | Exploring action Move E from C to table | New state -> Invalid | Exploring action Move A from E to B | New state -> Stack 1: [B, A], Stack 2: [D, C, E] | Exploring action Move A from E to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, C, E] | Exploring action Move E from C to A | New state -> Invalid | Taking action Move A from E to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, C, E] | Plan so far [Move B from A to table | Move A from E to table] | Exploring action Move E from C to B | New state -> Stack 1: [A], Stack 2: [B, E], Stack 3: [D, C] | Exploring action Move E from C to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, C], Stack 4: [E] | Exploring action Move E from C to A | New state -> Stack 1: [A, E], Stack 2: [B], Stack 3: [D, C] | Exploring action Move C from D to E | New state -> Invalid | Exploring action Move C from D to B | New state -> Invalid | Taking action Move E from C to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, C], Stack 4: [E] | Plan so far [Move B from A to table | Move A from E to table | Move E from C to table] | Exploring action Move C from D to A | New state -> Stack 1: [A, C], Stack 2: [B], Stack 3: [D], Stack 4: [E] | Exploring action Move D from table to B | New state -> Invalid | Exploring action Move D from table to E | New state -> Invalid | Exploring action Move C from D to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Exploring action Move E from table to B | New state -> Stack 1: [A], Stack 2: [B, E], Stack 3: [D, C] | Taking action Move C from D to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Plan so far [Move B from A to table | Move A from E to table | Move E from C to table | Move C from D to table] | Exploring action Move A from table to B | New state -> Stack 1: [B, A], Stack 2: [C], Stack 3: [D], Stack 4: [E] | Exploring action Move D from table to A | New state -> Stack 1: [A, D], Stack 2: [B], Stack 3: [C], Stack 4: [E] | Exploring action Move E from table to B | New state -> Stack 1: [A], Stack 2: [B, E], Stack 3: [C], Stack 4: [D] | Taking action Move D from table to A | Moved to state -> Stack 1: [A, D], Stack 2: [B], Stack 3: [C], Stack 4: [E] | Plan so far [Move B from A to table | Move A from E to table | Move E from C to table | Move C from D to table | Move D from table to A] | Exploring action Move E from table to B | New state -> Stack 1: [A, D], Stack 2: [B, E], Stack 3: [C] | Exploring action Move A from table to C | New state -> Invalid | Exploring action Move B from table to D | New state -> Stack 1: [A, D, B], Stack 2: [C], Stack 3: [E] | Exploring action Move A from table to E | New state -> Invalid | Exploring action Move B from table to E | New state -> Stack 1: [A, D], Stack 2: [C], Stack 3: [E, B] | Taking action Move B from table to D | Moved to state -> Stack 1: [A, D, B], Stack 2: [C], Stack 3: [E] | Plan so far [Move B from A to table | Move A from E to table | Move E from C to table | Move C from D to table | Move D from table to A | Move B from table to D] | Exploring action Move B from D to table | New state -> Stack 1: [A, D], Stack 2: [B], Stack 3: [C], Stack 4: [E] | Exploring action Move A from table to C | New state -> Invalid | Exploring action Move B from D to E | New state -> Stack 1: [A, D], Stack 2: [C], Stack 3: [E, B] | Exploring action Move E from table to B | New state -> Stack 1: [A, D, B, E], Stack 2: [C] | Taking action Move E from table to B | Moved to state -> Stack 1: [A, D, B, E], Stack 2: [C] | Plan so far [Move B from A to table | Move A from E to table | Move E from C to table | Move C from D to table | Move D from table to A | Move B from table to D | Move E from table to B] | Reached goal state!",
        "system2_states_v1": 30
    },
    {
        "idx": 581,
        "start": [
            [
                "table",
                "D",
                "E",
                "C",
                "A",
                "B"
            ]
        ],
        "goal": [
            [
                "table",
                "D",
                "A",
                "C",
                "B"
            ],
            [
                "table",
                "E"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": false,
                "on": "C",
                "under": "B",
                "ontable": false
            },
            "B": {
                "clear": true,
                "on": "A",
                "under": -1,
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": "E",
                "under": "A",
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": -1,
                "under": "E",
                "ontable": true
            },
            "E": {
                "clear": false,
                "on": "D",
                "under": "C",
                "ontable": false
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": false,
                "on": "D",
                "under": "C",
                "ontable": false
            },
            "B": {
                "clear": true,
                "on": "C",
                "under": -1,
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": "A",
                "under": "B",
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": -1,
                "under": "A",
                "ontable": true
            },
            "E": {
                "clear": true,
                "on": -1,
                "under": -1,
                "ontable": true
            }
        },
        "plan_len": 7,
        "num_blocks": 5,
        "prompt": "The initial state:\nThe hand is empty.\nD is on the table. E is on D. C is on E. A is on C. B is on A. B is clear.\n\nThe goal is:\nD is on the table. A is on D. C is on A. B is on C. B is clear.\nE is on the table. E is clear.\n",
        "system1_plan": "Move B from A to table | Move A from C to table | Move C from E to table | Move E from D to table | Move A from table to D | Move C from table to A | Move B from table to C",
        "system1_states": 7,
        "system2_plan_v1": "Moved to state -> Stack 1: [D, E, C, A, B] | Plan so far [] | Exploring action Move B from A to table | New state -> Stack 1: [B], Stack 2: [D, E, C, A] | Exploring action Move A from C to B | New state -> Invalid | Exploring action Move D from table to B | New state -> Invalid | Taking action Move B from A to table | Moved to state -> Stack 1: [B], Stack 2: [D, E, C, A] | Plan so far [Move B from A to table] | Exploring action Move A from C to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, E, C] | Exploring action Move A from C to B | New state -> Stack 1: [B, A], Stack 2: [D, E, C] | Exploring action Move B from table to A | New state -> Stack 1: [D, E, C, A, B] | Exploring action Move D from table to B | New state -> Invalid | Taking action Move A from C to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, E, C] | Plan so far [Move B from A to table | Move A from C to table] | Exploring action Move C from E to A | New state -> Stack 1: [A, C], Stack 2: [B], Stack 3: [D, E] | Exploring action Move C from E to B | New state -> Stack 1: [A], Stack 2: [B, C], Stack 3: [D, E] | Exploring action Move E from D to table | New state -> Invalid | Exploring action Move C from E to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D, E] | Taking action Move C from E to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D, E] | Plan so far [Move B from A to table | Move A from C to table | Move C from E to table] | Exploring action Move D from table to E | New state -> Invalid | Exploring action Move E from D to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Exploring action Move E from D to B | New state -> Stack 1: [A], Stack 2: [B, E], Stack 3: [C], Stack 4: [D] | Exploring action Move D from table to A | New state -> Invalid | Exploring action Move E from D to C | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, E], Stack 4: [D] | Taking action Move E from D to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Plan so far [Move B from A to table | Move A from C to table | Move C from E to table | Move E from D to table] | Exploring action Move B from table to C | New state -> Stack 1: [A], Stack 2: [C, B], Stack 3: [D], Stack 4: [E] | Exploring action Move B from table to D | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, B], Stack 4: [E] | Exploring action Move A from table to D | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, A], Stack 4: [E] | Taking action Move A from table to D | Moved to state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, A], Stack 4: [E] | Plan so far [Move B from A to table | Move A from C to table | Move C from E to table | Move E from D to table | Move A from table to D] | Exploring action Move C from table to A | New state -> Stack 1: [B], Stack 2: [D, A, C], Stack 3: [E] | Exploring action Move B from table to C | New state -> Stack 1: [C, B], Stack 2: [D, A], Stack 3: [E] | Exploring action Move D from table to B | New state -> Invalid | Exploring action Move A from D to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Taking action Move C from table to A | Moved to state -> Stack 1: [B], Stack 2: [D, A, C], Stack 3: [E] | Plan so far [Move B from A to table | Move A from C to table | Move C from E to table | Move E from D to table | Move A from table to D | Move C from table to A] | Exploring action Move B from table to C | New state -> Stack 1: [D, A, C, B], Stack 2: [E] | Exploring action Move C from A to table | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, A], Stack 4: [E] | Exploring action Move A from D to table | New state -> Invalid | Exploring action Move E from table to B | New state -> Stack 1: [B, E], Stack 2: [D, A, C] | Taking action Move B from table to C | Moved to state -> Stack 1: [D, A, C, B], Stack 2: [E] | Plan so far [Move B from A to table | Move A from C to table | Move C from E to table | Move E from D to table | Move A from table to D | Move C from table to A | Move B from table to C] | Reached goal state!",
        "system2_states_v1": 27
    },
    {
        "idx": 623,
        "start": [
            [
                "table",
                "B",
                "E"
            ],
            [
                "table",
                "D",
                "A",
                "C"
            ]
        ],
        "goal": [
            [
                "table",
                "A",
                "B",
                "C",
                "E",
                "D"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": false,
                "on": "D",
                "under": "C",
                "ontable": false
            },
            "B": {
                "clear": false,
                "on": -1,
                "under": "E",
                "ontable": true
            },
            "C": {
                "clear": true,
                "on": "A",
                "under": -1,
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": -1,
                "under": "A",
                "ontable": true
            },
            "E": {
                "clear": true,
                "on": "B",
                "under": -1,
                "ontable": false
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": false,
                "on": -1,
                "under": "B",
                "ontable": true
            },
            "B": {
                "clear": false,
                "on": "A",
                "under": "C",
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": "B",
                "under": "E",
                "ontable": false
            },
            "D": {
                "clear": true,
                "on": "E",
                "under": -1,
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": "C",
                "under": "D",
                "ontable": false
            }
        },
        "plan_len": 7,
        "num_blocks": 5,
        "prompt": "The initial state:\nThe hand is empty.\nB is on the table. E is on B. E is clear.\nD is on the table. A is on D. C is on A. C is clear.\n\nThe goal is:\nA is on the table. B is on A. C is on B. E is on C. D is on E. D is clear.\n",
        "system1_plan": "Move C from A to table | Move A from D to table | Move E from B to table | Move B from table to A | Move C from table to B | Move E from table to C | Move D from table to E",
        "system1_states": 7,
        "system2_plan_v1": "Moved to state -> Stack 1: [B, E], Stack 2: [D, A, C] | Plan so far [] | Exploring action Move B from table to C | New state -> Invalid | Exploring action Move C from A to table | New state -> Stack 1: [B, E], Stack 2: [C], Stack 3: [D, A] | Exploring action Move B from table to E | New state -> Invalid | Exploring action Move C from A to E | New state -> Stack 1: [B, E, C], Stack 2: [D, A] | Exploring action Move E from B to table | New state -> Stack 1: [B], Stack 2: [D, A, C], Stack 3: [E] | Taking action Move C from A to table | Moved to state -> Stack 1: [B, E], Stack 2: [C], Stack 3: [D, A] | Plan so far [Move C from A to table] | Exploring action Move E from B to table | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, A], Stack 4: [E] | Exploring action Move E from B to A | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, A, E] | Exploring action Move A from D to table | New state -> Stack 1: [A], Stack 2: [B, E], Stack 3: [C], Stack 4: [D] | Exploring action Move B from table to E | New state -> Invalid | Exploring action Move B from table to A | New state -> Invalid | Taking action Move E from B to table | Moved to state -> Stack 1: [B], Stack 2: [D, A, C], Stack 3: [E] | Plan so far [Move E from B to table] | Exploring action Move C from A to B | New state -> Stack 1: [B, C], Stack 2: [D, A], Stack 3: [E] | Exploring action Move C from A to E | New state -> Stack 1: [B], Stack 2: [D, A], Stack 3: [E, C] | Exploring action Move C from A to table | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, A], Stack 4: [E] | Exploring action Move A from D to table | New state -> Invalid | Taking action Move A from D to table | Moved to state -> Stack 1: [A], Stack 2: [B, E], Stack 3: [C], Stack 4: [D] | Plan so far [Move C from A to table | Move A from D to table] | Exploring action Move B from table to E | New state -> Invalid | Exploring action Move E from B to D | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D, E] | Exploring action Move E from B to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Exploring action Move E from B to C | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, E], Stack 4: [D] | Taking action Move C from A to table | Moved to state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, A], Stack 4: [E] | Plan so far [Move E from B to table | Move C from A to table] | Exploring action Move D from table to E | New state -> Invalid | Exploring action Move D from table to C | New state -> Invalid | Exploring action Move A from D to B | New state -> Stack 1: [B, A], Stack 2: [C], Stack 3: [D], Stack 4: [E] | Exploring action Move A from D to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Exploring action Move A from D to C | New state -> Stack 1: [B], Stack 2: [C, A], Stack 3: [D], Stack 4: [E] | Taking action Move E from B to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Plan so far [Move C from A to table | Move A from D to table | Move E from B to table] | Exploring action Move D from table to E | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [E, D] | Exploring action Move A from table to D | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, A], Stack 4: [E] | Exploring action Move B from table to A | New state -> Stack 1: [A, B], Stack 2: [C], Stack 3: [D], Stack 4: [E] | Taking action Move A from D to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Plan so far [Move E from B to table | Move C from A to table | Move A from D to table] | Taking action Move E from B to table | Moved to state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, A], Stack 4: [E] | Plan so far [Move C from A to table | Move E from B to table] | Taking action Move B from table to A | Moved to state -> Stack 1: [A, B], Stack 2: [C], Stack 3: [D], Stack 4: [E] | Plan so far [Move C from A to table | Move A from D to table | Move E from B to table | Move B from table to A] | Exploring action Move A from table to C | New state -> Invalid | Exploring action Move D from table to E | New state -> Stack 1: [A, B], Stack 2: [C], Stack 3: [E, D] | Exploring action Move C from table to B | New state -> Stack 1: [A, B, C], Stack 2: [D], Stack 3: [E] | Exploring action Move C from table to D | New state -> Stack 1: [A, B], Stack 2: [D, C], Stack 3: [E] | Exploring action Move A from table to D | New state -> Invalid | Taking action Move C from table to B | Moved to state -> Stack 1: [A, B, C], Stack 2: [D], Stack 3: [E] | Plan so far [Move C from A to table | Move A from D to table | Move E from B to table | Move B from table to A | Move C from table to B] | Exploring action Move E from table to C | New state -> Stack 1: [A, B, C, E], Stack 2: [D] | Exploring action Move B from A to C | New state -> Invalid | Exploring action Move E from table to D | New state -> Stack 1: [A, B, C], Stack 2: [D, E] | Exploring action Move B from A to table | New state -> Invalid | Exploring action Move D from table to E | New state -> Stack 1: [A, B, C], Stack 2: [E, D] | Taking action Move E from table to C | Moved to state -> Stack 1: [A, B, C, E], Stack 2: [D] | Plan so far [Move C from A to table | Move A from D to table | Move E from B to table | Move B from table to A | Move C from table to B | Move E from table to C] | Exploring action Move E from C to D | New state -> Stack 1: [A, B, C], Stack 2: [D, E] | Exploring action Move C from B to D | New state -> Invalid | Exploring action Move D from table to E | New state -> Stack 1: [A, B, C, E, D] | Exploring action Move E from C to table | New state -> Stack 1: [A, B, C], Stack 2: [D], Stack 3: [E] | Taking action Move D from table to E | Moved to state -> Stack 1: [A, B, C, E, D] | Plan so far [Move C from A to table | Move A from D to table | Move E from B to table | Move B from table to A | Move C from table to B | Move E from table to C | Move D from table to E] | Reached goal state!",
        "system2_states_v1": 40
    },
    {
        "idx": 903,
        "start": [
            [
                "table",
                "D",
                "G",
                "F",
                "A",
                "C",
                "B",
                "E"
            ]
        ],
        "goal": [
            [
                "table",
                "C"
            ],
            [
                "table",
                "F",
                "D"
            ],
            [
                "table",
                "G",
                "A",
                "B",
                "E"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": false,
                "on": "F",
                "under": "C",
                "ontable": false
            },
            "B": {
                "clear": false,
                "on": "C",
                "under": "E",
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": "A",
                "under": "B",
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": -1,
                "under": "G",
                "ontable": true
            },
            "E": {
                "clear": true,
                "on": "B",
                "under": -1,
                "ontable": false
            },
            "F": {
                "clear": false,
                "on": "G",
                "under": "A",
                "ontable": false
            },
            "G": {
                "clear": false,
                "on": "D",
                "under": "F",
                "ontable": false
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": false,
                "on": "G",
                "under": "B",
                "ontable": false
            },
            "B": {
                "clear": false,
                "on": "A",
                "under": "E",
                "ontable": false
            },
            "C": {
                "clear": true,
                "on": -1,
                "under": -1,
                "ontable": true
            },
            "D": {
                "clear": true,
                "on": "F",
                "under": -1,
                "ontable": false
            },
            "E": {
                "clear": true,
                "on": "B",
                "under": -1,
                "ontable": false
            },
            "F": {
                "clear": false,
                "on": -1,
                "under": "D",
                "ontable": true
            },
            "G": {
                "clear": false,
                "on": -1,
                "under": "A",
                "ontable": true
            }
        },
        "plan_len": 10,
        "num_blocks": 7,
        "prompt": "The initial state:\nThe hand is empty.\nD is on the table. G is on D. F is on G. A is on F. C is on A. B is on C. E is on B. E is clear.\n\nThe goal is:\nC is on the table. C is clear.\nF is on the table. D is on F. D is clear.\nG is on the table. A is on G. B is on A. E is on B. E is clear.\n",
        "system1_plan": "Move E from B to table | Move B from C to table | Move C from A to table | Move A from F to table | Move F from G to table | Move G from D to table | Move D from table to F | Move A from table to G | Move B from table to A | Move E from table to B",
        "system1_states": 10,
        "system2_plan_v1": "Moved to state -> Stack 1: [D, G, F, A, C, B, E] | Plan so far [] | Exploring action Move C from A to table | New state -> Invalid | Exploring action Move F from G to table | New state -> Invalid | Exploring action Move E from B to table | New state -> Stack 1: [D, G, F, A, C, B], Stack 2: [E] | Taking action Move E from B to table | Moved to state -> Stack 1: [D, G, F, A, C, B], Stack 2: [E] | Plan so far [Move E from B to table] | Exploring action Move B from C to table | New state -> Stack 1: [B], Stack 2: [D, G, F, A, C], Stack 3: [E] | Exploring action Move E from table to B | New state -> Stack 1: [D, G, F, A, C, B, E] | Exploring action Move A from F to E | New state -> Invalid | Exploring action Move B from C to E | New state -> Stack 1: [D, G, F, A, C], Stack 2: [E, B] | Taking action Move B from C to table | Moved to state -> Stack 1: [B], Stack 2: [D, G, F, A, C], Stack 3: [E] | Plan so far [Move E from B to table | Move B from C to table] | Exploring action Move C from A to B | New state -> Stack 1: [B, C], Stack 2: [D, G, F, A], Stack 3: [E] | Exploring action Move E from table to B | New state -> Stack 1: [B, E], Stack 2: [D, G, F, A, C] | Exploring action Move G from D to table | New state -> Invalid | Exploring action Move C from A to table | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, G, F, A], Stack 4: [E] | Taking action Move C from A to table | Moved to state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, G, F, A], Stack 4: [E] | Plan so far [Move E from B to table | Move B from C to table | Move C from A to table] | Exploring action Move A from F to B | New state -> Stack 1: [B, A], Stack 2: [C], Stack 3: [D, G, F], Stack 4: [E] | Exploring action Move E from table to B | New state -> Stack 1: [B, E], Stack 2: [C], Stack 3: [D, G, F, A] | Exploring action Move A from F to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D, G, F], Stack 5: [E] | Exploring action Move D from table to E | New state -> Invalid | Exploring action Move G from D to E | New state -> Invalid | Taking action Move A from F to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D, G, F], Stack 5: [E] | Plan so far [Move E from B to table | Move B from C to table | Move C from A to table | Move A from F to table] | Exploring action Move E from table to B | New state -> Stack 1: [A], Stack 2: [B, E], Stack 3: [C], Stack 4: [D, G, F] | Exploring action Move F from G to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D, G], Stack 5: [E], Stack 6: [F] | Exploring action Move F from G to E | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D, G], Stack 5: [E, F] | Exploring action Move G from D to B | New state -> Invalid | Exploring action Move G from D to C | New state -> Invalid | Taking action Move F from G to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D, G], Stack 5: [E], Stack 6: [F] | Plan so far [Move E from B to table | Move B from C to table | Move C from A to table | Move A from F to table | Move F from G to table] | Exploring action Move E from table to B | New state -> Stack 1: [A], Stack 2: [B, E], Stack 3: [C], Stack 4: [D, G], Stack 5: [F] | Exploring action Move G from D to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F], Stack 7: [G] | Exploring action Move G from D to B | New state -> Stack 1: [A], Stack 2: [B, G], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Exploring action Move D from table to E | New state -> Invalid | Taking action Move G from D to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F], Stack 7: [G] | Plan so far [Move E from B to table | Move B from C to table | Move C from A to table | Move A from F to table | Move F from G to table | Move G from D to table] | Exploring action Move D from table to F | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [E], Stack 5: [F, D], Stack 6: [G] | Exploring action Move A from table to G | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [F], Stack 6: [G, A] | Exploring action Move E from table to B | New state -> Stack 1: [A], Stack 2: [B, E], Stack 3: [C], Stack 4: [D], Stack 5: [F], Stack 6: [G] | Taking action Move D from table to F | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [E], Stack 5: [F, D], Stack 6: [G] | Plan so far [Move E from B to table | Move B from C to table | Move C from A to table | Move A from F to table | Move F from G to table | Move G from D to table | Move D from table to F] | Exploring action Move A from table to G | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [E], Stack 4: [F, D], Stack 5: [G, A] | Exploring action Move F from table to D | New state -> Invalid | Exploring action Move E from table to B | New state -> Stack 1: [A], Stack 2: [B, E], Stack 3: [C], Stack 4: [F, D], Stack 5: [G] | Exploring action Move B from table to A | New state -> Stack 1: [A, B], Stack 2: [C], Stack 3: [E], Stack 4: [F, D], Stack 5: [G] | Taking action Move A from table to G | Moved to state -> Stack 1: [B], Stack 2: [C], Stack 3: [E], Stack 4: [F, D], Stack 5: [G, A] | Plan so far [Move E from B to table | Move B from C to table | Move C from A to table | Move A from F to table | Move F from G to table | Move G from D to table | Move D from table to F | Move A from table to G] | Exploring action Move F from table to A | New state -> Invalid | Exploring action Move B from table to A | New state -> Stack 1: [C], Stack 2: [E], Stack 3: [F, D], Stack 4: [G, A, B] | Exploring action Move A from G to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [E], Stack 5: [F, D], Stack 6: [G] | Exploring action Move E from table to B | New state -> Stack 1: [B, E], Stack 2: [C], Stack 3: [F, D], Stack 4: [G, A] | Taking action Move B from table to A | Moved to state -> Stack 1: [C], Stack 2: [E], Stack 3: [F, D], Stack 4: [G, A, B] | Plan so far [Move E from B to table | Move B from C to table | Move C from A to table | Move A from F to table | Move F from G to table | Move G from D to table | Move D from table to F | Move A from table to G | Move B from table to A] | Exploring action Move A from G to B | New state -> Invalid | Exploring action Move B from A to table | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [E], Stack 4: [F, D], Stack 5: [G, A] | Exploring action Move E from table to D | New state -> Stack 1: [C], Stack 2: [F, D, E], Stack 3: [G, A, B] | Exploring action Move A from G to D | New state -> Invalid | Exploring action Move E from table to B | New state -> Stack 1: [C], Stack 2: [F, D], Stack 3: [G, A, B, E] | Taking action Move E from table to B | Moved to state -> Stack 1: [C], Stack 2: [F, D], Stack 3: [G, A, B, E] | Plan so far [Move E from B to table | Move B from C to table | Move C from A to table | Move A from F to table | Move F from G to table | Move G from D to table | Move D from table to F | Move A from table to G | Move B from table to A | Move E from table to B] | Reached goal state!",
        "system2_states_v1": 41
    },
    {
        "idx": 913,
        "start": [
            [
                "table",
                "C",
                "A"
            ],
            [
                "table",
                "E",
                "B",
                "F",
                "G",
                "D"
            ]
        ],
        "goal": [
            [
                "table",
                "D",
                "C",
                "A",
                "G",
                "B"
            ],
            [
                "table",
                "F",
                "E"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": true,
                "on": "C",
                "under": -1,
                "ontable": false
            },
            "B": {
                "clear": false,
                "on": "E",
                "under": "F",
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": -1,
                "under": "A",
                "ontable": true
            },
            "D": {
                "clear": true,
                "on": "G",
                "under": -1,
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": -1,
                "under": "B",
                "ontable": true
            },
            "F": {
                "clear": false,
                "on": "B",
                "under": "G",
                "ontable": false
            },
            "G": {
                "clear": false,
                "on": "F",
                "under": "D",
                "ontable": false
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": false,
                "on": "C",
                "under": "G",
                "ontable": false
            },
            "B": {
                "clear": true,
                "on": "G",
                "under": -1,
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": "D",
                "under": "A",
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": -1,
                "under": "C",
                "ontable": true
            },
            "E": {
                "clear": true,
                "on": "F",
                "under": -1,
                "ontable": false
            },
            "F": {
                "clear": false,
                "on": -1,
                "under": "E",
                "ontable": true
            },
            "G": {
                "clear": false,
                "on": "A",
                "under": "B",
                "ontable": false
            }
        },
        "plan_len": 10,
        "num_blocks": 7,
        "prompt": "The initial state:\nThe hand is empty.\nC is on the table. A is on C. A is clear.\nE is on the table. B is on E. F is on B. G is on F. D is on G. D is clear.\n\nThe goal is:\nD is on the table. C is on D. A is on C. G is on A. B is on G. B is clear.\nF is on the table. E is on F. E is clear.\n",
        "system1_plan": "Move D from G to table | Move G from F to table | Move F from B to table | Move B from E to table | Move E from table to F | Move A from C to table | Move C from table to D | Move A from table to C | Move G from table to A | Move B from table to G",
        "system1_states": 10,
        "system2_plan_v1": "Moved to state -> Stack 1: [C, A], Stack 2: [E, B, F, G, D] | Plan so far [] | Exploring action Move A from C to table | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [E, B, F, G, D] | Exploring action Move A from C to D | New state -> Stack 1: [C], Stack 2: [E, B, F, G, D, A] | Exploring action Move C from table to D | New state -> Invalid | Exploring action Move D from G to table | New state -> Stack 1: [C, A], Stack 2: [D], Stack 3: [E, B, F, G] | Taking action Move A from C to table | Moved to state -> Stack 1: [A], Stack 2: [C], Stack 3: [E, B, F, G, D] | Plan so far [Move A from C to table] | Exploring action Move D from G to A | New state -> Stack 1: [A, D], Stack 2: [C], Stack 3: [E, B, F, G] | Exploring action Move D from G to table | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D], Stack 4: [E, B, F, G] | Exploring action Move D from G to C | New state -> Stack 1: [A], Stack 2: [C, D], Stack 3: [E, B, F, G] | Exploring action Move F from B to D | New state -> Invalid | Taking action Move D from G to table | Moved to state -> Stack 1: [C, A], Stack 2: [D], Stack 3: [E, B, F, G] | Plan so far [Move D from G to table] | Exploring action Move B from E to table | New state -> Invalid | Exploring action Move G from F to table | New state -> Stack 1: [C, A], Stack 2: [D], Stack 3: [E, B, F], Stack 4: [G] | Exploring action Move G from F to A | New state -> Stack 1: [C, A, G], Stack 2: [D], Stack 3: [E, B, F] | Exploring action Move E from table to G | New state -> Invalid | Exploring action Move A from C to table | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D], Stack 4: [E, B, F, G] | Taking action Move G from F to A | Moved to state -> Stack 1: [C, A, G], Stack 2: [D], Stack 3: [E, B, F] | Plan so far [Move D from G to table | Move G from F to A] | Exploring action Move B from E to G | New state -> Invalid | Exploring action Move F from B to table | New state -> Stack 1: [C, A, G], Stack 2: [D], Stack 3: [E, B], Stack 4: [F] | Exploring action Move F from B to D | New state -> Stack 1: [C, A, G], Stack 2: [D, F], Stack 3: [E, B] | Exploring action Move F from B to G | New state -> Stack 1: [C, A, G, F], Stack 2: [D], Stack 3: [E, B] | Exploring action Move E from table to F | New state -> Invalid | Taking action Move F from B to table | Moved to state -> Stack 1: [C, A, G], Stack 2: [D], Stack 3: [E, B], Stack 4: [F] | Plan so far [Move D from G to table | Move G from F to A | Move F from B to table] | Exploring action Move C from table to B | New state -> Invalid | Exploring action Move A from C to D | New state -> Invalid | Exploring action Move B from E to F | New state -> Stack 1: [C, A, G], Stack 2: [D], Stack 3: [E], Stack 4: [F, B] | Exploring action Move B from E to table | New state -> Stack 1: [B], Stack 2: [C, A, G], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Exploring action Move B from E to G | New state -> Stack 1: [C, A, G, B], Stack 2: [D], Stack 3: [E], Stack 4: [F] | Taking action Move B from E to G | Moved to state -> Stack 1: [C, A, G, B], Stack 2: [D], Stack 3: [E], Stack 4: [F] | Plan so far [Move D from G to table | Move G from F to A | Move F from B to table | Move B from E to G] | Exploring action Move E from table to F | New state -> Stack 1: [C, A, G, B], Stack 2: [D], Stack 3: [F, E] | Exploring action Move D from table to F | New state -> Stack 1: [C, A, G, B], Stack 2: [E], Stack 3: [F, D] | Exploring action Move A from C to E | New state -> Invalid | Exploring action Move F from table to D | New state -> Stack 1: [C, A, G, B], Stack 2: [D, F], Stack 3: [E] | Taking action Move E from table to F | Moved to state -> Stack 1: [C, A, G, B], Stack 2: [D], Stack 3: [F, E] | Plan so far [Move D from G to table | Move G from F to A | Move F from B to table | Move B from E to G | Move E from table to F] | Exploring action Move A from C to D | New state -> Invalid | Exploring action Move E from F to table | New state -> Stack 1: [C, A, G, B], Stack 2: [D], Stack 3: [E], Stack 4: [F] | Exploring action Move D from table to B | New state -> Stack 1: [C, A, G, B, D], Stack 2: [F, E] | Exploring action Move B from G to table | New state -> Stack 1: [B], Stack 2: [C, A, G], Stack 3: [D], Stack 4: [F, E] | Taking action Move F from table to D | Moved to state -> Stack 1: [C, A, G, B], Stack 2: [D, F], Stack 3: [E] | Plan so far [Move D from G to table | Move G from F to A | Move F from B to table | Move B from E to G | Move F from table to D] | Exploring action Move F from D to E | New state -> Stack 1: [C, A, G, B], Stack 2: [D], Stack 3: [E, F] | Exploring action Move E from table to F | New state -> Stack 1: [C, A, G, B], Stack 2: [D, F, E] | Exploring action Move A from C to E | New state -> Invalid | Exploring action Move A from C to B | New state -> Invalid | Exploring action Move F from D to table | New state -> Stack 1: [C, A, G, B], Stack 2: [D], Stack 3: [E], Stack 4: [F] | Taking action Move F from table to E | Moved to state -> Stack 1: [C, A, G, B], Stack 2: [D], Stack 3: [E, F] | Plan so far [Move D from G to table | Move G from F to A | Move F from B to table | Move B from E to G | Move F from table to E] | Exploring action Move F from E to D | New state -> Stack 1: [C, A, G, B], Stack 2: [D, F], Stack 3: [E] | Exploring action Move F from E to table | New state -> Stack 1: [C, A, G, B], Stack 2: [D], Stack 3: [E], Stack 4: [F] | Exploring action Move A from C to F | New state -> Invalid | Exploring action Move D from table to F | New state -> Stack 1: [C, A, G, B], Stack 2: [E, F, D] | Exploring action Move C from table to D | New state -> Invalid | Taking action Move B from G to table | Moved to state -> Stack 1: [B], Stack 2: [C, A, G], Stack 3: [D], Stack 4: [F, E] | Plan so far [Move D from G to table | Move G from F to A | Move F from B to table | Move B from E to G | Move E from table to F | Move B from G to table] | Exploring action Move B from table to D | New state -> Stack 1: [C, A, G], Stack 2: [D, B], Stack 3: [F, E] | Exploring action Move A from C to D | New state -> Invalid | Exploring action Move D from table to G | New state -> Stack 1: [B], Stack 2: [C, A, G, D], Stack 3: [F, E] | Exploring action Move F from table to G | New state -> Invalid | Exploring action Move B from table to G | New state -> Stack 1: [C, A, G, B], Stack 2: [D], Stack 3: [F, E] | Taking action Move B from table to G | Moved to state -> Stack 1: [C, A, G, B], Stack 2: [D], Stack 3: [F, E] | Plan so far [Move D from G to table | Move G from F to A | Move F from B to table | Move B from E to G | Move E from table to F | Move B from G to table | Move B from table to G] | Taking action Move D from table to B | Moved to state -> Stack 1: [C, A, G, B, D], Stack 2: [F, E] | Plan so far [Move D from G to table | Move G from F to A | Move F from B to table | Move B from E to G | Move E from table to F | Move D from table to B] | Exploring action Move G from A to E | New state -> Invalid | Exploring action Move D from B to E | New state -> Stack 1: [C, A, G, B], Stack 2: [F, E, D] | Exploring action Move E from F to table | New state -> Stack 1: [C, A, G, B, D], Stack 2: [E], Stack 3: [F] | Exploring action Move D from B to table | New state -> Stack 1: [C, A, G, B], Stack 2: [D], Stack 3: [F, E] | Exploring action Move G from A to table | New state -> Invalid | Taking action Move D from B to table | Moved to state -> Stack 1: [C, A, G, B], Stack 2: [D], Stack 3: [F, E] | Plan so far [Move D from G to table | Move G from F to A | Move F from B to table | Move B from E to G | Move E from table to F | Move D from table to B | Move D from B to table] | Taking action Move D from table to E | Moved to state -> Stack 1: [C, A, G, B], Stack 2: [F, E, D] | Plan so far [Move D from G to table | Move G from F to A | Move F from B to table | Move B from E to G | Move E from table to F | Move D from table to E] | Exploring action Move A from C to table | New state -> Invalid | Exploring action Move A from C to B | New state -> Invalid | Exploring action Move D from E to table | New state -> Stack 1: [C, A, G, B], Stack 2: [D], Stack 3: [F, E] | Exploring action Move D from E to B | New state -> Stack 1: [C, A, G, B, D], Stack 2: [F, E] | Exploring action Move B from G to table | New state -> Stack 1: [B], Stack 2: [C, A, G], Stack 3: [F, E, D] | Taking action Move D from E to table | Moved to state -> Stack 1: [C, A, G, B], Stack 2: [D], Stack 3: [F, E] | Plan so far [Move D from G to table | Move G from F to A | Move F from B to table | Move B from E to G | Move E from table to F | Move D from table to E | Move D from E to table] | Taking action Move E from F to table | Moved to state -> Stack 1: [C, A, G, B], Stack 2: [D], Stack 3: [E], Stack 4: [F] | Plan so far [Move D from G to table | Move G from F to A | Move F from B to table | Move B from E to G | Move E from table to F | Move E from F to table] | Taking action Move F from D to table | Moved to state -> Stack 1: [C, A, G, B], Stack 2: [D], Stack 3: [E], Stack 4: [F] | Plan so far [Move D from G to table | Move G from F to A | Move F from B to table | Move B from E to G | Move F from table to D | Move F from D to table] | Taking action Move E from table to D | Moved to state -> Stack 1: [C, A, G, B], Stack 2: [D, E], Stack 3: [F] | Plan so far [Move D from G to table | Move G from F to A | Move F from B to table | Move B from E to G | Move E from table to D] | Exploring action Move E from D to B | New state -> Stack 1: [C, A, G, B, E], Stack 2: [D], Stack 3: [F] | Exploring action Move E from D to table | New state -> Stack 1: [C, A, G, B], Stack 2: [D], Stack 3: [E], Stack 4: [F] | Exploring action Move C from table to B | New state -> Invalid | Exploring action Move E from D to F | New state -> Stack 1: [C, A, G, B], Stack 2: [D], Stack 3: [F, E] | Taking action Move E from D to F | Moved to state -> Stack 1: [C, A, G, B], Stack 2: [D], Stack 3: [F, E] | Plan so far [Move D from G to table | Move G from F to A | Move F from B to table | Move B from E to G | Move E from table to D | Move E from D to F] | Taking action Move D from table to F | Moved to state -> Stack 1: [C, A, G, B], Stack 2: [E], Stack 3: [F, D] | Plan so far [Move D from G to table | Move G from F to A | Move F from B to table | Move B from E to G | Move D from table to F] | Exploring action Move D from F to E | New state -> Stack 1: [C, A, G, B], Stack 2: [E, D], Stack 3: [F] | Exploring action Move D from F to B | New state -> Stack 1: [C, A, G, B, D], Stack 2: [E], Stack 3: [F] | Exploring action Move C from table to B | New state -> Invalid | Exploring action Move D from F to table | New state -> Stack 1: [C, A, G, B], Stack 2: [D], Stack 3: [E], Stack 4: [F] | Taking action Move D from table to E | Moved to state -> Stack 1: [C, A, G, B], Stack 2: [E, D], Stack 3: [F] | Plan so far [Move D from G to table | Move G from F to A | Move F from B to table | Move B from E to G | Move D from table to E] | Exploring action Move D from E to F | New state -> Stack 1: [C, A, G, B], Stack 2: [E], Stack 3: [F, D] | Exploring action Move C from table to D | New state -> Invalid | Exploring action Move D from E to table | New state -> Stack 1: [C, A, G, B], Stack 2: [D], Stack 3: [E], Stack 4: [F] | Exploring action Move D from E to B | New state -> Stack 1: [C, A, G, B, D], Stack 2: [E], Stack 3: [F] | Taking action Move E from D to table | Moved to state -> Stack 1: [C, A, G, B], Stack 2: [D], Stack 3: [E], Stack 4: [F] | Plan so far [Move D from G to table | Move G from F to A | Move F from B to table | Move B from E to G | Move E from table to D | Move E from D to table] | Taking action Move D from E to table | Moved to state -> Stack 1: [C, A, G, B], Stack 2: [D], Stack 3: [E], Stack 4: [F] | Plan so far [Move D from G to table | Move G from F to A | Move F from B to table | Move B from E to G | Move D from table to E | Move D from E to table] | Taking action Move D from F to table | Moved to state -> Stack 1: [C, A, G, B], Stack 2: [D], Stack 3: [E], Stack 4: [F] | Plan so far [Move D from G to table | Move G from F to A | Move F from B to table | Move B from E to G | Move D from table to F | Move D from F to table] | Taking action Move B from E to table | Moved to state -> Stack 1: [B], Stack 2: [C, A, G], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Plan so far [Move D from G to table | Move G from F to A | Move F from B to table | Move B from E to table] | Exploring action Move B from table to G | New state -> Stack 1: [C, A, G, B], Stack 2: [D], Stack 3: [E], Stack 4: [F] | Exploring action Move E from table to F | New state -> Stack 1: [B], Stack 2: [C, A, G], Stack 3: [D], Stack 4: [F, E] | Exploring action Move B from table to F | New state -> Stack 1: [C, A, G], Stack 2: [D], Stack 3: [E], Stack 4: [F, B] | Exploring action Move A from C to table | New state -> Invalid | Taking action Move B from table to G | Moved to state -> Stack 1: [C, A, G, B], Stack 2: [D], Stack 3: [E], Stack 4: [F] | Plan so far [Move D from G to table | Move G from F to A | Move F from B to table | Move B from E to table | Move B from table to G] | Taking action Move E from table to F | Moved to state -> Stack 1: [B], Stack 2: [C, A, G], Stack 3: [D], Stack 4: [F, E] | Plan so far [Move D from G to table | Move G from F to A | Move F from B to table | Move B from E to table | Move E from table to F] | Taking action Move F from E to table | Moved to state -> Stack 1: [C, A, G, B], Stack 2: [D], Stack 3: [E], Stack 4: [F] | Plan so far [Move D from G to table | Move G from F to A | Move F from B to table | Move B from E to G | Move F from table to E | Move F from E to table] | Taking action Move E from table to F | Moved to state -> Stack 1: [C, A, G, B], Stack 2: [D, F, E] | Plan so far [Move D from G to table | Move G from F to A | Move F from B to table | Move B from E to G | Move F from table to D | Move E from table to F] | Exploring action Move B from G to table | New state -> Stack 1: [B], Stack 2: [C, A, G], Stack 3: [D, F, E] | Exploring action Move E from F to table | New state -> Stack 1: [C, A, G, B], Stack 2: [D, F], Stack 3: [E] | Exploring action Move G from A to table | New state -> Invalid | Exploring action Move E from F to B | New state -> Stack 1: [C, A, G, B, E], Stack 2: [D, F] | Exploring action Move A from C to B | New state -> Invalid | Taking action Move F from D to E | Moved to state -> Stack 1: [C, A, G, B], Stack 2: [D], Stack 3: [E, F] | Plan so far [Move D from G to table | Move G from F to A | Move F from B to table | Move B from E to G | Move F from table to D | Move F from D to E] | Taking action Move E from F to D | Moved to state -> Stack 1: [C, A, G, B], Stack 2: [D, E], Stack 3: [F] | Plan so far [Move D from G to table | Move G from F to A | Move F from B to table | Move B from E to G | Move E from table to F | Move E from F to D] | Taking action Move B from E to F | Moved to state -> Stack 1: [C, A, G], Stack 2: [D], Stack 3: [E], Stack 4: [F, B] | Plan so far [Move D from G to table | Move G from F to A | Move F from B to table | Move B from E to F] | Exploring action Move B from F to G | New state -> Stack 1: [C, A, G, B], Stack 2: [D], Stack 3: [E], Stack 4: [F] | Exploring action Move B from F to table | New state -> Stack 1: [B], Stack 2: [C, A, G], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Exploring action Move B from F to E | New state -> Stack 1: [C, A, G], Stack 2: [D], Stack 3: [E, B], Stack 4: [F] | Exploring action Move A from C to G | New state -> Invalid | Taking action Move B from F to G | Moved to state -> Stack 1: [C, A, G, B], Stack 2: [D], Stack 3: [E], Stack 4: [F] | Plan so far [Move D from G to table | Move G from F to A | Move F from B to table | Move B from E to F | Move B from F to G] | Taking action Move B from G to D | Moved to state -> Stack 1: [C, A, G], Stack 2: [D, B], Stack 3: [F, E] | Plan so far [Move D from G to table | Move G from F to A | Move F from B to table | Move B from E to G | Move E from table to F | Move B from G to D] | Exploring action Move B from D to table | New state -> Stack 1: [B], Stack 2: [C, A, G], Stack 3: [D], Stack 4: [F, E] | Exploring action Move C from table to B | New state -> Invalid | Exploring action Move F from table to E | New state -> Invalid | Exploring action Move B from D to G | New state -> Stack 1: [C, A, G, B], Stack 2: [D], Stack 3: [F, E] | Exploring action Move G from A to table | New state -> Stack 1: [C, A], Stack 2: [D, B], Stack 3: [F, E], Stack 4: [G] | Taking action Move B from D to G | Moved to state -> Stack 1: [C, A, G, B], Stack 2: [D], Stack 3: [F, E] | Plan so far [Move D from G to table | Move G from F to A | Move F from B to table | Move B from E to G | Move E from table to F | Move B from G to D | Move B from D to G] | Taking action Move B from F to table | Moved to state -> Stack 1: [B], Stack 2: [C, A, G], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Plan so far [Move D from G to table | Move G from F to A | Move F from B to table | Move B from E to F | Move B from F to table] | Taking action Move G from F to table | Moved to state -> Stack 1: [C, A], Stack 2: [D], Stack 3: [E, B, F], Stack 4: [G] | Plan so far [Move D from G to table | Move G from F to table] | Exploring action Move G from table to A | New state -> Stack 1: [C, A, G], Stack 2: [D], Stack 3: [E, B, F] | Exploring action Move E from table to F | New state -> Invalid | Exploring action Move F from B to table | New state -> Stack 1: [C, A], Stack 2: [D], Stack 3: [E, B], Stack 4: [F], Stack 5: [G] | Exploring action Move A from C to table | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D], Stack 4: [E, B, F], Stack 5: [G] | Taking action Move B from E to D | Moved to state -> Stack 1: [C, A, G], Stack 2: [D, B], Stack 3: [E], Stack 4: [F] | Plan so far [Move D from G to table | Move G from F to A | Move F from B to table | Move B from E to D] | Exploring action Move E from table to F | New state -> Stack 1: [C, A, G], Stack 2: [D, B], Stack 3: [F, E] | Exploring action Move C from table to G | New state -> Invalid | Exploring action Move B from D to table | New state -> Stack 1: [B], Stack 2: [C, A, G], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Exploring action Move B from D to G | New state -> Stack 1: [C, A, G, B], Stack 2: [D], Stack 3: [E], Stack 4: [F] | Taking action Move B from D to G | Moved to state -> Stack 1: [C, A, G, B], Stack 2: [D], Stack 3: [E], Stack 4: [F] | Plan so far [Move D from G to table | Move G from F to A | Move F from B to table | Move B from E to D | Move B from D to G] | Taking action Move E from table to F | Moved to state -> Stack 1: [C, A, G], Stack 2: [D, B], Stack 3: [F, E] | Plan so far [Move D from G to table | Move G from F to A | Move F from B to table | Move B from E to D | Move E from table to F] | Taking action Move D from F to E | Moved to state -> Stack 1: [C, A, G, B], Stack 2: [E, D], Stack 3: [F] | Plan so far [Move D from G to table | Move G from F to A | Move F from B to table | Move B from E to G | Move D from table to F | Move D from F to E] | Taking action Move F from table to B | Moved to state -> Stack 1: [C, A, G, B, F], Stack 2: [D], Stack 3: [E] | Plan so far [Move D from G to table | Move G from F to A | Move F from B to table | Move B from E to G | Move F from table to B] | Exploring action Move G from A to D | New state -> Invalid | Exploring action Move F from B to D | New state -> Stack 1: [C, A, G, B], Stack 2: [D, F], Stack 3: [E] | Exploring action Move F from B to table | New state -> Stack 1: [C, A, G, B], Stack 2: [D], Stack 3: [E], Stack 4: [F] | Exploring action Move F from B to E | New state -> Stack 1: [C, A, G, B], Stack 2: [D], Stack 3: [E, F] | Exploring action Move B from G to D | New state -> Invalid | Taking action Move F from B to table | Moved to state -> Stack 1: [C, A, G, B], Stack 2: [D], Stack 3: [E], Stack 4: [F] | Plan so far [Move D from G to table | Move G from F to A | Move F from B to table | Move B from E to G | Move F from table to B | Move F from B to table] | Taking action Move F from B to G | Moved to state -> Stack 1: [C, A, G, F], Stack 2: [D], Stack 3: [E, B] | Plan so far [Move D from G to table | Move G from F to A | Move F from B to G] | Exploring action Move F from G to table | New state -> Stack 1: [C, A, G], Stack 2: [D], Stack 3: [E, B], Stack 4: [F] | Exploring action Move B from E to table | New state -> Stack 1: [B], Stack 2: [C, A, G, F], Stack 3: [D], Stack 4: [E] | Exploring action Move A from C to table | New state -> Invalid | Exploring action Move F from G to B | New state -> Stack 1: [C, A, G], Stack 2: [D], Stack 3: [E, B, F] | Taking action Move D from table to B | Moved to state -> Stack 1: [C, A, G, B, D], Stack 2: [E], Stack 3: [F] | Plan so far [Move D from G to table | Move G from F to A | Move F from B to table | Move B from E to G | Move D from table to B] | Exploring action Move D from B to table | New state -> Stack 1: [C, A, G, B], Stack 2: [D], Stack 3: [E], Stack 4: [F] | Exploring action Move E from table to F | New state -> Stack 1: [C, A, G, B, D], Stack 2: [F, E] | Exploring action Move B from G to F | New state -> Invalid | Exploring action Move D from B to F | New state -> Stack 1: [C, A, G, B], Stack 2: [E], Stack 3: [F, D] | Taking action Move D from B to table | Moved to state -> Stack 1: [C, A, G, B], Stack 2: [D], Stack 3: [E], Stack 4: [F] | Plan so far [Move D from G to table | Move G from F to A | Move F from B to table | Move B from E to G | Move D from table to B | Move D from B to table] | Taking action Move E from table to F | Moved to state -> Stack 1: [C, A, G, B, D], Stack 2: [F, E] | Plan so far [Move D from G to table | Move G from F to A | Move F from B to table | Move B from E to G | Move D from table to B | Move E from table to F] | Taking action Move F from B to D | Moved to state -> Stack 1: [C, A, G], Stack 2: [D, F], Stack 3: [E, B] | Plan so far [Move D from G to table | Move G from F to A | Move F from B to D] | Exploring action Move B from E to G | New state -> Stack 1: [C, A, G, B], Stack 2: [D, F], Stack 3: [E] | Exploring action Move D from table to G | New state -> Invalid | Exploring action Move B from E to table | New state -> Stack 1: [B], Stack 2: [C, A, G], Stack 3: [D, F], Stack 4: [E] | Exploring action Move A from C to B | New state -> Invalid | Exploring action Move F from D to table | New state -> Stack 1: [C, A, G], Stack 2: [D], Stack 3: [E, B], Stack 4: [F] | Taking action Move B from E to G | Moved to state -> Stack 1: [C, A, G, B], Stack 2: [D, F], Stack 3: [E] | Plan so far [Move D from G to table | Move G from F to A | Move F from B to D | Move B from E to G] | Taking action Move D from B to E | Moved to state -> Stack 1: [C, A, G, B], Stack 2: [F, E, D] | Plan so far [Move D from G to table | Move G from F to A | Move F from B to table | Move B from E to G | Move E from table to F | Move D from table to B | Move D from B to E] | Taking action Move F from B to D | Moved to state -> Stack 1: [C, A, G, B], Stack 2: [D, F], Stack 3: [E] | Plan so far [Move D from G to table | Move G from F to A | Move F from B to table | Move B from E to G | Move F from table to B | Move F from B to D] | Taking action Move F from G to table | Moved to state -> Stack 1: [C, A, G], Stack 2: [D], Stack 3: [E, B], Stack 4: [F] | Plan so far [Move D from G to table | Move G from F to A | Move F from B to G | Move F from G to table] | Taking action Move B from E to table | Moved to state -> Stack 1: [B], Stack 2: [C, A, G], Stack 3: [D, F], Stack 4: [E] | Plan so far [Move D from G to table | Move G from F to A | Move F from B to D | Move B from E to table] | Exploring action Move F from D to table | New state -> Stack 1: [B], Stack 2: [C, A, G], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Exploring action Move E from table to F | New state -> Stack 1: [B], Stack 2: [C, A, G], Stack 3: [D, F, E] | Exploring action Move A from C to F | New state -> Invalid | Exploring action Move B from table to G | New state -> Stack 1: [C, A, G, B], Stack 2: [D, F], Stack 3: [E] | Taking action Move B from table to G | Moved to state -> Stack 1: [C, A, G, B], Stack 2: [D, F], Stack 3: [E] | Plan so far [Move D from G to table | Move G from F to A | Move F from B to D | Move B from E to table | Move B from table to G] | Taking action Move F from D to table | Moved to state -> Stack 1: [C, A, G], Stack 2: [D], Stack 3: [E, B], Stack 4: [F] | Plan so far [Move D from G to table | Move G from F to A | Move F from B to D | Move F from D to table] | Taking action Move D from B to E | Moved to state -> Stack 1: [C, A, G, B], Stack 2: [E, D], Stack 3: [F] | Plan so far [Move D from G to table | Move G from F to A | Move F from B to table | Move B from E to G | Move D from table to B | Move D from B to E] | Taking action Move D from B to F | Moved to state -> Stack 1: [C, A, G, B], Stack 2: [E], Stack 3: [F, D] | Plan so far [Move D from G to table | Move G from F to A | Move F from B to table | Move B from E to G | Move D from table to B | Move D from B to F] | Taking action Move F from D to table | Moved to state -> Stack 1: [B], Stack 2: [C, A, G], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Plan so far [Move D from G to table | Move G from F to A | Move F from B to D | Move B from E to table | Move F from D to table] | Taking action Move F from B to E | Moved to state -> Stack 1: [C, A, G, B], Stack 2: [D], Stack 3: [E, F] | Plan so far [Move D from G to table | Move G from F to A | Move F from B to table | Move B from E to G | Move F from table to B | Move F from B to E] | Taking action Move B from E to table | Moved to state -> Stack 1: [B], Stack 2: [C, A, G, F], Stack 3: [D], Stack 4: [E] | Plan so far [Move D from G to table | Move G from F to A | Move F from B to G | Move B from E to table] | Exploring action Move F from G to table | New state -> Stack 1: [B], Stack 2: [C, A, G], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Exploring action Move A from C to D | New state -> Invalid | Exploring action Move F from G to E | New state -> Stack 1: [B], Stack 2: [C, A, G], Stack 3: [D], Stack 4: [E, F] | Exploring action Move F from G to D | New state -> Stack 1: [B], Stack 2: [C, A, G], Stack 3: [D, F], Stack 4: [E] | Taking action Move D from E to F | Moved to state -> Stack 1: [C, A, G, B], Stack 2: [E], Stack 3: [F, D] | Plan so far [Move D from G to table | Move G from F to A | Move F from B to table | Move B from E to G | Move D from table to E | Move D from E to F] | Taking action Move F from G to table | Moved to state -> Stack 1: [B], Stack 2: [C, A, G], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Plan so far [Move D from G to table | Move G from F to A | Move F from B to G | Move B from E to table | Move F from G to table] | Taking action Move E from table to B | Moved to state -> Stack 1: [C, A, G, B, E], Stack 2: [D], Stack 3: [F] | Plan so far [Move D from G to table | Move G from F to A | Move F from B to table | Move B from E to G | Move E from table to B] | Exploring action Move E from B to table | New state -> Stack 1: [C, A, G, B], Stack 2: [D], Stack 3: [E], Stack 4: [F] | Exploring action Move E from B to D | New state -> Stack 1: [C, A, G, B], Stack 2: [D, E], Stack 3: [F] | Exploring action Move G from A to E | New state -> Invalid | Exploring action Move A from C to E | New state -> Invalid | Exploring action Move E from B to F | New state -> Stack 1: [C, A, G, B], Stack 2: [D], Stack 3: [F, E] | Taking action Move E from B to F | Moved to state -> Stack 1: [C, A, G, B], Stack 2: [D], Stack 3: [F, E] | Plan so far [Move D from G to table | Move G from F to A | Move F from B to table | Move B from E to G | Move E from table to B | Move E from B to F] | Taking action Move E from B to table | Moved to state -> Stack 1: [C, A, G, B], Stack 2: [D], Stack 3: [E], Stack 4: [F] | Plan so far [Move D from G to table | Move G from F to A | Move F from B to table | Move B from E to G | Move E from table to B | Move E from B to table] | Taking action Move D from E to B | Moved to state -> Stack 1: [C, A, G, B, D], Stack 2: [F, E] | Plan so far [Move D from G to table | Move G from F to A | Move F from B to table | Move B from E to G | Move E from table to F | Move D from table to E | Move D from E to B] | Taking action Move E from B to D | Moved to state -> Stack 1: [C, A, G, B], Stack 2: [D, E], Stack 3: [F] | Plan so far [Move D from G to table | Move G from F to A | Move F from B to table | Move B from E to G | Move E from table to B | Move E from B to D] | Taking action Move B from G to table | Moved to state -> Stack 1: [B], Stack 2: [C, A, G], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Plan so far [Move D from G to table | Move G from F to A | Move F from B to table | Move B from E to G | Move B from G to table] | Taking action Move F from B to table | Moved to state -> Stack 1: [C, A], Stack 2: [D], Stack 3: [E, B], Stack 4: [F], Stack 5: [G] | Plan so far [Move D from G to table | Move G from F to table | Move F from B to table] | Exploring action Move A from C to table | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D], Stack 4: [E, B], Stack 5: [F], Stack 6: [G] | Exploring action Move B from E to G | New state -> Stack 1: [C, A], Stack 2: [D], Stack 3: [E], Stack 4: [F], Stack 5: [G, B] | Exploring action Move E from table to A | New state -> Invalid | Exploring action Move B from E to table | New state -> Stack 1: [B], Stack 2: [C, A], Stack 3: [D], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Taking action Move G from table to A | Moved to state -> Stack 1: [C, A, G], Stack 2: [D], Stack 3: [E, B, F] | Plan so far [Move D from G to table | Move G from F to table | Move G from table to A] | Taking action Move A from C to table | Moved to state -> Stack 1: [A], Stack 2: [C], Stack 3: [D], Stack 4: [E, B], Stack 5: [F], Stack 6: [G] | Plan so far [Move D from G to table | Move G from F to table | Move F from B to table | Move A from C to table] | Exploring action Move E from table to C | New state -> Invalid | Exploring action Move C from table to D | New state -> Stack 1: [A], Stack 2: [D, C], Stack 3: [E, B], Stack 4: [F], Stack 5: [G] | Exploring action Move B from E to G | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [F], Stack 6: [G, B] | Exploring action Move B from E to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F], Stack 7: [G] | Taking action Move B from E to table | Moved to state -> Stack 1: [B], Stack 2: [C, A], Stack 3: [D], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Plan so far [Move D from G to table | Move G from F to table | Move F from B to table | Move B from E to table] | Exploring action Move E from table to F | New state -> Stack 1: [B], Stack 2: [C, A], Stack 3: [D], Stack 4: [F, E], Stack 5: [G] | Exploring action Move G from table to A | New state -> Stack 1: [B], Stack 2: [C, A, G], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Exploring action Move C from table to B | New state -> Invalid | Exploring action Move A from C to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F], Stack 7: [G] | Taking action Move E from table to F | Moved to state -> Stack 1: [B], Stack 2: [C, A], Stack 3: [D], Stack 4: [F, E], Stack 5: [G] | Plan so far [Move D from G to table | Move G from F to table | Move F from B to table | Move B from E to table | Move E from table to F] | Exploring action Move F from table to B | New state -> Invalid | Exploring action Move A from C to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [F, E], Stack 6: [G] | Exploring action Move A from C to D | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, A], Stack 4: [F, E], Stack 5: [G] | Exploring action Move G from table to A | New state -> Stack 1: [B], Stack 2: [C, A, G], Stack 3: [D], Stack 4: [F, E] | Taking action Move A from C to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [F, E], Stack 6: [G] | Plan so far [Move D from G to table | Move G from F to table | Move F from B to table | Move B from E to table | Move E from table to F | Move A from C to table] | Exploring action Move C from table to D | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, C], Stack 4: [F, E], Stack 5: [G] | Exploring action Move F from table to G | New state -> Invalid | Exploring action Move F from table to D | New state -> Invalid | Exploring action Move B from table to G | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D], Stack 4: [F, E], Stack 5: [G, B] | Exploring action Move B from table to C | New state -> Stack 1: [A], Stack 2: [C, B], Stack 3: [D], Stack 4: [F, E], Stack 5: [G] | Taking action Move G from table to A | Moved to state -> Stack 1: [B], Stack 2: [C, A, G], Stack 3: [D], Stack 4: [F, E] | Plan so far [Move D from G to table | Move G from F to table | Move F from B to table | Move B from E to table | Move E from table to F | Move G from table to A] | Taking action Move C from table to D | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, C], Stack 4: [F, E], Stack 5: [G] | Plan so far [Move D from G to table | Move G from F to table | Move F from B to table | Move B from E to table | Move E from table to F | Move A from C to table | Move C from table to D] | Exploring action Move B from table to G | New state -> Stack 1: [A], Stack 2: [D, C], Stack 3: [F, E], Stack 4: [G, B] | Exploring action Move B from table to C | New state -> Stack 1: [A], Stack 2: [D, C, B], Stack 3: [F, E], Stack 4: [G] | Exploring action Move F from table to G | New state -> Invalid | Exploring action Move A from table to C | New state -> Stack 1: [B], Stack 2: [D, C, A], Stack 3: [F, E], Stack 4: [G] | Taking action Move A from table to C | Moved to state -> Stack 1: [B], Stack 2: [D, C, A], Stack 3: [F, E], Stack 4: [G] | Plan so far [Move D from G to table | Move G from F to table | Move F from B to table | Move B from E to table | Move E from table to F | Move A from C to table | Move C from table to D | Move A from table to C] | Exploring action Move A from C to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, C], Stack 4: [F, E], Stack 5: [G] | Exploring action Move G from table to A | New state -> Stack 1: [B], Stack 2: [D, C, A, G], Stack 3: [F, E] | Exploring action Move C from D to A | New state -> Invalid | Exploring action Move B from table to G | New state -> Stack 1: [D, C, A], Stack 2: [F, E], Stack 3: [G, B] | Exploring action Move C from D to E | New state -> Invalid | Taking action Move G from table to A | Moved to state -> Stack 1: [B], Stack 2: [D, C, A, G], Stack 3: [F, E] | Plan so far [Move D from G to table | Move G from F to table | Move F from B to table | Move B from E to table | Move E from table to F | Move A from C to table | Move C from table to D | Move A from table to C | Move G from table to A] | Exploring action Move G from A to table | New state -> Stack 1: [B], Stack 2: [D, C, A], Stack 3: [F, E], Stack 4: [G] | Exploring action Move B from table to G | New state -> Stack 1: [D, C, A, G, B], Stack 2: [F, E] | Exploring action Move G from A to B | New state -> Stack 1: [B, G], Stack 2: [D, C, A], Stack 3: [F, E] | Exploring action Move C from D to E | New state -> Invalid | Taking action Move B from table to G | Moved to state -> Stack 1: [D, C, A, G, B], Stack 2: [F, E] | Plan so far [Move D from G to table | Move G from F to table | Move F from B to table | Move B from E to table | Move E from table to F | Move A from C to table | Move C from table to D | Move A from table to C | Move G from table to A | Move B from table to G] | Reached goal state!",
        "system2_states_v1": 159
    },
    {
        "idx": 923,
        "start": [
            [
                "table",
                "A",
                "B",
                "E"
            ],
            [
                "table",
                "G",
                "F",
                "D",
                "C"
            ]
        ],
        "goal": [
            [
                "table",
                "B",
                "F",
                "C",
                "E",
                "A"
            ],
            [
                "table",
                "G",
                "D"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": false,
                "on": -1,
                "under": "B",
                "ontable": true
            },
            "B": {
                "clear": false,
                "on": "A",
                "under": "E",
                "ontable": false
            },
            "C": {
                "clear": true,
                "on": "D",
                "under": -1,
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": "F",
                "under": "C",
                "ontable": false
            },
            "E": {
                "clear": true,
                "on": "B",
                "under": -1,
                "ontable": false
            },
            "F": {
                "clear": false,
                "on": "G",
                "under": "D",
                "ontable": false
            },
            "G": {
                "clear": false,
                "on": -1,
                "under": "F",
                "ontable": true
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": true,
                "on": "E",
                "under": -1,
                "ontable": false
            },
            "B": {
                "clear": false,
                "on": -1,
                "under": "F",
                "ontable": true
            },
            "C": {
                "clear": false,
                "on": "F",
                "under": "E",
                "ontable": false
            },
            "D": {
                "clear": true,
                "on": "G",
                "under": -1,
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": "C",
                "under": "A",
                "ontable": false
            },
            "F": {
                "clear": false,
                "on": "B",
                "under": "C",
                "ontable": false
            },
            "G": {
                "clear": false,
                "on": -1,
                "under": "D",
                "ontable": true
            }
        },
        "plan_len": 10,
        "num_blocks": 7,
        "prompt": "The initial state:\nThe hand is empty.\nA is on the table. B is on A. E is on B. E is clear.\nG is on the table. F is on G. D is on F. C is on D. C is clear.\n\nThe goal is:\nB is on the table. F is on B. C is on F. E is on C. A is on E. A is clear.\nG is on the table. D is on G. D is clear.\n",
        "system1_plan": "Move C from D to table | Move D from F to table | Move F from G to table | Move D from table to G | Move E from B to table | Move B from A to table | Move F from table to B | Move C from table to F | Move E from table to C | Move A from table to E",
        "system1_states": 10,
        "system2_plan_v1": "Moved to state -> Stack 1: [A, B, E], Stack 2: [G, F, D, C] | Plan so far [] | Exploring action Move E from B to table | New state -> Stack 1: [A, B], Stack 2: [E], Stack 3: [G, F, D, C] | Exploring action Move C from D to E | New state -> Stack 1: [A, B, E, C], Stack 2: [G, F, D] | Exploring action Move D from F to E | New state -> Invalid | Exploring action Move C from D to table | New state -> Stack 1: [A, B, E], Stack 2: [C], Stack 3: [G, F, D] | Exploring action Move F from G to table | New state -> Invalid | Taking action Move C from D to table | Moved to state -> Stack 1: [A, B, E], Stack 2: [C], Stack 3: [G, F, D] | Plan so far [Move C from D to table] | Exploring action Move B from A to D | New state -> Invalid | Exploring action Move D from F to table | New state -> Stack 1: [A, B, E], Stack 2: [C], Stack 3: [D], Stack 4: [G, F] | Exploring action Move E from B to table | New state -> Stack 1: [A, B], Stack 2: [C], Stack 3: [E], Stack 4: [G, F, D] | Exploring action Move E from B to C | New state -> Stack 1: [A, B], Stack 2: [C, E], Stack 3: [G, F, D] | Exploring action Move A from table to D | New state -> Invalid | Taking action Move E from B to table | Moved to state -> Stack 1: [A, B], Stack 2: [E], Stack 3: [G, F, D, C] | Plan so far [Move E from B to table] | Exploring action Move B from A to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [E], Stack 4: [G, F, D, C] | Exploring action Move F from G to B | New state -> Invalid | Exploring action Move C from D to table | New state -> Stack 1: [A, B], Stack 2: [C], Stack 3: [E], Stack 4: [G, F, D] | Exploring action Move G from table to E | New state -> Invalid | Exploring action Move B from A to E | New state -> Stack 1: [A], Stack 2: [E, B], Stack 3: [G, F, D, C] | Taking action Move D from F to table | Moved to state -> Stack 1: [A, B, E], Stack 2: [C], Stack 3: [D], Stack 4: [G, F] | Plan so far [Move C from D to table | Move D from F to table] | Exploring action Move A from table to C | New state -> Invalid | Exploring action Move F from G to table | New state -> Stack 1: [A, B, E], Stack 2: [C], Stack 3: [D], Stack 4: [F], Stack 5: [G] | Exploring action Move F from G to C | New state -> Stack 1: [A, B, E], Stack 2: [C, F], Stack 3: [D], Stack 4: [G] | Exploring action Move E from B to table | New state -> Stack 1: [A, B], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [G, F] | Taking action Move C from D to table | Moved to state -> Stack 1: [A, B], Stack 2: [C], Stack 3: [E], Stack 4: [G, F, D] | Plan so far [Move E from B to table | Move C from D to table] | Exploring action Move G from table to D | New state -> Invalid | Exploring action Move B from A to D | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [E], Stack 4: [G, F, D, B] | Exploring action Move D from F to table | New state -> Stack 1: [A, B], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [G, F] | Exploring action Move B from A to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [E], Stack 5: [G, F, D] | Taking action Move E from B to table | Moved to state -> Stack 1: [A, B], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [G, F] | Plan so far [Move C from D to table | Move D from F to table | Move E from B to table] | Exploring action Move B from A to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [G, F] | Exploring action Move B from A to D | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, B], Stack 4: [E], Stack 5: [G, F] | Exploring action Move G from table to B | New state -> Invalid | Exploring action Move F from G to table | New state -> Stack 1: [A, B], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Taking action Move F from G to table | Moved to state -> Stack 1: [A, B, E], Stack 2: [C], Stack 3: [D], Stack 4: [F], Stack 5: [G] | Plan so far [Move C from D to table | Move D from F to table | Move F from G to table] | Exploring action Move E from B to F | New state -> Stack 1: [A, B], Stack 2: [C], Stack 3: [D], Stack 4: [F, E], Stack 5: [G] | Exploring action Move B from A to F | New state -> Invalid | Exploring action Move B from A to D | New state -> Invalid | Exploring action Move D from table to G | New state -> Stack 1: [A, B, E], Stack 2: [C], Stack 3: [F], Stack 4: [G, D] | Exploring action Move E from B to table | New state -> Stack 1: [A, B], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Taking action Move D from table to G | Moved to state -> Stack 1: [A, B, E], Stack 2: [C], Stack 3: [F], Stack 4: [G, D] | Plan so far [Move C from D to table | Move D from F to table | Move F from G to table | Move D from table to G] | Exploring action Move E from B to F | New state -> Stack 1: [A, B], Stack 2: [C], Stack 3: [F, E], Stack 4: [G, D] | Exploring action Move E from B to table | New state -> Stack 1: [A, B], Stack 2: [C], Stack 3: [E], Stack 4: [F], Stack 5: [G, D] | Exploring action Move E from B to C | New state -> Stack 1: [A, B], Stack 2: [C, E], Stack 3: [F], Stack 4: [G, D] | Exploring action Move B from A to table | New state -> Invalid | Exploring action Move A from table to F | New state -> Invalid | Taking action Move E from B to table | Moved to state -> Stack 1: [A, B], Stack 2: [C], Stack 3: [E], Stack 4: [F], Stack 5: [G, D] | Plan so far [Move C from D to table | Move D from F to table | Move F from G to table | Move D from table to G | Move E from B to table] | Exploring action Move G from table to E | New state -> Invalid | Exploring action Move B from A to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [E], Stack 5: [F], Stack 6: [G, D] | Exploring action Move B from A to C | New state -> Stack 1: [A], Stack 2: [C, B], Stack 3: [E], Stack 4: [F], Stack 5: [G, D] | Exploring action Move B from A to F | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [E], Stack 4: [F, B], Stack 5: [G, D] | Taking action Move B from A to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [E], Stack 5: [F], Stack 6: [G, D] | Plan so far [Move C from D to table | Move D from F to table | Move F from G to table | Move D from table to G | Move E from B to table | Move B from A to table] | Exploring action Move B from table to A | New state -> Stack 1: [A, B], Stack 2: [C], Stack 3: [E], Stack 4: [F], Stack 5: [G, D] | Exploring action Move G from table to E | New state -> Invalid | Exploring action Move F from table to B | New state -> Stack 1: [A], Stack 2: [B, F], Stack 3: [C], Stack 4: [E], Stack 5: [G, D] | Exploring action Move A from table to E | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [E, A], Stack 4: [F], Stack 5: [G, D] | Taking action Move F from table to B | Moved to state -> Stack 1: [A], Stack 2: [B, F], Stack 3: [C], Stack 4: [E], Stack 5: [G, D] | Plan so far [Move C from D to table | Move D from F to table | Move F from G to table | Move D from table to G | Move E from B to table | Move B from A to table | Move F from table to B] | Exploring action Move B from table to C | New state -> Invalid | Exploring action Move A from table to E | New state -> Stack 1: [B, F], Stack 2: [C], Stack 3: [E, A], Stack 4: [G, D] | Exploring action Move A from table to C | New state -> Stack 1: [B, F], Stack 2: [C, A], Stack 3: [E], Stack 4: [G, D] | Exploring action Move C from table to F | New state -> Stack 1: [A], Stack 2: [B, F, C], Stack 3: [E], Stack 4: [G, D] | Exploring action Move B from table to D | New state -> Invalid | Taking action Move C from table to F | Moved to state -> Stack 1: [A], Stack 2: [B, F, C], Stack 3: [E], Stack 4: [G, D] | Plan so far [Move C from D to table | Move D from F to table | Move F from G to table | Move D from table to G | Move E from B to table | Move B from A to table | Move F from table to B | Move C from table to F] | Exploring action Move G from table to E | New state -> Invalid | Exploring action Move A from table to E | New state -> Stack 1: [B, F, C], Stack 2: [E, A], Stack 3: [G, D] | Exploring action Move A from table to C | New state -> Stack 1: [B, F, C, A], Stack 2: [E], Stack 3: [G, D] | Exploring action Move E from table to C | New state -> Stack 1: [A], Stack 2: [B, F, C, E], Stack 3: [G, D] | Taking action Move E from table to C | Moved to state -> Stack 1: [A], Stack 2: [B, F, C, E], Stack 3: [G, D] | Plan so far [Move C from D to table | Move D from F to table | Move F from G to table | Move D from table to G | Move E from B to table | Move B from A to table | Move F from table to B | Move C from table to F | Move E from table to C] | Exploring action Move C from F to table | New state -> Invalid | Exploring action Move E from C to A | New state -> Stack 1: [A, E], Stack 2: [B, F, C], Stack 3: [G, D] | Exploring action Move F from B to A | New state -> Invalid | Exploring action Move E from C to table | New state -> Stack 1: [A], Stack 2: [B, F, C], Stack 3: [E], Stack 4: [G, D] | Exploring action Move A from table to E | New state -> Stack 1: [B, F, C, E, A], Stack 2: [G, D] | Taking action Move A from table to E | Moved to state -> Stack 1: [B, F, C, E, A], Stack 2: [G, D] | Plan so far [Move C from D to table | Move D from F to table | Move F from G to table | Move D from table to G | Move E from B to table | Move B from A to table | Move F from table to B | Move C from table to F | Move E from table to C | Move A from table to E] | Reached goal state!",
        "system2_states_v1": 59
    },
    {
        "idx": 920,
        "start": [
            [
                "table",
                "C",
                "A",
                "B",
                "G"
            ],
            [
                "table",
                "E",
                "F",
                "D"
            ]
        ],
        "goal": [
            [
                "table",
                "A",
                "F",
                "C",
                "B",
                "D"
            ],
            [
                "table",
                "G",
                "E"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": false,
                "on": "C",
                "under": "B",
                "ontable": false
            },
            "B": {
                "clear": false,
                "on": "A",
                "under": "G",
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": -1,
                "under": "A",
                "ontable": true
            },
            "D": {
                "clear": true,
                "on": "F",
                "under": -1,
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": -1,
                "under": "F",
                "ontable": true
            },
            "F": {
                "clear": false,
                "on": "E",
                "under": "D",
                "ontable": false
            },
            "G": {
                "clear": true,
                "on": "B",
                "under": -1,
                "ontable": false
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": false,
                "on": -1,
                "under": "F",
                "ontable": true
            },
            "B": {
                "clear": false,
                "on": "C",
                "under": "D",
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": "F",
                "under": "B",
                "ontable": false
            },
            "D": {
                "clear": true,
                "on": "B",
                "under": -1,
                "ontable": false
            },
            "E": {
                "clear": true,
                "on": "G",
                "under": -1,
                "ontable": false
            },
            "F": {
                "clear": false,
                "on": "A",
                "under": "C",
                "ontable": false
            },
            "G": {
                "clear": false,
                "on": -1,
                "under": "E",
                "ontable": true
            }
        },
        "plan_len": 10,
        "num_blocks": 7,
        "prompt": "The initial state:\nThe hand is empty.\nC is on the table. A is on C. B is on A. G is on B. G is clear.\nE is on the table. F is on E. D is on F. D is clear.\n\nThe goal is:\nA is on the table. F is on A. C is on F. B is on C. D is on B. D is clear.\nG is on the table. E is on G. E is clear.\n",
        "system1_plan": "Move D from F to table | Move F from E to table | Move G from B to table | Move E from table to G | Move B from A to table | Move A from C to table | Move F from table to A | Move C from table to F | Move B from table to C | Move D from table to B",
        "system1_states": 10,
        "system2_plan_v1": "Moved to state -> Stack 1: [C, A, B, G], Stack 2: [E, F, D] | Plan so far [] | Exploring action Move G from B to table | New state -> Stack 1: [C, A, B], Stack 2: [E, F, D], Stack 3: [G] | Exploring action Move D from F to G | New state -> Stack 1: [C, A, B, G, D], Stack 2: [E, F] | Exploring action Move D from F to table | New state -> Stack 1: [C, A, B, G], Stack 2: [D], Stack 3: [E, F] | Exploring action Move C from table to G | New state -> Invalid | Taking action Move D from F to table | Moved to state -> Stack 1: [C, A, B, G], Stack 2: [D], Stack 3: [E, F] | Plan so far [Move D from F to table] | Exploring action Move G from B to table | New state -> Stack 1: [C, A, B], Stack 2: [D], Stack 3: [E, F], Stack 4: [G] | Exploring action Move G from B to D | New state -> Stack 1: [C, A, B], Stack 2: [D, G], Stack 3: [E, F] | Exploring action Move A from C to F | New state -> Invalid | Exploring action Move B from A to G | New state -> Invalid | Exploring action Move F from E to table | New state -> Stack 1: [C, A, B, G], Stack 2: [D], Stack 3: [E], Stack 4: [F] | Taking action Move G from B to table | Moved to state -> Stack 1: [C, A, B], Stack 2: [E, F, D], Stack 3: [G] | Plan so far [Move G from B to table] | Exploring action Move D from F to B | New state -> Stack 1: [C, A, B, D], Stack 2: [E, F], Stack 3: [G] | Exploring action Move D from F to table | New state -> Stack 1: [C, A, B], Stack 2: [D], Stack 3: [E, F], Stack 4: [G] | Exploring action Move B from A to table | New state -> Stack 1: [B], Stack 2: [C, A], Stack 3: [E, F, D], Stack 4: [G] | Exploring action Move F from E to D | New state -> Invalid | Exploring action Move E from table to B | New state -> Invalid | Taking action Move F from E to table | Moved to state -> Stack 1: [C, A, B, G], Stack 2: [D], Stack 3: [E], Stack 4: [F] | Plan so far [Move D from F to table | Move F from E to table] | Exploring action Move G from B to table | New state -> Stack 1: [C, A, B], Stack 2: [D], Stack 3: [E], Stack 4: [F], Stack 5: [G] | Exploring action Move G from B to E | New state -> Stack 1: [C, A, B], Stack 2: [D], Stack 3: [E, G], Stack 4: [F] | Exploring action Move G from B to F | New state -> Stack 1: [C, A, B], Stack 2: [D], Stack 3: [E], Stack 4: [F, G] | Exploring action Move B from A to D | New state -> Invalid | Taking action Move D from F to table | Moved to state -> Stack 1: [C, A, B], Stack 2: [D], Stack 3: [E, F], Stack 4: [G] | Plan so far [Move G from B to table | Move D from F to table] | Exploring action Move B from A to F | New state -> Stack 1: [C, A], Stack 2: [D], Stack 3: [E, F, B], Stack 4: [G] | Exploring action Move A from C to table | New state -> Invalid | Exploring action Move B from A to table | New state -> Stack 1: [B], Stack 2: [C, A], Stack 3: [D], Stack 4: [E, F], Stack 5: [G] | Exploring action Move F from E to table | New state -> Stack 1: [C, A, B], Stack 2: [D], Stack 3: [E], Stack 4: [F], Stack 5: [G] | Taking action Move D from F to B | Moved to state -> Stack 1: [C, A, B, D], Stack 2: [E, F], Stack 3: [G] | Plan so far [Move G from B to table | Move D from F to B] | Exploring action Move F from E to G | New state -> Stack 1: [C, A, B, D], Stack 2: [E], Stack 3: [G, F] | Exploring action Move F from E to table | New state -> Stack 1: [C, A, B, D], Stack 2: [E], Stack 3: [F], Stack 4: [G] | Exploring action Move C from table to D | New state -> Invalid | Exploring action Move D from B to table | New state -> Stack 1: [C, A, B], Stack 2: [D], Stack 3: [E, F], Stack 4: [G] | Taking action Move G from B to table | Moved to state -> Stack 1: [C, A, B], Stack 2: [D], Stack 3: [E], Stack 4: [F], Stack 5: [G] | Plan so far [Move D from F to table | Move F from E to table | Move G from B to table] | Exploring action Move B from A to E | New state -> Stack 1: [C, A], Stack 2: [D], Stack 3: [E, B], Stack 4: [F], Stack 5: [G] | Exploring action Move E from table to G | New state -> Stack 1: [C, A, B], Stack 2: [D], Stack 3: [F], Stack 4: [G, E] | Exploring action Move B from A to table | New state -> Stack 1: [B], Stack 2: [C, A], Stack 3: [D], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Exploring action Move A from C to D | New state -> Invalid | Exploring action Move A from C to B | New state -> Invalid | Taking action Move E from table to G | Moved to state -> Stack 1: [C, A, B], Stack 2: [D], Stack 3: [F], Stack 4: [G, E] | Plan so far [Move D from F to table | Move F from E to table | Move G from B to table | Move E from table to G] | Exploring action Move A from C to E | New state -> Invalid | Exploring action Move D from table to B | New state -> Stack 1: [C, A, B, D], Stack 2: [F], Stack 3: [G, E] | Exploring action Move C from table to B | New state -> Invalid | Exploring action Move B from A to table | New state -> Stack 1: [B], Stack 2: [C, A], Stack 3: [D], Stack 4: [F], Stack 5: [G, E] | Exploring action Move B from A to D | New state -> Stack 1: [C, A], Stack 2: [D, B], Stack 3: [F], Stack 4: [G, E] | Taking action Move B from A to table | Moved to state -> Stack 1: [B], Stack 2: [C, A], Stack 3: [D], Stack 4: [F], Stack 5: [G, E] | Plan so far [Move D from F to table | Move F from E to table | Move G from B to table | Move E from table to G | Move B from A to table] | Exploring action Move A from C to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [F], Stack 6: [G, E] | Exploring action Move A from C to B | New state -> Stack 1: [B, A], Stack 2: [C], Stack 3: [D], Stack 4: [F], Stack 5: [G, E] | Exploring action Move G from table to A | New state -> Invalid | Exploring action Move C from table to A | New state -> Invalid | Exploring action Move A from C to D | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, A], Stack 4: [F], Stack 5: [G, E] | Taking action Move A from C to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [F], Stack 6: [G, E] | Plan so far [Move D from F to table | Move F from E to table | Move G from B to table | Move E from table to G | Move B from A to table | Move A from C to table] | Exploring action Move D from table to B | New state -> Stack 1: [A], Stack 2: [B, D], Stack 3: [C], Stack 4: [F], Stack 5: [G, E] | Exploring action Move G from table to E | New state -> Invalid | Exploring action Move F from table to A | New state -> Stack 1: [A, F], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [G, E] | Exploring action Move B from table to C | New state -> Stack 1: [A], Stack 2: [C, B], Stack 3: [D], Stack 4: [F], Stack 5: [G, E] | Taking action Move F from table to A | Moved to state -> Stack 1: [A, F], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [G, E] | Plan so far [Move D from F to table | Move F from E to table | Move G from B to table | Move E from table to G | Move B from A to table | Move A from C to table | Move F from table to A] | Exploring action Move C from table to F | New state -> Stack 1: [A, F, C], Stack 2: [B], Stack 3: [D], Stack 4: [G, E] | Exploring action Move G from table to D | New state -> Invalid | Exploring action Move C from table to D | New state -> Stack 1: [A, F], Stack 2: [B], Stack 3: [D, C], Stack 4: [G, E] | Exploring action Move D from table to B | New state -> Stack 1: [A, F], Stack 2: [B, D], Stack 3: [C], Stack 4: [G, E] | Taking action Move C from table to F | Moved to state -> Stack 1: [A, F, C], Stack 2: [B], Stack 3: [D], Stack 4: [G, E] | Plan so far [Move D from F to table | Move F from E to table | Move G from B to table | Move E from table to G | Move B from A to table | Move A from C to table | Move F from table to A | Move C from table to F] | Exploring action Move D from table to B | New state -> Stack 1: [A, F, C], Stack 2: [B, D], Stack 3: [G, E] | Exploring action Move G from table to E | New state -> Invalid | Exploring action Move B from table to D | New state -> Stack 1: [A, F, C], Stack 2: [D, B], Stack 3: [G, E] | Exploring action Move B from table to C | New state -> Stack 1: [A, F, C, B], Stack 2: [D], Stack 3: [G, E] | Exploring action Move G from table to D | New state -> Invalid | Taking action Move B from table to C | Moved to state -> Stack 1: [A, F, C, B], Stack 2: [D], Stack 3: [G, E] | Plan so far [Move D from F to table | Move F from E to table | Move G from B to table | Move E from table to G | Move B from A to table | Move A from C to table | Move F from table to A | Move C from table to F | Move B from table to C] | Exploring action Move B from C to table | New state -> Stack 1: [A, F, C], Stack 2: [B], Stack 3: [D], Stack 4: [G, E] | Exploring action Move E from G to table | New state -> Stack 1: [A, F, C, B], Stack 2: [D], Stack 3: [E], Stack 4: [G] | Exploring action Move D from table to B | New state -> Stack 1: [A, F, C, B, D], Stack 2: [G, E] | Exploring action Move G from table to E | New state -> Invalid | Exploring action Move C from F to D | New state -> Invalid | Taking action Move D from table to B | Moved to state -> Stack 1: [A, F, C, B, D], Stack 2: [G, E] | Plan so far [Move D from F to table | Move F from E to table | Move G from B to table | Move E from table to G | Move B from A to table | Move A from C to table | Move F from table to A | Move C from table to F | Move B from table to C | Move D from table to B] | Reached goal state!",
        "system2_states_v1": 59
    },
    {
        "idx": 705,
        "start": [
            [
                "table",
                "B",
                "E"
            ],
            [
                "table",
                "C",
                "D",
                "A",
                "F"
            ]
        ],
        "goal": [
            [
                "table",
                "B",
                "A",
                "F",
                "E"
            ],
            [
                "table",
                "D",
                "C"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": false,
                "on": "D",
                "under": "F",
                "ontable": false
            },
            "B": {
                "clear": false,
                "on": -1,
                "under": "E",
                "ontable": true
            },
            "C": {
                "clear": false,
                "on": -1,
                "under": "D",
                "ontable": true
            },
            "D": {
                "clear": false,
                "on": "C",
                "under": "A",
                "ontable": false
            },
            "E": {
                "clear": true,
                "on": "B",
                "under": -1,
                "ontable": false
            },
            "F": {
                "clear": true,
                "on": "A",
                "under": -1,
                "ontable": false
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": false,
                "on": "B",
                "under": "F",
                "ontable": false
            },
            "B": {
                "clear": false,
                "on": -1,
                "under": "A",
                "ontable": true
            },
            "C": {
                "clear": true,
                "on": "D",
                "under": -1,
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": -1,
                "under": "C",
                "ontable": true
            },
            "E": {
                "clear": true,
                "on": "F",
                "under": -1,
                "ontable": false
            },
            "F": {
                "clear": false,
                "on": "A",
                "under": "E",
                "ontable": false
            }
        },
        "plan_len": 8,
        "num_blocks": 6,
        "prompt": "The initial state:\nThe hand is empty.\nB is on the table. E is on B. E is clear.\nC is on the table. D is on C. A is on D. F is on A. F is clear.\n\nThe goal is:\nB is on the table. A is on B. F is on A. E is on F. E is clear.\nD is on the table. C is on D. C is clear.\n",
        "system1_plan": "Move F from A to table | Move E from B to F | Move A from D to B | Move D from C to table | Move C from table to D | Move E from F to table | Move F from table to A | Move E from table to F",
        "system1_states": 8,
        "system2_plan_v1": "Moved to state -> Stack 1: [B, E], Stack 2: [C, D, A, F] | Plan so far [] | Exploring action Move A from D to F | New state -> Invalid | Exploring action Move E from B to F | New state -> Stack 1: [B], Stack 2: [C, D, A, F, E] | Exploring action Move E from B to table | New state -> Stack 1: [B], Stack 2: [C, D, A, F], Stack 3: [E] | Exploring action Move F from A to table | New state -> Stack 1: [B, E], Stack 2: [C, D, A], Stack 3: [F] | Exploring action Move D from C to E | New state -> Invalid | Taking action Move E from B to F | Moved to state -> Stack 1: [B], Stack 2: [C, D, A, F, E] | Plan so far [Move E from B to F] | Exploring action Move B from table to E | New state -> Stack 1: [C, D, A, F, E, B] | Exploring action Move E from F to table | New state -> Stack 1: [B], Stack 2: [C, D, A, F], Stack 3: [E] | Exploring action Move A from D to B | New state -> Invalid | Exploring action Move F from A to table | New state -> Invalid | Exploring action Move E from F to B | New state -> Stack 1: [B, E], Stack 2: [C, D, A, F] | Taking action Move F from A to table | Moved to state -> Stack 1: [B, E], Stack 2: [C, D, A], Stack 3: [F] | Plan so far [Move F from A to table] | Exploring action Move D from C to table | New state -> Invalid | Exploring action Move E from B to table | New state -> Stack 1: [B], Stack 2: [C, D, A], Stack 3: [E], Stack 4: [F] | Exploring action Move A from D to table | New state -> Stack 1: [A], Stack 2: [B, E], Stack 3: [C, D], Stack 4: [F] | Exploring action Move E from B to F | New state -> Stack 1: [B], Stack 2: [C, D, A], Stack 3: [F, E] | Taking action Move E from B to table | Moved to state -> Stack 1: [B], Stack 2: [C, D, A, F], Stack 3: [E] | Plan so far [Move E from B to table] | Exploring action Move E from table to F | New state -> Stack 1: [B], Stack 2: [C, D, A, F, E] | Exploring action Move D from C to table | New state -> Invalid | Exploring action Move F from A to table | New state -> Stack 1: [B], Stack 2: [C, D, A], Stack 3: [E], Stack 4: [F] | Exploring action Move F from A to B | New state -> Stack 1: [B, F], Stack 2: [C, D, A], Stack 3: [E] | Taking action Move E from table to F | Moved to state -> Stack 1: [B], Stack 2: [C, D, A, F, E] | Plan so far [Move E from B to table | Move E from table to F] | Taking action Move A from D to table | Moved to state -> Stack 1: [A], Stack 2: [B, E], Stack 3: [C, D], Stack 4: [F] | Plan so far [Move F from A to table | Move A from D to table] | Exploring action Move E from B to F | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, D], Stack 4: [F, E] | Exploring action Move D from C to table | New state -> Stack 1: [A], Stack 2: [B, E], Stack 3: [C], Stack 4: [D], Stack 5: [F] | Exploring action Move E from B to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, D], Stack 4: [E], Stack 5: [F] | Exploring action Move C from table to E | New state -> Invalid | Taking action Move E from B to F | Moved to state -> Stack 1: [B], Stack 2: [C, D, A], Stack 3: [F, E] | Plan so far [Move F from A to table | Move E from B to F] | Exploring action Move D from C to A | New state -> Invalid | Exploring action Move A from D to B | New state -> Stack 1: [B, A], Stack 2: [C, D], Stack 3: [F, E] | Exploring action Move A from D to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, D], Stack 4: [F, E] | Exploring action Move E from F to table | New state -> Stack 1: [B], Stack 2: [C, D, A], Stack 3: [E], Stack 4: [F] | Taking action Move A from D to B | Moved to state -> Stack 1: [B, A], Stack 2: [C, D], Stack 3: [F, E] | Plan so far [Move F from A to table | Move E from B to F | Move A from D to B] | Exploring action Move E from F to table | New state -> Stack 1: [B, A], Stack 2: [C, D], Stack 3: [E], Stack 4: [F] | Exploring action Move D from C to A | New state -> Stack 1: [B, A, D], Stack 2: [C], Stack 3: [F, E] | Exploring action Move B from table to D | New state -> Invalid | Exploring action Move D from C to table | New state -> Stack 1: [B, A], Stack 2: [C], Stack 3: [D], Stack 4: [F, E] | Exploring action Move F from table to D | New state -> Invalid | Taking action Move D from C to table | Moved to state -> Stack 1: [B, A], Stack 2: [C], Stack 3: [D], Stack 4: [F, E] | Plan so far [Move F from A to table | Move E from B to F | Move A from D to B | Move D from C to table] | Exploring action Move A from B to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [F, E] | Exploring action Move B from table to D | New state -> Invalid | Exploring action Move E from F to table | New state -> Stack 1: [B, A], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Exploring action Move B from table to A | New state -> Invalid | Exploring action Move C from table to D | New state -> Stack 1: [B, A], Stack 2: [D, C], Stack 3: [F, E] | Taking action Move C from table to D | Moved to state -> Stack 1: [B, A], Stack 2: [D, C], Stack 3: [F, E] | Plan so far [Move F from A to table | Move E from B to F | Move A from D to B | Move D from C to table | Move C from table to D] | Exploring action Move D from table to E | New state -> Invalid | Exploring action Move E from F to A | New state -> Stack 1: [B, A, E], Stack 2: [D, C], Stack 3: [F] | Exploring action Move E from F to table | New state -> Stack 1: [B, A], Stack 2: [D, C], Stack 3: [E], Stack 4: [F] | Exploring action Move A from B to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, C], Stack 4: [F, E] | Taking action Move E from F to table | Moved to state -> Stack 1: [B, A], Stack 2: [D, C], Stack 3: [E], Stack 4: [F] | Plan so far [Move F from A to table | Move E from B to F | Move A from D to B | Move D from C to table | Move C from table to D | Move E from F to table] | Exploring action Move E from table to F | New state -> Stack 1: [B, A], Stack 2: [D, C], Stack 3: [F, E] | Exploring action Move F from table to E | New state -> Stack 1: [B, A], Stack 2: [D, C], Stack 3: [E, F] | Exploring action Move F from table to A | New state -> Stack 1: [B, A, F], Stack 2: [D, C], Stack 3: [E] | Exploring action Move B from table to E | New state -> Invalid | Taking action Move F from table to A | Moved to state -> Stack 1: [B, A, F], Stack 2: [D, C], Stack 3: [E] | Plan so far [Move F from A to table | Move E from B to F | Move A from D to B | Move D from C to table | Move C from table to D | Move E from F to table | Move F from table to A] | Exploring action Move E from table to F | New state -> Stack 1: [B, A, F, E], Stack 2: [D, C] | Exploring action Move C from D to table | New state -> Stack 1: [B, A, F], Stack 2: [C], Stack 3: [D], Stack 4: [E] | Exploring action Move A from B to F | New state -> Invalid | Exploring action Move F from A to table | New state -> Stack 1: [B, A], Stack 2: [D, C], Stack 3: [E], Stack 4: [F] | Taking action Move E from table to F | Moved to state -> Stack 1: [B, A, F, E], Stack 2: [D, C] | Plan so far [Move F from A to table | Move E from B to F | Move A from D to B | Move D from C to table | Move C from table to D | Move E from F to table | Move F from table to A | Move E from table to F] | Reached goal state!",
        "system2_states_v1": 48
    },
    {
        "idx": 885,
        "start": [
            [
                "table",
                "A",
                "G",
                "F",
                "D",
                "E",
                "C"
            ],
            [
                "table",
                "B"
            ]
        ],
        "goal": [
            [
                "table",
                "B"
            ],
            [
                "table",
                "D",
                "A",
                "E",
                "G",
                "C",
                "F"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": false,
                "on": -1,
                "under": "G",
                "ontable": true
            },
            "B": {
                "clear": true,
                "on": -1,
                "under": -1,
                "ontable": true
            },
            "C": {
                "clear": true,
                "on": "E",
                "under": -1,
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": "F",
                "under": "E",
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": "D",
                "under": "C",
                "ontable": false
            },
            "F": {
                "clear": false,
                "on": "G",
                "under": "D",
                "ontable": false
            },
            "G": {
                "clear": false,
                "on": "A",
                "under": "F",
                "ontable": false
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": false,
                "on": "D",
                "under": "E",
                "ontable": false
            },
            "B": {
                "clear": true,
                "on": -1,
                "under": -1,
                "ontable": true
            },
            "C": {
                "clear": false,
                "on": "G",
                "under": "F",
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": -1,
                "under": "A",
                "ontable": true
            },
            "E": {
                "clear": false,
                "on": "A",
                "under": "G",
                "ontable": false
            },
            "F": {
                "clear": true,
                "on": "C",
                "under": -1,
                "ontable": false
            },
            "G": {
                "clear": false,
                "on": "E",
                "under": "C",
                "ontable": false
            }
        },
        "plan_len": 10,
        "num_blocks": 7,
        "prompt": "The initial state:\nThe hand is empty.\nA is on the table. G is on A. F is on G. D is on F. E is on D. C is on E. C is clear.\nB is on the table. B is clear.\n\nThe goal is:\nB is on the table. B is clear.\nD is on the table. A is on D. E is on A. G is on E. C is on G. F is on C. F is clear.\n",
        "system1_plan": "Move C from E to table | Move E from D to table | Move D from F to table | Move F from G to table | Move G from A to table | Move A from table to D | Move E from table to A | Move G from table to E | Move C from table to G | Move F from table to C",
        "system1_states": 10,
        "system2_plan_v1": "Moved to state -> Stack 1: [A, G, F, D, E, C], Stack 2: [B] | Plan so far [] | Exploring action Move G from A to C | New state -> Invalid | Exploring action Move C from E to B | New state -> Stack 1: [A, G, F, D, E], Stack 2: [B, C] | Exploring action Move C from E to table | New state -> Stack 1: [A, G, F, D, E], Stack 2: [B], Stack 3: [C] | Exploring action Move B from table to C | New state -> Stack 1: [A, G, F, D, E, C, B] | Exploring action Move A from table to B | New state -> Invalid | Taking action Move C from E to table | Moved to state -> Stack 1: [A, G, F, D, E], Stack 2: [B], Stack 3: [C] | Plan so far [Move C from E to table] | Exploring action Move E from D to table | New state -> Stack 1: [A, G, F, D], Stack 2: [B], Stack 3: [C], Stack 4: [E] | Exploring action Move E from D to B | New state -> Stack 1: [A, G, F, D], Stack 2: [B, E], Stack 3: [C] | Exploring action Move F from G to E | New state -> Invalid | Exploring action Move E from D to C | New state -> Stack 1: [A, G, F, D], Stack 2: [B], Stack 3: [C, E] | Exploring action Move A from table to C | New state -> Invalid | Taking action Move E from D to table | Moved to state -> Stack 1: [A, G, F, D], Stack 2: [B], Stack 3: [C], Stack 4: [E] | Plan so far [Move C from E to table | Move E from D to table] | Exploring action Move D from F to C | New state -> Stack 1: [A, G, F], Stack 2: [B], Stack 3: [C, D], Stack 4: [E] | Exploring action Move D from F to table | New state -> Stack 1: [A, G, F], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Exploring action Move D from F to E | New state -> Stack 1: [A, G, F], Stack 2: [B], Stack 3: [C], Stack 4: [E, D] | Exploring action Move G from A to D | New state -> Invalid | Taking action Move D from F to table | Moved to state -> Stack 1: [A, G, F], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Plan so far [Move C from E to table | Move E from D to table | Move D from F to table] | Exploring action Move F from G to table | New state -> Stack 1: [A, G], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Exploring action Move F from G to D | New state -> Stack 1: [A, G], Stack 2: [B], Stack 3: [C], Stack 4: [D, F], Stack 5: [E] | Exploring action Move G from A to D | New state -> Invalid | Exploring action Move F from G to C | New state -> Stack 1: [A, G], Stack 2: [B], Stack 3: [C, F], Stack 4: [D], Stack 5: [E] | Exploring action Move A from table to F | New state -> Invalid | Taking action Move F from G to table | Moved to state -> Stack 1: [A, G], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Plan so far [Move C from E to table | Move E from D to table | Move D from F to table | Move F from G to table] | Exploring action Move G from A to C | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, G], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Exploring action Move G from A to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F], Stack 7: [G] | Exploring action Move A from table to D | New state -> Invalid | Exploring action Move A from table to E | New state -> Invalid | Exploring action Move F from table to C | New state -> Stack 1: [A, G], Stack 2: [B], Stack 3: [C, F], Stack 4: [D], Stack 5: [E] | Taking action Move F from G to C | Moved to state -> Stack 1: [A, G], Stack 2: [B], Stack 3: [C, F], Stack 4: [D], Stack 5: [E] | Plan so far [Move C from E to table | Move E from D to table | Move D from F to table | Move F from G to C] | Exploring action Move G from A to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, F], Stack 4: [D], Stack 5: [E], Stack 6: [G] | Exploring action Move F from C to table | New state -> Stack 1: [A, G], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Exploring action Move G from A to D | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, F], Stack 4: [D, G], Stack 5: [E] | Exploring action Move A from table to B | New state -> Invalid | Exploring action Move A from table to D | New state -> Invalid | Taking action Move G from A to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F], Stack 7: [G] | Plan so far [Move C from E to table | Move E from D to table | Move D from F to table | Move F from G to table | Move G from A to table] | Exploring action Move F from table to C | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, F], Stack 4: [D], Stack 5: [E], Stack 6: [G] | Exploring action Move A from table to C | New state -> Stack 1: [B], Stack 2: [C, A], Stack 3: [D], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Exploring action Move A from table to D | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, A], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Taking action Move G from A to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, F], Stack 4: [D], Stack 5: [E], Stack 6: [G] | Plan so far [Move C from E to table | Move E from D to table | Move D from F to table | Move F from G to C | Move G from A to table] | Exploring action Move C from table to F | New state -> Invalid | Exploring action Move A from table to E | New state -> Stack 1: [B], Stack 2: [C, F], Stack 3: [D], Stack 4: [E, A], Stack 5: [G] | Exploring action Move F from C to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F], Stack 7: [G] | Exploring action Move C from table to A | New state -> Invalid | Exploring action Move A from table to D | New state -> Stack 1: [B], Stack 2: [C, F], Stack 3: [D, A], Stack 4: [E], Stack 5: [G] | Taking action Move A from table to D | Moved to state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, A], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Plan so far [Move C from E to table | Move E from D to table | Move D from F to table | Move F from G to table | Move G from A to table | Move A from table to D] | Exploring action Move C from table to E | New state -> Stack 1: [B], Stack 2: [D, A], Stack 3: [E, C], Stack 4: [F], Stack 5: [G] | Exploring action Move E from table to A | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, A, E], Stack 4: [F], Stack 5: [G] | Exploring action Move D from table to G | New state -> Invalid | Exploring action Move F from table to C | New state -> Stack 1: [B], Stack 2: [C, F], Stack 3: [D, A], Stack 4: [E], Stack 5: [G] | Taking action Move A from table to D | Moved to state -> Stack 1: [B], Stack 2: [C, F], Stack 3: [D, A], Stack 4: [E], Stack 5: [G] | Plan so far [Move C from E to table | Move E from D to table | Move D from F to table | Move F from G to C | Move G from A to table | Move A from table to D] | Exploring action Move C from table to A | New state -> Invalid | Exploring action Move F from C to table | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, A], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Exploring action Move D from table to F | New state -> Invalid | Exploring action Move E from table to G | New state -> Stack 1: [B], Stack 2: [C, F], Stack 3: [D, A], Stack 4: [G, E] | Exploring action Move E from table to A | New state -> Stack 1: [B], Stack 2: [C, F], Stack 3: [D, A, E], Stack 4: [G] | Taking action Move E from table to A | Moved to state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, A, E], Stack 4: [F], Stack 5: [G] | Plan so far [Move C from E to table | Move E from D to table | Move D from F to table | Move F from G to table | Move G from A to table | Move A from table to D | Move E from table to A] | Exploring action Move G from table to E | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, A, E, G], Stack 4: [F] | Exploring action Move C from table to E | New state -> Stack 1: [B], Stack 2: [D, A, E, C], Stack 3: [F], Stack 4: [G] | Exploring action Move D from table to E | New state -> Invalid | Exploring action Move F from table to C | New state -> Stack 1: [B], Stack 2: [C, F], Stack 3: [D, A, E], Stack 4: [G] | Exploring action Move A from D to E | New state -> Invalid | Taking action Move E from table to A | Moved to state -> Stack 1: [B], Stack 2: [C, F], Stack 3: [D, A, E], Stack 4: [G] | Plan so far [Move C from E to table | Move E from D to table | Move D from F to table | Move F from G to C | Move G from A to table | Move A from table to D | Move E from table to A] | Exploring action Move G from table to E | New state -> Stack 1: [B], Stack 2: [C, F], Stack 3: [D, A, E, G] | Exploring action Move E from A to table | New state -> Stack 1: [B], Stack 2: [C, F], Stack 3: [D, A], Stack 4: [E], Stack 5: [G] | Exploring action Move A from D to table | New state -> Invalid | Exploring action Move F from C to table | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, A, E], Stack 4: [F], Stack 5: [G] | Taking action Move G from table to E | Moved to state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, A, E, G], Stack 4: [F] | Plan so far [Move C from E to table | Move E from D to table | Move D from F to table | Move F from G to table | Move G from A to table | Move A from table to D | Move E from table to A | Move G from table to E] | Exploring action Move C from table to G | New state -> Stack 1: [B], Stack 2: [D, A, E, G, C], Stack 3: [F] | Exploring action Move C from table to F | New state -> Stack 1: [B], Stack 2: [D, A, E, G], Stack 3: [F, C] | Exploring action Move E from A to G | New state -> Invalid | Exploring action Move F from table to C | New state -> Stack 1: [B], Stack 2: [C, F], Stack 3: [D, A, E, G] | Taking action Move G from table to E | Moved to state -> Stack 1: [B], Stack 2: [C, F], Stack 3: [D, A, E, G] | Plan so far [Move C from E to table | Move E from D to table | Move D from F to table | Move F from G to C | Move G from A to table | Move A from table to D | Move E from table to A | Move G from table to E] | Exploring action Move F from C to G | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, A, E, G, F] | Exploring action Move A from D to G | New state -> Invalid | Exploring action Move F from C to table | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, A, E, G], Stack 4: [F] | Exploring action Move G from E to table | New state -> Stack 1: [B], Stack 2: [C, F], Stack 3: [D, A, E], Stack 4: [G] | Taking action Move C from table to G | Moved to state -> Stack 1: [B], Stack 2: [D, A, E, G, C], Stack 3: [F] | Plan so far [Move C from E to table | Move E from D to table | Move D from F to table | Move F from G to table | Move G from A to table | Move A from table to D | Move E from table to A | Move G from table to E | Move C from table to G] | Exploring action Move E from A to C | New state -> Invalid | Exploring action Move E from A to F | New state -> Invalid | Exploring action Move F from table to C | New state -> Stack 1: [B], Stack 2: [D, A, E, G, C, F] | Exploring action Move C from G to table | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, A, E, G], Stack 4: [F] | Exploring action Move F from table to B | New state -> Stack 1: [B, F], Stack 2: [D, A, E, G, C] | Taking action Move F from table to C | Moved to state -> Stack 1: [B], Stack 2: [D, A, E, G, C, F] | Plan so far [Move C from E to table | Move E from D to table | Move D from F to table | Move F from G to table | Move G from A to table | Move A from table to D | Move E from table to A | Move G from table to E | Move C from table to G | Move F from table to C] | Reached goal state!",
        "system2_states_v1": 68
    },
    {
        "idx": 610,
        "start": [
            [
                "table",
                "E",
                "A",
                "B",
                "C",
                "D"
            ]
        ],
        "goal": [
            [
                "table",
                "A",
                "D",
                "B"
            ],
            [
                "table",
                "C",
                "E"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": false,
                "on": "E",
                "under": "B",
                "ontable": false
            },
            "B": {
                "clear": false,
                "on": "A",
                "under": "C",
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": "B",
                "under": "D",
                "ontable": false
            },
            "D": {
                "clear": true,
                "on": "C",
                "under": -1,
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": -1,
                "under": "A",
                "ontable": true
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": false,
                "on": -1,
                "under": "D",
                "ontable": true
            },
            "B": {
                "clear": true,
                "on": "D",
                "under": -1,
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": -1,
                "under": "E",
                "ontable": true
            },
            "D": {
                "clear": false,
                "on": "A",
                "under": "B",
                "ontable": false
            },
            "E": {
                "clear": true,
                "on": "C",
                "under": -1,
                "ontable": false
            }
        },
        "plan_len": 7,
        "num_blocks": 5,
        "prompt": "The initial state:\nThe hand is empty.\nE is on the table. A is on E. B is on A. C is on B. D is on C. D is clear.\n\nThe goal is:\nA is on the table. D is on A. B is on D. B is clear.\nC is on the table. E is on C. E is clear.\n",
        "system1_plan": "Move D from C to table | Move C from B to table | Move B from A to table | Move A from E to table | Move E from table to C | Move D from table to A | Move B from table to D",
        "system1_states": 7,
        "system2_plan_v1": "Moved to state -> Stack 1: [E, A, B, C, D] | Plan so far [] | Exploring action Move D from C to table | New state -> Stack 1: [D], Stack 2: [E, A, B, C] | Exploring action Move A from E to D | New state -> Invalid | Taking action Move D from C to table | Moved to state -> Stack 1: [D], Stack 2: [E, A, B, C] | Plan so far [Move D from C to table] | Exploring action Move D from table to C | New state -> Stack 1: [E, A, B, C, D] | Exploring action Move C from B to table | New state -> Stack 1: [C], Stack 2: [D], Stack 3: [E, A, B] | Exploring action Move C from B to D | New state -> Stack 1: [D, C], Stack 2: [E, A, B] | Exploring action Move B from A to C | New state -> Invalid | Taking action Move C from B to table | Moved to state -> Stack 1: [C], Stack 2: [D], Stack 3: [E, A, B] | Plan so far [Move D from C to table | Move C from B to table] | Exploring action Move B from A to C | New state -> Stack 1: [C, B], Stack 2: [D], Stack 3: [E, A] | Exploring action Move E from table to D | New state -> Invalid | Exploring action Move B from A to D | New state -> Stack 1: [C], Stack 2: [D, B], Stack 3: [E, A] | Exploring action Move E from table to C | New state -> Invalid | Exploring action Move B from A to table | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D], Stack 4: [E, A] | Taking action Move B from A to table | Moved to state -> Stack 1: [B], Stack 2: [C], Stack 3: [D], Stack 4: [E, A] | Plan so far [Move D from C to table | Move C from B to table | Move B from A to table] | Exploring action Move B from table to D | New state -> Stack 1: [C], Stack 2: [D, B], Stack 3: [E, A] | Exploring action Move E from table to B | New state -> Invalid | Exploring action Move A from E to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Exploring action Move A from E to C | New state -> Stack 1: [B], Stack 2: [C, A], Stack 3: [D], Stack 4: [E] | Exploring action Move E from table to A | New state -> Invalid | Taking action Move B from A to D | Moved to state -> Stack 1: [C], Stack 2: [D, B], Stack 3: [E, A] | Plan so far [Move D from C to table | Move C from B to table | Move B from A to D] | Exploring action Move B from D to table | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D], Stack 4: [E, A] | Exploring action Move A from E to C | New state -> Stack 1: [C, A], Stack 2: [D, B], Stack 3: [E] | Exploring action Move A from E to table | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, B], Stack 4: [E] | Exploring action Move E from table to C | New state -> Invalid | Taking action Move A from E to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Plan so far [Move D from C to table | Move C from B to table | Move B from A to table | Move A from E to table] | Exploring action Move E from table to C | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, E], Stack 4: [D] | Exploring action Move D from table to A | New state -> Stack 1: [A, D], Stack 2: [B], Stack 3: [C], Stack 4: [E] | Exploring action Move B from table to D | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, B], Stack 4: [E] | Taking action Move E from table to C | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, E], Stack 4: [D] | Plan so far [Move D from C to table | Move C from B to table | Move B from A to table | Move A from E to table | Move E from table to C] | Exploring action Move C from table to B | New state -> Invalid | Exploring action Move A from table to B | New state -> Stack 1: [B, A], Stack 2: [C, E], Stack 3: [D] | Exploring action Move B from table to D | New state -> Stack 1: [A], Stack 2: [C, E], Stack 3: [D, B] | Exploring action Move D from table to A | New state -> Stack 1: [A, D], Stack 2: [B], Stack 3: [C, E] | Taking action Move D from table to A | Moved to state -> Stack 1: [A, D], Stack 2: [B], Stack 3: [C, E] | Plan so far [Move D from C to table | Move C from B to table | Move B from A to table | Move A from E to table | Move E from table to C | Move D from table to A] | Exploring action Move E from C to table | New state -> Stack 1: [A, D], Stack 2: [B], Stack 3: [C], Stack 4: [E] | Exploring action Move C from table to E | New state -> Invalid | Exploring action Move D from A to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, E], Stack 4: [D] | Exploring action Move C from table to B | New state -> Invalid | Exploring action Move B from table to D | New state -> Stack 1: [A, D, B], Stack 2: [C, E] | Taking action Move B from table to D | Moved to state -> Stack 1: [A, D, B], Stack 2: [C, E] | Plan so far [Move D from C to table | Move C from B to table | Move B from A to table | Move A from E to table | Move E from table to C | Move D from table to A | Move B from table to D] | Reached goal state!",
        "system2_states_v1": 32
    },
    {
        "idx": 877,
        "start": [
            [
                "table",
                "B",
                "E",
                "D"
            ],
            [
                "table",
                "G",
                "F",
                "C",
                "A"
            ]
        ],
        "goal": [
            [
                "table",
                "D",
                "G",
                "C",
                "A",
                "B",
                "F"
            ],
            [
                "table",
                "E"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": true,
                "on": "C",
                "under": -1,
                "ontable": false
            },
            "B": {
                "clear": false,
                "on": -1,
                "under": "E",
                "ontable": true
            },
            "C": {
                "clear": false,
                "on": "F",
                "under": "A",
                "ontable": false
            },
            "D": {
                "clear": true,
                "on": "E",
                "under": -1,
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": "B",
                "under": "D",
                "ontable": false
            },
            "F": {
                "clear": false,
                "on": "G",
                "under": "C",
                "ontable": false
            },
            "G": {
                "clear": false,
                "on": -1,
                "under": "F",
                "ontable": true
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": false,
                "on": "C",
                "under": "B",
                "ontable": false
            },
            "B": {
                "clear": false,
                "on": "A",
                "under": "F",
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": "G",
                "under": "A",
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": -1,
                "under": "G",
                "ontable": true
            },
            "E": {
                "clear": true,
                "on": -1,
                "under": -1,
                "ontable": true
            },
            "F": {
                "clear": true,
                "on": "B",
                "under": -1,
                "ontable": false
            },
            "G": {
                "clear": false,
                "on": "D",
                "under": "C",
                "ontable": false
            }
        },
        "plan_len": 10,
        "num_blocks": 7,
        "prompt": "The initial state:\nThe hand is empty.\nB is on the table. E is on B. D is on E. D is clear.\nG is on the table. F is on G. C is on F. A is on C. A is clear.\n\nThe goal is:\nD is on the table. G is on D. C is on G. A is on C. B is on A. F is on B. F is clear.\nE is on the table. E is clear.\n",
        "system1_plan": "Move D from E to table | Move E from B to table | Move A from C to table | Move C from F to table | Move F from G to table | Move G from table to D | Move C from table to G | Move A from table to C | Move B from table to A | Move F from table to B",
        "system1_states": 10,
        "system2_plan_v1": "Moved to state -> Stack 1: [B, E, D], Stack 2: [G, F, C, A] | Plan so far [] | Exploring action Move G from table to A | New state -> Invalid | Exploring action Move A from C to D | New state -> Stack 1: [B, E, D, A], Stack 2: [G, F, C] | Exploring action Move B from table to D | New state -> Invalid | Exploring action Move D from E to table | New state -> Stack 1: [B, E], Stack 2: [D], Stack 3: [G, F, C, A] | Exploring action Move A from C to table | New state -> Stack 1: [A], Stack 2: [B, E, D], Stack 3: [G, F, C] | Taking action Move A from C to table | Moved to state -> Stack 1: [A], Stack 2: [B, E, D], Stack 3: [G, F, C] | Plan so far [Move A from C to table] | Exploring action Move D from E to table | New state -> Stack 1: [A], Stack 2: [B, E], Stack 3: [D], Stack 4: [G, F, C] | Exploring action Move D from E to A | New state -> Stack 1: [A, D], Stack 2: [B, E], Stack 3: [G, F, C] | Exploring action Move B from table to C | New state -> Invalid | Exploring action Move C from F to table | New state -> Stack 1: [A], Stack 2: [B, E, D], Stack 3: [C], Stack 4: [G, F] | Taking action Move D from E to table | Moved to state -> Stack 1: [B, E], Stack 2: [D], Stack 3: [G, F, C, A] | Plan so far [Move D from E to table] | Exploring action Move A from C to table | New state -> Stack 1: [A], Stack 2: [B, E], Stack 3: [D], Stack 4: [G, F, C] | Exploring action Move E from B to table | New state -> Stack 1: [B], Stack 2: [D], Stack 3: [E], Stack 4: [G, F, C, A] | Exploring action Move C from F to A | New state -> Invalid | Exploring action Move E from B to A | New state -> Stack 1: [B], Stack 2: [D], Stack 3: [G, F, C, A, E] | Taking action Move E from B to table | Moved to state -> Stack 1: [B], Stack 2: [D], Stack 3: [E], Stack 4: [G, F, C, A] | Plan so far [Move D from E to table | Move E from B to table] | Exploring action Move A from C to D | New state -> Stack 1: [B], Stack 2: [D, A], Stack 3: [E], Stack 4: [G, F, C] | Exploring action Move B from table to A | New state -> Stack 1: [D], Stack 2: [E], Stack 3: [G, F, C, A, B] | Exploring action Move A from C to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D], Stack 4: [E], Stack 5: [G, F, C] | Exploring action Move F from G to D | New state -> Invalid | Taking action Move A from C to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [D], Stack 4: [E], Stack 5: [G, F, C] | Plan so far [Move D from E to table | Move E from B to table | Move A from C to table] | Exploring action Move C from F to D | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, C], Stack 4: [E], Stack 5: [G, F] | Exploring action Move C from F to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [G, F] | Exploring action Move C from F to A | New state -> Stack 1: [A, C], Stack 2: [B], Stack 3: [D], Stack 4: [E], Stack 5: [G, F] | Exploring action Move G from table to C | New state -> Invalid | Taking action Move B from table to A | Moved to state -> Stack 1: [D], Stack 2: [E], Stack 3: [G, F, C, A, B] | Plan so far [Move D from E to table | Move E from B to table | Move B from table to A] | Exploring action Move B from A to table | New state -> Stack 1: [B], Stack 2: [D], Stack 3: [E], Stack 4: [G, F, C, A] | Exploring action Move E from table to B | New state -> Stack 1: [D], Stack 2: [G, F, C, A, B, E] | Exploring action Move F from G to E | New state -> Invalid | Exploring action Move D from table to B | New state -> Stack 1: [E], Stack 2: [G, F, C, A, B, D] | Taking action Move C from F to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [G, F] | Plan so far [Move D from E to table | Move E from B to table | Move A from C to table | Move C from F to table] | Exploring action Move F from G to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F], Stack 7: [G] | Exploring action Move F from G to A | New state -> Stack 1: [A, F], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [G] | Exploring action Move F from G to B | New state -> Stack 1: [A], Stack 2: [B, F], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [G] | Exploring action Move G from table to D | New state -> Invalid | Exploring action Move G from table to B | New state -> Invalid | Taking action Move F from G to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F], Stack 7: [G] | Plan so far [Move D from E to table | Move E from B to table | Move A from C to table | Move C from F to table | Move F from G to table] | Exploring action Move A from table to D | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, A], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Exploring action Move F from table to B | New state -> Stack 1: [A], Stack 2: [B, F], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [G] | Exploring action Move G from table to D | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D, G], Stack 5: [E], Stack 6: [F] | Taking action Move F from G to B | Moved to state -> Stack 1: [A], Stack 2: [B, F], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [G] | Plan so far [Move D from E to table | Move E from B to table | Move A from C to table | Move C from F to table | Move F from G to B] | Exploring action Move B from table to A | New state -> Invalid | Exploring action Move G from table to D | New state -> Stack 1: [A], Stack 2: [B, F], Stack 3: [C], Stack 4: [D, G], Stack 5: [E] | Exploring action Move F from B to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F], Stack 7: [G] | Exploring action Move C from table to A | New state -> Stack 1: [A, C], Stack 2: [B, F], Stack 3: [D], Stack 4: [E], Stack 5: [G] | Taking action Move G from table to D | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D, G], Stack 5: [E], Stack 6: [F] | Plan so far [Move D from E to table | Move E from B to table | Move A from C to table | Move C from F to table | Move F from G to table | Move G from table to D] | Exploring action Move A from table to B | New state -> Stack 1: [B, A], Stack 2: [C], Stack 3: [D, G], Stack 4: [E], Stack 5: [F] | Exploring action Move C from table to G | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, G, C], Stack 4: [E], Stack 5: [F] | Exploring action Move D from table to E | New state -> Invalid | Exploring action Move F from table to B | New state -> Stack 1: [A], Stack 2: [B, F], Stack 3: [C], Stack 4: [D, G], Stack 5: [E] | Taking action Move G from table to D | Moved to state -> Stack 1: [A], Stack 2: [B, F], Stack 3: [C], Stack 4: [D, G], Stack 5: [E] | Plan so far [Move D from E to table | Move E from B to table | Move A from C to table | Move C from F to table | Move F from G to B | Move G from table to D] | Exploring action Move B from table to E | New state -> Invalid | Exploring action Move B from table to A | New state -> Invalid | Exploring action Move F from B to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D, G], Stack 5: [E], Stack 6: [F] | Exploring action Move F from B to A | New state -> Stack 1: [A, F], Stack 2: [B], Stack 3: [C], Stack 4: [D, G], Stack 5: [E] | Exploring action Move C from table to G | New state -> Stack 1: [A], Stack 2: [B, F], Stack 3: [D, G, C], Stack 4: [E] | Taking action Move C from table to G | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, G, C], Stack 4: [E], Stack 5: [F] | Plan so far [Move D from E to table | Move E from B to table | Move A from C to table | Move C from F to table | Move F from G to table | Move G from table to D | Move C from table to G] | Exploring action Move B from table to C | New state -> Stack 1: [A], Stack 2: [D, G, C, B], Stack 3: [E], Stack 4: [F] | Exploring action Move F from table to B | New state -> Stack 1: [A], Stack 2: [B, F], Stack 3: [D, G, C], Stack 4: [E] | Exploring action Move A from table to C | New state -> Stack 1: [B], Stack 2: [D, G, C, A], Stack 3: [E], Stack 4: [F] | Exploring action Move D from table to C | New state -> Invalid | Exploring action Move D from table to F | New state -> Invalid | Taking action Move C from table to G | Moved to state -> Stack 1: [A], Stack 2: [B, F], Stack 3: [D, G, C], Stack 4: [E] | Plan so far [Move D from E to table | Move E from B to table | Move A from C to table | Move C from F to table | Move F from G to B | Move G from table to D | Move C from table to G] | Exploring action Move G from D to C | New state -> Invalid | Exploring action Move G from D to F | New state -> Invalid | Exploring action Move F from B to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, G, C], Stack 4: [E], Stack 5: [F] | Exploring action Move A from table to C | New state -> Stack 1: [B, F], Stack 2: [D, G, C, A], Stack 3: [E] | Exploring action Move F from B to A | New state -> Stack 1: [A, F], Stack 2: [B], Stack 3: [D, G, C], Stack 4: [E] | Taking action Move A from table to C | Moved to state -> Stack 1: [B], Stack 2: [D, G, C, A], Stack 3: [E], Stack 4: [F] | Plan so far [Move D from E to table | Move E from B to table | Move A from C to table | Move C from F to table | Move F from G to table | Move G from table to D | Move C from table to G | Move A from table to C] | Exploring action Move F from table to B | New state -> Stack 1: [B, F], Stack 2: [D, G, C, A], Stack 3: [E] | Exploring action Move D from table to E | New state -> Invalid | Exploring action Move B from table to F | New state -> Stack 1: [D, G, C, A], Stack 2: [E], Stack 3: [F, B] | Exploring action Move G from D to E | New state -> Invalid | Exploring action Move B from table to A | New state -> Stack 1: [D, G, C, A, B], Stack 2: [E], Stack 3: [F] | Taking action Move A from table to C | Moved to state -> Stack 1: [B, F], Stack 2: [D, G, C, A], Stack 3: [E] | Plan so far [Move D from E to table | Move E from B to table | Move A from C to table | Move C from F to table | Move F from G to B | Move G from table to D | Move C from table to G | Move A from table to C] | Exploring action Move F from B to A | New state -> Stack 1: [B], Stack 2: [D, G, C, A, F], Stack 3: [E] | Exploring action Move A from C to table | New state -> Stack 1: [A], Stack 2: [B, F], Stack 3: [D, G, C], Stack 4: [E] | Exploring action Move F from B to table | New state -> Stack 1: [B], Stack 2: [D, G, C, A], Stack 3: [E], Stack 4: [F] | Exploring action Move D from table to A | New state -> Invalid | Exploring action Move C from G to A | New state -> Invalid | Taking action Move B from table to A | Moved to state -> Stack 1: [D, G, C, A, B], Stack 2: [E], Stack 3: [F] | Plan so far [Move D from E to table | Move E from B to table | Move A from C to table | Move C from F to table | Move F from G to table | Move G from table to D | Move C from table to G | Move A from table to C | Move B from table to A] | Exploring action Move B from A to F | New state -> Stack 1: [D, G, C, A], Stack 2: [E], Stack 3: [F, B] | Exploring action Move F from table to B | New state -> Stack 1: [D, G, C, A, B, F], Stack 2: [E] | Exploring action Move B from A to table | New state -> Stack 1: [B], Stack 2: [D, G, C, A], Stack 3: [E], Stack 4: [F] | Exploring action Move A from C to E | New state -> Invalid | Taking action Move F from table to B | Moved to state -> Stack 1: [D, G, C, A, B, F], Stack 2: [E] | Plan so far [Move D from E to table | Move E from B to table | Move A from C to table | Move C from F to table | Move F from G to table | Move G from table to D | Move C from table to G | Move A from table to C | Move B from table to A | Move F from table to B] | Reached goal state!",
        "system2_states_v1": 70
    },
    {
        "idx": 622,
        "start": [
            [
                "table",
                "C"
            ],
            [
                "table",
                "E",
                "B",
                "D",
                "A"
            ]
        ],
        "goal": [
            [
                "table",
                "A",
                "C",
                "E",
                "D",
                "B"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": true,
                "on": "D",
                "under": -1,
                "ontable": false
            },
            "B": {
                "clear": false,
                "on": "E",
                "under": "D",
                "ontable": false
            },
            "C": {
                "clear": true,
                "on": -1,
                "under": -1,
                "ontable": true
            },
            "D": {
                "clear": false,
                "on": "B",
                "under": "A",
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": -1,
                "under": "B",
                "ontable": true
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": false,
                "on": -1,
                "under": "C",
                "ontable": true
            },
            "B": {
                "clear": true,
                "on": "D",
                "under": -1,
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": "A",
                "under": "E",
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": "E",
                "under": "B",
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": "C",
                "under": "D",
                "ontable": false
            }
        },
        "plan_len": 7,
        "num_blocks": 5,
        "prompt": "The initial state:\nThe hand is empty.\nC is on the table. C is clear.\nE is on the table. B is on E. D is on B. A is on D. A is clear.\n\nThe goal is:\nA is on the table. C is on A. E is on C. D is on E. B is on D. B is clear.\n",
        "system1_plan": "Move A from D to table | Move C from table to A | Move D from B to table | Move B from E to table | Move E from table to C | Move D from table to E | Move B from table to D",
        "system1_states": 7,
        "system2_plan_v1": "Moved to state -> Stack 1: [C], Stack 2: [E, B, D, A] | Plan so far [] | Exploring action Move B from E to A | New state -> Invalid | Exploring action Move C from table to A | New state -> Stack 1: [E, B, D, A, C] | Exploring action Move D from B to C | New state -> Invalid | Exploring action Move A from D to table | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [E, B, D] | Exploring action Move A from D to C | New state -> Stack 1: [C, A], Stack 2: [E, B, D] | Taking action Move A from D to table | Moved to state -> Stack 1: [A], Stack 2: [C], Stack 3: [E, B, D] | Plan so far [Move A from D to table] | Exploring action Move E from table to C | New state -> Invalid | Exploring action Move B from E to table | New state -> Invalid | Exploring action Move D from B to A | New state -> Stack 1: [A, D], Stack 2: [C], Stack 3: [E, B] | Exploring action Move C from table to A | New state -> Stack 1: [A, C], Stack 2: [E, B, D] | Exploring action Move D from B to table | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D], Stack 4: [E, B] | Taking action Move C from table to A | Moved to state -> Stack 1: [A, C], Stack 2: [E, B, D] | Plan so far [Move A from D to table | Move C from table to A] | Exploring action Move C from A to table | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [E, B, D] | Exploring action Move D from B to table | New state -> Stack 1: [A, C], Stack 2: [D], Stack 3: [E, B] | Exploring action Move D from B to C | New state -> Stack 1: [A, C, D], Stack 2: [E, B] | Exploring action Move E from table to C | New state -> Invalid | Taking action Move D from B to table | Moved to state -> Stack 1: [A], Stack 2: [C], Stack 3: [D], Stack 4: [E, B] | Plan so far [Move A from D to table | Move D from B to table] | Exploring action Move E from table to C | New state -> Invalid | Exploring action Move B from E to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Exploring action Move C from table to A | New state -> Stack 1: [A, C], Stack 2: [D], Stack 3: [E, B] | Exploring action Move B from E to D | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, B], Stack 4: [E] | Taking action Move D from B to table | Moved to state -> Stack 1: [A, C], Stack 2: [D], Stack 3: [E, B] | Plan so far [Move A from D to table | Move C from table to A | Move D from B to table] | Exploring action Move B from E to table | New state -> Stack 1: [A, C], Stack 2: [B], Stack 3: [D], Stack 4: [E] | Exploring action Move E from table to B | New state -> Invalid | Exploring action Move B from E to C | New state -> Stack 1: [A, C, B], Stack 2: [D], Stack 3: [E] | Exploring action Move B from E to D | New state -> Stack 1: [A, C], Stack 2: [D, B], Stack 3: [E] | Exploring action Move E from table to C | New state -> Invalid | Taking action Move B from E to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Plan so far [Move A from D to table | Move D from B to table | Move B from E to table] | Exploring action Move B from table to D | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, B], Stack 4: [E] | Exploring action Move C from table to A | New state -> Stack 1: [A, C], Stack 2: [B], Stack 3: [D], Stack 4: [E] | Exploring action Move A from table to B | New state -> Stack 1: [B, A], Stack 2: [C], Stack 3: [D], Stack 4: [E] | Taking action Move B from E to table | Moved to state -> Stack 1: [A, C], Stack 2: [B], Stack 3: [D], Stack 4: [E] | Plan so far [Move A from D to table | Move C from table to A | Move D from B to table | Move B from E to table] | Exploring action Move A from table to B | New state -> Invalid | Exploring action Move B from table to E | New state -> Stack 1: [A, C], Stack 2: [D], Stack 3: [E, B] | Exploring action Move E from table to C | New state -> Stack 1: [A, C, E], Stack 2: [B], Stack 3: [D] | Exploring action Move B from table to D | New state -> Stack 1: [A, C], Stack 2: [D, B], Stack 3: [E] | Taking action Move B from E to D | Moved to state -> Stack 1: [A, C], Stack 2: [D, B], Stack 3: [E] | Plan so far [Move A from D to table | Move C from table to A | Move D from B to table | Move B from E to D] | Exploring action Move B from D to table | New state -> Stack 1: [A, C], Stack 2: [B], Stack 3: [D], Stack 4: [E] | Exploring action Move E from table to C | New state -> Stack 1: [A, C, E], Stack 2: [D, B] | Exploring action Move D from table to C | New state -> Invalid | Exploring action Move B from D to E | New state -> Stack 1: [A, C], Stack 2: [D], Stack 3: [E, B] | Taking action Move E from table to C | Moved to state -> Stack 1: [A, C, E], Stack 2: [B], Stack 3: [D] | Plan so far [Move A from D to table | Move C from table to A | Move D from B to table | Move B from E to table | Move E from table to C] | Exploring action Move D from table to E | New state -> Stack 1: [A, C, E, D], Stack 2: [B] | Exploring action Move B from table to D | New state -> Stack 1: [A, C, E], Stack 2: [D, B] | Exploring action Move C from A to B | New state -> Invalid | Exploring action Move D from table to B | New state -> Stack 1: [A, C, E], Stack 2: [B, D] | Exploring action Move A from table to E | New state -> Invalid | Taking action Move B from E to D | Moved to state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, B], Stack 4: [E] | Plan so far [Move A from D to table | Move D from B to table | Move B from E to D] | Exploring action Move B from D to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Exploring action Move A from table to E | New state -> Stack 1: [C], Stack 2: [D, B], Stack 3: [E, A] | Exploring action Move D from table to C | New state -> Invalid | Exploring action Move C from table to A | New state -> Stack 1: [A, C], Stack 2: [D, B], Stack 3: [E] | Taking action Move C from table to A | Moved to state -> Stack 1: [A, C], Stack 2: [D], Stack 3: [E, B] | Plan so far [Move A from D to table | Move D from B to table | Move C from table to A] | Taking action Move C from table to A | Moved to state -> Stack 1: [A, C], Stack 2: [B], Stack 3: [D], Stack 4: [E] | Plan so far [Move A from D to table | Move D from B to table | Move B from E to table | Move C from table to A] | Taking action Move C from table to A | Moved to state -> Stack 1: [A, C], Stack 2: [D, B], Stack 3: [E] | Plan so far [Move A from D to table | Move D from B to table | Move B from E to D | Move C from table to A] | Taking action Move D from table to E | Moved to state -> Stack 1: [A, C, E, D], Stack 2: [B] | Plan so far [Move A from D to table | Move C from table to A | Move D from B to table | Move B from E to table | Move E from table to C | Move D from table to E] | Exploring action Move E from C to D | New state -> Invalid | Exploring action Move D from E to B | New state -> Stack 1: [A, C, E], Stack 2: [B, D] | Exploring action Move D from E to table | New state -> Stack 1: [A, C, E], Stack 2: [B], Stack 3: [D] | Exploring action Move C from A to D | New state -> Invalid | Exploring action Move B from table to D | New state -> Stack 1: [A, C, E, D, B] | Taking action Move B from table to D | Moved to state -> Stack 1: [A, C, E, D, B] | Plan so far [Move A from D to table | Move C from table to A | Move D from B to table | Move B from E to table | Move E from table to C | Move D from table to E | Move B from table to D] | Reached goal state!",
        "system2_states_v1": 48
    },
    {
        "idx": 790,
        "start": [
            [
                "table",
                "C",
                "A",
                "D",
                "E",
                "F",
                "B"
            ]
        ],
        "goal": [
            [
                "table",
                "A",
                "B",
                "D",
                "C"
            ],
            [
                "table",
                "E",
                "F"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": false,
                "on": "C",
                "under": "D",
                "ontable": false
            },
            "B": {
                "clear": true,
                "on": "F",
                "under": -1,
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": -1,
                "under": "A",
                "ontable": true
            },
            "D": {
                "clear": false,
                "on": "A",
                "under": "E",
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": "D",
                "under": "F",
                "ontable": false
            },
            "F": {
                "clear": false,
                "on": "E",
                "under": "B",
                "ontable": false
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": false,
                "on": -1,
                "under": "B",
                "ontable": true
            },
            "B": {
                "clear": false,
                "on": "A",
                "under": "D",
                "ontable": false
            },
            "C": {
                "clear": true,
                "on": "D",
                "under": -1,
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": "B",
                "under": "C",
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": -1,
                "under": "F",
                "ontable": true
            },
            "F": {
                "clear": true,
                "on": "E",
                "under": -1,
                "ontable": false
            }
        },
        "plan_len": 9,
        "num_blocks": 6,
        "prompt": "The initial state:\nThe hand is empty.\nC is on the table. A is on C. D is on A. E is on D. F is on E. B is on F. B is clear.\n\nThe goal is:\nA is on the table. B is on A. D is on B. C is on D. C is clear.\nE is on the table. F is on E. F is clear.\n",
        "system1_plan": "Move B from F to table | Move F from E to table | Move E from D to table | Move F from table to E | Move D from A to table | Move A from C to table | Move B from table to A | Move D from table to B | Move C from table to D",
        "system1_states": 9,
        "system2_plan_v1": "Moved to state -> Stack 1: [C, A, D, E, F, B] | Plan so far [] | Exploring action Move D from A to B | New state -> Invalid | Exploring action Move B from F to table | New state -> Stack 1: [B], Stack 2: [C, A, D, E, F] | Taking action Move B from F to table | Moved to state -> Stack 1: [B], Stack 2: [C, A, D, E, F] | Plan so far [Move B from F to table] | Exploring action Move F from E to B | New state -> Stack 1: [B, F], Stack 2: [C, A, D, E] | Exploring action Move B from table to F | New state -> Stack 1: [C, A, D, E, F, B] | Exploring action Move F from E to table | New state -> Stack 1: [B], Stack 2: [C, A, D, E], Stack 3: [F] | Exploring action Move A from C to B | New state -> Invalid | Taking action Move F from E to table | Moved to state -> Stack 1: [B], Stack 2: [C, A, D, E], Stack 3: [F] | Plan so far [Move B from F to table | Move F from E to table] | Exploring action Move C from table to F | New state -> Invalid | Exploring action Move F from table to E | New state -> Stack 1: [B], Stack 2: [C, A, D, E, F] | Exploring action Move E from D to table | New state -> Stack 1: [B], Stack 2: [C, A, D], Stack 3: [E], Stack 4: [F] | Exploring action Move E from D to B | New state -> Stack 1: [B, E], Stack 2: [C, A, D], Stack 3: [F] | Taking action Move E from D to table | Moved to state -> Stack 1: [B], Stack 2: [C, A, D], Stack 3: [E], Stack 4: [F] | Plan so far [Move B from F to table | Move F from E to table | Move E from D to table] | Exploring action Move A from C to table | New state -> Invalid | Exploring action Move F from table to E | New state -> Stack 1: [B], Stack 2: [C, A, D], Stack 3: [E, F] | Exploring action Move D from A to table | New state -> Stack 1: [B], Stack 2: [C, A], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Exploring action Move D from A to F | New state -> Stack 1: [B], Stack 2: [C, A], Stack 3: [E], Stack 4: [F, D] | Taking action Move F from table to E | Moved to state -> Stack 1: [B], Stack 2: [C, A, D], Stack 3: [E, F] | Plan so far [Move B from F to table | Move F from E to table | Move E from D to table | Move F from table to E] | Exploring action Move D from A to B | New state -> Stack 1: [B, D], Stack 2: [C, A], Stack 3: [E, F] | Exploring action Move A from C to B | New state -> Invalid | Exploring action Move D from A to table | New state -> Stack 1: [B], Stack 2: [C, A], Stack 3: [D], Stack 4: [E, F] | Exploring action Move B from table to D | New state -> Stack 1: [C, A, D, B], Stack 2: [E, F] | Exploring action Move A from C to D | New state -> Invalid | Taking action Move D from A to table | Moved to state -> Stack 1: [B], Stack 2: [C, A], Stack 3: [D], Stack 4: [E, F] | Plan so far [Move B from F to table | Move F from E to table | Move E from D to table | Move F from table to E | Move D from A to table] | Exploring action Move A from C to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E, F] | Exploring action Move A from C to D | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, A], Stack 4: [E, F] | Exploring action Move C from table to B | New state -> Invalid | Exploring action Move A from C to B | New state -> Stack 1: [B, A], Stack 2: [C], Stack 3: [D], Stack 4: [E, F] | Taking action Move A from C to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E, F] | Plan so far [Move B from F to table | Move F from E to table | Move E from D to table | Move F from table to E | Move D from A to table | Move A from C to table] | Exploring action Move A from table to D | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, A], Stack 4: [E, F] | Exploring action Move C from table to D | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, C], Stack 4: [E, F] | Exploring action Move B from table to A | New state -> Stack 1: [A, B], Stack 2: [C], Stack 3: [D], Stack 4: [E, F] | Exploring action Move E from table to C | New state -> Invalid | Taking action Move B from table to A | Moved to state -> Stack 1: [A, B], Stack 2: [C], Stack 3: [D], Stack 4: [E, F] | Plan so far [Move B from F to table | Move F from E to table | Move E from D to table | Move F from table to E | Move D from A to table | Move A from C to table | Move B from table to A] | Exploring action Move B from A to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E, F] | Exploring action Move E from table to F | New state -> Invalid | Exploring action Move C from table to D | New state -> Stack 1: [A, B], Stack 2: [D, C], Stack 3: [E, F] | Exploring action Move E from table to D | New state -> Invalid | Exploring action Move D from table to B | New state -> Stack 1: [A, B, D], Stack 2: [C], Stack 3: [E, F] | Taking action Move D from table to B | Moved to state -> Stack 1: [A, B, D], Stack 2: [C], Stack 3: [E, F] | Plan so far [Move B from F to table | Move F from E to table | Move E from D to table | Move F from table to E | Move D from A to table | Move A from C to table | Move B from table to A | Move D from table to B] | Exploring action Move B from A to F | New state -> Invalid | Exploring action Move C from table to D | New state -> Stack 1: [A, B, D, C], Stack 2: [E, F] | Exploring action Move F from E to table | New state -> Stack 1: [A, B, D], Stack 2: [C], Stack 3: [E], Stack 4: [F] | Exploring action Move D from B to table | New state -> Stack 1: [A, B], Stack 2: [C], Stack 3: [D], Stack 4: [E, F] | Taking action Move C from table to D | Moved to state -> Stack 1: [A, B, D, C], Stack 2: [E, F] | Plan so far [Move B from F to table | Move F from E to table | Move E from D to table | Move F from table to E | Move D from A to table | Move A from C to table | Move B from table to A | Move D from table to B | Move C from table to D] | Reached goal state!",
        "system2_states_v1": 36
    },
    {
        "idx": 679,
        "start": [
            [
                "table",
                "C",
                "B",
                "E",
                "A",
                "D",
                "F"
            ]
        ],
        "goal": [
            [
                "table",
                "A",
                "F",
                "E",
                "B"
            ],
            [
                "table",
                "C"
            ],
            [
                "table",
                "D"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": false,
                "on": "E",
                "under": "D",
                "ontable": false
            },
            "B": {
                "clear": false,
                "on": "C",
                "under": "E",
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": -1,
                "under": "B",
                "ontable": true
            },
            "D": {
                "clear": false,
                "on": "A",
                "under": "F",
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": "B",
                "under": "A",
                "ontable": false
            },
            "F": {
                "clear": true,
                "on": "D",
                "under": -1,
                "ontable": false
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": false,
                "on": -1,
                "under": "F",
                "ontable": true
            },
            "B": {
                "clear": true,
                "on": "E",
                "under": -1,
                "ontable": false
            },
            "C": {
                "clear": true,
                "on": -1,
                "under": -1,
                "ontable": true
            },
            "D": {
                "clear": true,
                "on": -1,
                "under": -1,
                "ontable": true
            },
            "E": {
                "clear": false,
                "on": "F",
                "under": "B",
                "ontable": false
            },
            "F": {
                "clear": false,
                "on": "A",
                "under": "E",
                "ontable": false
            }
        },
        "plan_len": 8,
        "num_blocks": 6,
        "prompt": "The initial state:\nThe hand is empty.\nC is on the table. B is on C. E is on B. A is on E. D is on A. F is on D. F is clear.\n\nThe goal is:\nA is on the table. F is on A. E is on F. B is on E. B is clear.\nC is on the table. C is clear.\nD is on the table. D is clear.\n",
        "system1_plan": "Move F from D to table | Move D from A to table | Move A from E to table | Move E from B to table | Move B from C to table | Move F from table to A | Move E from table to F | Move B from table to E",
        "system1_states": 8,
        "system2_plan_v1": "Moved to state -> Stack 1: [C, B, E, A, D, F] | Plan so far [] | Exploring action Move F from D to table | New state -> Stack 1: [C, B, E, A, D], Stack 2: [F] | Exploring action Move B from C to table | New state -> Invalid | Taking action Move F from D to table | Moved to state -> Stack 1: [C, B, E, A, D], Stack 2: [F] | Plan so far [Move F from D to table] | Exploring action Move D from A to F | New state -> Stack 1: [C, B, E, A], Stack 2: [F, D] | Exploring action Move F from table to D | New state -> Stack 1: [C, B, E, A, D, F] | Exploring action Move C from table to F | New state -> Invalid | Exploring action Move D from A to table | New state -> Stack 1: [C, B, E, A], Stack 2: [D], Stack 3: [F] | Taking action Move D from A to table | Moved to state -> Stack 1: [C, B, E, A], Stack 2: [D], Stack 3: [F] | Plan so far [Move F from D to table | Move D from A to table] | Exploring action Move F from table to A | New state -> Stack 1: [C, B, E, A, F], Stack 2: [D] | Exploring action Move E from B to A | New state -> Invalid | Exploring action Move A from E to table | New state -> Stack 1: [A], Stack 2: [C, B, E], Stack 3: [D], Stack 4: [F] | Exploring action Move A from E to F | New state -> Stack 1: [C, B, E], Stack 2: [D], Stack 3: [F, A] | Taking action Move A from E to table | Moved to state -> Stack 1: [A], Stack 2: [C, B, E], Stack 3: [D], Stack 4: [F] | Plan so far [Move F from D to table | Move D from A to table | Move A from E to table] | Exploring action Move F from table to A | New state -> Stack 1: [A, F], Stack 2: [C, B, E], Stack 3: [D] | Exploring action Move B from C to table | New state -> Invalid | Exploring action Move E from B to A | New state -> Stack 1: [A, E], Stack 2: [C, B], Stack 3: [D], Stack 4: [F] | Exploring action Move E from B to table | New state -> Stack 1: [A], Stack 2: [C, B], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Exploring action Move B from C to A | New state -> Invalid | Taking action Move E from B to table | Moved to state -> Stack 1: [A], Stack 2: [C, B], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Plan so far [Move F from D to table | Move D from A to table | Move A from E to table | Move E from B to table] | Exploring action Move B from C to E | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D], Stack 4: [E, B], Stack 5: [F] | Exploring action Move B from C to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Exploring action Move B from C to A | New state -> Stack 1: [A, B], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Exploring action Move C from table to B | New state -> Invalid | Taking action Move B from C to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Plan so far [Move F from D to table | Move D from A to table | Move A from E to table | Move E from B to table | Move B from C to table] | Exploring action Move F from table to A | New state -> Stack 1: [A, F], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Exploring action Move B from table to E | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D], Stack 4: [E, B], Stack 5: [F] | Exploring action Move F from table to E | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E, F] | Taking action Move B from C to E | Moved to state -> Stack 1: [A], Stack 2: [C], Stack 3: [D], Stack 4: [E, B], Stack 5: [F] | Plan so far [Move F from D to table | Move D from A to table | Move A from E to table | Move E from B to table | Move B from C to E] | Exploring action Move E from table to A | New state -> Invalid | Exploring action Move E from table to C | New state -> Invalid | Exploring action Move B from E to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Exploring action Move B from E to A | New state -> Stack 1: [A, B], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Exploring action Move F from table to A | New state -> Stack 1: [A, F], Stack 2: [C], Stack 3: [D], Stack 4: [E, B] | Taking action Move F from table to A | Moved to state -> Stack 1: [A, F], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Plan so far [Move F from D to table | Move D from A to table | Move A from E to table | Move E from B to table | Move B from C to table | Move F from table to A] | Exploring action Move E from table to B | New state -> Stack 1: [A, F], Stack 2: [B, E], Stack 3: [C], Stack 4: [D] | Exploring action Move A from table to C | New state -> Invalid | Exploring action Move E from table to F | New state -> Stack 1: [A, F, E], Stack 2: [B], Stack 3: [C], Stack 4: [D] | Exploring action Move B from table to E | New state -> Stack 1: [A, F], Stack 2: [C], Stack 3: [D], Stack 4: [E, B] | Exploring action Move A from table to E | New state -> Invalid | Taking action Move F from table to A | Moved to state -> Stack 1: [A, F], Stack 2: [C], Stack 3: [D], Stack 4: [E, B] | Plan so far [Move F from D to table | Move D from A to table | Move A from E to table | Move E from B to table | Move B from C to E | Move F from table to A] | Exploring action Move B from E to F | New state -> Stack 1: [A, F, B], Stack 2: [C], Stack 3: [D], Stack 4: [E] | Exploring action Move F from A to table | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D], Stack 4: [E, B], Stack 5: [F] | Exploring action Move B from E to table | New state -> Stack 1: [A, F], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Exploring action Move A from table to B | New state -> Invalid | Taking action Move E from table to F | Moved to state -> Stack 1: [A, F, E], Stack 2: [B], Stack 3: [C], Stack 4: [D] | Plan so far [Move F from D to table | Move D from A to table | Move A from E to table | Move E from B to table | Move B from C to table | Move F from table to A | Move E from table to F] | Exploring action Move E from F to table | New state -> Stack 1: [A, F], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Exploring action Move B from table to E | New state -> Stack 1: [A, F, E, B], Stack 2: [C], Stack 3: [D] | Exploring action Move A from table to E | New state -> Invalid | Exploring action Move B from table to C | New state -> Stack 1: [A, F, E], Stack 2: [C, B], Stack 3: [D] | Taking action Move B from table to E | Moved to state -> Stack 1: [A, F, E, B], Stack 2: [C], Stack 3: [D] | Plan so far [Move F from D to table | Move D from A to table | Move A from E to table | Move E from B to table | Move B from C to table | Move F from table to A | Move E from table to F | Move B from table to E] | Reached goal state!",
        "system2_states_v1": 40
    },
    {
        "idx": 712,
        "start": [
            [
                "table",
                "D",
                "E",
                "C",
                "B",
                "F",
                "A"
            ]
        ],
        "goal": [
            [
                "table",
                "A"
            ],
            [
                "table",
                "F",
                "C",
                "D",
                "E",
                "B"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": true,
                "on": "F",
                "under": -1,
                "ontable": false
            },
            "B": {
                "clear": false,
                "on": "C",
                "under": "F",
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": "E",
                "under": "B",
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": -1,
                "under": "E",
                "ontable": true
            },
            "E": {
                "clear": false,
                "on": "D",
                "under": "C",
                "ontable": false
            },
            "F": {
                "clear": false,
                "on": "B",
                "under": "A",
                "ontable": false
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": true,
                "on": -1,
                "under": -1,
                "ontable": true
            },
            "B": {
                "clear": true,
                "on": "E",
                "under": -1,
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": "F",
                "under": "D",
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": "C",
                "under": "E",
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": "D",
                "under": "B",
                "ontable": false
            },
            "F": {
                "clear": false,
                "on": -1,
                "under": "C",
                "ontable": true
            }
        },
        "plan_len": 8,
        "num_blocks": 6,
        "prompt": "The initial state:\nThe hand is empty.\nD is on the table. E is on D. C is on E. B is on C. F is on B. A is on F. A is clear.\n\nThe goal is:\nA is on the table. A is clear.\nF is on the table. C is on F. D is on C. E is on D. B is on E. B is clear.\n",
        "system1_plan": "Move A from F to table | Move F from B to table | Move B from C to table | Move C from E to F | Move E from D to table | Move D from table to C | Move E from table to D | Move B from table to E",
        "system1_states": 8,
        "system2_plan_v1": "Moved to state -> Stack 1: [D, E, C, B, F, A] | Plan so far [] | Exploring action Move A from F to table | New state -> Stack 1: [A], Stack 2: [D, E, C, B, F] | Exploring action Move C from E to table | New state -> Invalid | Exploring action Move E from D to table | New state -> Invalid | Taking action Move A from F to table | Moved to state -> Stack 1: [A], Stack 2: [D, E, C, B, F] | Plan so far [Move A from F to table] | Exploring action Move A from table to F | New state -> Stack 1: [D, E, C, B, F, A] | Exploring action Move F from B to A | New state -> Stack 1: [A, F], Stack 2: [D, E, C, B] | Exploring action Move F from B to table | New state -> Stack 1: [A], Stack 2: [D, E, C, B], Stack 3: [F] | Exploring action Move D from table to A | New state -> Invalid | Taking action Move F from B to table | Moved to state -> Stack 1: [A], Stack 2: [D, E, C, B], Stack 3: [F] | Plan so far [Move A from F to table | Move F from B to table] | Exploring action Move B from C to F | New state -> Stack 1: [A], Stack 2: [D, E, C], Stack 3: [F, B] | Exploring action Move B from C to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, E, C], Stack 4: [F] | Exploring action Move E from D to B | New state -> Invalid | Exploring action Move C from E to A | New state -> Invalid | Exploring action Move F from table to B | New state -> Stack 1: [A], Stack 2: [D, E, C, B, F] | Taking action Move B from C to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, E, C], Stack 4: [F] | Plan so far [Move A from F to table | Move F from B to table | Move B from C to table] | Exploring action Move C from E to B | New state -> Stack 1: [A], Stack 2: [B, C], Stack 3: [D, E], Stack 4: [F] | Exploring action Move E from D to F | New state -> Invalid | Exploring action Move C from E to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D, E], Stack 5: [F] | Exploring action Move C from E to F | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, E], Stack 4: [F, C] | Taking action Move C from E to F | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, E], Stack 4: [F, C] | Plan so far [Move A from F to table | Move F from B to table | Move B from C to table | Move C from E to F] | Exploring action Move E from D to B | New state -> Stack 1: [A], Stack 2: [B, E], Stack 3: [D], Stack 4: [F, C] | Exploring action Move E from D to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D], Stack 4: [E], Stack 5: [F, C] | Exploring action Move B from table to E | New state -> Stack 1: [A], Stack 2: [D, E, B], Stack 3: [F, C] | Exploring action Move D from table to E | New state -> Invalid | Exploring action Move D from table to C | New state -> Invalid | Taking action Move B from table to E | Moved to state -> Stack 1: [A], Stack 2: [D, E, B], Stack 3: [F, C] | Plan so far [Move A from F to table | Move F from B to table | Move B from C to table | Move C from E to F | Move B from table to E] | Exploring action Move B from E to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, E], Stack 4: [F, C] | Exploring action Move C from F to table | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, E, B], Stack 4: [F] | Exploring action Move D from table to B | New state -> Invalid | Exploring action Move A from table to C | New state -> Stack 1: [D, E, B], Stack 2: [F, C, A] | Taking action Move E from D to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [D], Stack 4: [E], Stack 5: [F, C] | Plan so far [Move A from F to table | Move F from B to table | Move B from C to table | Move C from E to F | Move E from D to table] | Exploring action Move F from table to A | New state -> Invalid | Exploring action Move B from table to E | New state -> Stack 1: [A], Stack 2: [D], Stack 3: [E, B], Stack 4: [F, C] | Exploring action Move D from table to C | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [E], Stack 4: [F, C, D] | Exploring action Move F from table to E | New state -> Invalid | Exploring action Move B from table to D | New state -> Stack 1: [A], Stack 2: [D, B], Stack 3: [E], Stack 4: [F, C] | Taking action Move D from table to C | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [E], Stack 4: [F, C, D] | Plan so far [Move A from F to table | Move F from B to table | Move B from C to table | Move C from E to F | Move E from D to table | Move D from table to C] | Exploring action Move D from C to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D], Stack 4: [E], Stack 5: [F, C] | Exploring action Move E from table to D | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [F, C, D, E] | Exploring action Move C from F to B | New state -> Invalid | Exploring action Move C from F to E | New state -> Invalid | Exploring action Move B from table to E | New state -> Stack 1: [A], Stack 2: [E, B], Stack 3: [F, C, D] | Taking action Move E from table to D | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [F, C, D, E] | Plan so far [Move A from F to table | Move F from B to table | Move B from C to table | Move C from E to F | Move E from D to table | Move D from table to C | Move E from table to D] | Exploring action Move C from F to B | New state -> Invalid | Exploring action Move B from table to E | New state -> Stack 1: [A], Stack 2: [F, C, D, E, B] | Exploring action Move E from D to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [E], Stack 4: [F, C, D] | Exploring action Move F from table to B | New state -> Invalid | Exploring action Move B from table to A | New state -> Stack 1: [A, B], Stack 2: [F, C, D, E] | Taking action Move B from table to E | Moved to state -> Stack 1: [A], Stack 2: [F, C, D, E, B] | Plan so far [Move A from F to table | Move F from B to table | Move B from C to table | Move C from E to F | Move E from D to table | Move D from table to C | Move E from table to D | Move B from table to E] | Reached goal state!",
        "system2_states_v1": 40
    },
    {
        "idx": 700,
        "start": [
            [
                "table",
                "C",
                "A",
                "F",
                "B",
                "D"
            ],
            [
                "table",
                "E"
            ]
        ],
        "goal": [
            [
                "table",
                "A",
                "E",
                "D"
            ],
            [
                "table",
                "C",
                "F",
                "B"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": false,
                "on": "C",
                "under": "F",
                "ontable": false
            },
            "B": {
                "clear": false,
                "on": "F",
                "under": "D",
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": -1,
                "under": "A",
                "ontable": true
            },
            "D": {
                "clear": true,
                "on": "B",
                "under": -1,
                "ontable": false
            },
            "E": {
                "clear": true,
                "on": -1,
                "under": -1,
                "ontable": true
            },
            "F": {
                "clear": false,
                "on": "A",
                "under": "B",
                "ontable": false
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": false,
                "on": -1,
                "under": "E",
                "ontable": true
            },
            "B": {
                "clear": true,
                "on": "F",
                "under": -1,
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": -1,
                "under": "F",
                "ontable": true
            },
            "D": {
                "clear": true,
                "on": "E",
                "under": -1,
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": "A",
                "under": "D",
                "ontable": false
            },
            "F": {
                "clear": false,
                "on": "C",
                "under": "B",
                "ontable": false
            }
        },
        "plan_len": 8,
        "num_blocks": 6,
        "prompt": "The initial state:\nThe hand is empty.\nC is on the table. A is on C. F is on A. B is on F. D is on B. D is clear.\nE is on the table. E is clear.\n\nThe goal is:\nA is on the table. E is on A. D is on E. D is clear.\nC is on the table. F is on C. B is on F. B is clear.\n",
        "system1_plan": "Move D from B to table | Move B from F to table | Move F from A to table | Move A from C to table | Move E from table to A | Move D from table to E | Move F from table to C | Move B from table to F",
        "system1_states": 8,
        "system2_plan_v1": "Moved to state -> Stack 1: [C, A, F, B, D], Stack 2: [E] | Plan so far [] | Exploring action Move A from C to table | New state -> Invalid | Exploring action Move D from B to E | New state -> Stack 1: [C, A, F, B], Stack 2: [E, D] | Exploring action Move E from table to D | New state -> Stack 1: [C, A, F, B, D, E] | Exploring action Move D from B to table | New state -> Stack 1: [C, A, F, B], Stack 2: [D], Stack 3: [E] | Taking action Move D from B to table | Moved to state -> Stack 1: [C, A, F, B], Stack 2: [D], Stack 3: [E] | Plan so far [Move D from B to table] | Exploring action Move B from F to table | New state -> Stack 1: [B], Stack 2: [C, A, F], Stack 3: [D], Stack 4: [E] | Exploring action Move C from table to B | New state -> Invalid | Exploring action Move B from F to E | New state -> Stack 1: [C, A, F], Stack 2: [D], Stack 3: [E, B] | Exploring action Move A from C to D | New state -> Invalid | Exploring action Move D from table to E | New state -> Stack 1: [C, A, F, B], Stack 2: [E, D] | Taking action Move D from B to E | Moved to state -> Stack 1: [C, A, F, B], Stack 2: [E, D] | Plan so far [Move D from B to E] | Exploring action Move E from table to D | New state -> Invalid | Exploring action Move B from F to table | New state -> Stack 1: [B], Stack 2: [C, A, F], Stack 3: [E, D] | Exploring action Move B from F to D | New state -> Stack 1: [C, A, F], Stack 2: [E, D, B] | Exploring action Move A from C to table | New state -> Invalid | Exploring action Move D from E to table | New state -> Stack 1: [C, A, F, B], Stack 2: [D], Stack 3: [E] | Taking action Move B from F to table | Moved to state -> Stack 1: [B], Stack 2: [C, A, F], Stack 3: [D], Stack 4: [E] | Plan so far [Move D from B to table | Move B from F to table] | Exploring action Move A from C to B | New state -> Invalid | Exploring action Move F from A to D | New state -> Stack 1: [B], Stack 2: [C, A], Stack 3: [D, F], Stack 4: [E] | Exploring action Move C from table to D | New state -> Invalid | Exploring action Move F from A to E | New state -> Stack 1: [B], Stack 2: [C, A], Stack 3: [D], Stack 4: [E, F] | Exploring action Move F from A to table | New state -> Stack 1: [B], Stack 2: [C, A], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Taking action Move D from table to E | Moved to state -> Stack 1: [C, A, F, B], Stack 2: [E, D] | Plan so far [Move D from B to table | Move D from table to E] | Taking action Move B from F to table | Moved to state -> Stack 1: [B], Stack 2: [C, A, F], Stack 3: [E, D] | Plan so far [Move D from B to E | Move B from F to table] | Exploring action Move C from table to F | New state -> Invalid | Exploring action Move B from table to F | New state -> Stack 1: [C, A, F, B], Stack 2: [E, D] | Exploring action Move F from A to B | New state -> Stack 1: [B, F], Stack 2: [C, A], Stack 3: [E, D] | Exploring action Move F from A to table | New state -> Stack 1: [B], Stack 2: [C, A], Stack 3: [E, D], Stack 4: [F] | Exploring action Move A from C to D | New state -> Invalid | Taking action Move D from E to table | Moved to state -> Stack 1: [C, A, F, B], Stack 2: [D], Stack 3: [E] | Plan so far [Move D from B to E | Move D from E to table] | Taking action Move F from A to table | Moved to state -> Stack 1: [B], Stack 2: [C, A], Stack 3: [E, D], Stack 4: [F] | Plan so far [Move D from B to E | Move B from F to table | Move F from A to table] | Exploring action Move E from table to F | New state -> Invalid | Exploring action Move A from C to B | New state -> Stack 1: [B, A], Stack 2: [C], Stack 3: [E, D], Stack 4: [F] | Exploring action Move A from C to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [E, D], Stack 5: [F] | Exploring action Move E from table to A | New state -> Invalid | Exploring action Move B from table to F | New state -> Stack 1: [C, A], Stack 2: [E, D], Stack 3: [F, B] | Taking action Move F from A to table | Moved to state -> Stack 1: [B], Stack 2: [C, A], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Plan so far [Move D from B to table | Move B from F to table | Move F from A to table] | Exploring action Move D from table to E | New state -> Stack 1: [B], Stack 2: [C, A], Stack 3: [E, D], Stack 4: [F] | Exploring action Move A from C to D | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, A], Stack 4: [E], Stack 5: [F] | Exploring action Move A from C to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Exploring action Move C from table to D | New state -> Invalid | Exploring action Move C from table to B | New state -> Invalid | Taking action Move A from C to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [E, D], Stack 5: [F] | Plan so far [Move D from B to E | Move B from F to table | Move F from A to table | Move A from C to table] | Exploring action Move D from E to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Exploring action Move E from table to B | New state -> Invalid | Exploring action Move B from table to F | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [E, D], Stack 4: [F, B] | Exploring action Move F from table to C | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, F], Stack 4: [E, D] | Taking action Move A from C to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Plan so far [Move D from B to table | Move B from F to table | Move F from A to table | Move A from C to table] | Exploring action Move F from table to C | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, F], Stack 4: [D], Stack 5: [E] | Exploring action Move E from table to A | New state -> Stack 1: [A, E], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [F] | Exploring action Move B from table to F | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [F, B] | Taking action Move F from table to C | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, F], Stack 4: [E, D] | Plan so far [Move D from B to E | Move B from F to table | Move F from A to table | Move A from C to table | Move F from table to C] | Exploring action Move C from table to A | New state -> Invalid | Exploring action Move A from table to B | New state -> Stack 1: [B, A], Stack 2: [C, F], Stack 3: [E, D] | Exploring action Move D from E to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, F], Stack 4: [D], Stack 5: [E] | Exploring action Move B from table to F | New state -> Stack 1: [A], Stack 2: [C, F, B], Stack 3: [E, D] | Taking action Move B from table to F | Moved to state -> Stack 1: [A], Stack 2: [C, F, B], Stack 3: [E, D] | Plan so far [Move D from B to E | Move B from F to table | Move F from A to table | Move A from C to table | Move F from table to C | Move B from table to F] | Exploring action Move F from C to B | New state -> Invalid | Exploring action Move E from table to B | New state -> Invalid | Exploring action Move D from E to A | New state -> Stack 1: [A, D], Stack 2: [C, F, B], Stack 3: [E] | Exploring action Move D from E to table | New state -> Stack 1: [A], Stack 2: [C, F, B], Stack 3: [D], Stack 4: [E] | Exploring action Move A from table to B | New state -> Stack 1: [C, F, B, A], Stack 2: [E, D] | Taking action Move E from table to A | Moved to state -> Stack 1: [A, E], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [F] | Plan so far [Move D from B to table | Move B from F to table | Move F from A to table | Move A from C to table | Move E from table to A] | Exploring action Move F from table to C | New state -> Stack 1: [A, E], Stack 2: [B], Stack 3: [C, F], Stack 4: [D] | Exploring action Move D from table to E | New state -> Stack 1: [A, E, D], Stack 2: [B], Stack 3: [C], Stack 4: [F] | Exploring action Move A from table to C | New state -> Invalid | Exploring action Move A from table to D | New state -> Invalid | Exploring action Move B from table to F | New state -> Stack 1: [A, E], Stack 2: [C], Stack 3: [D], Stack 4: [F, B] | Taking action Move D from table to E | Moved to state -> Stack 1: [A, E, D], Stack 2: [B], Stack 3: [C], Stack 4: [F] | Plan so far [Move D from B to table | Move B from F to table | Move F from A to table | Move A from C to table | Move E from table to A | Move D from table to E] | Exploring action Move A from table to D | New state -> Invalid | Exploring action Move B from table to F | New state -> Stack 1: [A, E, D], Stack 2: [C], Stack 3: [F, B] | Exploring action Move F from table to C | New state -> Stack 1: [A, E, D], Stack 2: [B], Stack 3: [C, F] | Exploring action Move B from table to C | New state -> Stack 1: [A, E, D], Stack 2: [C, B], Stack 3: [F] | Taking action Move F from table to C | Moved to state -> Stack 1: [A, E, D], Stack 2: [B], Stack 3: [C, F] | Plan so far [Move D from B to table | Move B from F to table | Move F from A to table | Move A from C to table | Move E from table to A | Move D from table to E | Move F from table to C] | Exploring action Move A from table to F | New state -> Invalid | Exploring action Move F from C to B | New state -> Stack 1: [A, E, D], Stack 2: [B, F], Stack 3: [C] | Exploring action Move B from table to F | New state -> Stack 1: [A, E, D], Stack 2: [C, F, B] | Exploring action Move A from table to D | New state -> Invalid | Exploring action Move F from C to table | New state -> Stack 1: [A, E, D], Stack 2: [B], Stack 3: [C], Stack 4: [F] | Taking action Move B from table to F | Moved to state -> Stack 1: [A, E, D], Stack 2: [C, F, B] | Plan so far [Move D from B to table | Move B from F to table | Move F from A to table | Move A from C to table | Move E from table to A | Move D from table to E | Move F from table to C | Move B from table to F] | Reached goal state!",
        "system2_states_v1": 64
    },
    {
        "idx": 918,
        "start": [
            [
                "table",
                "A",
                "D",
                "F",
                "C"
            ],
            [
                "table",
                "B",
                "G",
                "E"
            ]
        ],
        "goal": [
            [
                "table",
                "D",
                "C",
                "B",
                "G"
            ],
            [
                "table",
                "E",
                "A",
                "F"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": false,
                "on": -1,
                "under": "D",
                "ontable": true
            },
            "B": {
                "clear": false,
                "on": -1,
                "under": "G",
                "ontable": true
            },
            "C": {
                "clear": true,
                "on": "F",
                "under": -1,
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": "A",
                "under": "F",
                "ontable": false
            },
            "E": {
                "clear": true,
                "on": "G",
                "under": -1,
                "ontable": false
            },
            "F": {
                "clear": false,
                "on": "D",
                "under": "C",
                "ontable": false
            },
            "G": {
                "clear": false,
                "on": "B",
                "under": "E",
                "ontable": false
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": false,
                "on": "E",
                "under": "F",
                "ontable": false
            },
            "B": {
                "clear": false,
                "on": "C",
                "under": "G",
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": "D",
                "under": "B",
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": -1,
                "under": "C",
                "ontable": true
            },
            "E": {
                "clear": false,
                "on": -1,
                "under": "A",
                "ontable": true
            },
            "F": {
                "clear": true,
                "on": "A",
                "under": -1,
                "ontable": false
            },
            "G": {
                "clear": true,
                "on": "B",
                "under": -1,
                "ontable": false
            }
        },
        "plan_len": 10,
        "num_blocks": 7,
        "prompt": "The initial state:\nThe hand is empty.\nA is on the table. D is on A. F is on D. C is on F. C is clear.\nB is on the table. G is on B. E is on G. E is clear.\n\nThe goal is:\nD is on the table. C is on D. B is on C. G is on B. G is clear.\nE is on the table. A is on E. F is on A. F is clear.\n",
        "system1_plan": "Move E from G to table | Move C from F to table | Move F from D to table | Move D from A to table | Move A from table to E | Move F from table to A | Move C from table to D | Move G from B to table | Move B from table to C | Move G from table to B",
        "system1_states": 10,
        "system2_plan_v1": "Moved to state -> Stack 1: [A, D, F, C], Stack 2: [B, G, E] | Plan so far [] | Exploring action Move C from F to table | New state -> Stack 1: [A, D, F], Stack 2: [B, G, E], Stack 3: [C] | Exploring action Move E from G to table | New state -> Stack 1: [A, D, F, C], Stack 2: [B, G], Stack 3: [E] | Exploring action Move D from A to table | New state -> Invalid | Exploring action Move B from table to E | New state -> Invalid | Exploring action Move E from G to C | New state -> Stack 1: [A, D, F, C, E], Stack 2: [B, G] | Taking action Move E from G to table | Moved to state -> Stack 1: [A, D, F, C], Stack 2: [B, G], Stack 3: [E] | Plan so far [Move E from G to table] | Exploring action Move C from F to E | New state -> Stack 1: [A, D, F], Stack 2: [B, G], Stack 3: [E, C] | Exploring action Move C from F to table | New state -> Stack 1: [A, D, F], Stack 2: [B, G], Stack 3: [C], Stack 4: [E] | Exploring action Move A from table to G | New state -> Invalid | Exploring action Move G from B to table | New state -> Stack 1: [A, D, F, C], Stack 2: [B], Stack 3: [E], Stack 4: [G] | Taking action Move C from F to table | Moved to state -> Stack 1: [A, D, F], Stack 2: [B, G], Stack 3: [C], Stack 4: [E] | Plan so far [Move E from G to table | Move C from F to table] | Exploring action Move G from B to table | New state -> Stack 1: [A, D, F], Stack 2: [B], Stack 3: [C], Stack 4: [E], Stack 5: [G] | Exploring action Move F from D to table | New state -> Stack 1: [A, D], Stack 2: [B, G], Stack 3: [C], Stack 4: [E], Stack 5: [F] | Exploring action Move B from table to C | New state -> Invalid | Exploring action Move F from D to C | New state -> Stack 1: [A, D], Stack 2: [B, G], Stack 3: [C, F], Stack 4: [E] | Exploring action Move D from A to E | New state -> Invalid | Taking action Move F from D to table | Moved to state -> Stack 1: [A, D], Stack 2: [B, G], Stack 3: [C], Stack 4: [E], Stack 5: [F] | Plan so far [Move E from G to table | Move C from F to table | Move F from D to table] | Exploring action Move D from A to E | New state -> Stack 1: [A], Stack 2: [B, G], Stack 3: [C], Stack 4: [E, D], Stack 5: [F] | Exploring action Move D from A to C | New state -> Stack 1: [A], Stack 2: [B, G], Stack 3: [C, D], Stack 4: [E], Stack 5: [F] | Exploring action Move B from table to F | New state -> Invalid | Exploring action Move D from A to table | New state -> Stack 1: [A], Stack 2: [B, G], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Exploring action Move A from table to F | New state -> Invalid | Taking action Move D from A to table | Moved to state -> Stack 1: [A], Stack 2: [B, G], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Plan so far [Move E from G to table | Move C from F to table | Move F from D to table | Move D from A to table] | Exploring action Move A from table to E | New state -> Stack 1: [B, G], Stack 2: [C], Stack 3: [D], Stack 4: [E, A], Stack 5: [F] | Exploring action Move C from table to D | New state -> Stack 1: [A], Stack 2: [B, G], Stack 3: [D, C], Stack 4: [E], Stack 5: [F] | Exploring action Move B from table to F | New state -> Invalid | Exploring action Move G from B to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F], Stack 7: [G] | Exploring action Move B from table to G | New state -> Invalid | Taking action Move A from table to E | Moved to state -> Stack 1: [B, G], Stack 2: [C], Stack 3: [D], Stack 4: [E, A], Stack 5: [F] | Plan so far [Move E from G to table | Move C from F to table | Move F from D to table | Move D from A to table | Move A from table to E] | Exploring action Move E from table to F | New state -> Invalid | Exploring action Move G from B to table | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D], Stack 4: [E, A], Stack 5: [F], Stack 6: [G] | Exploring action Move F from table to A | New state -> Stack 1: [B, G], Stack 2: [C], Stack 3: [D], Stack 4: [E, A, F] | Exploring action Move C from table to D | New state -> Stack 1: [B, G], Stack 2: [D, C], Stack 3: [E, A], Stack 4: [F] | Exploring action Move E from table to G | New state -> Invalid | Taking action Move F from table to A | Moved to state -> Stack 1: [B, G], Stack 2: [C], Stack 3: [D], Stack 4: [E, A, F] | Plan so far [Move E from G to table | Move C from F to table | Move F from D to table | Move D from A to table | Move A from table to E | Move F from table to A] | Exploring action Move G from B to table | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D], Stack 4: [E, A, F], Stack 5: [G] | Exploring action Move B from table to D | New state -> Invalid | Exploring action Move G from B to C | New state -> Stack 1: [B], Stack 2: [C, G], Stack 3: [D], Stack 4: [E, A, F] | Exploring action Move E from table to D | New state -> Invalid | Exploring action Move C from table to D | New state -> Stack 1: [B, G], Stack 2: [D, C], Stack 3: [E, A, F] | Taking action Move C from table to D | Moved to state -> Stack 1: [B, G], Stack 2: [D, C], Stack 3: [E, A, F] | Plan so far [Move E from G to table | Move C from F to table | Move F from D to table | Move D from A to table | Move A from table to E | Move F from table to A | Move C from table to D] | Exploring action Move G from B to table | New state -> Stack 1: [B], Stack 2: [D, C], Stack 3: [E, A, F], Stack 4: [G] | Exploring action Move G from B to C | New state -> Stack 1: [B], Stack 2: [D, C, G], Stack 3: [E, A, F] | Exploring action Move C from D to table | New state -> Stack 1: [B, G], Stack 2: [C], Stack 3: [D], Stack 4: [E, A, F] | Exploring action Move D from table to C | New state -> Invalid | Exploring action Move E from table to G | New state -> Invalid | Taking action Move C from table to D | Moved to state -> Stack 1: [A], Stack 2: [B, G], Stack 3: [D, C], Stack 4: [E], Stack 5: [F] | Plan so far [Move E from G to table | Move C from F to table | Move F from D to table | Move D from A to table | Move C from table to D] | Exploring action Move G from B to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, C], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Exploring action Move A from table to E | New state -> Stack 1: [B, G], Stack 2: [D, C], Stack 3: [E, A], Stack 4: [F] | Exploring action Move F from table to A | New state -> Stack 1: [A, F], Stack 2: [B, G], Stack 3: [D, C], Stack 4: [E] | Exploring action Move D from table to F | New state -> Invalid | Taking action Move G from B to table | Moved to state -> Stack 1: [B], Stack 2: [C], Stack 3: [D], Stack 4: [E, A, F], Stack 5: [G] | Plan so far [Move E from G to table | Move C from F to table | Move F from D to table | Move D from A to table | Move A from table to E | Move F from table to A | Move G from B to table] | Exploring action Move C from table to D | New state -> Stack 1: [B], Stack 2: [D, C], Stack 3: [E, A, F], Stack 4: [G] | Exploring action Move E from table to G | New state -> Invalid | Exploring action Move B from table to C | New state -> Stack 1: [C, B], Stack 2: [D], Stack 3: [E, A, F], Stack 4: [G] | Exploring action Move G from table to B | New state -> Stack 1: [B, G], Stack 2: [C], Stack 3: [D], Stack 4: [E, A, F] | Exploring action Move A from E to D | New state -> Invalid | Taking action Move G from B to table | Moved to state -> Stack 1: [B], Stack 2: [D, C], Stack 3: [E, A, F], Stack 4: [G] | Plan so far [Move E from G to table | Move C from F to table | Move F from D to table | Move D from A to table | Move A from table to E | Move F from table to A | Move C from table to D | Move G from B to table] | Exploring action Move A from E to F | New state -> Invalid | Exploring action Move E from table to G | New state -> Invalid | Exploring action Move G from table to B | New state -> Stack 1: [B, G], Stack 2: [D, C], Stack 3: [E, A, F] | Exploring action Move B from table to C | New state -> Stack 1: [D, C, B], Stack 2: [E, A, F], Stack 3: [G] | Exploring action Move B from table to G | New state -> Stack 1: [D, C], Stack 2: [E, A, F], Stack 3: [G, B] | Taking action Move A from table to E | Moved to state -> Stack 1: [B, G], Stack 2: [D, C], Stack 3: [E, A], Stack 4: [F] | Plan so far [Move E from G to table | Move C from F to table | Move F from D to table | Move D from A to table | Move C from table to D | Move A from table to E] | Exploring action Move G from B to C | New state -> Stack 1: [B], Stack 2: [D, C, G], Stack 3: [E, A], Stack 4: [F] | Exploring action Move F from table to A | New state -> Stack 1: [B, G], Stack 2: [D, C], Stack 3: [E, A, F] | Exploring action Move B from table to A | New state -> Invalid | Exploring action Move G from B to table | New state -> Stack 1: [B], Stack 2: [D, C], Stack 3: [E, A], Stack 4: [F], Stack 5: [G] | Taking action Move F from table to A | Moved to state -> Stack 1: [B, G], Stack 2: [D, C], Stack 3: [E, A, F] | Plan so far [Move E from G to table | Move C from F to table | Move F from D to table | Move D from A to table | Move C from table to D | Move A from table to E | Move F from table to A] | Taking action Move C from table to D | Moved to state -> Stack 1: [B, G], Stack 2: [D, C], Stack 3: [E, A], Stack 4: [F] | Plan so far [Move E from G to table | Move C from F to table | Move F from D to table | Move D from A to table | Move A from table to E | Move C from table to D] | Taking action Move C from table to D | Moved to state -> Stack 1: [B], Stack 2: [D, C], Stack 3: [E, A, F], Stack 4: [G] | Plan so far [Move E from G to table | Move C from F to table | Move F from D to table | Move D from A to table | Move A from table to E | Move F from table to A | Move G from B to table | Move C from table to D] | Taking action Move B from table to C | Moved to state -> Stack 1: [D, C, B], Stack 2: [E, A, F], Stack 3: [G] | Plan so far [Move E from G to table | Move C from F to table | Move F from D to table | Move D from A to table | Move A from table to E | Move F from table to A | Move C from table to D | Move G from B to table | Move B from table to C] | Exploring action Move D from table to G | New state -> Invalid | Exploring action Move A from E to F | New state -> Invalid | Exploring action Move B from C to G | New state -> Stack 1: [D, C], Stack 2: [E, A, F], Stack 3: [G, B] | Exploring action Move G from table to B | New state -> Stack 1: [D, C, B, G], Stack 2: [E, A, F] | Exploring action Move B from C to table | New state -> Stack 1: [B], Stack 2: [D, C], Stack 3: [E, A, F], Stack 4: [G] | Taking action Move G from table to B | Moved to state -> Stack 1: [D, C, B, G], Stack 2: [E, A, F] | Plan so far [Move E from G to table | Move C from F to table | Move F from D to table | Move D from A to table | Move A from table to E | Move F from table to A | Move C from table to D | Move G from B to table | Move B from table to C | Move G from table to B] | Reached goal state!",
        "system2_states_v1": 62
    },
    {
        "idx": 578,
        "start": [
            [
                "table",
                "B",
                "C",
                "A",
                "D",
                "E"
            ]
        ],
        "goal": [
            [
                "table",
                "A"
            ],
            [
                "table",
                "B",
                "E",
                "D",
                "C"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": false,
                "on": "C",
                "under": "D",
                "ontable": false
            },
            "B": {
                "clear": false,
                "on": -1,
                "under": "C",
                "ontable": true
            },
            "C": {
                "clear": false,
                "on": "B",
                "under": "A",
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": "A",
                "under": "E",
                "ontable": false
            },
            "E": {
                "clear": true,
                "on": "D",
                "under": -1,
                "ontable": false
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": true,
                "on": -1,
                "under": -1,
                "ontable": true
            },
            "B": {
                "clear": false,
                "on": -1,
                "under": "E",
                "ontable": true
            },
            "C": {
                "clear": true,
                "on": "D",
                "under": -1,
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": "E",
                "under": "C",
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": "B",
                "under": "D",
                "ontable": false
            }
        },
        "plan_len": 7,
        "num_blocks": 5,
        "prompt": "The initial state:\nThe hand is empty.\nB is on the table. C is on B. A is on C. D is on A. E is on D. E is clear.\n\nThe goal is:\nA is on the table. A is clear.\nB is on the table. E is on B. D is on E. C is on D. C is clear.\n",
        "system1_plan": "Move E from D to table | Move D from A to table | Move A from C to table | Move C from B to table | Move E from table to B | Move D from table to E | Move C from table to D",
        "system1_states": 7,
        "system2_plan_v1": "Moved to state -> Stack 1: [B, C, A, D, E] | Plan so far [] | Exploring action Move B from table to E | New state -> Invalid | Exploring action Move E from D to table | New state -> Stack 1: [B, C, A, D], Stack 2: [E] | Taking action Move E from D to table | Moved to state -> Stack 1: [B, C, A, D], Stack 2: [E] | Plan so far [Move E from D to table] | Exploring action Move D from A to E | New state -> Stack 1: [B, C, A], Stack 2: [E, D] | Exploring action Move B from table to E | New state -> Invalid | Exploring action Move D from A to table | New state -> Stack 1: [B, C, A], Stack 2: [D], Stack 3: [E] | Exploring action Move A from C to E | New state -> Invalid | Exploring action Move E from table to D | New state -> Stack 1: [B, C, A, D, E] | Taking action Move D from A to table | Moved to state -> Stack 1: [B, C, A], Stack 2: [D], Stack 3: [E] | Plan so far [Move E from D to table | Move D from A to table] | Exploring action Move A from C to E | New state -> Stack 1: [B, C], Stack 2: [D], Stack 3: [E, A] | Exploring action Move B from table to D | New state -> Invalid | Exploring action Move A from C to D | New state -> Stack 1: [B, C], Stack 2: [D, A], Stack 3: [E] | Exploring action Move A from C to table | New state -> Stack 1: [A], Stack 2: [B, C], Stack 3: [D], Stack 4: [E] | Taking action Move A from C to table | Moved to state -> Stack 1: [A], Stack 2: [B, C], Stack 3: [D], Stack 4: [E] | Plan so far [Move E from D to table | Move D from A to table | Move A from C to table] | Exploring action Move B from table to D | New state -> Invalid | Exploring action Move C from B to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Exploring action Move C from B to D | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, C], Stack 4: [E] | Exploring action Move C from B to E | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D], Stack 4: [E, C] | Taking action Move C from B to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Plan so far [Move E from D to table | Move D from A to table | Move A from C to table | Move C from B to table] | Exploring action Move E from table to B | New state -> Stack 1: [A], Stack 2: [B, E], Stack 3: [C], Stack 4: [D] | Exploring action Move C from table to D | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, C], Stack 4: [E] | Exploring action Move B from table to D | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, B], Stack 4: [E] | Taking action Move C from B to D | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, C], Stack 4: [E] | Plan so far [Move E from D to table | Move D from A to table | Move A from C to table | Move C from B to D] | Exploring action Move D from table to B | New state -> Invalid | Exploring action Move E from table to B | New state -> Stack 1: [A], Stack 2: [B, E], Stack 3: [D, C] | Exploring action Move B from table to E | New state -> Stack 1: [A], Stack 2: [D, C], Stack 3: [E, B] | Exploring action Move C from D to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Taking action Move E from table to B | Moved to state -> Stack 1: [A], Stack 2: [B, E], Stack 3: [C], Stack 4: [D] | Plan so far [Move E from D to table | Move D from A to table | Move A from C to table | Move C from B to table | Move E from table to B] | Exploring action Move C from table to E | New state -> Stack 1: [A], Stack 2: [B, E, C], Stack 3: [D] | Exploring action Move C from table to D | New state -> Stack 1: [A], Stack 2: [B, E], Stack 3: [D, C] | Exploring action Move D from table to E | New state -> Stack 1: [A], Stack 2: [B, E, D], Stack 3: [C] | Exploring action Move B from table to D | New state -> Invalid | Exploring action Move B from table to C | New state -> Invalid | Taking action Move E from table to B | Moved to state -> Stack 1: [A], Stack 2: [B, E], Stack 3: [D, C] | Plan so far [Move E from D to table | Move D from A to table | Move A from C to table | Move C from B to D | Move E from table to B] | Exploring action Move C from D to E | New state -> Stack 1: [A], Stack 2: [B, E, C], Stack 3: [D] | Exploring action Move C from D to table | New state -> Stack 1: [A], Stack 2: [B, E], Stack 3: [C], Stack 4: [D] | Exploring action Move E from B to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, C], Stack 4: [E] | Exploring action Move B from table to A | New state -> Invalid | Taking action Move D from table to E | Moved to state -> Stack 1: [A], Stack 2: [B, E, D], Stack 3: [C] | Plan so far [Move E from D to table | Move D from A to table | Move A from C to table | Move C from B to table | Move E from table to B | Move D from table to E] | Exploring action Move B from table to C | New state -> Invalid | Exploring action Move C from table to D | New state -> Stack 1: [A], Stack 2: [B, E, D, C] | Exploring action Move B from table to A | New state -> Invalid | Exploring action Move D from E to table | New state -> Stack 1: [A], Stack 2: [B, E], Stack 3: [C], Stack 4: [D] | Exploring action Move C from table to A | New state -> Stack 1: [A, C], Stack 2: [B, E, D] | Taking action Move C from table to D | Moved to state -> Stack 1: [A], Stack 2: [B, E, D, C] | Plan so far [Move E from D to table | Move D from A to table | Move A from C to table | Move C from B to table | Move E from table to B | Move D from table to E | Move C from table to D] | Reached goal state!",
        "system2_states_v1": 36
    },
    {
        "idx": 875,
        "start": [
            [
                "table",
                "C",
                "E",
                "D",
                "F",
                "A"
            ],
            [
                "table",
                "G",
                "B"
            ]
        ],
        "goal": [
            [
                "table",
                "A",
                "C",
                "G",
                "F"
            ],
            [
                "table",
                "D",
                "B",
                "E"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": true,
                "on": "F",
                "under": -1,
                "ontable": false
            },
            "B": {
                "clear": true,
                "on": "G",
                "under": -1,
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": -1,
                "under": "E",
                "ontable": true
            },
            "D": {
                "clear": false,
                "on": "E",
                "under": "F",
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": "C",
                "under": "D",
                "ontable": false
            },
            "F": {
                "clear": false,
                "on": "D",
                "under": "A",
                "ontable": false
            },
            "G": {
                "clear": false,
                "on": -1,
                "under": "B",
                "ontable": true
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": false,
                "on": -1,
                "under": "C",
                "ontable": true
            },
            "B": {
                "clear": false,
                "on": "D",
                "under": "E",
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": "A",
                "under": "G",
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": -1,
                "under": "B",
                "ontable": true
            },
            "E": {
                "clear": true,
                "on": "B",
                "under": -1,
                "ontable": false
            },
            "F": {
                "clear": true,
                "on": "G",
                "under": -1,
                "ontable": false
            },
            "G": {
                "clear": false,
                "on": "C",
                "under": "F",
                "ontable": false
            }
        },
        "plan_len": 10,
        "num_blocks": 7,
        "prompt": "The initial state:\nThe hand is empty.\nC is on the table. E is on C. D is on E. F is on D. A is on F. A is clear.\nG is on the table. B is on G. B is clear.\n\nThe goal is:\nA is on the table. C is on A. G is on C. F is on G. F is clear.\nD is on the table. B is on D. E is on B. E is clear.\n",
        "system1_plan": "Move A from F to table | Move B from G to table | Move F from D to G | Move D from E to table | Move B from table to D | Move E from C to B | Move C from table to A | Move F from G to table | Move G from table to C | Move F from table to G",
        "system1_states": 10,
        "system2_plan_v1": "Moved to state -> Stack 1: [C, E, D, F, A], Stack 2: [G, B] | Plan so far [] | Exploring action Move A from F to table | New state -> Stack 1: [A], Stack 2: [C, E, D, F], Stack 3: [G, B] | Exploring action Move G from table to A | New state -> Invalid | Exploring action Move B from G to table | New state -> Stack 1: [B], Stack 2: [C, E, D, F, A], Stack 3: [G] | Exploring action Move C from table to B | New state -> Invalid | Exploring action Move A from F to B | New state -> Stack 1: [C, E, D, F], Stack 2: [G, B, A] | Taking action Move A from F to table | Moved to state -> Stack 1: [A], Stack 2: [C, E, D, F], Stack 3: [G, B] | Plan so far [Move A from F to table] | Exploring action Move F from D to table | New state -> Stack 1: [A], Stack 2: [C, E, D], Stack 3: [F], Stack 4: [G, B] | Exploring action Move F from D to A | New state -> Stack 1: [A, F], Stack 2: [C, E, D], Stack 3: [G, B] | Exploring action Move B from G to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, E, D, F], Stack 4: [G] | Exploring action Move D from E to F | New state -> Invalid | Exploring action Move G from table to A | New state -> Invalid | Taking action Move B from G to table | Moved to state -> Stack 1: [B], Stack 2: [C, E, D, F, A], Stack 3: [G] | Plan so far [Move B from G to table] | Exploring action Move A from F to B | New state -> Stack 1: [B, A], Stack 2: [C, E, D, F], Stack 3: [G] | Exploring action Move F from D to A | New state -> Invalid | Exploring action Move A from F to G | New state -> Stack 1: [B], Stack 2: [C, E, D, F], Stack 3: [G, A] | Exploring action Move A from F to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, E, D, F], Stack 4: [G] | Exploring action Move E from C to G | New state -> Invalid | Taking action Move B from G to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, E, D, F], Stack 4: [G] | Plan so far [Move A from F to table | Move B from G to table] | Exploring action Move F from D to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, E, D], Stack 4: [F], Stack 5: [G] | Exploring action Move D from E to F | New state -> Invalid | Exploring action Move F from D to A | New state -> Stack 1: [A, F], Stack 2: [B], Stack 3: [C, E, D], Stack 4: [G] | Exploring action Move E from C to F | New state -> Invalid | Exploring action Move F from D to G | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, E, D], Stack 4: [G, F] | Taking action Move F from D to table | Moved to state -> Stack 1: [A], Stack 2: [C, E, D], Stack 3: [F], Stack 4: [G, B] | Plan so far [Move A from F to table | Move F from D to table] | Exploring action Move B from G to D | New state -> Stack 1: [A], Stack 2: [C, E, D, B], Stack 3: [F], Stack 4: [G] | Exploring action Move D from E to table | New state -> Stack 1: [A], Stack 2: [C, E], Stack 3: [D], Stack 4: [F], Stack 5: [G, B] | Exploring action Move E from C to D | New state -> Invalid | Exploring action Move C from table to F | New state -> Invalid | Exploring action Move B from G to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, E, D], Stack 4: [F], Stack 5: [G] | Taking action Move F from D to G | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, E, D], Stack 4: [G, F] | Plan so far [Move A from F to table | Move B from G to table | Move F from D to G] | Exploring action Move D from E to A | New state -> Stack 1: [A, D], Stack 2: [B], Stack 3: [C, E], Stack 4: [G, F] | Exploring action Move G from table to B | New state -> Invalid | Exploring action Move D from E to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, E], Stack 4: [D], Stack 5: [G, F] | Exploring action Move F from G to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, E, D], Stack 4: [F], Stack 5: [G] | Taking action Move A from F to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, E, D, F], Stack 4: [G] | Plan so far [Move B from G to table | Move A from F to table] | Taking action Move D from E to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, E], Stack 4: [D], Stack 5: [G, F] | Plan so far [Move A from F to table | Move B from G to table | Move F from D to G | Move D from E to table] | Exploring action Move E from C to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [G, F] | Exploring action Move G from table to B | New state -> Invalid | Exploring action Move B from table to D | New state -> Stack 1: [A], Stack 2: [C, E], Stack 3: [D, B], Stack 4: [G, F] | Exploring action Move E from C to B | New state -> Stack 1: [A], Stack 2: [B, E], Stack 3: [C], Stack 4: [D], Stack 5: [G, F] | Exploring action Move G from table to F | New state -> Invalid | Taking action Move F from D to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, E, D], Stack 4: [F], Stack 5: [G] | Plan so far [Move A from F to table | Move B from G to table | Move F from D to table] | Exploring action Move E from C to D | New state -> Invalid | Exploring action Move D from E to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, E], Stack 4: [D], Stack 5: [F], Stack 6: [G] | Exploring action Move E from C to G | New state -> Invalid | Exploring action Move D from E to G | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, E], Stack 4: [F], Stack 5: [G, D] | Exploring action Move D from E to F | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, E], Stack 4: [F, D], Stack 5: [G] | Taking action Move B from table to D | Moved to state -> Stack 1: [A], Stack 2: [C, E], Stack 3: [D, B], Stack 4: [G, F] | Plan so far [Move A from F to table | Move B from G to table | Move F from D to G | Move D from E to table | Move B from table to D] | Exploring action Move D from table to B | New state -> Invalid | Exploring action Move E from C to B | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, B, E], Stack 4: [G, F] | Exploring action Move E from C to table | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, B], Stack 4: [E], Stack 5: [G, F] | Exploring action Move F from G to table | New state -> Stack 1: [A], Stack 2: [C, E], Stack 3: [D, B], Stack 4: [F], Stack 5: [G] | Exploring action Move D from table to E | New state -> Invalid | Taking action Move E from C to B | Moved to state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, B, E], Stack 4: [G, F] | Plan so far [Move A from F to table | Move B from G to table | Move F from D to G | Move D from E to table | Move B from table to D | Move E from C to B] | Exploring action Move C from table to A | New state -> Stack 1: [A, C], Stack 2: [D, B, E], Stack 3: [G, F] | Exploring action Move F from G to table | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, B, E], Stack 4: [F], Stack 5: [G] | Exploring action Move F from G to A | New state -> Stack 1: [A, F], Stack 2: [C], Stack 3: [D, B, E], Stack 4: [G] | Exploring action Move B from D to A | New state -> Invalid | Exploring action Move D from table to E | New state -> Invalid | Taking action Move C from table to A | Moved to state -> Stack 1: [A, C], Stack 2: [D, B, E], Stack 3: [G, F] | Plan so far [Move A from F to table | Move B from G to table | Move F from D to G | Move D from E to table | Move B from table to D | Move E from C to B | Move C from table to A] | Exploring action Move D from table to C | New state -> Invalid | Exploring action Move B from D to table | New state -> Invalid | Exploring action Move F from G to C | New state -> Stack 1: [A, C, F], Stack 2: [D, B, E], Stack 3: [G] | Exploring action Move F from G to table | New state -> Stack 1: [A, C], Stack 2: [D, B, E], Stack 3: [F], Stack 4: [G] | Exploring action Move C from A to table | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, B, E], Stack 4: [G, F] | Taking action Move F from G to table | Moved to state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, B, E], Stack 4: [F], Stack 5: [G] | Plan so far [Move A from F to table | Move B from G to table | Move F from D to G | Move D from E to table | Move B from table to D | Move E from C to B | Move F from G to table] | Exploring action Move F from table to G | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, B, E], Stack 4: [G, F] | Exploring action Move B from D to table | New state -> Invalid | Exploring action Move A from table to F | New state -> Stack 1: [C], Stack 2: [D, B, E], Stack 3: [F, A], Stack 4: [G] | Exploring action Move C from table to A | New state -> Stack 1: [A, C], Stack 2: [D, B, E], Stack 3: [F], Stack 4: [G] | Taking action Move F from G to table | Moved to state -> Stack 1: [A, C], Stack 2: [D, B, E], Stack 3: [F], Stack 4: [G] | Plan so far [Move A from F to table | Move B from G to table | Move F from D to G | Move D from E to table | Move B from table to D | Move E from C to B | Move C from table to A | Move F from G to table] | Exploring action Move G from table to C | New state -> Stack 1: [A, C, G], Stack 2: [D, B, E], Stack 3: [F] | Exploring action Move B from D to E | New state -> Invalid | Exploring action Move D from table to E | New state -> Invalid | Exploring action Move G from table to F | New state -> Stack 1: [A, C], Stack 2: [D, B, E], Stack 3: [F, G] | Exploring action Move F from table to G | New state -> Stack 1: [A, C], Stack 2: [D, B, E], Stack 3: [G, F] | Taking action Move C from table to A | Moved to state -> Stack 1: [A, C], Stack 2: [D, B, E], Stack 3: [F], Stack 4: [G] | Plan so far [Move A from F to table | Move B from G to table | Move F from D to G | Move D from E to table | Move B from table to D | Move E from C to B | Move F from G to table | Move C from table to A] | Taking action Move G from table to C | Moved to state -> Stack 1: [A, C, G], Stack 2: [D, B, E], Stack 3: [F] | Plan so far [Move A from F to table | Move B from G to table | Move F from D to G | Move D from E to table | Move B from table to D | Move E from C to B | Move C from table to A | Move F from G to table | Move G from table to C] | Exploring action Move A from table to E | New state -> Invalid | Exploring action Move F from table to G | New state -> Stack 1: [A, C, G, F], Stack 2: [D, B, E] | Exploring action Move E from B to table | New state -> Stack 1: [A, C, G], Stack 2: [D, B], Stack 3: [E], Stack 4: [F] | Exploring action Move G from C to table | New state -> Stack 1: [A, C], Stack 2: [D, B, E], Stack 3: [F], Stack 4: [G] | Exploring action Move B from D to table | New state -> Invalid | Taking action Move F from table to G | Moved to state -> Stack 1: [A, C, G, F], Stack 2: [D, B, E] | Plan so far [Move A from F to table | Move B from G to table | Move F from D to G | Move D from E to table | Move B from table to D | Move E from C to B | Move C from table to A | Move F from G to table | Move G from table to C | Move F from table to G] | Reached goal state!",
        "system2_states_v1": 68
    },
    {
        "idx": 823,
        "start": [
            [
                "table",
                "A",
                "E",
                "G",
                "C"
            ],
            [
                "table",
                "F",
                "D",
                "B"
            ]
        ],
        "goal": [
            [
                "table",
                "B",
                "C",
                "A"
            ],
            [
                "table",
                "G",
                "F",
                "E",
                "D"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": false,
                "on": -1,
                "under": "E",
                "ontable": true
            },
            "B": {
                "clear": true,
                "on": "D",
                "under": -1,
                "ontable": false
            },
            "C": {
                "clear": true,
                "on": "G",
                "under": -1,
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": "F",
                "under": "B",
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": "A",
                "under": "G",
                "ontable": false
            },
            "F": {
                "clear": false,
                "on": -1,
                "under": "D",
                "ontable": true
            },
            "G": {
                "clear": false,
                "on": "E",
                "under": "C",
                "ontable": false
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": true,
                "on": "C",
                "under": -1,
                "ontable": false
            },
            "B": {
                "clear": false,
                "on": -1,
                "under": "C",
                "ontable": true
            },
            "C": {
                "clear": false,
                "on": "B",
                "under": "A",
                "ontable": false
            },
            "D": {
                "clear": true,
                "on": "E",
                "under": -1,
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": "F",
                "under": "D",
                "ontable": false
            },
            "F": {
                "clear": false,
                "on": "G",
                "under": "E",
                "ontable": false
            },
            "G": {
                "clear": false,
                "on": -1,
                "under": "F",
                "ontable": true
            }
        },
        "plan_len": 9,
        "num_blocks": 7,
        "prompt": "The initial state:\nThe hand is empty.\nA is on the table. E is on A. G is on E. C is on G. C is clear.\nF is on the table. D is on F. B is on D. B is clear.\n\nThe goal is:\nB is on the table. C is on B. A is on C. A is clear.\nG is on the table. F is on G. E is on F. D is on E. D is clear.\n",
        "system1_plan": "Move B from D to table | Move C from G to B | Move D from F to table | Move G from E to table | Move E from A to table | Move A from table to C | Move F from table to G | Move E from table to F | Move D from table to E",
        "system1_states": 9,
        "system2_plan_v1": "Moved to state -> Stack 1: [A, E, G, C], Stack 2: [F, D, B] | Plan so far [] | Exploring action Move B from D to C | New state -> Stack 1: [A, E, G, C, B], Stack 2: [F, D] | Exploring action Move C from G to table | New state -> Stack 1: [A, E, G], Stack 2: [C], Stack 3: [F, D, B] | Exploring action Move B from D to table | New state -> Stack 1: [A, E, G, C], Stack 2: [B], Stack 3: [F, D] | Exploring action Move D from F to C | New state -> Invalid | Taking action Move B from D to table | Moved to state -> Stack 1: [A, E, G, C], Stack 2: [B], Stack 3: [F, D] | Plan so far [Move B from D to table] | Exploring action Move D from F to table | New state -> Stack 1: [A, E, G, C], Stack 2: [B], Stack 3: [D], Stack 4: [F] | Exploring action Move A from table to B | New state -> Invalid | Exploring action Move C from G to table | New state -> Stack 1: [A, E, G], Stack 2: [B], Stack 3: [C], Stack 4: [F, D] | Exploring action Move C from G to B | New state -> Stack 1: [A, E, G], Stack 2: [B, C], Stack 3: [F, D] | Taking action Move C from G to B | Moved to state -> Stack 1: [A, E, G], Stack 2: [B, C], Stack 3: [F, D] | Plan so far [Move B from D to table | Move C from G to B] | Exploring action Move B from table to D | New state -> Invalid | Exploring action Move G from E to table | New state -> Stack 1: [A, E], Stack 2: [B, C], Stack 3: [F, D], Stack 4: [G] | Exploring action Move D from F to G | New state -> Stack 1: [A, E, G, D], Stack 2: [B, C], Stack 3: [F] | Exploring action Move D from F to table | New state -> Stack 1: [A, E, G], Stack 2: [B, C], Stack 3: [D], Stack 4: [F] | Taking action Move D from F to table | Moved to state -> Stack 1: [A, E, G], Stack 2: [B, C], Stack 3: [D], Stack 4: [F] | Plan so far [Move B from D to table | Move C from G to B | Move D from F to table] | Exploring action Move E from A to F | New state -> Invalid | Exploring action Move G from E to table | New state -> Stack 1: [A, E], Stack 2: [B, C], Stack 3: [D], Stack 4: [F], Stack 5: [G] | Exploring action Move G from E to C | New state -> Stack 1: [A, E], Stack 2: [B, C, G], Stack 3: [D], Stack 4: [F] | Exploring action Move G from E to F | New state -> Stack 1: [A, E], Stack 2: [B, C], Stack 3: [D], Stack 4: [F, G] | Exploring action Move E from A to G | New state -> Invalid | Taking action Move G from E to table | Moved to state -> Stack 1: [A, E], Stack 2: [B, C], Stack 3: [F, D], Stack 4: [G] | Plan so far [Move B from D to table | Move C from G to B | Move G from E to table] | Exploring action Move E from A to table | New state -> Stack 1: [A], Stack 2: [B, C], Stack 3: [E], Stack 4: [F, D], Stack 5: [G] | Exploring action Move D from F to table | New state -> Stack 1: [A, E], Stack 2: [B, C], Stack 3: [D], Stack 4: [F], Stack 5: [G] | Exploring action Move F from table to G | New state -> Invalid | Exploring action Move B from table to G | New state -> Invalid | Exploring action Move D from F to E | New state -> Stack 1: [A, E, D], Stack 2: [B, C], Stack 3: [F], Stack 4: [G] | Taking action Move G from E to table | Moved to state -> Stack 1: [A, E], Stack 2: [B, C], Stack 3: [D], Stack 4: [F], Stack 5: [G] | Plan so far [Move B from D to table | Move C from G to B | Move D from F to table | Move G from E to table] | Exploring action Move E from A to D | New state -> Stack 1: [A], Stack 2: [B, C], Stack 3: [D, E], Stack 4: [F], Stack 5: [G] | Exploring action Move E from A to table | New state -> Stack 1: [A], Stack 2: [B, C], Stack 3: [D], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Exploring action Move F from table to G | New state -> Stack 1: [A, E], Stack 2: [B, C], Stack 3: [D], Stack 4: [G, F] | Exploring action Move A from table to D | New state -> Invalid | Taking action Move D from F to table | Moved to state -> Stack 1: [A, E], Stack 2: [B, C], Stack 3: [D], Stack 4: [F], Stack 5: [G] | Plan so far [Move B from D to table | Move C from G to B | Move G from E to table | Move D from F to table] | Taking action Move E from A to table | Moved to state -> Stack 1: [A], Stack 2: [B, C], Stack 3: [D], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Plan so far [Move B from D to table | Move C from G to B | Move D from F to table | Move G from E to table | Move E from A to table] | Exploring action Move A from table to C | New state -> Stack 1: [B, C, A], Stack 2: [D], Stack 3: [E], Stack 4: [F], Stack 5: [G] | Exploring action Move F from table to G | New state -> Stack 1: [A], Stack 2: [B, C], Stack 3: [D], Stack 4: [E], Stack 5: [G, F] | Exploring action Move D from table to E | New state -> Stack 1: [A], Stack 2: [B, C], Stack 3: [E, D], Stack 4: [F], Stack 5: [G] | Exploring action Move B from table to G | New state -> Invalid | Exploring action Move B from table to D | New state -> Invalid | Taking action Move A from table to C | Moved to state -> Stack 1: [B, C, A], Stack 2: [D], Stack 3: [E], Stack 4: [F], Stack 5: [G] | Plan so far [Move B from D to table | Move C from G to B | Move D from F to table | Move G from E to table | Move E from A to table | Move A from table to C] | Exploring action Move D from table to E | New state -> Stack 1: [B, C, A], Stack 2: [E, D], Stack 3: [F], Stack 4: [G] | Exploring action Move E from table to F | New state -> Stack 1: [B, C, A], Stack 2: [D], Stack 3: [F, E], Stack 4: [G] | Exploring action Move F from table to G | New state -> Stack 1: [B, C, A], Stack 2: [D], Stack 3: [E], Stack 4: [G, F] | Exploring action Move B from table to A | New state -> Invalid | Taking action Move F from table to G | Moved to state -> Stack 1: [B, C, A], Stack 2: [D], Stack 3: [E], Stack 4: [G, F] | Plan so far [Move B from D to table | Move C from G to B | Move D from F to table | Move G from E to table | Move E from A to table | Move A from table to C | Move F from table to G] | Exploring action Move D from table to F | New state -> Stack 1: [B, C, A], Stack 2: [E], Stack 3: [G, F, D] | Exploring action Move D from table to E | New state -> Stack 1: [B, C, A], Stack 2: [E, D], Stack 3: [G, F] | Exploring action Move E from table to F | New state -> Stack 1: [B, C, A], Stack 2: [D], Stack 3: [G, F, E] | Exploring action Move C from B to E | New state -> Invalid | Taking action Move E from table to F | Moved to state -> Stack 1: [B, C, A], Stack 2: [D], Stack 3: [G, F, E] | Plan so far [Move B from D to table | Move C from G to B | Move D from F to table | Move G from E to table | Move E from A to table | Move A from table to C | Move F from table to G | Move E from table to F] | Exploring action Move G from table to D | New state -> Invalid | Exploring action Move D from table to E | New state -> Stack 1: [B, C, A], Stack 2: [G, F, E, D] | Exploring action Move E from F to table | New state -> Stack 1: [B, C, A], Stack 2: [D], Stack 3: [E], Stack 4: [G, F] | Exploring action Move F from G to A | New state -> Invalid | Exploring action Move A from C to table | New state -> Stack 1: [A], Stack 2: [B, C], Stack 3: [D], Stack 4: [G, F, E] | Taking action Move D from table to E | Moved to state -> Stack 1: [B, C, A], Stack 2: [G, F, E, D] | Plan so far [Move B from D to table | Move C from G to B | Move D from F to table | Move G from E to table | Move E from A to table | Move A from table to C | Move F from table to G | Move E from table to F | Move D from table to E] | Reached goal state!",
        "system2_states_v1": 44
    },
    {
        "idx": 819,
        "start": [
            [
                "table",
                "A",
                "F",
                "D",
                "E"
            ],
            [
                "table",
                "B"
            ],
            [
                "table",
                "G",
                "C"
            ]
        ],
        "goal": [
            [
                "table",
                "E",
                "A",
                "B",
                "G",
                "D",
                "C"
            ],
            [
                "table",
                "F"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": false,
                "on": -1,
                "under": "F",
                "ontable": true
            },
            "B": {
                "clear": true,
                "on": -1,
                "under": -1,
                "ontable": true
            },
            "C": {
                "clear": true,
                "on": "G",
                "under": -1,
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": "F",
                "under": "E",
                "ontable": false
            },
            "E": {
                "clear": true,
                "on": "D",
                "under": -1,
                "ontable": false
            },
            "F": {
                "clear": false,
                "on": "A",
                "under": "D",
                "ontable": false
            },
            "G": {
                "clear": false,
                "on": -1,
                "under": "C",
                "ontable": true
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": false,
                "on": "E",
                "under": "B",
                "ontable": false
            },
            "B": {
                "clear": false,
                "on": "A",
                "under": "G",
                "ontable": false
            },
            "C": {
                "clear": true,
                "on": "D",
                "under": -1,
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": "G",
                "under": "C",
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": -1,
                "under": "A",
                "ontable": true
            },
            "F": {
                "clear": true,
                "on": -1,
                "under": -1,
                "ontable": true
            },
            "G": {
                "clear": false,
                "on": "B",
                "under": "D",
                "ontable": false
            }
        },
        "plan_len": 9,
        "num_blocks": 7,
        "prompt": "The initial state:\nThe hand is empty.\nA is on the table. F is on A. D is on F. E is on D. E is clear.\nB is on the table. B is clear.\nG is on the table. C is on G. C is clear.\n\nThe goal is:\nE is on the table. A is on E. B is on A. G is on B. D is on G. C is on D. C is clear.\nF is on the table. F is clear.\n",
        "system1_plan": "Move E from D to table | Move D from F to table | Move F from A to table | Move A from table to E | Move B from table to A | Move C from G to table | Move G from table to B | Move D from table to G | Move C from table to D",
        "system1_states": 9,
        "system2_plan_v1": "Moved to state -> Stack 1: [A, F, D, E], Stack 2: [B], Stack 3: [G, C] | Plan so far [] | Exploring action Move C from G to table | New state -> Stack 1: [A, F, D, E], Stack 2: [B], Stack 3: [C], Stack 4: [G] | Exploring action Move E from D to table | New state -> Stack 1: [A, F, D], Stack 2: [B], Stack 3: [E], Stack 4: [G, C] | Exploring action Move D from F to C | New state -> Invalid | Exploring action Move E from D to B | New state -> Stack 1: [A, F, D], Stack 2: [B, E], Stack 3: [G, C] | Taking action Move C from G to table | Moved to state -> Stack 1: [A, F, D, E], Stack 2: [B], Stack 3: [C], Stack 4: [G] | Plan so far [Move C from G to table] | Exploring action Move D from F to table | New state -> Invalid | Exploring action Move E from D to B | New state -> Stack 1: [A, F, D], Stack 2: [B, E], Stack 3: [C], Stack 4: [G] | Exploring action Move A from table to B | New state -> Invalid | Exploring action Move E from D to G | New state -> Stack 1: [A, F, D], Stack 2: [B], Stack 3: [C], Stack 4: [G, E] | Exploring action Move E from D to table | New state -> Stack 1: [A, F, D], Stack 2: [B], Stack 3: [C], Stack 4: [E], Stack 5: [G] | Taking action Move E from D to table | Moved to state -> Stack 1: [A, F, D], Stack 2: [B], Stack 3: [E], Stack 4: [G, C] | Plan so far [Move E from D to table] | Exploring action Move C from G to table | New state -> Stack 1: [A, F, D], Stack 2: [B], Stack 3: [C], Stack 4: [E], Stack 5: [G] | Exploring action Move F from A to table | New state -> Invalid | Exploring action Move D from F to table | New state -> Stack 1: [A, F], Stack 2: [B], Stack 3: [D], Stack 4: [E], Stack 5: [G, C] | Exploring action Move C from G to D | New state -> Stack 1: [A, F, D, C], Stack 2: [B], Stack 3: [E], Stack 4: [G] | Taking action Move E from D to table | Moved to state -> Stack 1: [A, F, D], Stack 2: [B], Stack 3: [C], Stack 4: [E], Stack 5: [G] | Plan so far [Move C from G to table | Move E from D to table] | Exploring action Move A from table to B | New state -> Invalid | Exploring action Move D from F to G | New state -> Stack 1: [A, F], Stack 2: [B], Stack 3: [C], Stack 4: [E], Stack 5: [G, D] | Exploring action Move D from F to E | New state -> Stack 1: [A, F], Stack 2: [B], Stack 3: [C], Stack 4: [E, D], Stack 5: [G] | Exploring action Move D from F to table | New state -> Stack 1: [A, F], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [G] | Taking action Move C from G to D | Moved to state -> Stack 1: [A, F, D, C], Stack 2: [B], Stack 3: [E], Stack 4: [G] | Plan so far [Move E from D to table | Move C from G to D] | Exploring action Move C from D to table | New state -> Stack 1: [A, F, D], Stack 2: [B], Stack 3: [C], Stack 4: [E], Stack 5: [G] | Exploring action Move B from table to G | New state -> Stack 1: [A, F, D, C], Stack 2: [E], Stack 3: [G, B] | Exploring action Move C from D to G | New state -> Stack 1: [A, F, D], Stack 2: [B], Stack 3: [E], Stack 4: [G, C] | Exploring action Move D from F to B | New state -> Invalid | Taking action Move D from F to table | Moved to state -> Stack 1: [A, F], Stack 2: [B], Stack 3: [D], Stack 4: [E], Stack 5: [G, C] | Plan so far [Move E from D to table | Move D from F to table] | Exploring action Move F from A to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D], Stack 4: [E], Stack 5: [F], Stack 6: [G, C] | Exploring action Move C from G to D | New state -> Stack 1: [A, F], Stack 2: [B], Stack 3: [D, C], Stack 4: [E], Stack 5: [G] | Exploring action Move A from table to E | New state -> Invalid | Exploring action Move C from G to table | New state -> Stack 1: [A, F], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [G] | Taking action Move F from A to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [D], Stack 4: [E], Stack 5: [F], Stack 6: [G, C] | Plan so far [Move E from D to table | Move D from F to table | Move F from A to table] | Exploring action Move G from table to B | New state -> Invalid | Exploring action Move C from G to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F], Stack 7: [G] | Exploring action Move G from table to C | New state -> Invalid | Exploring action Move C from G to D | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, C], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Exploring action Move A from table to E | New state -> Stack 1: [B], Stack 2: [D], Stack 3: [E, A], Stack 4: [F], Stack 5: [G, C] | Taking action Move A from table to E | Moved to state -> Stack 1: [B], Stack 2: [D], Stack 3: [E, A], Stack 4: [F], Stack 5: [G, C] | Plan so far [Move E from D to table | Move D from F to table | Move F from A to table | Move A from table to E] | Exploring action Move C from G to table | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D], Stack 4: [E, A], Stack 5: [F], Stack 6: [G] | Exploring action Move G from table to D | New state -> Invalid | Exploring action Move B from table to A | New state -> Stack 1: [D], Stack 2: [E, A, B], Stack 3: [F], Stack 4: [G, C] | Exploring action Move C from G to D | New state -> Stack 1: [B], Stack 2: [D, C], Stack 3: [E, A], Stack 4: [F], Stack 5: [G] | Exploring action Move G from table to C | New state -> Invalid | Taking action Move C from G to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F], Stack 7: [G] | Plan so far [Move E from D to table | Move D from F to table | Move F from A to table | Move C from G to table] | Exploring action Move A from table to E | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D], Stack 4: [E, A], Stack 5: [F], Stack 6: [G] | Exploring action Move A from table to D | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, A], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Exploring action Move C from table to D | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, C], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Taking action Move C from G to D | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, C], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Plan so far [Move E from D to table | Move D from F to table | Move F from A to table | Move C from G to D] | Exploring action Move A from table to B | New state -> Stack 1: [B, A], Stack 2: [D, C], Stack 3: [E], Stack 4: [F], Stack 5: [G] | Exploring action Move D from table to F | New state -> Invalid | Exploring action Move A from table to E | New state -> Stack 1: [B], Stack 2: [D, C], Stack 3: [E, A], Stack 4: [F], Stack 5: [G] | Exploring action Move C from D to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F], Stack 7: [G] | Taking action Move B from table to A | Moved to state -> Stack 1: [D], Stack 2: [E, A, B], Stack 3: [F], Stack 4: [G, C] | Plan so far [Move E from D to table | Move D from F to table | Move F from A to table | Move A from table to E | Move B from table to A] | Exploring action Move C from G to B | New state -> Stack 1: [D], Stack 2: [E, A, B, C], Stack 3: [F], Stack 4: [G] | Exploring action Move C from G to table | New state -> Stack 1: [C], Stack 2: [D], Stack 3: [E, A, B], Stack 4: [F], Stack 5: [G] | Exploring action Move A from E to C | New state -> Invalid | Exploring action Move C from G to D | New state -> Stack 1: [D, C], Stack 2: [E, A, B], Stack 3: [F], Stack 4: [G] | Exploring action Move G from table to C | New state -> Invalid | Taking action Move C from G to table | Moved to state -> Stack 1: [B], Stack 2: [C], Stack 3: [D], Stack 4: [E, A], Stack 5: [F], Stack 6: [G] | Plan so far [Move E from D to table | Move D from F to table | Move F from A to table | Move A from table to E | Move C from G to table] | Exploring action Move A from E to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F], Stack 7: [G] | Exploring action Move E from table to F | New state -> Invalid | Exploring action Move E from table to G | New state -> Invalid | Exploring action Move B from table to A | New state -> Stack 1: [C], Stack 2: [D], Stack 3: [E, A, B], Stack 4: [F], Stack 5: [G] | Exploring action Move C from table to D | New state -> Stack 1: [B], Stack 2: [D, C], Stack 3: [E, A], Stack 4: [F], Stack 5: [G] | Taking action Move C from G to table | Moved to state -> Stack 1: [C], Stack 2: [D], Stack 3: [E, A, B], Stack 4: [F], Stack 5: [G] | Plan so far [Move E from D to table | Move D from F to table | Move F from A to table | Move A from table to E | Move B from table to A | Move C from G to table] | Exploring action Move E from table to D | New state -> Invalid | Exploring action Move C from table to D | New state -> Stack 1: [D, C], Stack 2: [E, A, B], Stack 3: [F], Stack 4: [G] | Exploring action Move G from table to B | New state -> Stack 1: [C], Stack 2: [D], Stack 3: [E, A, B, G], Stack 4: [F] | Exploring action Move B from A to table | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D], Stack 4: [E, A], Stack 5: [F], Stack 6: [G] | Taking action Move C from G to D | Moved to state -> Stack 1: [D, C], Stack 2: [E, A, B], Stack 3: [F], Stack 4: [G] | Plan so far [Move E from D to table | Move D from F to table | Move F from A to table | Move A from table to E | Move B from table to A | Move C from G to D] | Exploring action Move C from D to B | New state -> Stack 1: [D], Stack 2: [E, A, B, C], Stack 3: [F], Stack 4: [G] | Exploring action Move C from D to table | New state -> Stack 1: [C], Stack 2: [D], Stack 3: [E, A, B], Stack 4: [F], Stack 5: [G] | Exploring action Move G from table to B | New state -> Stack 1: [D, C], Stack 2: [E, A, B, G], Stack 3: [F] | Exploring action Move D from table to F | New state -> Invalid | Taking action Move B from table to A | Moved to state -> Stack 1: [C], Stack 2: [D], Stack 3: [E, A, B], Stack 4: [F], Stack 5: [G] | Plan so far [Move E from D to table | Move D from F to table | Move F from A to table | Move A from table to E | Move C from G to table | Move B from table to A] | Taking action Move C from G to D | Moved to state -> Stack 1: [B], Stack 2: [D, C], Stack 3: [E, A], Stack 4: [F], Stack 5: [G] | Plan so far [Move E from D to table | Move D from F to table | Move F from A to table | Move A from table to E | Move C from G to D] | Exploring action Move C from D to table | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D], Stack 4: [E, A], Stack 5: [F], Stack 6: [G] | Exploring action Move A from E to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, C], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Exploring action Move B from table to A | New state -> Stack 1: [D, C], Stack 2: [E, A, B], Stack 3: [F], Stack 4: [G] | Exploring action Move E from table to C | New state -> Invalid | Taking action Move A from table to E | Moved to state -> Stack 1: [B], Stack 2: [D, C], Stack 3: [E, A], Stack 4: [F], Stack 5: [G] | Plan so far [Move E from D to table | Move D from F to table | Move F from A to table | Move C from G to D | Move A from table to E] | Taking action Move A from table to E | Moved to state -> Stack 1: [B], Stack 2: [C], Stack 3: [D], Stack 4: [E, A], Stack 5: [F], Stack 6: [G] | Plan so far [Move E from D to table | Move D from F to table | Move F from A to table | Move C from G to table | Move A from table to E] | Taking action Move G from table to B | Moved to state -> Stack 1: [C], Stack 2: [D], Stack 3: [E, A, B, G], Stack 4: [F] | Plan so far [Move E from D to table | Move D from F to table | Move F from A to table | Move A from table to E | Move B from table to A | Move C from G to table | Move G from table to B] | Exploring action Move C from table to G | New state -> Stack 1: [D], Stack 2: [E, A, B, G, C], Stack 3: [F] | Exploring action Move D from table to G | New state -> Stack 1: [C], Stack 2: [E, A, B, G, D], Stack 3: [F] | Exploring action Move B from A to D | New state -> Invalid | Exploring action Move E from table to D | New state -> Invalid | Exploring action Move C from table to D | New state -> Stack 1: [D, C], Stack 2: [E, A, B, G], Stack 3: [F] | Taking action Move B from table to A | Moved to state -> Stack 1: [D, C], Stack 2: [E, A, B], Stack 3: [F], Stack 4: [G] | Plan so far [Move E from D to table | Move D from F to table | Move F from A to table | Move A from table to E | Move C from G to D | Move B from table to A] | Taking action Move G from table to B | Moved to state -> Stack 1: [D, C], Stack 2: [E, A, B, G], Stack 3: [F] | Plan so far [Move E from D to table | Move D from F to table | Move F from A to table | Move A from table to E | Move B from table to A | Move C from G to D | Move G from table to B] | Exploring action Move E from table to G | New state -> Invalid | Exploring action Move C from D to table | New state -> Stack 1: [C], Stack 2: [D], Stack 3: [E, A, B, G], Stack 4: [F] | Exploring action Move B from A to F | New state -> Invalid | Exploring action Move G from B to table | New state -> Stack 1: [D, C], Stack 2: [E, A, B], Stack 3: [F], Stack 4: [G] | Exploring action Move C from D to G | New state -> Stack 1: [D], Stack 2: [E, A, B, G, C], Stack 3: [F] | Taking action Move D from table to G | Moved to state -> Stack 1: [C], Stack 2: [E, A, B, G, D], Stack 3: [F] | Plan so far [Move E from D to table | Move D from F to table | Move F from A to table | Move A from table to E | Move B from table to A | Move C from G to table | Move G from table to B | Move D from table to G] | Exploring action Move F from table to C | New state -> Stack 1: [C, F], Stack 2: [E, A, B, G, D] | Exploring action Move E from table to F | New state -> Invalid | Exploring action Move D from G to table | New state -> Stack 1: [C], Stack 2: [D], Stack 3: [E, A, B, G], Stack 4: [F] | Exploring action Move C from table to D | New state -> Stack 1: [E, A, B, G, D, C], Stack 2: [F] | Taking action Move C from table to D | Moved to state -> Stack 1: [E, A, B, G, D, C], Stack 2: [F] | Plan so far [Move E from D to table | Move D from F to table | Move F from A to table | Move A from table to E | Move B from table to A | Move C from G to table | Move G from table to B | Move D from table to G | Move C from table to D] | Reached goal state!",
        "system2_states_v1": 78
    },
    {
        "idx": 818,
        "start": [
            [
                "table",
                "B",
                "A",
                "E",
                "D"
            ],
            [
                "table",
                "C",
                "G",
                "F"
            ]
        ],
        "goal": [
            [
                "table",
                "B",
                "C",
                "A"
            ],
            [
                "table",
                "E",
                "F",
                "D"
            ],
            [
                "table",
                "G"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": false,
                "on": "B",
                "under": "E",
                "ontable": false
            },
            "B": {
                "clear": false,
                "on": -1,
                "under": "A",
                "ontable": true
            },
            "C": {
                "clear": false,
                "on": -1,
                "under": "G",
                "ontable": true
            },
            "D": {
                "clear": true,
                "on": "E",
                "under": -1,
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": "A",
                "under": "D",
                "ontable": false
            },
            "F": {
                "clear": true,
                "on": "G",
                "under": -1,
                "ontable": false
            },
            "G": {
                "clear": false,
                "on": "C",
                "under": "F",
                "ontable": false
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": true,
                "on": "C",
                "under": -1,
                "ontable": false
            },
            "B": {
                "clear": false,
                "on": -1,
                "under": "C",
                "ontable": true
            },
            "C": {
                "clear": false,
                "on": "B",
                "under": "A",
                "ontable": false
            },
            "D": {
                "clear": true,
                "on": "F",
                "under": -1,
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": -1,
                "under": "F",
                "ontable": true
            },
            "F": {
                "clear": false,
                "on": "E",
                "under": "D",
                "ontable": false
            },
            "G": {
                "clear": true,
                "on": -1,
                "under": -1,
                "ontable": true
            }
        },
        "plan_len": 9,
        "num_blocks": 7,
        "prompt": "The initial state:\nThe hand is empty.\nB is on the table. A is on B. E is on A. D is on E. D is clear.\nC is on the table. G is on C. F is on G. F is clear.\n\nThe goal is:\nB is on the table. C is on B. A is on C. A is clear.\nE is on the table. F is on E. D is on F. D is clear.\nG is on the table. G is clear.\n",
        "system1_plan": "Move F from G to table | Move G from C to table | Move D from E to table | Move E from A to table | Move A from B to table | Move C from table to B | Move A from table to C | Move F from table to E | Move D from table to F",
        "system1_states": 9,
        "system2_plan_v1": "Moved to state -> Stack 1: [B, A, E, D], Stack 2: [C, G, F] | Plan so far [] | Exploring action Move A from B to D | New state -> Invalid | Exploring action Move F from G to table | New state -> Stack 1: [B, A, E, D], Stack 2: [C, G], Stack 3: [F] | Exploring action Move B from table to F | New state -> Invalid | Exploring action Move D from E to table | New state -> Stack 1: [B, A, E], Stack 2: [C, G, F], Stack 3: [D] | Exploring action Move D from E to F | New state -> Stack 1: [B, A, E], Stack 2: [C, G, F, D] | Taking action Move D from E to table | Moved to state -> Stack 1: [B, A, E], Stack 2: [C, G, F], Stack 3: [D] | Plan so far [Move D from E to table] | Exploring action Move E from A to table | New state -> Stack 1: [B, A], Stack 2: [C, G, F], Stack 3: [D], Stack 4: [E] | Exploring action Move F from G to D | New state -> Stack 1: [B, A, E], Stack 2: [C, G], Stack 3: [D, F] | Exploring action Move F from G to table | New state -> Stack 1: [B, A, E], Stack 2: [C, G], Stack 3: [D], Stack 4: [F] | Exploring action Move A from B to F | New state -> Invalid | Exploring action Move G from C to D | New state -> Invalid | Taking action Move F from G to table | Moved to state -> Stack 1: [B, A, E, D], Stack 2: [C, G], Stack 3: [F] | Plan so far [Move F from G to table] | Exploring action Move C from table to D | New state -> Invalid | Exploring action Move D from E to table | New state -> Stack 1: [B, A, E], Stack 2: [C, G], Stack 3: [D], Stack 4: [F] | Exploring action Move G from C to table | New state -> Stack 1: [B, A, E, D], Stack 2: [C], Stack 3: [F], Stack 4: [G] | Exploring action Move D from E to F | New state -> Stack 1: [B, A, E], Stack 2: [C, G], Stack 3: [F, D] | Taking action Move G from C to table | Moved to state -> Stack 1: [B, A, E, D], Stack 2: [C], Stack 3: [F], Stack 4: [G] | Plan so far [Move F from G to table | Move G from C to table] | Exploring action Move D from E to table | New state -> Stack 1: [B, A, E], Stack 2: [C], Stack 3: [D], Stack 4: [F], Stack 5: [G] | Exploring action Move D from E to C | New state -> Stack 1: [B, A, E], Stack 2: [C, D], Stack 3: [F], Stack 4: [G] | Exploring action Move D from E to F | New state -> Stack 1: [B, A, E], Stack 2: [C], Stack 3: [F, D], Stack 4: [G] | Exploring action Move A from B to G | New state -> Invalid | Taking action Move D from E to table | Moved to state -> Stack 1: [B, A, E], Stack 2: [C], Stack 3: [D], Stack 4: [F], Stack 5: [G] | Plan so far [Move F from G to table | Move G from C to table | Move D from E to table] | Exploring action Move D from table to F | New state -> Stack 1: [B, A, E], Stack 2: [C], Stack 3: [F, D], Stack 4: [G] | Exploring action Move A from B to D | New state -> Invalid | Exploring action Move E from A to table | New state -> Stack 1: [B, A], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Exploring action Move E from A to F | New state -> Stack 1: [B, A], Stack 2: [C], Stack 3: [D], Stack 4: [F, E], Stack 5: [G] | Exploring action Move B from table to F | New state -> Invalid | Taking action Move D from E to F | Moved to state -> Stack 1: [B, A, E], Stack 2: [C], Stack 3: [F, D], Stack 4: [G] | Plan so far [Move F from G to table | Move G from C to table | Move D from E to F] | Exploring action Move F from table to G | New state -> Invalid | Exploring action Move E from A to C | New state -> Stack 1: [B, A], Stack 2: [C, E], Stack 3: [F, D], Stack 4: [G] | Exploring action Move D from F to table | New state -> Stack 1: [B, A, E], Stack 2: [C], Stack 3: [D], Stack 4: [F], Stack 5: [G] | Exploring action Move E from A to table | New state -> Stack 1: [B, A], Stack 2: [C], Stack 3: [E], Stack 4: [F, D], Stack 5: [G] | Taking action Move E from A to table | Moved to state -> Stack 1: [B, A], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Plan so far [Move F from G to table | Move G from C to table | Move D from E to table | Move E from A to table] | Exploring action Move A from B to C | New state -> Stack 1: [B], Stack 2: [C, A], Stack 3: [D], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Exploring action Move F from table to E | New state -> Stack 1: [B, A], Stack 2: [C], Stack 3: [D], Stack 4: [E, F], Stack 5: [G] | Exploring action Move B from table to D | New state -> Invalid | Exploring action Move A from B to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F], Stack 7: [G] | Taking action Move E from A to table | Moved to state -> Stack 1: [B, A], Stack 2: [C], Stack 3: [E], Stack 4: [F, D], Stack 5: [G] | Plan so far [Move F from G to table | Move G from C to table | Move D from E to F | Move E from A to table] | Exploring action Move D from F to table | New state -> Stack 1: [B, A], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Exploring action Move A from B to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [E], Stack 5: [F, D], Stack 6: [G] | Exploring action Move B from table to G | New state -> Invalid | Exploring action Move A from B to C | New state -> Stack 1: [B], Stack 2: [C, A], Stack 3: [E], Stack 4: [F, D], Stack 5: [G] | Exploring action Move F from table to G | New state -> Invalid | Taking action Move A from B to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F], Stack 7: [G] | Plan so far [Move F from G to table | Move G from C to table | Move D from E to table | Move E from A to table | Move A from B to table] | Exploring action Move C from table to B | New state -> Stack 1: [A], Stack 2: [B, C], Stack 3: [D], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Exploring action Move F from table to E | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E, F], Stack 6: [G] | Exploring action Move A from table to C | New state -> Stack 1: [B], Stack 2: [C, A], Stack 3: [D], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Taking action Move A from B to C | Moved to state -> Stack 1: [B], Stack 2: [C, A], Stack 3: [D], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Plan so far [Move F from G to table | Move G from C to table | Move D from E to table | Move E from A to table | Move A from B to C] | Exploring action Move D from table to F | New state -> Stack 1: [B], Stack 2: [C, A], Stack 3: [E], Stack 4: [F, D], Stack 5: [G] | Exploring action Move C from table to B | New state -> Invalid | Exploring action Move F from table to E | New state -> Stack 1: [B], Stack 2: [C, A], Stack 3: [D], Stack 4: [E, F], Stack 5: [G] | Exploring action Move A from C to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F], Stack 7: [G] | Taking action Move C from table to B | Moved to state -> Stack 1: [A], Stack 2: [B, C], Stack 3: [D], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Plan so far [Move F from G to table | Move G from C to table | Move D from E to table | Move E from A to table | Move A from B to table | Move C from table to B] | Exploring action Move A from table to C | New state -> Stack 1: [B, C, A], Stack 2: [D], Stack 3: [E], Stack 4: [F], Stack 5: [G] | Exploring action Move F from table to E | New state -> Stack 1: [A], Stack 2: [B, C], Stack 3: [D], Stack 4: [E, F], Stack 5: [G] | Exploring action Move D from table to F | New state -> Stack 1: [A], Stack 2: [B, C], Stack 3: [E], Stack 4: [F, D], Stack 5: [G] | Exploring action Move B from table to G | New state -> Invalid | Taking action Move A from table to C | Moved to state -> Stack 1: [B, C, A], Stack 2: [D], Stack 3: [E], Stack 4: [F], Stack 5: [G] | Plan so far [Move F from G to table | Move G from C to table | Move D from E to table | Move E from A to table | Move A from B to table | Move C from table to B | Move A from table to C] | Exploring action Move C from B to A | New state -> Invalid | Exploring action Move F from table to E | New state -> Stack 1: [B, C, A], Stack 2: [D], Stack 3: [E, F], Stack 4: [G] | Exploring action Move E from table to F | New state -> Stack 1: [B, C, A], Stack 2: [D], Stack 3: [F, E], Stack 4: [G] | Exploring action Move D from table to F | New state -> Stack 1: [B, C, A], Stack 2: [E], Stack 3: [F, D], Stack 4: [G] | Taking action Move F from table to E | Moved to state -> Stack 1: [B, C, A], Stack 2: [D], Stack 3: [E, F], Stack 4: [G] | Plan so far [Move F from G to table | Move G from C to table | Move D from E to table | Move E from A to table | Move A from B to table | Move C from table to B | Move A from table to C | Move F from table to E] | Exploring action Move D from table to F | New state -> Stack 1: [B, C, A], Stack 2: [E, F, D], Stack 3: [G] | Exploring action Move F from E to table | New state -> Stack 1: [B, C, A], Stack 2: [D], Stack 3: [E], Stack 4: [F], Stack 5: [G] | Exploring action Move B from table to D | New state -> Invalid | Exploring action Move A from C to table | New state -> Stack 1: [A], Stack 2: [B, C], Stack 3: [D], Stack 4: [E, F], Stack 5: [G] | Exploring action Move E from table to G | New state -> Invalid | Taking action Move D from table to F | Moved to state -> Stack 1: [B, C, A], Stack 2: [E, F, D], Stack 3: [G] | Plan so far [Move F from G to table | Move G from C to table | Move D from E to table | Move E from A to table | Move A from B to table | Move C from table to B | Move A from table to C | Move F from table to E | Move D from table to F] | Reached goal state!",
        "system2_states_v1": 56
    },
    {
        "idx": 891,
        "start": [
            [
                "table",
                "A"
            ],
            [
                "table",
                "D",
                "E",
                "C",
                "G",
                "F",
                "B"
            ]
        ],
        "goal": [
            [
                "table",
                "A",
                "D"
            ],
            [
                "table",
                "C",
                "F",
                "G",
                "E",
                "B"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": true,
                "on": -1,
                "under": -1,
                "ontable": true
            },
            "B": {
                "clear": true,
                "on": "F",
                "under": -1,
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": "E",
                "under": "G",
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": -1,
                "under": "E",
                "ontable": true
            },
            "E": {
                "clear": false,
                "on": "D",
                "under": "C",
                "ontable": false
            },
            "F": {
                "clear": false,
                "on": "G",
                "under": "B",
                "ontable": false
            },
            "G": {
                "clear": false,
                "on": "C",
                "under": "F",
                "ontable": false
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": false,
                "on": -1,
                "under": "D",
                "ontable": true
            },
            "B": {
                "clear": true,
                "on": "E",
                "under": -1,
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": -1,
                "under": "F",
                "ontable": true
            },
            "D": {
                "clear": true,
                "on": "A",
                "under": -1,
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": "G",
                "under": "B",
                "ontable": false
            },
            "F": {
                "clear": false,
                "on": "C",
                "under": "G",
                "ontable": false
            },
            "G": {
                "clear": false,
                "on": "F",
                "under": "E",
                "ontable": false
            }
        },
        "plan_len": 10,
        "num_blocks": 7,
        "prompt": "The initial state:\nThe hand is empty.\nA is on the table. A is clear.\nD is on the table. E is on D. C is on E. G is on C. F is on G. B is on F. B is clear.\n\nThe goal is:\nA is on the table. D is on A. D is clear.\nC is on the table. F is on C. G is on F. E is on G. B is on E. B is clear.\n",
        "system1_plan": "Move B from F to table | Move F from G to table | Move G from C to table | Move C from E to table | Move E from D to table | Move D from table to A | Move F from table to C | Move G from table to F | Move E from table to G | Move B from table to E",
        "system1_states": 10,
        "system2_plan_v1": "Moved to state -> Stack 1: [A], Stack 2: [D, E, C, G, F, B] | Plan so far [] | Exploring action Move C from E to table | New state -> Invalid | Exploring action Move B from F to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, E, C, G, F] | Exploring action Move B from F to A | New state -> Stack 1: [A, B], Stack 2: [D, E, C, G, F] | Exploring action Move A from table to B | New state -> Stack 1: [D, E, C, G, F, B, A] | Taking action Move B from F to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, E, C, G, F] | Plan so far [Move B from F to table] | Exploring action Move E from D to A | New state -> Invalid | Exploring action Move F from G to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, E, C, G], Stack 4: [F] | Exploring action Move F from G to A | New state -> Stack 1: [A, F], Stack 2: [B], Stack 3: [D, E, C, G] | Exploring action Move C from E to F | New state -> Invalid | Exploring action Move F from G to B | New state -> Stack 1: [A], Stack 2: [B, F], Stack 3: [D, E, C, G] | Taking action Move F from G to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, E, C, G], Stack 4: [F] | Plan so far [Move B from F to table | Move F from G to table] | Exploring action Move D from table to G | New state -> Invalid | Exploring action Move G from C to B | New state -> Stack 1: [A], Stack 2: [B, G], Stack 3: [D, E, C], Stack 4: [F] | Exploring action Move D from table to B | New state -> Invalid | Exploring action Move G from C to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, E, C], Stack 4: [F], Stack 5: [G] | Exploring action Move G from C to F | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, E, C], Stack 4: [F, G] | Taking action Move G from C to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, E, C], Stack 4: [F], Stack 5: [G] | Plan so far [Move B from F to table | Move F from G to table | Move G from C to table] | Exploring action Move D from table to C | New state -> Invalid | Exploring action Move C from E to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D, E], Stack 5: [F], Stack 6: [G] | Exploring action Move C from E to G | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, E], Stack 4: [F], Stack 5: [G, C] | Exploring action Move C from E to F | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, E], Stack 4: [F, C], Stack 5: [G] | Taking action Move C from E to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D, E], Stack 5: [F], Stack 6: [G] | Plan so far [Move B from F to table | Move F from G to table | Move G from C to table | Move C from E to table] | Exploring action Move B from table to E | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, E, B], Stack 4: [F], Stack 5: [G] | Exploring action Move D from table to E | New state -> Invalid | Exploring action Move E from D to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F], Stack 7: [G] | Exploring action Move D from table to G | New state -> Invalid | Exploring action Move F from table to C | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, F], Stack 4: [D, E], Stack 5: [G] | Taking action Move E from D to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F], Stack 7: [G] | Plan so far [Move B from F to table | Move F from G to table | Move G from C to table | Move C from E to table | Move E from D to table] | Exploring action Move F from table to C | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, F], Stack 4: [D], Stack 5: [E], Stack 6: [G] | Exploring action Move D from table to A | New state -> Stack 1: [A, D], Stack 2: [B], Stack 3: [C], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Exploring action Move B from table to E | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D], Stack 4: [E, B], Stack 5: [F], Stack 6: [G] | Taking action Move D from table to A | Moved to state -> Stack 1: [A, D], Stack 2: [B], Stack 3: [C], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Plan so far [Move B from F to table | Move F from G to table | Move G from C to table | Move C from E to table | Move E from D to table | Move D from table to A] | Exploring action Move A from table to C | New state -> Invalid | Exploring action Move B from table to C | New state -> Stack 1: [A, D], Stack 2: [C, B], Stack 3: [E], Stack 4: [F], Stack 5: [G] | Exploring action Move F from table to C | New state -> Stack 1: [A, D], Stack 2: [B], Stack 3: [C, F], Stack 4: [E], Stack 5: [G] | Exploring action Move B from table to E | New state -> Stack 1: [A, D], Stack 2: [C], Stack 3: [E, B], Stack 4: [F], Stack 5: [G] | Taking action Move F from table to C | Moved to state -> Stack 1: [A, D], Stack 2: [B], Stack 3: [C, F], Stack 4: [E], Stack 5: [G] | Plan so far [Move B from F to table | Move F from G to table | Move G from C to table | Move C from E to table | Move E from D to table | Move D from table to A | Move F from table to C] | Exploring action Move G from table to F | New state -> Stack 1: [A, D], Stack 2: [B], Stack 3: [C, F, G], Stack 4: [E] | Exploring action Move A from table to B | New state -> Invalid | Exploring action Move B from table to E | New state -> Stack 1: [A, D], Stack 2: [C, F], Stack 3: [E, B], Stack 4: [G] | Exploring action Move B from table to F | New state -> Stack 1: [A, D], Stack 2: [C, F, B], Stack 3: [E], Stack 4: [G] | Taking action Move G from table to F | Moved to state -> Stack 1: [A, D], Stack 2: [B], Stack 3: [C, F, G], Stack 4: [E] | Plan so far [Move B from F to table | Move F from G to table | Move G from C to table | Move C from E to table | Move E from D to table | Move D from table to A | Move F from table to C | Move G from table to F] | Exploring action Move B from table to G | New state -> Stack 1: [A, D], Stack 2: [C, F, G, B], Stack 3: [E] | Exploring action Move C from table to E | New state -> Invalid | Exploring action Move B from table to E | New state -> Stack 1: [A, D], Stack 2: [C, F, G], Stack 3: [E, B] | Exploring action Move F from C to table | New state -> Invalid | Exploring action Move E from table to G | New state -> Stack 1: [A, D], Stack 2: [B], Stack 3: [C, F, G, E] | Taking action Move E from table to G | Moved to state -> Stack 1: [A, D], Stack 2: [B], Stack 3: [C, F, G, E] | Plan so far [Move B from F to table | Move F from G to table | Move G from C to table | Move C from E to table | Move E from D to table | Move D from table to A | Move F from table to C | Move G from table to F | Move E from table to G] | Exploring action Move B from table to E | New state -> Stack 1: [A, D], Stack 2: [C, F, G, E, B] | Exploring action Move F from C to table | New state -> Invalid | Exploring action Move E from G to table | New state -> Stack 1: [A, D], Stack 2: [B], Stack 3: [C, F, G], Stack 4: [E] | Exploring action Move F from C to E | New state -> Invalid | Exploring action Move E from G to B | New state -> Stack 1: [A, D], Stack 2: [B, E], Stack 3: [C, F, G] | Taking action Move B from table to E | Moved to state -> Stack 1: [A, D], Stack 2: [C, F, G, E, B] | Plan so far [Move B from F to table | Move F from G to table | Move G from C to table | Move C from E to table | Move E from D to table | Move D from table to A | Move F from table to C | Move G from table to F | Move E from table to G | Move B from table to E] | Reached goal state!",
        "system2_states_v1": 44
    },
    {
        "idx": 910,
        "start": [
            [
                "table",
                "A"
            ],
            [
                "table",
                "D",
                "B",
                "C",
                "G",
                "E",
                "F"
            ]
        ],
        "goal": [
            [
                "table",
                "B",
                "C",
                "A",
                "F"
            ],
            [
                "table",
                "D",
                "E",
                "G"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": true,
                "on": -1,
                "under": -1,
                "ontable": true
            },
            "B": {
                "clear": false,
                "on": "D",
                "under": "C",
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": "B",
                "under": "G",
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": -1,
                "under": "B",
                "ontable": true
            },
            "E": {
                "clear": false,
                "on": "G",
                "under": "F",
                "ontable": false
            },
            "F": {
                "clear": true,
                "on": "E",
                "under": -1,
                "ontable": false
            },
            "G": {
                "clear": false,
                "on": "C",
                "under": "E",
                "ontable": false
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": false,
                "on": "C",
                "under": "F",
                "ontable": false
            },
            "B": {
                "clear": false,
                "on": -1,
                "under": "C",
                "ontable": true
            },
            "C": {
                "clear": false,
                "on": "B",
                "under": "A",
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": -1,
                "under": "E",
                "ontable": true
            },
            "E": {
                "clear": false,
                "on": "D",
                "under": "G",
                "ontable": false
            },
            "F": {
                "clear": true,
                "on": "A",
                "under": -1,
                "ontable": false
            },
            "G": {
                "clear": true,
                "on": "E",
                "under": -1,
                "ontable": false
            }
        },
        "plan_len": 10,
        "num_blocks": 7,
        "prompt": "The initial state:\nThe hand is empty.\nA is on the table. A is clear.\nD is on the table. B is on D. C is on B. G is on C. E is on G. F is on E. F is clear.\n\nThe goal is:\nB is on the table. C is on B. A is on C. F is on A. F is clear.\nD is on the table. E is on D. G is on E. G is clear.\n",
        "system1_plan": "Move F from E to table | Move E from G to table | Move G from C to table | Move C from B to table | Move B from D to table | Move C from table to B | Move A from table to C | Move F from table to A | Move E from table to D | Move G from table to E",
        "system1_states": 10,
        "system2_plan_v1": "Moved to state -> Stack 1: [A], Stack 2: [D, B, C, G, E, F] | Plan so far [] | Exploring action Move F from E to A | New state -> Stack 1: [A, F], Stack 2: [D, B, C, G, E] | Exploring action Move A from table to F | New state -> Stack 1: [D, B, C, G, E, F, A] | Exploring action Move F from E to table | New state -> Stack 1: [A], Stack 2: [D, B, C, G, E], Stack 3: [F] | Exploring action Move B from D to A | New state -> Invalid | Taking action Move F from E to table | Moved to state -> Stack 1: [A], Stack 2: [D, B, C, G, E], Stack 3: [F] | Plan so far [Move F from E to table] | Exploring action Move E from G to table | New state -> Stack 1: [A], Stack 2: [D, B, C, G], Stack 3: [E], Stack 4: [F] | Exploring action Move E from G to A | New state -> Stack 1: [A, E], Stack 2: [D, B, C, G], Stack 3: [F] | Exploring action Move F from table to A | New state -> Stack 1: [A, F], Stack 2: [D, B, C, G, E] | Exploring action Move B from D to F | New state -> Invalid | Taking action Move F from E to A | Moved to state -> Stack 1: [A, F], Stack 2: [D, B, C, G, E] | Plan so far [Move F from E to A] | Exploring action Move F from A to table | New state -> Stack 1: [A], Stack 2: [D, B, C, G, E], Stack 3: [F] | Exploring action Move G from C to table | New state -> Invalid | Exploring action Move E from G to table | New state -> Stack 1: [A, F], Stack 2: [D, B, C, G], Stack 3: [E] | Exploring action Move E from G to F | New state -> Stack 1: [A, F, E], Stack 2: [D, B, C, G] | Taking action Move E from G to table | Moved to state -> Stack 1: [A], Stack 2: [D, B, C, G], Stack 3: [E], Stack 4: [F] | Plan so far [Move F from E to table | Move E from G to table] | Exploring action Move G from C to table | New state -> Stack 1: [A], Stack 2: [D, B, C], Stack 3: [E], Stack 4: [F], Stack 5: [G] | Exploring action Move B from D to G | New state -> Invalid | Exploring action Move G from C to E | New state -> Stack 1: [A], Stack 2: [D, B, C], Stack 3: [E, G], Stack 4: [F] | Exploring action Move G from C to F | New state -> Stack 1: [A], Stack 2: [D, B, C], Stack 3: [E], Stack 4: [F, G] | Exploring action Move C from B to E | New state -> Invalid | Taking action Move E from G to table | Moved to state -> Stack 1: [A, F], Stack 2: [D, B, C, G], Stack 3: [E] | Plan so far [Move F from E to A | Move E from G to table] | Exploring action Move G from C to E | New state -> Stack 1: [A, F], Stack 2: [D, B, C], Stack 3: [E, G] | Exploring action Move B from D to G | New state -> Invalid | Exploring action Move G from C to table | New state -> Stack 1: [A, F], Stack 2: [D, B, C], Stack 3: [E], Stack 4: [G] | Exploring action Move F from A to table | New state -> Stack 1: [A], Stack 2: [D, B, C, G], Stack 3: [E], Stack 4: [F] | Exploring action Move B from D to E | New state -> Invalid | Taking action Move G from C to table | Moved to state -> Stack 1: [A], Stack 2: [D, B, C], Stack 3: [E], Stack 4: [F], Stack 5: [G] | Plan so far [Move F from E to table | Move E from G to table | Move G from C to table] | Exploring action Move D from table to G | New state -> Invalid | Exploring action Move C from B to A | New state -> Stack 1: [A, C], Stack 2: [D, B], Stack 3: [E], Stack 4: [F], Stack 5: [G] | Exploring action Move A from table to C | New state -> Stack 1: [D, B, C, A], Stack 2: [E], Stack 3: [F], Stack 4: [G] | Exploring action Move C from B to table | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, B], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Taking action Move G from C to table | Moved to state -> Stack 1: [A, F], Stack 2: [D, B, C], Stack 3: [E], Stack 4: [G] | Plan so far [Move F from E to A | Move E from G to table | Move G from C to table] | Exploring action Move C from B to table | New state -> Stack 1: [A, F], Stack 2: [C], Stack 3: [D, B], Stack 4: [E], Stack 5: [G] | Exploring action Move B from D to table | New state -> Invalid | Exploring action Move G from table to E | New state -> Stack 1: [A, F], Stack 2: [D, B, C], Stack 3: [E, G] | Exploring action Move B from D to C | New state -> Invalid | Exploring action Move C from B to E | New state -> Stack 1: [A, F], Stack 2: [D, B], Stack 3: [E, C], Stack 4: [G] | Taking action Move G from C to E | Moved to state -> Stack 1: [A, F], Stack 2: [D, B, C], Stack 3: [E, G] | Plan so far [Move F from E to A | Move E from G to table | Move G from C to E] | Exploring action Move F from A to table | New state -> Stack 1: [A], Stack 2: [D, B, C], Stack 3: [E, G], Stack 4: [F] | Exploring action Move E from table to F | New state -> Invalid | Exploring action Move G from E to table | New state -> Stack 1: [A, F], Stack 2: [D, B, C], Stack 3: [E], Stack 4: [G] | Exploring action Move C from B to table | New state -> Stack 1: [A, F], Stack 2: [C], Stack 3: [D, B], Stack 4: [E, G] | Taking action Move A from table to C | Moved to state -> Stack 1: [D, B, C, A], Stack 2: [E], Stack 3: [F], Stack 4: [G] | Plan so far [Move F from E to table | Move E from G to table | Move G from C to table | Move A from table to C] | Exploring action Move C from B to A | New state -> Invalid | Exploring action Move C from B to F | New state -> Invalid | Exploring action Move G from table to E | New state -> Stack 1: [D, B, C, A], Stack 2: [E, G], Stack 3: [F] | Exploring action Move F from table to A | New state -> Stack 1: [D, B, C, A, F], Stack 2: [E], Stack 3: [G] | Exploring action Move E from table to G | New state -> Stack 1: [D, B, C, A], Stack 2: [F], Stack 3: [G, E] | Taking action Move F from table to A | Moved to state -> Stack 1: [D, B, C, A, F], Stack 2: [E], Stack 3: [G] | Plan so far [Move F from E to table | Move E from G to table | Move G from C to table | Move A from table to C | Move F from table to A] | Exploring action Move G from table to E | New state -> Stack 1: [D, B, C, A, F], Stack 2: [E, G] | Exploring action Move C from B to G | New state -> Invalid | Exploring action Move E from table to G | New state -> Stack 1: [D, B, C, A, F], Stack 2: [G, E] | Exploring action Move F from A to table | New state -> Stack 1: [D, B, C, A], Stack 2: [E], Stack 3: [F], Stack 4: [G] | Taking action Move C from B to table | Moved to state -> Stack 1: [A, F], Stack 2: [C], Stack 3: [D, B], Stack 4: [E], Stack 5: [G] | Plan so far [Move F from E to A | Move E from G to table | Move G from C to table | Move C from B to table] | Exploring action Move B from D to table | New state -> Stack 1: [A, F], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [G] | Exploring action Move D from table to F | New state -> Invalid | Exploring action Move A from table to G | New state -> Invalid | Exploring action Move F from A to table | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, B], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Exploring action Move B from D to E | New state -> Stack 1: [A, F], Stack 2: [C], Stack 3: [D], Stack 4: [E, B], Stack 5: [G] | Taking action Move G from C to E | Moved to state -> Stack 1: [A], Stack 2: [D, B, C], Stack 3: [E, G], Stack 4: [F] | Plan so far [Move F from E to table | Move E from G to table | Move G from C to E] | Exploring action Move D from table to A | New state -> Invalid | Exploring action Move A from table to C | New state -> Stack 1: [D, B, C, A], Stack 2: [E, G], Stack 3: [F] | Exploring action Move C from B to F | New state -> Stack 1: [A], Stack 2: [D, B], Stack 3: [E, G], Stack 4: [F, C] | Exploring action Move B from D to F | New state -> Invalid | Exploring action Move C from B to table | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, B], Stack 4: [E, G], Stack 5: [F] | Taking action Move G from table to E | Moved to state -> Stack 1: [D, B, C, A, F], Stack 2: [E, G] | Plan so far [Move F from E to table | Move E from G to table | Move G from C to table | Move A from table to C | Move F from table to A | Move G from table to E] | Exploring action Move G from E to F | New state -> Stack 1: [D, B, C, A, F, G], Stack 2: [E] | Exploring action Move C from B to F | New state -> Invalid | Exploring action Move G from E to table | New state -> Stack 1: [D, B, C, A, F], Stack 2: [E], Stack 3: [G] | Exploring action Move F from A to table | New state -> Stack 1: [D, B, C, A], Stack 2: [E, G], Stack 3: [F] | Taking action Move A from table to C | Moved to state -> Stack 1: [D, B, C, A], Stack 2: [E, G], Stack 3: [F] | Plan so far [Move F from E to table | Move E from G to table | Move G from C to E | Move A from table to C] | Exploring action Move C from B to table | New state -> Invalid | Exploring action Move G from E to A | New state -> Stack 1: [D, B, C, A, G], Stack 2: [E], Stack 3: [F] | Exploring action Move G from E to table | New state -> Stack 1: [D, B, C, A], Stack 2: [E], Stack 3: [F], Stack 4: [G] | Exploring action Move F from table to A | New state -> Stack 1: [D, B, C, A, F], Stack 2: [E, G] | Taking action Move F from table to A | Moved to state -> Stack 1: [D, B, C, A, F], Stack 2: [E, G] | Plan so far [Move F from E to table | Move E from G to table | Move G from C to E | Move A from table to C | Move F from table to A] | Taking action Move C from B to table | Moved to state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, B], Stack 4: [E, G], Stack 5: [F] | Plan so far [Move F from E to table | Move E from G to table | Move G from C to E | Move C from B to table] | Exploring action Move E from table to A | New state -> Invalid | Exploring action Move B from D to A | New state -> Stack 1: [A, B], Stack 2: [C], Stack 3: [D], Stack 4: [E, G], Stack 5: [F] | Exploring action Move B from D to C | New state -> Stack 1: [A], Stack 2: [C, B], Stack 3: [D], Stack 4: [E, G], Stack 5: [F] | Exploring action Move D from table to B | New state -> Invalid | Exploring action Move B from D to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E, G], Stack 6: [F] | Taking action Move B from D to table | Moved to state -> Stack 1: [A, F], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [G] | Plan so far [Move F from E to A | Move E from G to table | Move G from C to table | Move C from B to table | Move B from D to table] | Exploring action Move E from table to D | New state -> Stack 1: [A, F], Stack 2: [B], Stack 3: [C], Stack 4: [D, E], Stack 5: [G] | Exploring action Move C from table to B | New state -> Stack 1: [A, F], Stack 2: [B, C], Stack 3: [D], Stack 4: [E], Stack 5: [G] | Exploring action Move A from table to F | New state -> Invalid | Exploring action Move G from table to E | New state -> Stack 1: [A, F], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E, G] | Taking action Move C from B to table | Moved to state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, B], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Plan so far [Move F from E to table | Move E from G to table | Move G from C to table | Move C from B to table] | Exploring action Move B from D to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F], Stack 7: [G] | Exploring action Move D from table to B | New state -> Invalid | Exploring action Move D from table to A | New state -> Invalid | Exploring action Move G from table to E | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, B], Stack 4: [E, G], Stack 5: [F] | Exploring action Move B from D to A | New state -> Stack 1: [A, B], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Taking action Move C from B to table | Moved to state -> Stack 1: [A, F], Stack 2: [C], Stack 3: [D, B], Stack 4: [E, G] | Plan so far [Move F from E to A | Move E from G to table | Move G from C to E | Move C from B to table] | Exploring action Move E from table to F | New state -> Invalid | Exploring action Move E from table to B | New state -> Invalid | Exploring action Move G from E to table | New state -> Stack 1: [A, F], Stack 2: [C], Stack 3: [D, B], Stack 4: [E], Stack 5: [G] | Exploring action Move B from D to table | New state -> Stack 1: [A, F], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E, G] | Exploring action Move B from D to C | New state -> Stack 1: [A, F], Stack 2: [C, B], Stack 3: [D], Stack 4: [E, G] | Taking action Move E from table to D | Moved to state -> Stack 1: [A, F], Stack 2: [B], Stack 3: [C], Stack 4: [D, E], Stack 5: [G] | Plan so far [Move F from E to A | Move E from G to table | Move G from C to table | Move C from B to table | Move B from D to table | Move E from table to D] | Exploring action Move G from table to E | New state -> Stack 1: [A, F], Stack 2: [B], Stack 3: [C], Stack 4: [D, E, G] | Exploring action Move F from A to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D, E], Stack 5: [F], Stack 6: [G] | Exploring action Move C from table to B | New state -> Stack 1: [A, F], Stack 2: [B, C], Stack 3: [D, E], Stack 4: [G] | Exploring action Move A from table to C | New state -> Invalid | Taking action Move G from table to E | Moved to state -> Stack 1: [A, F], Stack 2: [B], Stack 3: [C], Stack 4: [D, E, G] | Plan so far [Move F from E to A | Move E from G to table | Move G from C to table | Move C from B to table | Move B from D to table | Move E from table to D | Move G from table to E] | Exploring action Move C from table to B | New state -> Stack 1: [A, F], Stack 2: [B, C], Stack 3: [D, E, G] | Exploring action Move A from table to B | New state -> Invalid | Exploring action Move B from table to C | New state -> Stack 1: [A, F], Stack 2: [C, B], Stack 3: [D, E, G] | Exploring action Move D from table to G | New state -> Invalid | Exploring action Move F from A to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D, E, G], Stack 5: [F] | Taking action Move C from table to B | Moved to state -> Stack 1: [A, F], Stack 2: [B, C], Stack 3: [D, E, G] | Plan so far [Move F from E to A | Move E from G to table | Move G from C to table | Move C from B to table | Move B from D to table | Move E from table to D | Move G from table to E | Move C from table to B] | Exploring action Move F from A to table | New state -> Stack 1: [A], Stack 2: [B, C], Stack 3: [D, E, G], Stack 4: [F] | Exploring action Move E from D to G | New state -> Invalid | Exploring action Move F from A to C | New state -> Stack 1: [A], Stack 2: [B, C, F], Stack 3: [D, E, G] | Exploring action Move C from B to table | New state -> Stack 1: [A, F], Stack 2: [B], Stack 3: [C], Stack 4: [D, E, G] | Taking action Move B from D to table | Moved to state -> Stack 1: [A, F], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E, G] | Plan so far [Move F from E to A | Move E from G to table | Move G from C to E | Move C from B to table | Move B from D to table] | Exploring action Move G from E to table | New state -> Stack 1: [A, F], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [G] | Exploring action Move C from table to B | New state -> Stack 1: [A, F], Stack 2: [B, C], Stack 3: [D], Stack 4: [E, G] | Exploring action Move F from A to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E, G], Stack 6: [F] | Exploring action Move E from table to F | New state -> Invalid | Taking action Move C from table to B | Moved to state -> Stack 1: [A, F], Stack 2: [B, C], Stack 3: [D, E], Stack 4: [G] | Plan so far [Move F from E to A | Move E from G to table | Move G from C to table | Move C from B to table | Move B from D to table | Move E from table to D | Move C from table to B] | Exploring action Move F from A to table | New state -> Stack 1: [A], Stack 2: [B, C], Stack 3: [D, E], Stack 4: [F], Stack 5: [G] | Exploring action Move D from table to F | New state -> Invalid | Exploring action Move F from A to G | New state -> Stack 1: [A], Stack 2: [B, C], Stack 3: [D, E], Stack 4: [G, F] | Exploring action Move G from table to E | New state -> Stack 1: [A, F], Stack 2: [B, C], Stack 3: [D, E, G] | Taking action Move G from table to E | Moved to state -> Stack 1: [A, F], Stack 2: [B, C], Stack 3: [D, E, G] | Plan so far [Move F from E to A | Move E from G to table | Move G from C to table | Move C from B to table | Move B from D to table | Move E from table to D | Move C from table to B | Move G from table to E] | Taking action Move F from A to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D, E, G], Stack 5: [F] | Plan so far [Move F from E to A | Move E from G to table | Move G from C to table | Move C from B to table | Move B from D to table | Move E from table to D | Move G from table to E | Move F from A to table] | Exploring action Move B from table to F | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, E, G], Stack 4: [F, B] | Exploring action Move D from table to C | New state -> Invalid | Exploring action Move F from table to A | New state -> Stack 1: [A, F], Stack 2: [B], Stack 3: [C], Stack 4: [D, E, G] | Exploring action Move C from table to B | New state -> Stack 1: [A], Stack 2: [B, C], Stack 3: [D, E, G], Stack 4: [F] | Taking action Move B from D to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F], Stack 7: [G] | Plan so far [Move F from E to table | Move E from G to table | Move G from C to table | Move C from B to table | Move B from D to table] | Exploring action Move E from table to D | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D, E], Stack 5: [F], Stack 6: [G] | Exploring action Move C from table to B | New state -> Stack 1: [A], Stack 2: [B, C], Stack 3: [D], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Exploring action Move F from table to A | New state -> Stack 1: [A, F], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [G] | Taking action Move B from D to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E, G], Stack 6: [F] | Plan so far [Move F from E to table | Move E from G to table | Move G from C to E | Move C from B to table | Move B from D to table] | Exploring action Move G from E to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F], Stack 7: [G] | Exploring action Move E from table to D | New state -> Invalid | Exploring action Move E from table to C | New state -> Invalid | Exploring action Move C from table to B | New state -> Stack 1: [A], Stack 2: [B, C], Stack 3: [D], Stack 4: [E, G], Stack 5: [F] | Exploring action Move F from table to A | New state -> Stack 1: [A, F], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E, G] | Taking action Move C from table to B | Moved to state -> Stack 1: [A, F], Stack 2: [B, C], Stack 3: [D], Stack 4: [E], Stack 5: [G] | Plan so far [Move F from E to A | Move E from G to table | Move G from C to table | Move C from B to table | Move B from D to table | Move C from table to B] | Exploring action Move B from table to D | New state -> Invalid | Exploring action Move E from table to D | New state -> Stack 1: [A, F], Stack 2: [B, C], Stack 3: [D, E], Stack 4: [G] | Exploring action Move F from A to table | New state -> Stack 1: [A], Stack 2: [B, C], Stack 3: [D], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Exploring action Move G from table to E | New state -> Stack 1: [A, F], Stack 2: [B, C], Stack 3: [D], Stack 4: [E, G] | Taking action Move C from table to B | Moved to state -> Stack 1: [A], Stack 2: [B, C], Stack 3: [D], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Plan so far [Move F from E to table | Move E from G to table | Move G from C to table | Move C from B to table | Move B from D to table | Move C from table to B] | Exploring action Move A from table to C | New state -> Stack 1: [B, C, A], Stack 2: [D], Stack 3: [E], Stack 4: [F], Stack 5: [G] | Exploring action Move G from table to E | New state -> Stack 1: [A], Stack 2: [B, C], Stack 3: [D], Stack 4: [E, G], Stack 5: [F] | Exploring action Move E from table to D | New state -> Stack 1: [A], Stack 2: [B, C], Stack 3: [D, E], Stack 4: [F], Stack 5: [G] | Exploring action Move B from table to G | New state -> Invalid | Exploring action Move B from table to F | New state -> Invalid | Taking action Move E from table to D | Moved to state -> Stack 1: [A, F], Stack 2: [B, C], Stack 3: [D, E], Stack 4: [G] | Plan so far [Move F from E to A | Move E from G to table | Move G from C to table | Move C from B to table | Move B from D to table | Move C from table to B | Move E from table to D] | Taking action Move A from table to C | Moved to state -> Stack 1: [B, C, A], Stack 2: [D], Stack 3: [E], Stack 4: [F], Stack 5: [G] | Plan so far [Move F from E to table | Move E from G to table | Move G from C to table | Move C from B to table | Move B from D to table | Move C from table to B | Move A from table to C] | Exploring action Move G from table to E | New state -> Stack 1: [B, C, A], Stack 2: [D], Stack 3: [E, G], Stack 4: [F] | Exploring action Move E from table to D | New state -> Stack 1: [B, C, A], Stack 2: [D, E], Stack 3: [F], Stack 4: [G] | Exploring action Move B from table to E | New state -> Invalid | Exploring action Move F from table to A | New state -> Stack 1: [B, C, A, F], Stack 2: [D], Stack 3: [E], Stack 4: [G] | Taking action Move F from table to A | Moved to state -> Stack 1: [B, C, A, F], Stack 2: [D], Stack 3: [E], Stack 4: [G] | Plan so far [Move F from E to table | Move E from G to table | Move G from C to table | Move C from B to table | Move B from D to table | Move C from table to B | Move A from table to C | Move F from table to A] | Exploring action Move D from table to G | New state -> Stack 1: [B, C, A, F], Stack 2: [E], Stack 3: [G, D] | Exploring action Move G from table to E | New state -> Stack 1: [B, C, A, F], Stack 2: [D], Stack 3: [E, G] | Exploring action Move A from C to G | New state -> Invalid | Exploring action Move C from B to G | New state -> Invalid | Exploring action Move E from table to D | New state -> Stack 1: [B, C, A, F], Stack 2: [D, E], Stack 3: [G] | Taking action Move E from table to D | Moved to state -> Stack 1: [B, C, A, F], Stack 2: [D, E], Stack 3: [G] | Plan so far [Move F from E to table | Move E from G to table | Move G from C to table | Move C from B to table | Move B from D to table | Move C from table to B | Move A from table to C | Move F from table to A | Move E from table to D] | Exploring action Move E from D to G | New state -> Stack 1: [B, C, A, F], Stack 2: [D], Stack 3: [G, E] | Exploring action Move G from table to E | New state -> Stack 1: [B, C, A, F], Stack 2: [D, E, G] | Exploring action Move E from D to table | New state -> Stack 1: [B, C, A, F], Stack 2: [D], Stack 3: [E], Stack 4: [G] | Exploring action Move A from C to E | New state -> Invalid | Exploring action Move C from B to E | New state -> Invalid | Taking action Move G from table to E | Moved to state -> Stack 1: [B, C, A, F], Stack 2: [D, E, G] | Plan so far [Move F from E to table | Move E from G to table | Move G from C to table | Move C from B to table | Move B from D to table | Move C from table to B | Move A from table to C | Move F from table to A | Move E from table to D | Move G from table to E] | Reached goal state!",
        "system2_states_v1": 137
    },
    {
        "idx": 916,
        "start": [
            [
                "table",
                "C",
                "E",
                "G",
                "D",
                "F",
                "A",
                "B"
            ]
        ],
        "goal": [
            [
                "table",
                "E",
                "B"
            ],
            [
                "table",
                "F",
                "C",
                "D",
                "A"
            ],
            [
                "table",
                "G"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": false,
                "on": "F",
                "under": "B",
                "ontable": false
            },
            "B": {
                "clear": true,
                "on": "A",
                "under": -1,
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": -1,
                "under": "E",
                "ontable": true
            },
            "D": {
                "clear": false,
                "on": "G",
                "under": "F",
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": "C",
                "under": "G",
                "ontable": false
            },
            "F": {
                "clear": false,
                "on": "D",
                "under": "A",
                "ontable": false
            },
            "G": {
                "clear": false,
                "on": "E",
                "under": "D",
                "ontable": false
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": true,
                "on": "D",
                "under": -1,
                "ontable": false
            },
            "B": {
                "clear": true,
                "on": "E",
                "under": -1,
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": "F",
                "under": "D",
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": "C",
                "under": "A",
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": -1,
                "under": "B",
                "ontable": true
            },
            "F": {
                "clear": false,
                "on": -1,
                "under": "C",
                "ontable": true
            },
            "G": {
                "clear": true,
                "on": -1,
                "under": -1,
                "ontable": true
            }
        },
        "plan_len": 10,
        "num_blocks": 7,
        "prompt": "The initial state:\nThe hand is empty.\nC is on the table. E is on C. G is on E. D is on G. F is on D. A is on F. B is on A. B is clear.\n\nThe goal is:\nE is on the table. B is on E. B is clear.\nF is on the table. C is on F. D is on C. A is on D. A is clear.\nG is on the table. G is clear.\n",
        "system1_plan": "Move B from A to table | Move A from F to table | Move F from D to table | Move D from G to table | Move G from E to table | Move E from C to table | Move B from table to E | Move C from table to F | Move D from table to C | Move A from table to D",
        "system1_states": 10,
        "system2_plan_v1": "Moved to state -> Stack 1: [C, E, G, D, F, A, B] | Plan so far [] | Exploring action Move C from table to B | New state -> Invalid | Exploring action Move B from A to table | New state -> Stack 1: [B], Stack 2: [C, E, G, D, F, A] | Taking action Move B from A to table | Moved to state -> Stack 1: [B], Stack 2: [C, E, G, D, F, A] | Plan so far [Move B from A to table] | Exploring action Move D from G to table | New state -> Invalid | Exploring action Move A from F to B | New state -> Stack 1: [B, A], Stack 2: [C, E, G, D, F] | Exploring action Move A from F to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, E, G, D, F] | Exploring action Move B from table to A | New state -> Stack 1: [C, E, G, D, F, A, B] | Taking action Move A from F to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, E, G, D, F] | Plan so far [Move B from A to table | Move A from F to table] | Exploring action Move D from G to B | New state -> Invalid | Exploring action Move F from D to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, E, G, D], Stack 4: [F] | Exploring action Move C from table to F | New state -> Invalid | Exploring action Move F from D to A | New state -> Stack 1: [A, F], Stack 2: [B], Stack 3: [C, E, G, D] | Exploring action Move F from D to B | New state -> Stack 1: [A], Stack 2: [B, F], Stack 3: [C, E, G, D] | Taking action Move F from D to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, E, G, D], Stack 4: [F] | Plan so far [Move B from A to table | Move A from F to table | Move F from D to table] | Exploring action Move E from C to table | New state -> Invalid | Exploring action Move A from table to D | New state -> Stack 1: [B], Stack 2: [C, E, G, D, A], Stack 3: [F] | Exploring action Move D from G to A | New state -> Stack 1: [A, D], Stack 2: [B], Stack 3: [C, E, G], Stack 4: [F] | Exploring action Move D from G to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, E, G], Stack 4: [D], Stack 5: [F] | Taking action Move D from G to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, E, G], Stack 4: [D], Stack 5: [F] | Plan so far [Move B from A to table | Move A from F to table | Move F from D to table | Move D from G to table] | Exploring action Move C from table to F | New state -> Invalid | Exploring action Move G from E to D | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, E], Stack 4: [D, G], Stack 5: [F] | Exploring action Move A from table to D | New state -> Stack 1: [B], Stack 2: [C, E, G], Stack 3: [D, A], Stack 4: [F] | Exploring action Move G from E to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, E], Stack 4: [D], Stack 5: [F], Stack 6: [G] | Taking action Move G from E to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, E], Stack 4: [D], Stack 5: [F], Stack 6: [G] | Plan so far [Move B from A to table | Move A from F to table | Move F from D to table | Move D from G to table | Move G from E to table] | Exploring action Move C from table to E | New state -> Invalid | Exploring action Move E from C to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F], Stack 7: [G] | Exploring action Move A from table to D | New state -> Stack 1: [B], Stack 2: [C, E], Stack 3: [D, A], Stack 4: [F], Stack 5: [G] | Exploring action Move E from C to F | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [F, E], Stack 6: [G] | Taking action Move E from C to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F], Stack 7: [G] | Plan so far [Move B from A to table | Move A from F to table | Move F from D to table | Move D from G to table | Move G from E to table | Move E from C to table] | Exploring action Move A from table to D | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, A], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Exploring action Move C from table to F | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D], Stack 4: [E], Stack 5: [F, C], Stack 6: [G] | Exploring action Move B from table to E | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D], Stack 4: [E, B], Stack 5: [F], Stack 6: [G] | Taking action Move B from table to E | Moved to state -> Stack 1: [A], Stack 2: [C], Stack 3: [D], Stack 4: [E, B], Stack 5: [F], Stack 6: [G] | Plan so far [Move B from A to table | Move A from F to table | Move F from D to table | Move D from G to table | Move G from E to table | Move E from C to table | Move B from table to E] | Exploring action Move A from table to C | New state -> Stack 1: [C, A], Stack 2: [D], Stack 3: [E, B], Stack 4: [F], Stack 5: [G] | Exploring action Move E from table to F | New state -> Invalid | Exploring action Move C from table to F | New state -> Stack 1: [A], Stack 2: [D], Stack 3: [E, B], Stack 4: [F, C], Stack 5: [G] | Exploring action Move A from table to D | New state -> Stack 1: [C], Stack 2: [D, A], Stack 3: [E, B], Stack 4: [F], Stack 5: [G] | Taking action Move C from table to F | Moved to state -> Stack 1: [A], Stack 2: [D], Stack 3: [E, B], Stack 4: [F, C], Stack 5: [G] | Plan so far [Move B from A to table | Move A from F to table | Move F from D to table | Move D from G to table | Move G from E to table | Move E from C to table | Move B from table to E | Move C from table to F] | Exploring action Move F from table to C | New state -> Invalid | Exploring action Move A from table to C | New state -> Stack 1: [D], Stack 2: [E, B], Stack 3: [F, C, A], Stack 4: [G] | Exploring action Move A from table to D | New state -> Stack 1: [D, A], Stack 2: [E, B], Stack 3: [F, C], Stack 4: [G] | Exploring action Move D from table to C | New state -> Stack 1: [A], Stack 2: [E, B], Stack 3: [F, C, D], Stack 4: [G] | Taking action Move D from table to C | Moved to state -> Stack 1: [A], Stack 2: [E, B], Stack 3: [F, C, D], Stack 4: [G] | Plan so far [Move B from A to table | Move A from F to table | Move F from D to table | Move D from G to table | Move G from E to table | Move E from C to table | Move B from table to E | Move C from table to F | Move D from table to C] | Exploring action Move A from table to G | New state -> Stack 1: [E, B], Stack 2: [F, C, D], Stack 3: [G, A] | Exploring action Move F from table to B | New state -> Invalid | Exploring action Move E from table to A | New state -> Invalid | Exploring action Move D from C to table | New state -> Stack 1: [A], Stack 2: [D], Stack 3: [E, B], Stack 4: [F, C], Stack 5: [G] | Exploring action Move A from table to D | New state -> Stack 1: [E, B], Stack 2: [F, C, D, A], Stack 3: [G] | Taking action Move A from table to D | Moved to state -> Stack 1: [E, B], Stack 2: [F, C, D, A], Stack 3: [G] | Plan so far [Move B from A to table | Move A from F to table | Move F from D to table | Move D from G to table | Move G from E to table | Move E from C to table | Move B from table to E | Move C from table to F | Move D from table to C | Move A from table to D] | Reached goal state!",
        "system2_states_v1": 39
    },
    {
        "idx": 796,
        "start": [
            [
                "table",
                "C",
                "D",
                "B",
                "E",
                "A"
            ],
            [
                "table",
                "F"
            ]
        ],
        "goal": [
            [
                "table",
                "B",
                "C",
                "D",
                "F",
                "E",
                "A"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": true,
                "on": "E",
                "under": -1,
                "ontable": false
            },
            "B": {
                "clear": false,
                "on": "D",
                "under": "E",
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": -1,
                "under": "D",
                "ontable": true
            },
            "D": {
                "clear": false,
                "on": "C",
                "under": "B",
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": "B",
                "under": "A",
                "ontable": false
            },
            "F": {
                "clear": true,
                "on": -1,
                "under": -1,
                "ontable": true
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": true,
                "on": "E",
                "under": -1,
                "ontable": false
            },
            "B": {
                "clear": false,
                "on": -1,
                "under": "C",
                "ontable": true
            },
            "C": {
                "clear": false,
                "on": "B",
                "under": "D",
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": "C",
                "under": "F",
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": "F",
                "under": "A",
                "ontable": false
            },
            "F": {
                "clear": false,
                "on": "D",
                "under": "E",
                "ontable": false
            }
        },
        "plan_len": 9,
        "num_blocks": 6,
        "prompt": "The initial state:\nThe hand is empty.\nC is on the table. D is on C. B is on D. E is on B. A is on E. A is clear.\nF is on the table. F is clear.\n\nThe goal is:\nB is on the table. C is on B. D is on C. F is on D. E is on F. A is on E. A is clear.\n",
        "system1_plan": "Move A from E to table | Move E from B to table | Move B from D to table | Move D from C to table | Move C from table to B | Move D from table to C | Move F from table to D | Move E from table to F | Move A from table to E",
        "system1_states": 9,
        "system2_plan_v1": "Moved to state -> Stack 1: [C, D, B, E, A], Stack 2: [F] | Plan so far [] | Exploring action Move A from E to table | New state -> Stack 1: [A], Stack 2: [C, D, B, E], Stack 3: [F] | Exploring action Move F from table to A | New state -> Stack 1: [C, D, B, E, A, F] | Exploring action Move E from B to F | New state -> Invalid | Exploring action Move A from E to F | New state -> Stack 1: [C, D, B, E], Stack 2: [F, A] | Taking action Move A from E to table | Moved to state -> Stack 1: [A], Stack 2: [C, D, B, E], Stack 3: [F] | Plan so far [Move A from E to table] | Exploring action Move E from B to table | New state -> Stack 1: [A], Stack 2: [C, D, B], Stack 3: [E], Stack 4: [F] | Exploring action Move E from B to A | New state -> Stack 1: [A, E], Stack 2: [C, D, B], Stack 3: [F] | Exploring action Move C from table to E | New state -> Invalid | Exploring action Move A from table to E | New state -> Stack 1: [C, D, B, E, A], Stack 2: [F] | Taking action Move E from B to table | Moved to state -> Stack 1: [A], Stack 2: [C, D, B], Stack 3: [E], Stack 4: [F] | Plan so far [Move A from E to table | Move E from B to table] | Exploring action Move C from table to E | New state -> Invalid | Exploring action Move B from D to E | New state -> Stack 1: [A], Stack 2: [C, D], Stack 3: [E, B], Stack 4: [F] | Exploring action Move B from D to F | New state -> Stack 1: [A], Stack 2: [C, D], Stack 3: [E], Stack 4: [F, B] | Exploring action Move B from D to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, D], Stack 4: [E], Stack 5: [F] | Taking action Move B from D to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, D], Stack 4: [E], Stack 5: [F] | Plan so far [Move A from E to table | Move E from B to table | Move B from D to table] | Exploring action Move D from C to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Exploring action Move F from table to D | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, D, F], Stack 4: [E] | Exploring action Move C from table to F | New state -> Invalid | Exploring action Move D from C to E | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [E, D], Stack 5: [F] | Taking action Move D from C to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Plan so far [Move A from E to table | Move E from B to table | Move B from D to table | Move D from C to table] | Exploring action Move A from table to E | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D], Stack 4: [E, A], Stack 5: [F] | Exploring action Move B from table to C | New state -> Stack 1: [A], Stack 2: [C, B], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Exploring action Move C from table to B | New state -> Stack 1: [A], Stack 2: [B, C], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Taking action Move F from table to D | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, D, F], Stack 4: [E] | Plan so far [Move A from E to table | Move E from B to table | Move B from D to table | Move F from table to D] | Exploring action Move E from table to F | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, D, F, E] | Exploring action Move D from C to F | New state -> Invalid | Exploring action Move A from table to F | New state -> Stack 1: [B], Stack 2: [C, D, F, A], Stack 3: [E] | Exploring action Move A from table to E | New state -> Stack 1: [B], Stack 2: [C, D, F], Stack 3: [E, A] | Exploring action Move D from C to table | New state -> Invalid | Taking action Move C from table to B | Moved to state -> Stack 1: [A], Stack 2: [B, C], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Plan so far [Move A from E to table | Move E from B to table | Move B from D to table | Move D from C to table | Move C from table to B] | Exploring action Move A from table to C | New state -> Stack 1: [B, C, A], Stack 2: [D], Stack 3: [E], Stack 4: [F] | Exploring action Move A from table to E | New state -> Stack 1: [B, C], Stack 2: [D], Stack 3: [E, A], Stack 4: [F] | Exploring action Move D from table to C | New state -> Stack 1: [A], Stack 2: [B, C, D], Stack 3: [E], Stack 4: [F] | Exploring action Move B from table to C | New state -> Invalid | Taking action Move E from table to F | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, D, F, E] | Plan so far [Move A from E to table | Move E from B to table | Move B from D to table | Move F from table to D | Move E from table to F] | Exploring action Move F from D to E | New state -> Invalid | Exploring action Move A from table to B | New state -> Stack 1: [B, A], Stack 2: [C, D, F, E] | Exploring action Move A from table to E | New state -> Stack 1: [B], Stack 2: [C, D, F, E, A] | Exploring action Move B from table to A | New state -> Stack 1: [A, B], Stack 2: [C, D, F, E] | Exploring action Move D from C to A | New state -> Invalid | Taking action Move A from table to E | Moved to state -> Stack 1: [B], Stack 2: [C, D, F, E, A] | Plan so far [Move A from E to table | Move E from B to table | Move B from D to table | Move F from table to D | Move E from table to F | Move A from table to E] | Exploring action Move A from E to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, D, F, E] | Exploring action Move E from F to B | New state -> Invalid | Exploring action Move B from table to A | New state -> Stack 1: [C, D, F, E, A, B] | Exploring action Move A from E to B | New state -> Stack 1: [B, A], Stack 2: [C, D, F, E] | Exploring action Move C from table to A | New state -> Invalid | Taking action Move D from table to C | Moved to state -> Stack 1: [A], Stack 2: [B, C, D], Stack 3: [E], Stack 4: [F] | Plan so far [Move A from E to table | Move E from B to table | Move B from D to table | Move D from C to table | Move C from table to B | Move D from table to C] | Exploring action Move C from B to D | New state -> Invalid | Exploring action Move A from table to F | New state -> Stack 1: [B, C, D], Stack 2: [E], Stack 3: [F, A] | Exploring action Move F from table to D | New state -> Stack 1: [A], Stack 2: [B, C, D, F], Stack 3: [E] | Exploring action Move A from table to E | New state -> Stack 1: [B, C, D], Stack 2: [E, A], Stack 3: [F] | Taking action Move F from table to D | Moved to state -> Stack 1: [A], Stack 2: [B, C, D, F], Stack 3: [E] | Plan so far [Move A from E to table | Move E from B to table | Move B from D to table | Move D from C to table | Move C from table to B | Move D from table to C | Move F from table to D] | Exploring action Move A from table to E | New state -> Stack 1: [B, C, D, F], Stack 2: [E, A] | Exploring action Move C from B to E | New state -> Invalid | Exploring action Move E from table to A | New state -> Stack 1: [A, E], Stack 2: [B, C, D, F] | Exploring action Move E from table to F | New state -> Stack 1: [A], Stack 2: [B, C, D, F, E] | Taking action Move E from table to F | Moved to state -> Stack 1: [A], Stack 2: [B, C, D, F, E] | Plan so far [Move A from E to table | Move E from B to table | Move B from D to table | Move D from C to table | Move C from table to B | Move D from table to C | Move F from table to D | Move E from table to F] | Exploring action Move F from D to A | New state -> Invalid | Exploring action Move E from F to A | New state -> Stack 1: [A, E], Stack 2: [B, C, D, F] | Exploring action Move E from F to table | New state -> Stack 1: [A], Stack 2: [B, C, D, F], Stack 3: [E] | Exploring action Move A from table to E | New state -> Stack 1: [B, C, D, F, E, A] | Taking action Move A from table to E | Moved to state -> Stack 1: [B, C, D, F, E, A] | Plan so far [Move A from E to table | Move E from B to table | Move B from D to table | Move D from C to table | Move C from table to B | Move D from table to C | Move F from table to D | Move E from table to F | Move A from table to E] | Reached goal state!",
        "system2_states_v1": 50
    },
    {
        "idx": 797,
        "start": [
            [
                "table",
                "A"
            ],
            [
                "table",
                "B",
                "D",
                "F",
                "E",
                "C"
            ]
        ],
        "goal": [
            [
                "table",
                "E",
                "B",
                "D",
                "A",
                "C",
                "F"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": true,
                "on": -1,
                "under": -1,
                "ontable": true
            },
            "B": {
                "clear": false,
                "on": -1,
                "under": "D",
                "ontable": true
            },
            "C": {
                "clear": true,
                "on": "E",
                "under": -1,
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": "B",
                "under": "F",
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": "F",
                "under": "C",
                "ontable": false
            },
            "F": {
                "clear": false,
                "on": "D",
                "under": "E",
                "ontable": false
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": false,
                "on": "D",
                "under": "C",
                "ontable": false
            },
            "B": {
                "clear": false,
                "on": "E",
                "under": "D",
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": "A",
                "under": "F",
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": "B",
                "under": "A",
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": -1,
                "under": "B",
                "ontable": true
            },
            "F": {
                "clear": true,
                "on": "C",
                "under": -1,
                "ontable": false
            }
        },
        "plan_len": 9,
        "num_blocks": 6,
        "prompt": "The initial state:\nThe hand is empty.\nA is on the table. A is clear.\nB is on the table. D is on B. F is on D. E is on F. C is on E. C is clear.\n\nThe goal is:\nE is on the table. B is on E. D is on B. A is on D. C is on A. F is on C. F is clear.\n",
        "system1_plan": "Move C from E to table | Move E from F to table | Move F from D to table | Move D from B to table | Move B from table to E | Move D from table to B | Move A from table to D | Move C from table to A | Move F from table to C",
        "system1_states": 9,
        "system2_plan_v1": "Moved to state -> Stack 1: [A], Stack 2: [B, D, F, E, C] | Plan so far [] | Exploring action Move A from table to C | New state -> Stack 1: [B, D, F, E, C, A] | Exploring action Move B from table to C | New state -> Invalid | Exploring action Move C from E to table | New state -> Stack 1: [A], Stack 2: [B, D, F, E], Stack 3: [C] | Exploring action Move C from E to A | New state -> Stack 1: [A, C], Stack 2: [B, D, F, E] | Taking action Move C from E to table | Moved to state -> Stack 1: [A], Stack 2: [B, D, F, E], Stack 3: [C] | Plan so far [Move C from E to table] | Exploring action Move D from B to A | New state -> Invalid | Exploring action Move E from F to A | New state -> Stack 1: [A, E], Stack 2: [B, D, F], Stack 3: [C] | Exploring action Move F from D to table | New state -> Invalid | Exploring action Move E from F to table | New state -> Stack 1: [A], Stack 2: [B, D, F], Stack 3: [C], Stack 4: [E] | Exploring action Move E from F to C | New state -> Stack 1: [A], Stack 2: [B, D, F], Stack 3: [C, E] | Taking action Move E from F to table | Moved to state -> Stack 1: [A], Stack 2: [B, D, F], Stack 3: [C], Stack 4: [E] | Plan so far [Move C from E to table | Move E from F to table] | Exploring action Move F from D to table | New state -> Stack 1: [A], Stack 2: [B, D], Stack 3: [C], Stack 4: [E], Stack 5: [F] | Exploring action Move F from D to C | New state -> Stack 1: [A], Stack 2: [B, D], Stack 3: [C, F], Stack 4: [E] | Exploring action Move F from D to E | New state -> Stack 1: [A], Stack 2: [B, D], Stack 3: [C], Stack 4: [E, F] | Exploring action Move B from table to C | New state -> Invalid | Exploring action Move B from table to A | New state -> Invalid | Taking action Move F from D to table | Moved to state -> Stack 1: [A], Stack 2: [B, D], Stack 3: [C], Stack 4: [E], Stack 5: [F] | Plan so far [Move C from E to table | Move E from F to table | Move F from D to table] | Exploring action Move A from table to D | New state -> Stack 1: [B, D, A], Stack 2: [C], Stack 3: [E], Stack 4: [F] | Exploring action Move B from table to A | New state -> Invalid | Exploring action Move D from B to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Exploring action Move B from table to E | New state -> Invalid | Exploring action Move D from B to E | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [E, D], Stack 5: [F] | Taking action Move F from D to C | Moved to state -> Stack 1: [A], Stack 2: [B, D], Stack 3: [C, F], Stack 4: [E] | Plan so far [Move C from E to table | Move E from F to table | Move F from D to C] | Exploring action Move D from B to E | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, F], Stack 4: [E, D] | Exploring action Move B from table to A | New state -> Invalid | Exploring action Move D from B to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, F], Stack 4: [D], Stack 5: [E] | Exploring action Move A from table to D | New state -> Stack 1: [B, D, A], Stack 2: [C, F], Stack 3: [E] | Exploring action Move B from table to D | New state -> Invalid | Taking action Move D from B to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Plan so far [Move C from E to table | Move E from F to table | Move F from D to table | Move D from B to table] | Exploring action Move A from table to D | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, A], Stack 4: [E], Stack 5: [F] | Exploring action Move B from table to E | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D], Stack 4: [E, B], Stack 5: [F] | Exploring action Move F from table to C | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, F], Stack 4: [D], Stack 5: [E] | Taking action Move A from table to D | Moved to state -> Stack 1: [B, D, A], Stack 2: [C], Stack 3: [E], Stack 4: [F] | Plan so far [Move C from E to table | Move E from F to table | Move F from D to table | Move A from table to D] | Exploring action Move C from table to A | New state -> Stack 1: [B, D, A, C], Stack 2: [E], Stack 3: [F] | Exploring action Move D from B to C | New state -> Invalid | Exploring action Move C from table to F | New state -> Stack 1: [B, D, A], Stack 2: [E], Stack 3: [F, C] | Exploring action Move F from table to C | New state -> Stack 1: [B, D, A], Stack 2: [C, F], Stack 3: [E] | Taking action Move B from table to E | Moved to state -> Stack 1: [A], Stack 2: [C], Stack 3: [D], Stack 4: [E, B], Stack 5: [F] | Plan so far [Move C from E to table | Move E from F to table | Move F from D to table | Move D from B to table | Move B from table to E] | Exploring action Move F from table to C | New state -> Stack 1: [A], Stack 2: [C, F], Stack 3: [D], Stack 4: [E, B] | Exploring action Move A from table to B | New state -> Stack 1: [C], Stack 2: [D], Stack 3: [E, B, A], Stack 4: [F] | Exploring action Move E from table to F | New state -> Invalid | Exploring action Move D from table to B | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [E, B, D], Stack 4: [F] | Taking action Move A from table to D | Moved to state -> Stack 1: [B, D, A], Stack 2: [C, F], Stack 3: [E] | Plan so far [Move C from E to table | Move E from F to table | Move F from D to C | Move A from table to D] | Exploring action Move A from D to table | New state -> Stack 1: [A], Stack 2: [B, D], Stack 3: [C, F], Stack 4: [E] | Exploring action Move F from C to table | New state -> Stack 1: [B, D, A], Stack 2: [C], Stack 3: [E], Stack 4: [F] | Exploring action Move B from table to E | New state -> Invalid | Exploring action Move D from B to F | New state -> Invalid | Exploring action Move F from C to A | New state -> Stack 1: [B, D, A, F], Stack 2: [C], Stack 3: [E] | Taking action Move D from table to B | Moved to state -> Stack 1: [A], Stack 2: [C], Stack 3: [E, B, D], Stack 4: [F] | Plan so far [Move C from E to table | Move E from F to table | Move F from D to table | Move D from B to table | Move B from table to E | Move D from table to B] | Exploring action Move B from E to table | New state -> Invalid | Exploring action Move A from table to D | New state -> Stack 1: [C], Stack 2: [E, B, D, A], Stack 3: [F] | Exploring action Move D from B to table | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D], Stack 4: [E, B], Stack 5: [F] | Exploring action Move F from table to C | New state -> Stack 1: [A], Stack 2: [C, F], Stack 3: [E, B, D] | Taking action Move D from B to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, F], Stack 4: [D], Stack 5: [E] | Plan so far [Move C from E to table | Move E from F to table | Move F from D to C | Move D from B to table] | Exploring action Move C from table to E | New state -> Invalid | Exploring action Move A from table to B | New state -> Stack 1: [B, A], Stack 2: [C, F], Stack 3: [D], Stack 4: [E] | Exploring action Move B from table to E | New state -> Stack 1: [A], Stack 2: [C, F], Stack 3: [D], Stack 4: [E, B] | Exploring action Move C from table to B | New state -> Invalid | Exploring action Move F from C to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Taking action Move A from table to D | Moved to state -> Stack 1: [C], Stack 2: [E, B, D, A], Stack 3: [F] | Plan so far [Move C from E to table | Move E from F to table | Move F from D to table | Move D from B to table | Move B from table to E | Move D from table to B | Move A from table to D] | Exploring action Move B from E to F | New state -> Invalid | Exploring action Move F from table to A | New state -> Stack 1: [C], Stack 2: [E, B, D, A, F] | Exploring action Move F from table to C | New state -> Stack 1: [C, F], Stack 2: [E, B, D, A] | Exploring action Move D from B to table | New state -> Invalid | Exploring action Move C from table to A | New state -> Stack 1: [E, B, D, A, C], Stack 2: [F] | Taking action Move C from table to A | Moved to state -> Stack 1: [B, D, A, C], Stack 2: [E], Stack 3: [F] | Plan so far [Move C from E to table | Move E from F to table | Move F from D to table | Move A from table to D | Move C from table to A] | Exploring action Move F from table to C | New state -> Stack 1: [B, D, A, C, F], Stack 2: [E] | Exploring action Move F from table to E | New state -> Stack 1: [B, D, A, C], Stack 2: [E, F] | Exploring action Move C from A to table | New state -> Stack 1: [B, D, A], Stack 2: [C], Stack 3: [E], Stack 4: [F] | Exploring action Move D from B to table | New state -> Invalid | Taking action Move F from table to C | Moved to state -> Stack 1: [B, D, A, C, F], Stack 2: [E] | Plan so far [Move C from E to table | Move E from F to table | Move F from D to table | Move A from table to D | Move C from table to A | Move F from table to C] | Exploring action Move F from C to E | New state -> Stack 1: [B, D, A, C], Stack 2: [E, F] | Exploring action Move C from A to E | New state -> Invalid | Exploring action Move F from C to table | New state -> Stack 1: [B, D, A, C], Stack 2: [E], Stack 3: [F] | Exploring action Move E from table to F | New state -> Stack 1: [B, D, A, C, F, E] | Exploring action Move A from D to table | New state -> Invalid | Taking action Move B from table to E | Moved to state -> Stack 1: [A], Stack 2: [C, F], Stack 3: [D], Stack 4: [E, B] | Plan so far [Move C from E to table | Move E from F to table | Move F from D to C | Move D from B to table | Move B from table to E] | Exploring action Move D from table to B | New state -> Stack 1: [A], Stack 2: [C, F], Stack 3: [E, B, D] | Exploring action Move F from C to table | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D], Stack 4: [E, B], Stack 5: [F] | Exploring action Move C from table to A | New state -> Invalid | Exploring action Move F from C to A | New state -> Stack 1: [A, F], Stack 2: [C], Stack 3: [D], Stack 4: [E, B] | Taking action Move C from table to A | Moved to state -> Stack 1: [E, B, D, A, C], Stack 2: [F] | Plan so far [Move C from E to table | Move E from F to table | Move F from D to table | Move D from B to table | Move B from table to E | Move D from table to B | Move A from table to D | Move C from table to A] | Exploring action Move F from table to C | New state -> Stack 1: [E, B, D, A, C, F] | Exploring action Move D from B to C | New state -> Invalid | Exploring action Move C from A to table | New state -> Stack 1: [C], Stack 2: [E, B, D, A], Stack 3: [F] | Exploring action Move C from A to F | New state -> Stack 1: [E, B, D, A], Stack 2: [F, C] | Taking action Move F from table to C | Moved to state -> Stack 1: [E, B, D, A, C, F] | Plan so far [Move C from E to table | Move E from F to table | Move F from D to table | Move D from B to table | Move B from table to E | Move D from table to B | Move A from table to D | Move C from table to A | Move F from table to C] | Reached goal state!",
        "system2_states_v1": 71
    },
    {
        "idx": 897,
        "start": [
            [
                "table",
                "B",
                "A",
                "G",
                "E",
                "C",
                "D"
            ],
            [
                "table",
                "F"
            ]
        ],
        "goal": [
            [
                "table",
                "A",
                "C",
                "B"
            ],
            [
                "table",
                "G",
                "E",
                "F",
                "D"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": false,
                "on": "B",
                "under": "G",
                "ontable": false
            },
            "B": {
                "clear": false,
                "on": -1,
                "under": "A",
                "ontable": true
            },
            "C": {
                "clear": false,
                "on": "E",
                "under": "D",
                "ontable": false
            },
            "D": {
                "clear": true,
                "on": "C",
                "under": -1,
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": "G",
                "under": "C",
                "ontable": false
            },
            "F": {
                "clear": true,
                "on": -1,
                "under": -1,
                "ontable": true
            },
            "G": {
                "clear": false,
                "on": "A",
                "under": "E",
                "ontable": false
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": false,
                "on": -1,
                "under": "C",
                "ontable": true
            },
            "B": {
                "clear": true,
                "on": "C",
                "under": -1,
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": "A",
                "under": "B",
                "ontable": false
            },
            "D": {
                "clear": true,
                "on": "F",
                "under": -1,
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": "G",
                "under": "F",
                "ontable": false
            },
            "F": {
                "clear": false,
                "on": "E",
                "under": "D",
                "ontable": false
            },
            "G": {
                "clear": false,
                "on": -1,
                "under": "E",
                "ontable": true
            }
        },
        "plan_len": 10,
        "num_blocks": 7,
        "prompt": "The initial state:\nThe hand is empty.\nB is on the table. A is on B. G is on A. E is on G. C is on E. D is on C. D is clear.\nF is on the table. F is clear.\n\nThe goal is:\nA is on the table. C is on A. B is on C. B is clear.\nG is on the table. E is on G. F is on E. D is on F. D is clear.\n",
        "system1_plan": "Move D from C to table | Move C from E to table | Move E from G to table | Move G from A to table | Move E from table to G | Move F from table to E | Move D from table to F | Move A from B to table | Move C from table to A | Move B from table to C",
        "system1_states": 10,
        "system2_plan_v1": "Moved to state -> Stack 1: [B, A, G, E, C, D], Stack 2: [F] | Plan so far [] | Exploring action Move D from C to table | New state -> Stack 1: [B, A, G, E, C], Stack 2: [D], Stack 3: [F] | Exploring action Move C from E to F | New state -> Invalid | Exploring action Move F from table to D | New state -> Stack 1: [B, A, G, E, C, D, F] | Exploring action Move A from B to F | New state -> Invalid | Exploring action Move D from C to F | New state -> Stack 1: [B, A, G, E, C], Stack 2: [F, D] | Taking action Move D from C to table | Moved to state -> Stack 1: [B, A, G, E, C], Stack 2: [D], Stack 3: [F] | Plan so far [Move D from C to table] | Exploring action Move C from E to F | New state -> Stack 1: [B, A, G, E], Stack 2: [D], Stack 3: [F, C] | Exploring action Move C from E to D | New state -> Stack 1: [B, A, G, E], Stack 2: [D, C], Stack 3: [F] | Exploring action Move G from A to C | New state -> Invalid | Exploring action Move C from E to table | New state -> Stack 1: [B, A, G, E], Stack 2: [C], Stack 3: [D], Stack 4: [F] | Exploring action Move G from A to D | New state -> Invalid | Taking action Move D from C to F | Moved to state -> Stack 1: [B, A, G, E, C], Stack 2: [F, D] | Plan so far [Move D from C to F] | Exploring action Move C from E to table | New state -> Stack 1: [B, A, G, E], Stack 2: [C], Stack 3: [F, D] | Exploring action Move F from table to C | New state -> Invalid | Exploring action Move D from F to table | New state -> Stack 1: [B, A, G, E, C], Stack 2: [D], Stack 3: [F] | Exploring action Move G from A to table | New state -> Invalid | Exploring action Move C from E to D | New state -> Stack 1: [B, A, G, E], Stack 2: [F, D, C] | Taking action Move C from E to table | Moved to state -> Stack 1: [B, A, G, E], Stack 2: [C], Stack 3: [D], Stack 4: [F] | Plan so far [Move D from C to table | Move C from E to table] | Exploring action Move E from G to table | New state -> Stack 1: [B, A, G], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Exploring action Move D from table to F | New state -> Stack 1: [B, A, G, E], Stack 2: [C], Stack 3: [F, D] | Exploring action Move F from table to E | New state -> Stack 1: [B, A, G, E, F], Stack 2: [C], Stack 3: [D] | Exploring action Move G from A to C | New state -> Invalid | Exploring action Move B from table to F | New state -> Invalid | Taking action Move C from E to table | Moved to state -> Stack 1: [B, A, G, E], Stack 2: [C], Stack 3: [F, D] | Plan so far [Move D from C to F | Move C from E to table] | Exploring action Move D from F to table | New state -> Stack 1: [B, A, G, E], Stack 2: [C], Stack 3: [D], Stack 4: [F] | Exploring action Move A from B to E | New state -> Invalid | Exploring action Move E from G to table | New state -> Stack 1: [B, A, G], Stack 2: [C], Stack 3: [E], Stack 4: [F, D] | Exploring action Move E from G to C | New state -> Stack 1: [B, A, G], Stack 2: [C, E], Stack 3: [F, D] | Taking action Move F from table to E | Moved to state -> Stack 1: [B, A, G, E, F], Stack 2: [C], Stack 3: [D] | Plan so far [Move D from C to table | Move C from E to table | Move F from table to E] | Exploring action Move D from table to F | New state -> Stack 1: [B, A, G, E, F, D], Stack 2: [C] | Exploring action Move B from table to F | New state -> Invalid | Exploring action Move C from table to D | New state -> Stack 1: [B, A, G, E, F], Stack 2: [D, C] | Exploring action Move D from table to C | New state -> Stack 1: [B, A, G, E, F], Stack 2: [C, D] | Taking action Move D from table to F | Moved to state -> Stack 1: [B, A, G, E, F, D], Stack 2: [C] | Plan so far [Move D from C to table | Move C from E to table | Move F from table to E | Move D from table to F] | Exploring action Move A from B to C | New state -> Invalid | Exploring action Move D from F to table | New state -> Stack 1: [B, A, G, E, F], Stack 2: [C], Stack 3: [D] | Exploring action Move C from table to D | New state -> Stack 1: [B, A, G, E, F, D, C] | Exploring action Move D from F to C | New state -> Stack 1: [B, A, G, E, F], Stack 2: [C, D] | Taking action Move E from G to table | Moved to state -> Stack 1: [B, A, G], Stack 2: [C], Stack 3: [E], Stack 4: [F, D] | Plan so far [Move D from C to F | Move C from E to table | Move E from G to table] | Exploring action Move A from B to table | New state -> Invalid | Exploring action Move F from table to G | New state -> Invalid | Exploring action Move G from A to C | New state -> Stack 1: [B, A], Stack 2: [C, G], Stack 3: [E], Stack 4: [F, D] | Exploring action Move G from A to table | New state -> Stack 1: [B, A], Stack 2: [C], Stack 3: [E], Stack 4: [F, D], Stack 5: [G] | Exploring action Move G from A to E | New state -> Stack 1: [B, A], Stack 2: [C], Stack 3: [E, G], Stack 4: [F, D] | Taking action Move E from G to table | Moved to state -> Stack 1: [B, A, G], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Plan so far [Move D from C to table | Move C from E to table | Move E from G to table] | Exploring action Move D from table to F | New state -> Stack 1: [B, A, G], Stack 2: [C], Stack 3: [E], Stack 4: [F, D] | Exploring action Move A from B to E | New state -> Invalid | Exploring action Move G from A to E | New state -> Stack 1: [B, A], Stack 2: [C], Stack 3: [D], Stack 4: [E, G], Stack 5: [F] | Exploring action Move G from A to table | New state -> Stack 1: [B, A], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Taking action Move G from A to table | Moved to state -> Stack 1: [B, A], Stack 2: [C], Stack 3: [E], Stack 4: [F, D], Stack 5: [G] | Plan so far [Move D from C to F | Move C from E to table | Move E from G to table | Move G from A to table] | Exploring action Move F from table to A | New state -> Invalid | Exploring action Move E from table to G | New state -> Stack 1: [B, A], Stack 2: [C], Stack 3: [F, D], Stack 4: [G, E] | Exploring action Move A from B to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [E], Stack 5: [F, D], Stack 6: [G] | Exploring action Move B from table to A | New state -> Invalid | Exploring action Move A from B to G | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [E], Stack 4: [F, D], Stack 5: [G, A] | Taking action Move G from A to table | Moved to state -> Stack 1: [B, A], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Plan so far [Move D from C to table | Move C from E to table | Move E from G to table | Move G from A to table] | Exploring action Move B from table to D | New state -> Invalid | Exploring action Move A from B to D | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, A], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Exploring action Move A from B to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F], Stack 7: [G] | Exploring action Move E from table to G | New state -> Stack 1: [B, A], Stack 2: [C], Stack 3: [D], Stack 4: [F], Stack 5: [G, E] | Taking action Move A from B to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [E], Stack 5: [F, D], Stack 6: [G] | Plan so far [Move D from C to F | Move C from E to table | Move E from G to table | Move G from A to table | Move A from B to table] | Exploring action Move F from table to B | New state -> Invalid | Exploring action Move B from table to C | New state -> Stack 1: [A], Stack 2: [C, B], Stack 3: [E], Stack 4: [F, D], Stack 5: [G] | Exploring action Move C from table to A | New state -> Stack 1: [A, C], Stack 2: [B], Stack 3: [E], Stack 4: [F, D], Stack 5: [G] | Exploring action Move E from table to G | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [F, D], Stack 5: [G, E] | Taking action Move E from table to G | Moved to state -> Stack 1: [B, A], Stack 2: [C], Stack 3: [D], Stack 4: [F], Stack 5: [G, E] | Plan so far [Move D from C to table | Move C from E to table | Move E from G to table | Move G from A to table | Move E from table to G] | Exploring action Move B from table to E | New state -> Invalid | Exploring action Move F from table to E | New state -> Stack 1: [B, A], Stack 2: [C], Stack 3: [D], Stack 4: [G, E, F] | Exploring action Move A from B to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [F], Stack 6: [G, E] | Exploring action Move G from table to C | New state -> Invalid | Exploring action Move A from B to D | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, A], Stack 4: [F], Stack 5: [G, E] | Taking action Move E from table to G | Moved to state -> Stack 1: [B, A], Stack 2: [C], Stack 3: [F, D], Stack 4: [G, E] | Plan so far [Move D from C to F | Move C from E to table | Move E from G to table | Move G from A to table | Move E from table to G] | Exploring action Move A from B to E | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [F, D], Stack 4: [G, E, A] | Exploring action Move F from table to D | New state -> Invalid | Exploring action Move A from B to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [F, D], Stack 5: [G, E] | Exploring action Move A from B to C | New state -> Stack 1: [B], Stack 2: [C, A], Stack 3: [F, D], Stack 4: [G, E] | Exploring action Move B from table to A | New state -> Invalid | Taking action Move A from B to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F], Stack 7: [G] | Plan so far [Move D from C to table | Move C from E to table | Move E from G to table | Move G from A to table | Move A from B to table] | Exploring action Move B from table to C | New state -> Stack 1: [A], Stack 2: [C, B], Stack 3: [D], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Exploring action Move C from table to A | New state -> Stack 1: [A, C], Stack 2: [B], Stack 3: [D], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Exploring action Move E from table to G | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [F], Stack 6: [G, E] | Taking action Move F from table to E | Moved to state -> Stack 1: [B, A], Stack 2: [C], Stack 3: [D], Stack 4: [G, E, F] | Plan so far [Move D from C to table | Move C from E to table | Move E from G to table | Move G from A to table | Move E from table to G | Move F from table to E] | Exploring action Move G from table to C | New state -> Invalid | Exploring action Move E from G to C | New state -> Invalid | Exploring action Move D from table to F | New state -> Stack 1: [B, A], Stack 2: [C], Stack 3: [G, E, F, D] | Exploring action Move A from B to D | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, A], Stack 4: [G, E, F] | Exploring action Move A from B to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [G, E, F] | Taking action Move D from table to F | Moved to state -> Stack 1: [B, A], Stack 2: [C], Stack 3: [G, E, F, D] | Plan so far [Move D from C to table | Move C from E to table | Move E from G to table | Move G from A to table | Move E from table to G | Move F from table to E | Move D from table to F] | Exploring action Move A from B to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [G, E, F, D] | Exploring action Move F from E to C | New state -> Invalid | Exploring action Move A from B to D | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [G, E, F, D, A] | Exploring action Move A from B to C | New state -> Stack 1: [B], Stack 2: [C, A], Stack 3: [G, E, F, D] | Taking action Move A from B to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [G, E, F, D] | Plan so far [Move D from C to table | Move C from E to table | Move E from G to table | Move G from A to table | Move E from table to G | Move F from table to E | Move D from table to F | Move A from B to table] | Exploring action Move C from table to A | New state -> Stack 1: [A, C], Stack 2: [B], Stack 3: [G, E, F, D] | Exploring action Move E from G to D | New state -> Invalid | Exploring action Move G from table to B | New state -> Invalid | Exploring action Move A from table to B | New state -> Stack 1: [B, A], Stack 2: [C], Stack 3: [G, E, F, D] | Exploring action Move B from table to C | New state -> Stack 1: [A], Stack 2: [C, B], Stack 3: [G, E, F, D] | Taking action Move C from table to A | Moved to state -> Stack 1: [A, C], Stack 2: [B], Stack 3: [G, E, F, D] | Plan so far [Move D from C to table | Move C from E to table | Move E from G to table | Move G from A to table | Move E from table to G | Move F from table to E | Move D from table to F | Move A from B to table | Move C from table to A] | Exploring action Move D from F to table | New state -> Stack 1: [A, C], Stack 2: [B], Stack 3: [D], Stack 4: [G, E, F] | Exploring action Move B from table to C | New state -> Stack 1: [A, C, B], Stack 2: [G, E, F, D] | Exploring action Move C from A to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [G, E, F, D] | Exploring action Move G from table to C | New state -> Invalid | Exploring action Move A from table to D | New state -> Invalid | Taking action Move B from table to C | Moved to state -> Stack 1: [A, C, B], Stack 2: [G, E, F, D] | Plan so far [Move D from C to table | Move C from E to table | Move E from G to table | Move G from A to table | Move E from table to G | Move F from table to E | Move D from table to F | Move A from B to table | Move C from table to A | Move B from table to C] | Reached goal state!",
        "system2_states_v1": 86
    },
    {
        "idx": 614,
        "start": [
            [
                "table",
                "A",
                "E",
                "B"
            ],
            [
                "table",
                "D",
                "C"
            ]
        ],
        "goal": [
            [
                "table",
                "E",
                "D",
                "B",
                "C",
                "A"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": false,
                "on": -1,
                "under": "E",
                "ontable": true
            },
            "B": {
                "clear": true,
                "on": "E",
                "under": -1,
                "ontable": false
            },
            "C": {
                "clear": true,
                "on": "D",
                "under": -1,
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": -1,
                "under": "C",
                "ontable": true
            },
            "E": {
                "clear": false,
                "on": "A",
                "under": "B",
                "ontable": false
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": true,
                "on": "C",
                "under": -1,
                "ontable": false
            },
            "B": {
                "clear": false,
                "on": "D",
                "under": "C",
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": "B",
                "under": "A",
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": "E",
                "under": "B",
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": -1,
                "under": "D",
                "ontable": true
            }
        },
        "plan_len": 7,
        "num_blocks": 5,
        "prompt": "The initial state:\nThe hand is empty.\nA is on the table. E is on A. B is on E. B is clear.\nD is on the table. C is on D. C is clear.\n\nThe goal is:\nE is on the table. D is on E. B is on D. C is on B. A is on C. A is clear.\n",
        "system1_plan": "Move B from E to table | Move C from D to table | Move E from A to table | Move D from table to E | Move B from table to D | Move C from table to B | Move A from table to C",
        "system1_states": 7,
        "system2_plan_v1": "Moved to state -> Stack 1: [A, E, B], Stack 2: [D, C] | Plan so far [] | Exploring action Move C from D to table | New state -> Stack 1: [A, E, B], Stack 2: [C], Stack 3: [D] | Exploring action Move B from E to table | New state -> Stack 1: [A, E], Stack 2: [B], Stack 3: [D, C] | Exploring action Move B from E to C | New state -> Stack 1: [A, E], Stack 2: [D, C, B] | Exploring action Move D from table to C | New state -> Invalid | Exploring action Move E from A to C | New state -> Invalid | Taking action Move B from E to table | Moved to state -> Stack 1: [A, E], Stack 2: [B], Stack 3: [D, C] | Plan so far [Move B from E to table] | Exploring action Move D from table to B | New state -> Invalid | Exploring action Move E from A to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, C], Stack 4: [E] | Exploring action Move E from A to B | New state -> Stack 1: [A], Stack 2: [B, E], Stack 3: [D, C] | Exploring action Move C from D to table | New state -> Stack 1: [A, E], Stack 2: [B], Stack 3: [C], Stack 4: [D] | Taking action Move C from D to table | Moved to state -> Stack 1: [A, E, B], Stack 2: [C], Stack 3: [D] | Plan so far [Move C from D to table] | Exploring action Move E from A to table | New state -> Invalid | Exploring action Move B from E to D | New state -> Stack 1: [A, E], Stack 2: [C], Stack 3: [D, B] | Exploring action Move B from E to C | New state -> Stack 1: [A, E], Stack 2: [C, B], Stack 3: [D] | Exploring action Move B from E to table | New state -> Stack 1: [A, E], Stack 2: [B], Stack 3: [C], Stack 4: [D] | Taking action Move C from D to table | Moved to state -> Stack 1: [A, E], Stack 2: [B], Stack 3: [C], Stack 4: [D] | Plan so far [Move B from E to table | Move C from D to table] | Exploring action Move E from A to C | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, E], Stack 4: [D] | Exploring action Move A from table to D | New state -> Invalid | Exploring action Move A from table to B | New state -> Invalid | Exploring action Move E from A to D | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D, E] | Exploring action Move E from A to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Taking action Move E from A to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, C], Stack 4: [E] | Plan so far [Move B from E to table | Move E from A to table] | Exploring action Move D from table to B | New state -> Invalid | Exploring action Move A from table to C | New state -> Stack 1: [B], Stack 2: [D, C, A], Stack 3: [E] | Exploring action Move C from D to A | New state -> Stack 1: [A, C], Stack 2: [B], Stack 3: [D], Stack 4: [E] | Exploring action Move C from D to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Exploring action Move D from table to E | New state -> Invalid | Taking action Move E from A to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Plan so far [Move B from E to table | Move C from D to table | Move E from A to table] | Exploring action Move A from table to D | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, A], Stack 4: [E] | Exploring action Move D from table to E | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [E, D] | Exploring action Move A from table to C | New state -> Stack 1: [B], Stack 2: [C, A], Stack 3: [D], Stack 4: [E] | Taking action Move B from E to table | Moved to state -> Stack 1: [A, E], Stack 2: [B], Stack 3: [C], Stack 4: [D] | Plan so far [Move C from D to table | Move B from E to table] | Taking action Move D from table to E | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [E, D] | Plan so far [Move B from E to table | Move C from D to table | Move E from A to table | Move D from table to E] | Exploring action Move A from table to C | New state -> Stack 1: [B], Stack 2: [C, A], Stack 3: [E, D] | Exploring action Move C from table to A | New state -> Stack 1: [A, C], Stack 2: [B], Stack 3: [E, D] | Exploring action Move B from table to D | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [E, D, B] | Exploring action Move E from table to B | New state -> Invalid | Taking action Move C from D to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Plan so far [Move B from E to table | Move E from A to table | Move C from D to table] | Taking action Move B from table to D | Moved to state -> Stack 1: [A], Stack 2: [C], Stack 3: [E, D, B] | Plan so far [Move B from E to table | Move C from D to table | Move E from A to table | Move D from table to E | Move B from table to D] | Exploring action Move A from table to C | New state -> Stack 1: [C, A], Stack 2: [E, D, B] | Exploring action Move C from table to B | New state -> Stack 1: [A], Stack 2: [E, D, B, C] | Exploring action Move E from table to C | New state -> Invalid | Exploring action Move C from table to A | New state -> Stack 1: [A, C], Stack 2: [E, D, B] | Taking action Move C from table to B | Moved to state -> Stack 1: [A], Stack 2: [E, D, B, C] | Plan so far [Move B from E to table | Move C from D to table | Move E from A to table | Move D from table to E | Move B from table to D | Move C from table to B] | Exploring action Move C from B to table | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [E, D, B] | Exploring action Move A from table to C | New state -> Stack 1: [E, D, B, C, A] | Exploring action Move E from table to C | New state -> Invalid | Exploring action Move C from B to A | New state -> Stack 1: [A, C], Stack 2: [E, D, B] | Taking action Move A from table to C | Moved to state -> Stack 1: [E, D, B, C, A] | Plan so far [Move B from E to table | Move C from D to table | Move E from A to table | Move D from table to E | Move B from table to D | Move C from table to B | Move A from table to C] | Reached goal state!",
        "system2_states_v1": 38
    },
    {
        "idx": 786,
        "start": [
            [
                "table",
                "C",
                "E"
            ],
            [
                "table",
                "D",
                "F",
                "B",
                "A"
            ]
        ],
        "goal": [
            [
                "table",
                "D"
            ],
            [
                "table",
                "F",
                "A",
                "C",
                "E",
                "B"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": true,
                "on": "B",
                "under": -1,
                "ontable": false
            },
            "B": {
                "clear": false,
                "on": "F",
                "under": "A",
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": -1,
                "under": "E",
                "ontable": true
            },
            "D": {
                "clear": false,
                "on": -1,
                "under": "F",
                "ontable": true
            },
            "E": {
                "clear": true,
                "on": "C",
                "under": -1,
                "ontable": false
            },
            "F": {
                "clear": false,
                "on": "D",
                "under": "B",
                "ontable": false
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": false,
                "on": "F",
                "under": "C",
                "ontable": false
            },
            "B": {
                "clear": true,
                "on": "E",
                "under": -1,
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": "A",
                "under": "E",
                "ontable": false
            },
            "D": {
                "clear": true,
                "on": -1,
                "under": -1,
                "ontable": true
            },
            "E": {
                "clear": false,
                "on": "C",
                "under": "B",
                "ontable": false
            },
            "F": {
                "clear": false,
                "on": -1,
                "under": "A",
                "ontable": true
            }
        },
        "plan_len": 9,
        "num_blocks": 6,
        "prompt": "The initial state:\nThe hand is empty.\nC is on the table. E is on C. E is clear.\nD is on the table. F is on D. B is on F. A is on B. A is clear.\n\nThe goal is:\nD is on the table. D is clear.\nF is on the table. A is on F. C is on A. E is on C. B is on E. B is clear.\n",
        "system1_plan": "Move A from B to table | Move B from F to E | Move F from D to table | Move B from E to table | Move A from table to F | Move E from C to table | Move C from table to A | Move E from table to C | Move B from table to E",
        "system1_states": 9,
        "system2_plan_v1": "Moved to state -> Stack 1: [C, E], Stack 2: [D, F, B, A] | Plan so far [] | Exploring action Move A from B to E | New state -> Stack 1: [C, E, A], Stack 2: [D, F, B] | Exploring action Move D from table to A | New state -> Invalid | Exploring action Move E from C to table | New state -> Stack 1: [C], Stack 2: [D, F, B, A], Stack 3: [E] | Exploring action Move A from B to table | New state -> Stack 1: [A], Stack 2: [C, E], Stack 3: [D, F, B] | Taking action Move A from B to table | Moved to state -> Stack 1: [A], Stack 2: [C, E], Stack 3: [D, F, B] | Plan so far [Move A from B to table] | Exploring action Move F from D to A | New state -> Invalid | Exploring action Move E from C to table | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, F, B], Stack 4: [E] | Exploring action Move B from F to E | New state -> Stack 1: [A], Stack 2: [C, E, B], Stack 3: [D, F] | Exploring action Move B from F to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, E], Stack 4: [D, F] | Exploring action Move D from table to B | New state -> Invalid | Taking action Move B from F to E | Moved to state -> Stack 1: [A], Stack 2: [C, E, B], Stack 3: [D, F] | Plan so far [Move A from B to table | Move B from F to E] | Exploring action Move F from D to B | New state -> Stack 1: [A], Stack 2: [C, E, B, F], Stack 3: [D] | Exploring action Move F from D to A | New state -> Stack 1: [A, F], Stack 2: [C, E, B], Stack 3: [D] | Exploring action Move D from table to B | New state -> Invalid | Exploring action Move C from table to B | New state -> Invalid | Exploring action Move F from D to table | New state -> Stack 1: [A], Stack 2: [C, E, B], Stack 3: [D], Stack 4: [F] | Taking action Move F from D to table | Moved to state -> Stack 1: [A], Stack 2: [C, E, B], Stack 3: [D], Stack 4: [F] | Plan so far [Move A from B to table | Move B from F to E | Move F from D to table] | Exploring action Move A from table to F | New state -> Stack 1: [C, E, B], Stack 2: [D], Stack 3: [F, A] | Exploring action Move F from table to A | New state -> Stack 1: [A, F], Stack 2: [C, E, B], Stack 3: [D] | Exploring action Move E from C to D | New state -> Invalid | Exploring action Move A from table to B | New state -> Stack 1: [C, E, B, A], Stack 2: [D], Stack 3: [F] | Taking action Move A from table to F | Moved to state -> Stack 1: [C, E, B], Stack 2: [D], Stack 3: [F, A] | Plan so far [Move A from B to table | Move B from F to E | Move F from D to table | Move A from table to F] | Exploring action Move B from E to table | New state -> Stack 1: [B], Stack 2: [C, E], Stack 3: [D], Stack 4: [F, A] | Exploring action Move A from F to table | New state -> Stack 1: [A], Stack 2: [C, E, B], Stack 3: [D], Stack 4: [F] | Exploring action Move D from table to A | New state -> Stack 1: [C, E, B], Stack 2: [F, A, D] | Exploring action Move F from table to B | New state -> Invalid | Taking action Move F from D to A | Moved to state -> Stack 1: [A, F], Stack 2: [C, E, B], Stack 3: [D] | Plan so far [Move A from B to table | Move B from F to E | Move F from D to A] | Exploring action Move F from A to table | New state -> Stack 1: [A], Stack 2: [C, E, B], Stack 3: [D], Stack 4: [F] | Exploring action Move E from C to D | New state -> Invalid | Exploring action Move F from A to B | New state -> Stack 1: [A], Stack 2: [C, E, B, F], Stack 3: [D] | Exploring action Move E from C to B | New state -> Invalid | Exploring action Move F from A to D | New state -> Stack 1: [A], Stack 2: [C, E, B], Stack 3: [D, F] | Taking action Move F from A to table | Moved to state -> Stack 1: [A], Stack 2: [C, E, B], Stack 3: [D], Stack 4: [F] | Plan so far [Move A from B to table | Move B from F to E | Move F from D to A | Move F from A to table] | Taking action Move A from F to table | Moved to state -> Stack 1: [A], Stack 2: [C, E, B], Stack 3: [D], Stack 4: [F] | Plan so far [Move A from B to table | Move B from F to E | Move F from D to table | Move A from table to F | Move A from F to table] | Taking action Move F from table to A | Moved to state -> Stack 1: [A, F], Stack 2: [C, E, B], Stack 3: [D] | Plan so far [Move A from B to table | Move B from F to E | Move F from D to table | Move F from table to A] | Taking action Move F from D to B | Moved to state -> Stack 1: [A], Stack 2: [C, E, B, F], Stack 3: [D] | Plan so far [Move A from B to table | Move B from F to E | Move F from D to B] | Exploring action Move F from B to D | New state -> Stack 1: [A], Stack 2: [C, E, B], Stack 3: [D, F] | Exploring action Move F from B to A | New state -> Stack 1: [A, F], Stack 2: [C, E, B], Stack 3: [D] | Exploring action Move E from C to A | New state -> Invalid | Exploring action Move F from B to table | New state -> Stack 1: [A], Stack 2: [C, E, B], Stack 3: [D], Stack 4: [F] | Taking action Move F from B to table | Moved to state -> Stack 1: [A], Stack 2: [C, E, B], Stack 3: [D], Stack 4: [F] | Plan so far [Move A from B to table | Move B from F to E | Move F from D to B | Move F from B to table] | Taking action Move F from B to A | Moved to state -> Stack 1: [A, F], Stack 2: [C, E, B], Stack 3: [D] | Plan so far [Move A from B to table | Move B from F to E | Move F from D to B | Move F from B to A] | Taking action Move F from table to D | Moved to state -> Stack 1: [A], Stack 2: [C, E, B], Stack 3: [D, F] | Plan so far [Move A from B to table | Move B from F to E | Move F from D to table | Move F from table to D] | Taking action Move F from table to B | Moved to state -> Stack 1: [A], Stack 2: [C, E, B, F], Stack 3: [D] | Plan so far [Move A from B to table | Move B from F to E | Move F from D to table | Move F from table to B] | Taking action Move D from table to A | Moved to state -> Stack 1: [A, D], Stack 2: [C, E, B], Stack 3: [F] | Plan so far [Move A from B to table | Move B from F to E | Move F from D to table | Move D from table to A] | Exploring action Move D from A to table | New state -> Stack 1: [A], Stack 2: [C, E, B], Stack 3: [D], Stack 4: [F] | Exploring action Move D from A to B | New state -> Stack 1: [A], Stack 2: [C, E, B, D], Stack 3: [F] | Exploring action Move A from table to F | New state -> Invalid | Exploring action Move D from A to F | New state -> Stack 1: [A], Stack 2: [C, E, B], Stack 3: [F, D] | Taking action Move D from A to table | Moved to state -> Stack 1: [A], Stack 2: [C, E, B], Stack 3: [D], Stack 4: [F] | Plan so far [Move A from B to table | Move B from F to E | Move F from D to table | Move D from table to A | Move D from A to table] | Taking action Move D from table to F | Moved to state -> Stack 1: [A], Stack 2: [C, E, B], Stack 3: [F, D] | Plan so far [Move A from B to table | Move B from F to E | Move F from D to table | Move D from table to F] | Exploring action Move A from table to D | New state -> Stack 1: [C, E, B], Stack 2: [F, D, A] | Exploring action Move D from F to table | New state -> Stack 1: [A], Stack 2: [C, E, B], Stack 3: [D], Stack 4: [F] | Exploring action Move F from table to D | New state -> Invalid | Exploring action Move D from F to A | New state -> Stack 1: [A, D], Stack 2: [C, E, B], Stack 3: [F] | Taking action Move D from F to table | Moved to state -> Stack 1: [A], Stack 2: [C, E, B], Stack 3: [D], Stack 4: [F] | Plan so far [Move A from B to table | Move B from F to E | Move F from D to table | Move D from table to F | Move D from F to table] | Taking action Move A from table to F | Moved to state -> Stack 1: [C, E, B], Stack 2: [D, F, A] | Plan so far [Move A from B to table | Move B from F to E | Move A from table to F] | Exploring action Move A from F to table | New state -> Stack 1: [A], Stack 2: [C, E, B], Stack 3: [D, F] | Exploring action Move A from F to B | New state -> Stack 1: [C, E, B, A], Stack 2: [D, F] | Exploring action Move B from E to table | New state -> Stack 1: [B], Stack 2: [C, E], Stack 3: [D, F, A] | Exploring action Move D from table to B | New state -> Invalid | Taking action Move F from A to D | Moved to state -> Stack 1: [A], Stack 2: [C, E, B], Stack 3: [D, F] | Plan so far [Move A from B to table | Move B from F to E | Move F from D to A | Move F from A to D] | Taking action Move A from F to table | Moved to state -> Stack 1: [A], Stack 2: [C, E, B], Stack 3: [D, F] | Plan so far [Move A from B to table | Move B from F to E | Move A from table to F | Move A from F to table] | Taking action Move B from E to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, E], Stack 4: [D], Stack 5: [F] | Plan so far [Move A from B to table | Move B from F to E | Move F from D to table | Move B from E to table] | Exploring action Move A from table to F | New state -> Stack 1: [B], Stack 2: [C, E], Stack 3: [D], Stack 4: [F, A] | Exploring action Move E from C to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Exploring action Move C from table to D | New state -> Invalid | Exploring action Move B from table to E | New state -> Stack 1: [A], Stack 2: [C, E, B], Stack 3: [D], Stack 4: [F] | Taking action Move B from table to E | Moved to state -> Stack 1: [A], Stack 2: [C, E, B], Stack 3: [D], Stack 4: [F] | Plan so far [Move A from B to table | Move B from F to E | Move F from D to table | Move B from E to table | Move B from table to E] | Taking action Move F from B to D | Moved to state -> Stack 1: [A], Stack 2: [C, E, B], Stack 3: [D, F] | Plan so far [Move A from B to table | Move B from F to E | Move F from D to B | Move F from B to D] | Taking action Move A from table to F | Moved to state -> Stack 1: [B], Stack 2: [C, E], Stack 3: [D], Stack 4: [F, A] | Plan so far [Move A from B to table | Move B from F to E | Move F from D to table | Move B from E to table | Move A from table to F] | Exploring action Move B from table to E | New state -> Stack 1: [C, E, B], Stack 2: [D], Stack 3: [F, A] | Exploring action Move E from C to table | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [F, A] | Exploring action Move E from C to A | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D], Stack 4: [F, A, E] | Exploring action Move F from table to A | New state -> Invalid | Taking action Move B from table to E | Moved to state -> Stack 1: [C, E, B], Stack 2: [D], Stack 3: [F, A] | Plan so far [Move A from B to table | Move B from F to E | Move F from D to table | Move B from E to table | Move A from table to F | Move B from table to E] | Taking action Move F from A to B | Moved to state -> Stack 1: [A], Stack 2: [C, E, B, F], Stack 3: [D] | Plan so far [Move A from B to table | Move B from F to E | Move F from D to A | Move F from A to B] | Taking action Move B from F to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, E], Stack 4: [D, F] | Plan so far [Move A from B to table | Move B from F to table] | Exploring action Move E from C to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D, F], Stack 5: [E] | Exploring action Move F from D to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, E], Stack 4: [D], Stack 5: [F] | Exploring action Move D from table to E | New state -> Invalid | Exploring action Move B from table to E | New state -> Stack 1: [A], Stack 2: [C, E, B], Stack 3: [D, F] | Taking action Move B from table to E | Moved to state -> Stack 1: [A], Stack 2: [C, E, B], Stack 3: [D, F] | Plan so far [Move A from B to table | Move B from F to table | Move B from table to E] | Taking action Move F from D to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, E], Stack 4: [D], Stack 5: [F] | Plan so far [Move A from B to table | Move B from F to table | Move F from D to table] | Taking action Move F from D to A | Moved to state -> Stack 1: [A, F], Stack 2: [B], Stack 3: [C, E], Stack 4: [D] | Plan so far [Move A from B to table | Move B from F to table | Move F from D to A] | Exploring action Move A from table to E | New state -> Invalid | Exploring action Move B from table to E | New state -> Stack 1: [A, F], Stack 2: [C, E, B], Stack 3: [D] | Exploring action Move E from C to table | New state -> Stack 1: [A, F], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Exploring action Move F from A to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, E], Stack 4: [D], Stack 5: [F] | Exploring action Move C from table to E | New state -> Invalid | Taking action Move B from table to E | Moved to state -> Stack 1: [A, F], Stack 2: [C, E, B], Stack 3: [D] | Plan so far [Move A from B to table | Move B from F to table | Move F from D to A | Move B from table to E] | Taking action Move F from D to B | Moved to state -> Stack 1: [A], Stack 2: [B, F], Stack 3: [C, E], Stack 4: [D] | Plan so far [Move A from B to table | Move B from F to table | Move F from D to B] | Exploring action Move F from B to A | New state -> Stack 1: [A, F], Stack 2: [B], Stack 3: [C, E], Stack 4: [D] | Exploring action Move F from B to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, E], Stack 4: [D], Stack 5: [F] | Exploring action Move E from C to table | New state -> Stack 1: [A], Stack 2: [B, F], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Exploring action Move B from table to D | New state -> Invalid | Taking action Move F from D to E | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, E, F], Stack 4: [D] | Plan so far [Move A from B to table | Move B from F to table | Move F from D to E] | Exploring action Move F from E to A | New state -> Stack 1: [A, F], Stack 2: [B], Stack 3: [C, E], Stack 4: [D] | Exploring action Move E from C to F | New state -> Invalid | Exploring action Move F from E to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, E], Stack 4: [D], Stack 5: [F] | Exploring action Move F from E to B | New state -> Stack 1: [A], Stack 2: [B, F], Stack 3: [C, E], Stack 4: [D] | Exploring action Move C from table to D | New state -> Invalid | Taking action Move F from A to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, E], Stack 4: [D], Stack 5: [F] | Plan so far [Move A from B to table | Move B from F to table | Move F from D to A | Move F from A to table] | Taking action Move E from C to table | Moved to state -> Stack 1: [A], Stack 2: [B, F], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Plan so far [Move A from B to table | Move B from F to table | Move F from D to B | Move E from C to table] | Exploring action Move F from B to E | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E, F] | Exploring action Move B from table to E | New state -> Invalid | Exploring action Move B from table to D | New state -> Invalid | Exploring action Move F from B to A | New state -> Stack 1: [A, F], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Exploring action Move F from B to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Taking action Move F from B to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, E], Stack 4: [D], Stack 5: [F] | Plan so far [Move A from B to table | Move B from F to table | Move F from D to B | Move F from B to table] | Taking action Move E from C to table | Moved to state -> Stack 1: [A, F], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Plan so far [Move A from B to table | Move B from F to table | Move F from D to A | Move E from C to table] | Exploring action Move F from A to E | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E, F] | Exploring action Move F from A to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Exploring action Move A from table to B | New state -> Invalid | Exploring action Move B from table to E | New state -> Stack 1: [A, F], Stack 2: [C], Stack 3: [D], Stack 4: [E, B] | Taking action Move E from C to table | Moved to state -> Stack 1: [B], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [F, A] | Plan so far [Move A from B to table | Move B from F to E | Move F from D to table | Move B from E to table | Move A from table to F | Move E from C to table] | Exploring action Move C from table to A | New state -> Stack 1: [B], Stack 2: [D], Stack 3: [E], Stack 4: [F, A, C] | Exploring action Move F from table to E | New state -> Invalid | Exploring action Move B from table to A | New state -> Stack 1: [C], Stack 2: [D], Stack 3: [E], Stack 4: [F, A, B] | Exploring action Move F from table to D | New state -> Invalid | Exploring action Move B from table to E | New state -> Stack 1: [C], Stack 2: [D], Stack 3: [E, B], Stack 4: [F, A] | Taking action Move A from table to B | Moved to state -> Stack 1: [C, E, B, A], Stack 2: [D], Stack 3: [F] | Plan so far [Move A from B to table | Move B from F to E | Move F from D to table | Move A from table to B] | Exploring action Move B from E to table | New state -> Invalid | Exploring action Move A from B to D | New state -> Stack 1: [C, E, B], Stack 2: [D, A], Stack 3: [F] | Exploring action Move A from B to table | New state -> Stack 1: [A], Stack 2: [C, E, B], Stack 3: [D], Stack 4: [F] | Exploring action Move C from table to A | New state -> Invalid | Exploring action Move A from B to F | New state -> Stack 1: [C, E, B], Stack 2: [D], Stack 3: [F, A] | Taking action Move A from B to F | Moved to state -> Stack 1: [C, E, B], Stack 2: [D], Stack 3: [F, A] | Plan so far [Move A from B to table | Move B from F to E | Move F from D to table | Move A from table to B | Move A from B to F] | Taking action Move A from B to table | Moved to state -> Stack 1: [A], Stack 2: [C, E, B], Stack 3: [D], Stack 4: [F] | Plan so far [Move A from B to table | Move B from F to E | Move F from D to table | Move A from table to B | Move A from B to table] | Taking action Move E from C to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D, F], Stack 5: [E] | Plan so far [Move A from B to table | Move B from F to table | Move E from C to table] | Exploring action Move F from D to C | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, F], Stack 4: [D], Stack 5: [E] | Exploring action Move F from D to A | New state -> Stack 1: [A, F], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Exploring action Move D from table to B | New state -> Invalid | Exploring action Move F from D to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Taking action Move F from D to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Plan so far [Move A from B to table | Move B from F to table | Move E from C to table | Move F from D to table] | Exploring action Move B from table to A | New state -> Stack 1: [A, B], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Exploring action Move A from table to F | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [F, A] | Exploring action Move B from table to E | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D], Stack 4: [E, B], Stack 5: [F] | Taking action Move A from table to F | Moved to state -> Stack 1: [B], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [F, A] | Plan so far [Move A from B to table | Move B from F to table | Move E from C to table | Move F from D to table | Move A from table to F] | Taking action Move F from A to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Plan so far [Move A from B to table | Move B from F to table | Move F from D to A | Move E from C to table | Move F from A to table] | Taking action Move F from D to A | Moved to state -> Stack 1: [A, F], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Plan so far [Move A from B to table | Move B from F to table | Move E from C to table | Move F from D to A] | Taking action Move F from D to B | Moved to state -> Stack 1: [A], Stack 2: [B, F], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Plan so far [Move A from B to table | Move B from F to table | Move E from C to table | Move F from D to B] | Taking action Move F from D to C | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, F], Stack 4: [D], Stack 5: [E] | Plan so far [Move A from B to table | Move B from F to table | Move E from C to table | Move F from D to C] | Exploring action Move F from C to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Exploring action Move F from C to E | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E, F] | Exploring action Move C from table to E | New state -> Invalid | Exploring action Move C from table to A | New state -> Invalid | Exploring action Move B from table to E | New state -> Stack 1: [A], Stack 2: [C, F], Stack 3: [D], Stack 4: [E, B] | Taking action Move B from table to E | Moved to state -> Stack 1: [A], Stack 2: [C], Stack 3: [D], Stack 4: [E, B], Stack 5: [F] | Plan so far [Move A from B to table | Move B from F to table | Move E from C to table | Move F from D to table | Move B from table to E] | Exploring action Move B from E to A | New state -> Stack 1: [A, B], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Exploring action Move B from E to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Exploring action Move E from table to A | New state -> Invalid | Exploring action Move A from table to F | New state -> Stack 1: [C], Stack 2: [D], Stack 3: [E, B], Stack 4: [F, A] | Exploring action Move E from table to B | New state -> Invalid | Taking action Move F from D to E | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E, F] | Plan so far [Move A from B to table | Move B from F to table | Move E from C to table | Move F from D to E] | Exploring action Move F from E to C | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, F], Stack 4: [D], Stack 5: [E] | Exploring action Move F from E to A | New state -> Stack 1: [A, F], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Exploring action Move E from table to C | New state -> Invalid | Exploring action Move E from table to F | New state -> Invalid | Exploring action Move F from E to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Taking action Move C from table to A | Moved to state -> Stack 1: [B], Stack 2: [D], Stack 3: [E], Stack 4: [F, A, C] | Plan so far [Move A from B to table | Move B from F to E | Move F from D to table | Move B from E to table | Move A from table to F | Move E from C to table | Move C from table to A] | Exploring action Move A from F to B | New state -> Invalid | Exploring action Move B from table to C | New state -> Stack 1: [D], Stack 2: [E], Stack 3: [F, A, C, B] | Exploring action Move E from table to C | New state -> Stack 1: [B], Stack 2: [D], Stack 3: [F, A, C, E] | Exploring action Move B from table to E | New state -> Stack 1: [D], Stack 2: [E, B], Stack 3: [F, A, C] | Taking action Move A from table to D | Moved to state -> Stack 1: [C, E, B], Stack 2: [D, A], Stack 3: [F] | Plan so far [Move A from B to table | Move B from F to E | Move F from D to table | Move A from table to D] | Exploring action Move C from table to A | New state -> Invalid | Exploring action Move C from table to B | New state -> Invalid | Exploring action Move A from D to F | New state -> Stack 1: [C, E, B], Stack 2: [D], Stack 3: [F, A] | Exploring action Move A from D to B | New state -> Stack 1: [C, E, B, A], Stack 2: [D], Stack 3: [F] | Exploring action Move A from D to table | New state -> Stack 1: [A], Stack 2: [C, E, B], Stack 3: [D], Stack 4: [F] | Taking action Move A from D to F | Moved to state -> Stack 1: [C, E, B], Stack 2: [D], Stack 3: [F, A] | Plan so far [Move A from B to table | Move B from F to E | Move F from D to table | Move A from table to D | Move A from D to F] | Taking action Move A from D to table | Moved to state -> Stack 1: [A], Stack 2: [C, E, B], Stack 3: [D], Stack 4: [F] | Plan so far [Move A from B to table | Move B from F to E | Move F from D to table | Move A from table to D | Move A from D to table] | Taking action Move D from table to A | Moved to state -> Stack 1: [C, E, B], Stack 2: [F, A, D] | Plan so far [Move A from B to table | Move B from F to E | Move F from D to table | Move A from table to F | Move D from table to A] | Exploring action Move E from C to table | New state -> Invalid | Exploring action Move D from A to B | New state -> Stack 1: [C, E, B, D], Stack 2: [F, A] | Exploring action Move D from A to table | New state -> Stack 1: [C, E, B], Stack 2: [D], Stack 3: [F, A] | Exploring action Move B from E to table | New state -> Stack 1: [B], Stack 2: [C, E], Stack 3: [F, A, D] | Taking action Move D from A to table | Moved to state -> Stack 1: [C, E, B], Stack 2: [D], Stack 3: [F, A] | Plan so far [Move A from B to table | Move B from F to E | Move F from D to table | Move A from table to F | Move D from table to A | Move D from A to table] | Taking action Move F from B to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Plan so far [Move A from B to table | Move B from F to table | Move F from D to B | Move E from C to table | Move F from B to table] | Taking action Move F from E to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Plan so far [Move A from B to table | Move B from F to table | Move E from C to table | Move F from D to E | Move F from E to table] | Taking action Move E from table to C | Moved to state -> Stack 1: [B], Stack 2: [D], Stack 3: [F, A, C, E] | Plan so far [Move A from B to table | Move B from F to E | Move F from D to table | Move B from E to table | Move A from table to F | Move E from C to table | Move C from table to A | Move E from table to C] | Exploring action Move E from C to table | New state -> Stack 1: [B], Stack 2: [D], Stack 3: [E], Stack 4: [F, A, C] | Exploring action Move A from F to table | New state -> Invalid | Exploring action Move A from F to E | New state -> Invalid | Exploring action Move D from table to B | New state -> Stack 1: [B, D], Stack 2: [F, A, C, E] | Exploring action Move B from table to E | New state -> Stack 1: [D], Stack 2: [F, A, C, E, B] | Taking action Move B from table to E | Moved to state -> Stack 1: [D], Stack 2: [F, A, C, E, B] | Plan so far [Move A from B to table | Move B from F to E | Move F from D to table | Move B from E to table | Move A from table to F | Move E from C to table | Move C from table to A | Move E from table to C | Move B from table to E] | Reached goal state!",
        "system2_states_v1": 128
    },
    {
        "idx": 616,
        "start": [
            [
                "table",
                "D"
            ],
            [
                "table",
                "E",
                "C",
                "B",
                "A"
            ]
        ],
        "goal": [
            [
                "table",
                "C",
                "E",
                "A",
                "D",
                "B"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": true,
                "on": "B",
                "under": -1,
                "ontable": false
            },
            "B": {
                "clear": false,
                "on": "C",
                "under": "A",
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": "E",
                "under": "B",
                "ontable": false
            },
            "D": {
                "clear": true,
                "on": -1,
                "under": -1,
                "ontable": true
            },
            "E": {
                "clear": false,
                "on": -1,
                "under": "C",
                "ontable": true
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": false,
                "on": "E",
                "under": "D",
                "ontable": false
            },
            "B": {
                "clear": true,
                "on": "D",
                "under": -1,
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": -1,
                "under": "E",
                "ontable": true
            },
            "D": {
                "clear": false,
                "on": "A",
                "under": "B",
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": "C",
                "under": "A",
                "ontable": false
            }
        },
        "plan_len": 7,
        "num_blocks": 5,
        "prompt": "The initial state:\nThe hand is empty.\nD is on the table. D is clear.\nE is on the table. C is on E. B is on C. A is on B. A is clear.\n\nThe goal is:\nC is on the table. E is on C. A is on E. D is on A. B is on D. B is clear.\n",
        "system1_plan": "Move A from B to table | Move B from C to table | Move C from E to table | Move E from table to C | Move A from table to E | Move D from table to A | Move B from table to D",
        "system1_states": 7,
        "system2_plan_v1": "Moved to state -> Stack 1: [D], Stack 2: [E, C, B, A] | Plan so far [] | Exploring action Move C from E to table | New state -> Invalid | Exploring action Move D from table to A | New state -> Stack 1: [E, C, B, A, D] | Exploring action Move A from B to D | New state -> Stack 1: [D, A], Stack 2: [E, C, B] | Exploring action Move A from B to table | New state -> Stack 1: [A], Stack 2: [D], Stack 3: [E, C, B] | Exploring action Move C from E to A | New state -> Invalid | Taking action Move A from B to table | Moved to state -> Stack 1: [A], Stack 2: [D], Stack 3: [E, C, B] | Plan so far [Move A from B to table] | Exploring action Move B from C to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D], Stack 4: [E, C] | Exploring action Move B from C to A | New state -> Stack 1: [A, B], Stack 2: [D], Stack 3: [E, C] | Exploring action Move B from C to D | New state -> Stack 1: [A], Stack 2: [D, B], Stack 3: [E, C] | Exploring action Move C from E to table | New state -> Invalid | Taking action Move B from C to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [D], Stack 4: [E, C] | Plan so far [Move A from B to table | Move B from C to table] | Exploring action Move B from table to D | New state -> Stack 1: [A], Stack 2: [D, B], Stack 3: [E, C] | Exploring action Move E from table to D | New state -> Invalid | Exploring action Move C from E to A | New state -> Stack 1: [A, C], Stack 2: [B], Stack 3: [D], Stack 4: [E] | Exploring action Move C from E to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Exploring action Move E from table to A | New state -> Invalid | Taking action Move B from C to D | Moved to state -> Stack 1: [A], Stack 2: [D, B], Stack 3: [E, C] | Plan so far [Move A from B to table | Move B from C to D] | Exploring action Move D from table to B | New state -> Invalid | Exploring action Move C from E to A | New state -> Stack 1: [A, C], Stack 2: [D, B], Stack 3: [E] | Exploring action Move C from E to table | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, B], Stack 4: [E] | Exploring action Move D from table to A | New state -> Invalid | Exploring action Move B from D to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D], Stack 4: [E, C] | Taking action Move C from E to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Plan so far [Move A from B to table | Move B from C to table | Move C from E to table] | Exploring action Move B from table to D | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, B], Stack 4: [E] | Exploring action Move E from table to C | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, E], Stack 4: [D] | Exploring action Move A from table to B | New state -> Stack 1: [B, A], Stack 2: [C], Stack 3: [D], Stack 4: [E] | Taking action Move C from E to table | Moved to state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, B], Stack 4: [E] | Plan so far [Move A from B to table | Move B from C to D | Move C from E to table] | Exploring action Move D from table to E | New state -> Invalid | Exploring action Move E from table to C | New state -> Stack 1: [A], Stack 2: [C, E], Stack 3: [D, B] | Exploring action Move B from D to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Exploring action Move B from D to E | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D], Stack 4: [E, B] | Taking action Move E from table to C | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, E], Stack 4: [D] | Plan so far [Move A from B to table | Move B from C to table | Move C from E to table | Move E from table to C] | Exploring action Move B from table to D | New state -> Stack 1: [A], Stack 2: [C, E], Stack 3: [D, B] | Exploring action Move A from table to B | New state -> Stack 1: [B, A], Stack 2: [C, E], Stack 3: [D] | Exploring action Move A from table to E | New state -> Stack 1: [B], Stack 2: [C, E, A], Stack 3: [D] | Exploring action Move C from table to B | New state -> Invalid | Taking action Move E from table to C | Moved to state -> Stack 1: [A], Stack 2: [C, E], Stack 3: [D, B] | Plan so far [Move A from B to table | Move B from C to D | Move C from E to table | Move E from table to C] | Exploring action Move A from table to E | New state -> Stack 1: [C, E, A], Stack 2: [D, B] | Exploring action Move E from C to table | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, B], Stack 4: [E] | Exploring action Move B from D to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, E], Stack 4: [D] | Exploring action Move C from table to E | New state -> Invalid | Taking action Move A from table to E | Moved to state -> Stack 1: [B], Stack 2: [C, E, A], Stack 3: [D] | Plan so far [Move A from B to table | Move B from C to table | Move C from E to table | Move E from table to C | Move A from table to E] | Exploring action Move D from table to B | New state -> Stack 1: [B, D], Stack 2: [C, E, A] | Exploring action Move C from table to B | New state -> Invalid | Exploring action Move D from table to A | New state -> Stack 1: [B], Stack 2: [C, E, A, D] | Exploring action Move B from table to D | New state -> Stack 1: [C, E, A], Stack 2: [D, B] | Taking action Move A from table to E | Moved to state -> Stack 1: [C, E, A], Stack 2: [D, B] | Plan so far [Move A from B to table | Move B from C to D | Move C from E to table | Move E from table to C | Move A from table to E] | Exploring action Move C from table to A | New state -> Invalid | Exploring action Move B from D to A | New state -> Stack 1: [C, E, A, B], Stack 2: [D] | Exploring action Move B from D to table | New state -> Stack 1: [B], Stack 2: [C, E, A], Stack 3: [D] | Exploring action Move A from E to table | New state -> Stack 1: [A], Stack 2: [C, E], Stack 3: [D, B] | Exploring action Move D from table to B | New state -> Invalid | Taking action Move D from table to A | Moved to state -> Stack 1: [B], Stack 2: [C, E, A, D] | Plan so far [Move A from B to table | Move B from C to table | Move C from E to table | Move E from table to C | Move A from table to E | Move D from table to A] | Exploring action Move D from A to B | New state -> Stack 1: [B, D], Stack 2: [C, E, A] | Exploring action Move E from C to D | New state -> Invalid | Exploring action Move D from A to table | New state -> Stack 1: [B], Stack 2: [C, E, A], Stack 3: [D] | Exploring action Move B from table to D | New state -> Stack 1: [C, E, A, D, B] | Exploring action Move E from C to table | New state -> Invalid | Taking action Move B from table to D | Moved to state -> Stack 1: [C, E, A, D, B] | Plan so far [Move A from B to table | Move B from C to table | Move C from E to table | Move E from table to C | Move A from table to E | Move D from table to A | Move B from table to D] | Reached goal state!",
        "system2_states_v1": 48
    },
    {
        "idx": 597,
        "start": [
            [
                "table",
                "A",
                "E",
                "D",
                "C",
                "B"
            ]
        ],
        "goal": [
            [
                "table",
                "A",
                "B",
                "E"
            ],
            [
                "table",
                "D",
                "C"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": false,
                "on": -1,
                "under": "E",
                "ontable": true
            },
            "B": {
                "clear": true,
                "on": "C",
                "under": -1,
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": "D",
                "under": "B",
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": "E",
                "under": "C",
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": "A",
                "under": "D",
                "ontable": false
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": false,
                "on": -1,
                "under": "B",
                "ontable": true
            },
            "B": {
                "clear": false,
                "on": "A",
                "under": "E",
                "ontable": false
            },
            "C": {
                "clear": true,
                "on": "D",
                "under": -1,
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": -1,
                "under": "C",
                "ontable": true
            },
            "E": {
                "clear": true,
                "on": "B",
                "under": -1,
                "ontable": false
            }
        },
        "plan_len": 7,
        "num_blocks": 5,
        "prompt": "The initial state:\nThe hand is empty.\nA is on the table. E is on A. D is on E. C is on D. B is on C. B is clear.\n\nThe goal is:\nA is on the table. B is on A. E is on B. E is clear.\nD is on the table. C is on D. C is clear.\n",
        "system1_plan": "Move B from C to table | Move C from D to table | Move D from E to table | Move C from table to D | Move E from A to table | Move B from table to A | Move E from table to B",
        "system1_states": 7,
        "system2_plan_v1": "Moved to state -> Stack 1: [A, E, D, C, B] | Plan so far [] | Exploring action Move B from C to table | New state -> Stack 1: [A, E, D, C], Stack 2: [B] | Exploring action Move D from E to B | New state -> Invalid | Exploring action Move E from A to table | New state -> Invalid | Taking action Move B from C to table | Moved to state -> Stack 1: [A, E, D, C], Stack 2: [B] | Plan so far [Move B from C to table] | Exploring action Move C from D to table | New state -> Stack 1: [A, E, D], Stack 2: [B], Stack 3: [C] | Exploring action Move B from table to C | New state -> Stack 1: [A, E, D, C, B] | Exploring action Move E from A to C | New state -> Invalid | Exploring action Move D from E to C | New state -> Invalid | Exploring action Move C from D to B | New state -> Stack 1: [A, E, D], Stack 2: [B, C] | Taking action Move C from D to table | Moved to state -> Stack 1: [A, E, D], Stack 2: [B], Stack 3: [C] | Plan so far [Move B from C to table | Move C from D to table] | Exploring action Move D from E to B | New state -> Stack 1: [A, E], Stack 2: [B, D], Stack 3: [C] | Exploring action Move A from table to D | New state -> Invalid | Exploring action Move E from A to B | New state -> Invalid | Exploring action Move D from E to C | New state -> Stack 1: [A, E], Stack 2: [B], Stack 3: [C, D] | Exploring action Move D from E to table | New state -> Stack 1: [A, E], Stack 2: [B], Stack 3: [C], Stack 4: [D] | Taking action Move D from E to table | Moved to state -> Stack 1: [A, E], Stack 2: [B], Stack 3: [C], Stack 4: [D] | Plan so far [Move B from C to table | Move C from D to table | Move D from E to table] | Exploring action Move E from A to B | New state -> Stack 1: [A], Stack 2: [B, E], Stack 3: [C], Stack 4: [D] | Exploring action Move A from table to B | New state -> Invalid | Exploring action Move A from table to C | New state -> Invalid | Exploring action Move C from table to D | New state -> Stack 1: [A, E], Stack 2: [B], Stack 3: [D, C] | Exploring action Move E from A to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Taking action Move C from table to D | Moved to state -> Stack 1: [A, E], Stack 2: [B], Stack 3: [D, C] | Plan so far [Move B from C to table | Move C from D to table | Move D from E to table | Move C from table to D] | Exploring action Move E from A to B | New state -> Stack 1: [A], Stack 2: [B, E], Stack 3: [D, C] | Exploring action Move B from table to E | New state -> Stack 1: [A, E, B], Stack 2: [D, C] | Exploring action Move D from table to C | New state -> Invalid | Exploring action Move E from A to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, C], Stack 4: [E] | Exploring action Move A from table to B | New state -> Invalid | Taking action Move E from A to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, C], Stack 4: [E] | Plan so far [Move B from C to table | Move C from D to table | Move D from E to table | Move C from table to D | Move E from A to table] | Exploring action Move B from table to A | New state -> Stack 1: [A, B], Stack 2: [D, C], Stack 3: [E] | Exploring action Move D from table to C | New state -> Invalid | Exploring action Move A from table to E | New state -> Stack 1: [B], Stack 2: [D, C], Stack 3: [E, A] | Exploring action Move E from table to B | New state -> Stack 1: [A], Stack 2: [B, E], Stack 3: [D, C] | Taking action Move E from A to B | Moved to state -> Stack 1: [A], Stack 2: [B, E], Stack 3: [D, C] | Plan so far [Move B from C to table | Move C from D to table | Move D from E to table | Move C from table to D | Move E from A to B] | Exploring action Move D from table to A | New state -> Invalid | Exploring action Move E from B to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, C], Stack 4: [E] | Exploring action Move E from B to A | New state -> Stack 1: [A, E], Stack 2: [B], Stack 3: [D, C] | Exploring action Move A from table to C | New state -> Stack 1: [B, E], Stack 2: [D, C, A] | Taking action Move B from table to A | Moved to state -> Stack 1: [A, B], Stack 2: [D, C], Stack 3: [E] | Plan so far [Move B from C to table | Move C from D to table | Move D from E to table | Move C from table to D | Move E from A to table | Move B from table to A] | Exploring action Move B from A to E | New state -> Stack 1: [A], Stack 2: [D, C], Stack 3: [E, B] | Exploring action Move E from table to B | New state -> Stack 1: [A, B, E], Stack 2: [D, C] | Exploring action Move D from table to E | New state -> Invalid | Exploring action Move D from table to C | New state -> Invalid | Exploring action Move B from A to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, C], Stack 4: [E] | Taking action Move E from table to B | Moved to state -> Stack 1: [A, B, E], Stack 2: [D, C] | Plan so far [Move B from C to table | Move C from D to table | Move D from E to table | Move C from table to D | Move E from A to table | Move B from table to A | Move E from table to B] | Reached goal state!",
        "system2_states_v1": 36
    },
    {
        "idx": 619,
        "start": [
            [
                "table",
                "C",
                "E",
                "A",
                "B"
            ],
            [
                "table",
                "D"
            ]
        ],
        "goal": [
            [
                "table",
                "B",
                "D",
                "A",
                "C",
                "E"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": false,
                "on": "E",
                "under": "B",
                "ontable": false
            },
            "B": {
                "clear": true,
                "on": "A",
                "under": -1,
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": -1,
                "under": "E",
                "ontable": true
            },
            "D": {
                "clear": true,
                "on": -1,
                "under": -1,
                "ontable": true
            },
            "E": {
                "clear": false,
                "on": "C",
                "under": "A",
                "ontable": false
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": false,
                "on": "D",
                "under": "C",
                "ontable": false
            },
            "B": {
                "clear": false,
                "on": -1,
                "under": "D",
                "ontable": true
            },
            "C": {
                "clear": false,
                "on": "A",
                "under": "E",
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": "B",
                "under": "A",
                "ontable": false
            },
            "E": {
                "clear": true,
                "on": "C",
                "under": -1,
                "ontable": false
            }
        },
        "plan_len": 7,
        "num_blocks": 5,
        "prompt": "The initial state:\nThe hand is empty.\nC is on the table. E is on C. A is on E. B is on A. B is clear.\nD is on the table. D is clear.\n\nThe goal is:\nB is on the table. D is on B. A is on D. C is on A. E is on C. E is clear.\n",
        "system1_plan": "Move B from A to table | Move A from E to table | Move D from table to B | Move A from table to D | Move E from C to table | Move C from table to A | Move E from table to C",
        "system1_states": 7,
        "system2_plan_v1": "Moved to state -> Stack 1: [C, E, A, B], Stack 2: [D] | Plan so far [] | Exploring action Move B from A to table | New state -> Stack 1: [B], Stack 2: [C, E, A], Stack 3: [D] | Exploring action Move E from C to D | New state -> Invalid | Exploring action Move A from E to B | New state -> Invalid | Exploring action Move B from A to D | New state -> Stack 1: [C, E, A], Stack 2: [D, B] | Exploring action Move D from table to B | New state -> Stack 1: [C, E, A, B, D] | Taking action Move B from A to table | Moved to state -> Stack 1: [B], Stack 2: [C, E, A], Stack 3: [D] | Plan so far [Move B from A to table] | Exploring action Move C from table to B | New state -> Invalid | Exploring action Move D from table to B | New state -> Stack 1: [B, D], Stack 2: [C, E, A] | Exploring action Move E from C to B | New state -> Invalid | Exploring action Move A from E to D | New state -> Stack 1: [B], Stack 2: [C, E], Stack 3: [D, A] | Exploring action Move A from E to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, E], Stack 4: [D] | Taking action Move A from E to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, E], Stack 4: [D] | Plan so far [Move B from A to table | Move A from E to table] | Exploring action Move C from table to E | New state -> Invalid | Exploring action Move C from table to A | New state -> Invalid | Exploring action Move D from table to B | New state -> Stack 1: [A], Stack 2: [B, D], Stack 3: [C, E] | Exploring action Move D from table to A | New state -> Stack 1: [A, D], Stack 2: [B], Stack 3: [C, E] | Exploring action Move E from C to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Taking action Move D from table to B | Moved to state -> Stack 1: [A], Stack 2: [B, D], Stack 3: [C, E] | Plan so far [Move B from A to table | Move A from E to table | Move D from table to B] | Exploring action Move E from C to table | New state -> Stack 1: [A], Stack 2: [B, D], Stack 3: [C], Stack 4: [E] | Exploring action Move A from table to D | New state -> Stack 1: [B, D, A], Stack 2: [C, E] | Exploring action Move B from table to D | New state -> Invalid | Exploring action Move E from C to A | New state -> Stack 1: [A, E], Stack 2: [B, D], Stack 3: [C] | Exploring action Move C from table to E | New state -> Invalid | Taking action Move A from table to D | Moved to state -> Stack 1: [B, D, A], Stack 2: [C, E] | Plan so far [Move B from A to table | Move A from E to table | Move D from table to B | Move A from table to D] | Exploring action Move E from C to A | New state -> Stack 1: [B, D, A, E], Stack 2: [C] | Exploring action Move E from C to table | New state -> Stack 1: [B, D, A], Stack 2: [C], Stack 3: [E] | Exploring action Move D from B to E | New state -> Invalid | Exploring action Move A from D to table | New state -> Stack 1: [A], Stack 2: [B, D], Stack 3: [C, E] | Taking action Move E from C to table | Moved to state -> Stack 1: [A], Stack 2: [B, D], Stack 3: [C], Stack 4: [E] | Plan so far [Move B from A to table | Move A from E to table | Move D from table to B | Move E from C to table] | Exploring action Move D from B to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Exploring action Move E from table to C | New state -> Stack 1: [A], Stack 2: [B, D], Stack 3: [C, E] | Exploring action Move A from table to D | New state -> Stack 1: [B, D, A], Stack 2: [C], Stack 3: [E] | Exploring action Move B from table to D | New state -> Invalid | Taking action Move E from C to table | Moved to state -> Stack 1: [B, D, A], Stack 2: [C], Stack 3: [E] | Plan so far [Move B from A to table | Move A from E to table | Move D from table to B | Move A from table to D | Move E from C to table] | Exploring action Move E from table to C | New state -> Stack 1: [B, D, A], Stack 2: [C, E] | Exploring action Move B from table to E | New state -> Invalid | Exploring action Move E from table to A | New state -> Stack 1: [B, D, A, E], Stack 2: [C] | Exploring action Move C from table to A | New state -> Stack 1: [B, D, A, C], Stack 2: [E] | Taking action Move A from E to B | Moved to state -> Stack 1: [B, A], Stack 2: [C, E], Stack 3: [D] | Plan so far [Move B from A to table | Move A from E to B] | Exploring action Move C from table to D | New state -> Invalid | Exploring action Move E from C to table | New state -> Stack 1: [B, A], Stack 2: [C], Stack 3: [D], Stack 4: [E] | Exploring action Move A from B to D | New state -> Stack 1: [B], Stack 2: [C, E], Stack 3: [D, A] | Exploring action Move A from B to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, E], Stack 4: [D] | Taking action Move A from E to D | Moved to state -> Stack 1: [B], Stack 2: [C, E], Stack 3: [D, A] | Plan so far [Move B from A to table | Move A from E to D] | Exploring action Move E from C to table | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, A], Stack 4: [E] | Exploring action Move D from table to E | New state -> Invalid | Exploring action Move A from D to B | New state -> Stack 1: [B, A], Stack 2: [C, E], Stack 3: [D] | Exploring action Move A from D to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, E], Stack 4: [D] | Taking action Move A from B to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, E], Stack 4: [D] | Plan so far [Move B from A to table | Move A from E to B | Move A from B to table] | Taking action Move A from D to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, E], Stack 4: [D] | Plan so far [Move B from A to table | Move A from E to D | Move A from D to table] | Taking action Move C from table to A | Moved to state -> Stack 1: [B, D, A, C], Stack 2: [E] | Plan so far [Move B from A to table | Move A from E to table | Move D from table to B | Move A from table to D | Move E from C to table | Move C from table to A] | Exploring action Move A from D to table | New state -> Invalid | Exploring action Move C from A to E | New state -> Stack 1: [B, D, A], Stack 2: [E, C] | Exploring action Move C from A to table | New state -> Stack 1: [B, D, A], Stack 2: [C], Stack 3: [E] | Exploring action Move D from B to table | New state -> Invalid | Exploring action Move E from table to C | New state -> Stack 1: [B, D, A, C, E] | Taking action Move E from table to C | Moved to state -> Stack 1: [B, D, A, C, E] | Plan so far [Move B from A to table | Move A from E to table | Move D from table to B | Move A from table to D | Move E from C to table | Move C from table to A | Move E from table to C] | Reached goal state!",
        "system2_states_v1": 45
    },
    {
        "idx": 811,
        "start": [
            [
                "table",
                "F",
                "D",
                "A",
                "B",
                "E",
                "C"
            ]
        ],
        "goal": [
            [
                "table",
                "C",
                "F",
                "A",
                "E",
                "B"
            ],
            [
                "table",
                "D"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": false,
                "on": "D",
                "under": "B",
                "ontable": false
            },
            "B": {
                "clear": false,
                "on": "A",
                "under": "E",
                "ontable": false
            },
            "C": {
                "clear": true,
                "on": "E",
                "under": -1,
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": "F",
                "under": "A",
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": "B",
                "under": "C",
                "ontable": false
            },
            "F": {
                "clear": false,
                "on": -1,
                "under": "D",
                "ontable": true
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": false,
                "on": "F",
                "under": "E",
                "ontable": false
            },
            "B": {
                "clear": true,
                "on": "E",
                "under": -1,
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": -1,
                "under": "F",
                "ontable": true
            },
            "D": {
                "clear": true,
                "on": -1,
                "under": -1,
                "ontable": true
            },
            "E": {
                "clear": false,
                "on": "A",
                "under": "B",
                "ontable": false
            },
            "F": {
                "clear": false,
                "on": "C",
                "under": "A",
                "ontable": false
            }
        },
        "plan_len": 9,
        "num_blocks": 6,
        "prompt": "The initial state:\nThe hand is empty.\nF is on the table. D is on F. A is on D. B is on A. E is on B. C is on E. C is clear.\n\nThe goal is:\nC is on the table. F is on C. A is on F. E is on A. B is on E. B is clear.\nD is on the table. D is clear.\n",
        "system1_plan": "Move C from E to table | Move E from B to table | Move B from A to table | Move A from D to table | Move D from F to table | Move F from table to C | Move A from table to F | Move E from table to A | Move B from table to E",
        "system1_states": 9,
        "system2_plan_v1": "Moved to state -> Stack 1: [F, D, A, B, E, C] | Plan so far [] | Exploring action Move A from D to table | New state -> Invalid | Exploring action Move C from E to table | New state -> Stack 1: [C], Stack 2: [F, D, A, B, E] | Taking action Move C from E to table | Moved to state -> Stack 1: [C], Stack 2: [F, D, A, B, E] | Plan so far [Move C from E to table] | Exploring action Move D from F to C | New state -> Invalid | Exploring action Move E from B to C | New state -> Stack 1: [C, E], Stack 2: [F, D, A, B] | Exploring action Move C from table to E | New state -> Stack 1: [F, D, A, B, E, C] | Exploring action Move E from B to table | New state -> Stack 1: [C], Stack 2: [E], Stack 3: [F, D, A, B] | Taking action Move E from B to table | Moved to state -> Stack 1: [C], Stack 2: [E], Stack 3: [F, D, A, B] | Plan so far [Move C from E to table | Move E from B to table] | Exploring action Move D from F to B | New state -> Invalid | Exploring action Move D from F to C | New state -> Invalid | Exploring action Move B from A to C | New state -> Stack 1: [C, B], Stack 2: [E], Stack 3: [F, D, A] | Exploring action Move B from A to E | New state -> Stack 1: [C], Stack 2: [E, B], Stack 3: [F, D, A] | Exploring action Move B from A to table | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [E], Stack 4: [F, D, A] | Taking action Move B from A to table | Moved to state -> Stack 1: [B], Stack 2: [C], Stack 3: [E], Stack 4: [F, D, A] | Plan so far [Move C from E to table | Move E from B to table | Move B from A to table] | Exploring action Move D from F to A | New state -> Invalid | Exploring action Move A from D to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [E], Stack 5: [F, D] | Exploring action Move B from table to E | New state -> Stack 1: [C], Stack 2: [E, B], Stack 3: [F, D, A] | Exploring action Move A from D to C | New state -> Stack 1: [B], Stack 2: [C, A], Stack 3: [E], Stack 4: [F, D] | Exploring action Move F from table to C | New state -> Invalid | Taking action Move B from A to E | Moved to state -> Stack 1: [C], Stack 2: [E, B], Stack 3: [F, D, A] | Plan so far [Move C from E to table | Move E from B to table | Move B from A to E] | Exploring action Move E from table to A | New state -> Invalid | Exploring action Move F from table to A | New state -> Invalid | Exploring action Move A from D to C | New state -> Stack 1: [C, A], Stack 2: [E, B], Stack 3: [F, D] | Exploring action Move B from E to table | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [E], Stack 4: [F, D, A] | Exploring action Move A from D to table | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [E, B], Stack 4: [F, D] | Taking action Move A from D to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [E], Stack 5: [F, D] | Plan so far [Move C from E to table | Move E from B to table | Move B from A to table | Move A from D to table] | Exploring action Move D from F to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Exploring action Move B from table to E | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [E, B], Stack 4: [F, D] | Exploring action Move F from table to D | New state -> Invalid | Exploring action Move D from F to A | New state -> Stack 1: [A, D], Stack 2: [B], Stack 3: [C], Stack 4: [E], Stack 5: [F] | Taking action Move D from F to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Plan so far [Move C from E to table | Move E from B to table | Move B from A to table | Move A from D to table | Move D from F to table] | Exploring action Move B from table to E | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D], Stack 4: [E, B], Stack 5: [F] | Exploring action Move F from table to C | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, F], Stack 4: [D], Stack 5: [E] | Exploring action Move B from table to A | New state -> Stack 1: [A, B], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Taking action Move F from table to C | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, F], Stack 4: [D], Stack 5: [E] | Plan so far [Move C from E to table | Move E from B to table | Move B from A to table | Move A from D to table | Move D from F to table | Move F from table to C] | Exploring action Move C from table to B | New state -> Invalid | Exploring action Move A from table to F | New state -> Stack 1: [B], Stack 2: [C, F, A], Stack 3: [D], Stack 4: [E] | Exploring action Move B from table to E | New state -> Stack 1: [A], Stack 2: [C, F], Stack 3: [D], Stack 4: [E, B] | Exploring action Move A from table to E | New state -> Stack 1: [B], Stack 2: [C, F], Stack 3: [D], Stack 4: [E, A] | Taking action Move A from table to F | Moved to state -> Stack 1: [B], Stack 2: [C, F, A], Stack 3: [D], Stack 4: [E] | Plan so far [Move C from E to table | Move E from B to table | Move B from A to table | Move A from D to table | Move D from F to table | Move F from table to C | Move A from table to F] | Exploring action Move E from table to A | New state -> Stack 1: [B], Stack 2: [C, F, A, E], Stack 3: [D] | Exploring action Move B from table to E | New state -> Stack 1: [C, F, A], Stack 2: [D], Stack 3: [E, B] | Exploring action Move C from table to D | New state -> Invalid | Exploring action Move A from F to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, F], Stack 4: [D], Stack 5: [E] | Exploring action Move F from C to E | New state -> Invalid | Taking action Move E from table to A | Moved to state -> Stack 1: [B], Stack 2: [C, F, A, E], Stack 3: [D] | Plan so far [Move C from E to table | Move E from B to table | Move B from A to table | Move A from D to table | Move D from F to table | Move F from table to C | Move A from table to F | Move E from table to A] | Exploring action Move E from A to table | New state -> Stack 1: [B], Stack 2: [C, F, A], Stack 3: [D], Stack 4: [E] | Exploring action Move F from C to D | New state -> Invalid | Exploring action Move B from table to E | New state -> Stack 1: [C, F, A, E, B], Stack 2: [D] | Exploring action Move D from table to B | New state -> Stack 1: [B, D], Stack 2: [C, F, A, E] | Taking action Move B from table to E | Moved to state -> Stack 1: [C, F, A, E, B], Stack 2: [D] | Plan so far [Move C from E to table | Move E from B to table | Move B from A to table | Move A from D to table | Move D from F to table | Move F from table to C | Move A from table to F | Move E from table to A | Move B from table to E] | Reached goal state!",
        "system2_states_v1": 41
    },
    {
        "idx": 683,
        "start": [
            [
                "table",
                "A",
                "E",
                "D",
                "B",
                "C"
            ],
            [
                "table",
                "F"
            ]
        ],
        "goal": [
            [
                "table",
                "A",
                "D",
                "C",
                "F"
            ],
            [
                "table",
                "E",
                "B"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": false,
                "on": -1,
                "under": "E",
                "ontable": true
            },
            "B": {
                "clear": false,
                "on": "D",
                "under": "C",
                "ontable": false
            },
            "C": {
                "clear": true,
                "on": "B",
                "under": -1,
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": "E",
                "under": "B",
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": "A",
                "under": "D",
                "ontable": false
            },
            "F": {
                "clear": true,
                "on": -1,
                "under": -1,
                "ontable": true
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": false,
                "on": -1,
                "under": "D",
                "ontable": true
            },
            "B": {
                "clear": true,
                "on": "E",
                "under": -1,
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": "D",
                "under": "F",
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": "A",
                "under": "C",
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": -1,
                "under": "B",
                "ontable": true
            },
            "F": {
                "clear": true,
                "on": "C",
                "under": -1,
                "ontable": false
            }
        },
        "plan_len": 8,
        "num_blocks": 6,
        "prompt": "The initial state:\nThe hand is empty.\nA is on the table. E is on A. D is on E. B is on D. C is on B. C is clear.\nF is on the table. F is clear.\n\nThe goal is:\nA is on the table. D is on A. C is on D. F is on C. F is clear.\nE is on the table. B is on E. B is clear.\n",
        "system1_plan": "Move C from B to table | Move B from D to table | Move D from E to table | Move E from A to table | Move B from table to E | Move D from table to A | Move C from table to D | Move F from table to C",
        "system1_states": 8,
        "system2_plan_v1": "Moved to state -> Stack 1: [A, E, D, B, C], Stack 2: [F] | Plan so far [] | Exploring action Move C from B to table | New state -> Stack 1: [A, E, D, B], Stack 2: [C], Stack 3: [F] | Exploring action Move D from E to table | New state -> Invalid | Exploring action Move C from B to F | New state -> Stack 1: [A, E, D, B], Stack 2: [F, C] | Exploring action Move F from table to C | New state -> Stack 1: [A, E, D, B, C, F] | Taking action Move C from B to table | Moved to state -> Stack 1: [A, E, D, B], Stack 2: [C], Stack 3: [F] | Plan so far [Move C from B to table] | Exploring action Move F from table to C | New state -> Stack 1: [A, E, D, B], Stack 2: [C, F] | Exploring action Move D from E to C | New state -> Invalid | Exploring action Move B from D to F | New state -> Stack 1: [A, E, D], Stack 2: [C], Stack 3: [F, B] | Exploring action Move B from D to table | New state -> Stack 1: [A, E, D], Stack 2: [B], Stack 3: [C], Stack 4: [F] | Exploring action Move E from A to C | New state -> Invalid | Taking action Move B from D to table | Moved to state -> Stack 1: [A, E, D], Stack 2: [B], Stack 3: [C], Stack 4: [F] | Plan so far [Move C from B to table | Move B from D to table] | Exploring action Move D from E to B | New state -> Stack 1: [A, E], Stack 2: [B, D], Stack 3: [C], Stack 4: [F] | Exploring action Move D from E to table | New state -> Stack 1: [A, E], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [F] | Exploring action Move A from table to D | New state -> Invalid | Exploring action Move F from table to C | New state -> Stack 1: [A, E, D], Stack 2: [B], Stack 3: [C, F] | Taking action Move D from E to table | Moved to state -> Stack 1: [A, E], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [F] | Plan so far [Move C from B to table | Move B from D to table | Move D from E to table] | Exploring action Move E from A to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Exploring action Move A from table to B | New state -> Invalid | Exploring action Move B from table to E | New state -> Stack 1: [A, E, B], Stack 2: [C], Stack 3: [D], Stack 4: [F] | Exploring action Move A from table to D | New state -> Invalid | Exploring action Move E from A to B | New state -> Stack 1: [A], Stack 2: [B, E], Stack 3: [C], Stack 4: [D], Stack 5: [F] | Taking action Move E from A to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Plan so far [Move C from B to table | Move B from D to table | Move D from E to table | Move E from A to table] | Exploring action Move D from table to A | New state -> Stack 1: [A, D], Stack 2: [B], Stack 3: [C], Stack 4: [E], Stack 5: [F] | Exploring action Move B from table to E | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D], Stack 4: [E, B], Stack 5: [F] | Exploring action Move F from table to C | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, F], Stack 4: [D], Stack 5: [E] | Taking action Move B from table to E | Moved to state -> Stack 1: [A], Stack 2: [C], Stack 3: [D], Stack 4: [E, B], Stack 5: [F] | Plan so far [Move C from B to table | Move B from D to table | Move D from E to table | Move E from A to table | Move B from table to E] | Exploring action Move F from table to C | New state -> Stack 1: [A], Stack 2: [C, F], Stack 3: [D], Stack 4: [E, B] | Exploring action Move D from table to A | New state -> Stack 1: [A, D], Stack 2: [C], Stack 3: [E, B], Stack 4: [F] | Exploring action Move A from table to C | New state -> Stack 1: [C, A], Stack 2: [D], Stack 3: [E, B], Stack 4: [F] | Exploring action Move E from table to D | New state -> Invalid | Taking action Move D from table to A | Moved to state -> Stack 1: [A, D], Stack 2: [C], Stack 3: [E, B], Stack 4: [F] | Plan so far [Move C from B to table | Move B from D to table | Move D from E to table | Move E from A to table | Move B from table to E | Move D from table to A] | Exploring action Move E from table to C | New state -> Invalid | Exploring action Move F from table to C | New state -> Stack 1: [A, D], Stack 2: [C, F], Stack 3: [E, B] | Exploring action Move F from table to D | New state -> Stack 1: [A, D, F], Stack 2: [C], Stack 3: [E, B] | Exploring action Move C from table to D | New state -> Stack 1: [A, D, C], Stack 2: [E, B], Stack 3: [F] | Taking action Move C from table to D | Moved to state -> Stack 1: [A, D, C], Stack 2: [E, B], Stack 3: [F] | Plan so far [Move C from B to table | Move B from D to table | Move D from E to table | Move E from A to table | Move B from table to E | Move D from table to A | Move C from table to D] | Exploring action Move D from A to F | New state -> Invalid | Exploring action Move F from table to C | New state -> Stack 1: [A, D, C, F], Stack 2: [E, B] | Exploring action Move C from D to F | New state -> Stack 1: [A, D], Stack 2: [E, B], Stack 3: [F, C] | Exploring action Move C from D to table | New state -> Stack 1: [A, D], Stack 2: [C], Stack 3: [E, B], Stack 4: [F] | Taking action Move F from table to C | Moved to state -> Stack 1: [A, D, C, F], Stack 2: [E, B] | Plan so far [Move C from B to table | Move B from D to table | Move D from E to table | Move E from A to table | Move B from table to E | Move D from table to A | Move C from table to D | Move F from table to C] | Reached goal state!",
        "system2_states_v1": 33
    },
    {
        "idx": 816,
        "start": [
            [
                "table",
                "B",
                "E",
                "C"
            ],
            [
                "table",
                "F",
                "D",
                "A",
                "G"
            ]
        ],
        "goal": [
            [
                "table",
                "E",
                "C",
                "D"
            ],
            [
                "table",
                "G",
                "F",
                "B",
                "A"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": false,
                "on": "D",
                "under": "G",
                "ontable": false
            },
            "B": {
                "clear": false,
                "on": -1,
                "under": "E",
                "ontable": true
            },
            "C": {
                "clear": true,
                "on": "E",
                "under": -1,
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": "F",
                "under": "A",
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": "B",
                "under": "C",
                "ontable": false
            },
            "F": {
                "clear": false,
                "on": -1,
                "under": "D",
                "ontable": true
            },
            "G": {
                "clear": true,
                "on": "A",
                "under": -1,
                "ontable": false
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": true,
                "on": "B",
                "under": -1,
                "ontable": false
            },
            "B": {
                "clear": false,
                "on": "F",
                "under": "A",
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": "E",
                "under": "D",
                "ontable": false
            },
            "D": {
                "clear": true,
                "on": "C",
                "under": -1,
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": -1,
                "under": "C",
                "ontable": true
            },
            "F": {
                "clear": false,
                "on": "G",
                "under": "B",
                "ontable": false
            },
            "G": {
                "clear": false,
                "on": -1,
                "under": "F",
                "ontable": true
            }
        },
        "plan_len": 9,
        "num_blocks": 7,
        "prompt": "The initial state:\nThe hand is empty.\nB is on the table. E is on B. C is on E. C is clear.\nF is on the table. D is on F. A is on D. G is on A. G is clear.\n\nThe goal is:\nE is on the table. C is on E. D is on C. D is clear.\nG is on the table. F is on G. B is on F. A is on B. A is clear.\n",
        "system1_plan": "Move C from E to table | Move E from B to table | Move G from A to table | Move C from table to E | Move A from D to table | Move D from F to C | Move F from table to G | Move B from table to F | Move A from table to B",
        "system1_states": 9,
        "system2_plan_v1": "Moved to state -> Stack 1: [B, E, C], Stack 2: [F, D, A, G] | Plan so far [] | Exploring action Move C from E to G | New state -> Stack 1: [B, E], Stack 2: [F, D, A, G, C] | Exploring action Move G from A to table | New state -> Stack 1: [B, E, C], Stack 2: [F, D, A], Stack 3: [G] | Exploring action Move C from E to table | New state -> Stack 1: [B, E], Stack 2: [C], Stack 3: [F, D, A, G] | Exploring action Move A from D to table | New state -> Invalid | Taking action Move C from E to table | Moved to state -> Stack 1: [B, E], Stack 2: [C], Stack 3: [F, D, A, G] | Plan so far [Move C from E to table] | Exploring action Move E from B to table | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [E], Stack 4: [F, D, A, G] | Exploring action Move G from A to table | New state -> Stack 1: [B, E], Stack 2: [C], Stack 3: [F, D, A], Stack 4: [G] | Exploring action Move G from A to C | New state -> Stack 1: [B, E], Stack 2: [C, G], Stack 3: [F, D, A] | Exploring action Move B from table to G | New state -> Invalid | Exploring action Move D from F to G | New state -> Invalid | Taking action Move G from A to table | Moved to state -> Stack 1: [B, E, C], Stack 2: [F, D, A], Stack 3: [G] | Plan so far [Move G from A to table] | Exploring action Move A from D to G | New state -> Stack 1: [B, E, C], Stack 2: [F, D], Stack 3: [G, A] | Exploring action Move C from E to table | New state -> Stack 1: [B, E], Stack 2: [C], Stack 3: [F, D, A], Stack 4: [G] | Exploring action Move F from table to G | New state -> Invalid | Exploring action Move A from D to table | New state -> Stack 1: [A], Stack 2: [B, E, C], Stack 3: [F, D], Stack 4: [G] | Taking action Move E from B to table | Moved to state -> Stack 1: [B], Stack 2: [C], Stack 3: [E], Stack 4: [F, D, A, G] | Plan so far [Move C from E to table | Move E from B to table] | Exploring action Move G from A to table | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [E], Stack 4: [F, D, A], Stack 5: [G] | Exploring action Move G from A to C | New state -> Stack 1: [B], Stack 2: [C, G], Stack 3: [E], Stack 4: [F, D, A] | Exploring action Move A from D to C | New state -> Invalid | Exploring action Move C from table to E | New state -> Stack 1: [B], Stack 2: [E, C], Stack 3: [F, D, A, G] | Taking action Move C from E to table | Moved to state -> Stack 1: [B, E], Stack 2: [C], Stack 3: [F, D, A], Stack 4: [G] | Plan so far [Move G from A to table | Move C from E to table] | Exploring action Move E from B to table | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [E], Stack 4: [F, D, A], Stack 5: [G] | Exploring action Move A from D to E | New state -> Stack 1: [B, E, A], Stack 2: [C], Stack 3: [F, D], Stack 4: [G] | Exploring action Move A from D to table | New state -> Stack 1: [A], Stack 2: [B, E], Stack 3: [C], Stack 4: [F, D], Stack 5: [G] | Exploring action Move D from F to C | New state -> Invalid | Taking action Move G from A to table | Moved to state -> Stack 1: [B], Stack 2: [C], Stack 3: [E], Stack 4: [F, D, A], Stack 5: [G] | Plan so far [Move C from E to table | Move E from B to table | Move G from A to table] | Exploring action Move A from D to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [E], Stack 5: [F, D], Stack 6: [G] | Exploring action Move C from table to E | New state -> Stack 1: [B], Stack 2: [E, C], Stack 3: [F, D, A], Stack 4: [G] | Exploring action Move F from table to E | New state -> Invalid | Exploring action Move A from D to B | New state -> Stack 1: [B, A], Stack 2: [C], Stack 3: [E], Stack 4: [F, D], Stack 5: [G] | Taking action Move A from D to table | Moved to state -> Stack 1: [A], Stack 2: [B, E], Stack 3: [C], Stack 4: [F, D], Stack 5: [G] | Plan so far [Move G from A to table | Move C from E to table | Move A from D to table] | Exploring action Move F from table to C | New state -> Invalid | Exploring action Move D from F to C | New state -> Stack 1: [A], Stack 2: [B, E], Stack 3: [C, D], Stack 4: [F], Stack 5: [G] | Exploring action Move D from F to table | New state -> Stack 1: [A], Stack 2: [B, E], Stack 3: [C], Stack 4: [D], Stack 5: [F], Stack 6: [G] | Exploring action Move E from B to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [E], Stack 5: [F, D], Stack 6: [G] | Taking action Move C from table to E | Moved to state -> Stack 1: [B], Stack 2: [E, C], Stack 3: [F, D, A], Stack 4: [G] | Plan so far [Move C from E to table | Move E from B to table | Move G from A to table | Move C from table to E] | Exploring action Move D from F to A | New state -> Invalid | Exploring action Move A from D to C | New state -> Stack 1: [B], Stack 2: [E, C, A], Stack 3: [F, D], Stack 4: [G] | Exploring action Move A from D to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [E, C], Stack 4: [F, D], Stack 5: [G] | Exploring action Move A from D to B | New state -> Stack 1: [B, A], Stack 2: [E, C], Stack 3: [F, D], Stack 4: [G] | Taking action Move G from A to table | Moved to state -> Stack 1: [B, E], Stack 2: [C], Stack 3: [F, D, A], Stack 4: [G] | Plan so far [Move C from E to table | Move G from A to table] | Taking action Move A from D to table | Moved to state -> Stack 1: [A], Stack 2: [B, E, C], Stack 3: [F, D], Stack 4: [G] | Plan so far [Move G from A to table | Move A from D to table] | Exploring action Move D from F to C | New state -> Stack 1: [A], Stack 2: [B, E, C, D], Stack 3: [F], Stack 4: [G] | Exploring action Move C from E to table | New state -> Stack 1: [A], Stack 2: [B, E], Stack 3: [C], Stack 4: [F, D], Stack 5: [G] | Exploring action Move D from F to table | New state -> Stack 1: [A], Stack 2: [B, E, C], Stack 3: [D], Stack 4: [F], Stack 5: [G] | Exploring action Move F from table to C | New state -> Invalid | Exploring action Move E from B to A | New state -> Invalid | Taking action Move D from F to C | Moved to state -> Stack 1: [A], Stack 2: [B, E, C, D], Stack 3: [F], Stack 4: [G] | Plan so far [Move G from A to table | Move A from D to table | Move D from F to C] | Exploring action Move G from table to F | New state -> Stack 1: [A], Stack 2: [B, E, C, D], Stack 3: [F, G] | Exploring action Move B from table to A | New state -> Invalid | Exploring action Move F from table to G | New state -> Stack 1: [A], Stack 2: [B, E, C, D], Stack 3: [G, F] | Exploring action Move E from B to D | New state -> Invalid | Exploring action Move A from table to G | New state -> Stack 1: [B, E, C, D], Stack 2: [F], Stack 3: [G, A] | Taking action Move F from table to G | Moved to state -> Stack 1: [A], Stack 2: [B, E, C, D], Stack 3: [G, F] | Plan so far [Move G from A to table | Move A from D to table | Move D from F to C | Move F from table to G] | Exploring action Move E from B to D | New state -> Invalid | Exploring action Move A from table to F | New state -> Stack 1: [B, E, C, D], Stack 2: [G, F, A] | Exploring action Move C from E to F | New state -> Invalid | Exploring action Move F from G to A | New state -> Stack 1: [A, F], Stack 2: [B, E, C, D], Stack 3: [G] | Exploring action Move F from G to table | New state -> Stack 1: [A], Stack 2: [B, E, C, D], Stack 3: [F], Stack 4: [G] | Taking action Move C from table to E | Moved to state -> Stack 1: [B], Stack 2: [E, C], Stack 3: [F, D, A, G] | Plan so far [Move C from E to table | Move E from B to table | Move C from table to E] | Exploring action Move G from A to C | New state -> Stack 1: [B], Stack 2: [E, C, G], Stack 3: [F, D, A] | Exploring action Move A from D to table | New state -> Invalid | Exploring action Move G from A to table | New state -> Stack 1: [B], Stack 2: [E, C], Stack 3: [F, D, A], Stack 4: [G] | Exploring action Move G from A to B | New state -> Stack 1: [B, G], Stack 2: [E, C], Stack 3: [F, D, A] | Taking action Move C from E to table | Moved to state -> Stack 1: [A], Stack 2: [B, E], Stack 3: [C], Stack 4: [F, D], Stack 5: [G] | Plan so far [Move G from A to table | Move A from D to table | Move C from E to table] | Taking action Move G from table to F | Moved to state -> Stack 1: [A], Stack 2: [B, E, C, D], Stack 3: [F, G] | Plan so far [Move G from A to table | Move A from D to table | Move D from F to C | Move G from table to F] | Exploring action Move B from table to D | New state -> Invalid | Exploring action Move G from F to A | New state -> Stack 1: [A, G], Stack 2: [B, E, C, D], Stack 3: [F] | Exploring action Move A from table to G | New state -> Stack 1: [B, E, C, D], Stack 2: [F, G, A] | Exploring action Move E from B to table | New state -> Invalid | Exploring action Move G from F to table | New state -> Stack 1: [A], Stack 2: [B, E, C, D], Stack 3: [F], Stack 4: [G] | Taking action Move A from table to F | Moved to state -> Stack 1: [B, E, C, D], Stack 2: [G, F, A] | Plan so far [Move G from A to table | Move A from D to table | Move D from F to C | Move F from table to G | Move A from table to F] | Exploring action Move B from table to A | New state -> Invalid | Exploring action Move E from B to table | New state -> Invalid | Exploring action Move A from F to table | New state -> Stack 1: [A], Stack 2: [B, E, C, D], Stack 3: [G, F] | Exploring action Move D from C to table | New state -> Stack 1: [B, E, C], Stack 2: [D], Stack 3: [G, F, A] | Exploring action Move A from F to D | New state -> Stack 1: [B, E, C, D, A], Stack 2: [G, F] | Taking action Move F from G to table | Moved to state -> Stack 1: [A], Stack 2: [B, E, C, D], Stack 3: [F], Stack 4: [G] | Plan so far [Move G from A to table | Move A from D to table | Move D from F to C | Move F from table to G | Move F from G to table] | Taking action Move F from table to A | Moved to state -> Stack 1: [A, F], Stack 2: [B, E, C, D], Stack 3: [G] | Plan so far [Move G from A to table | Move A from D to table | Move D from F to C | Move F from table to A] | Exploring action Move F from A to G | New state -> Stack 1: [A], Stack 2: [B, E, C, D], Stack 3: [G, F] | Exploring action Move F from A to table | New state -> Stack 1: [A], Stack 2: [B, E, C, D], Stack 3: [F], Stack 4: [G] | Exploring action Move C from E to G | New state -> Invalid | Exploring action Move F from A to D | New state -> Stack 1: [A], Stack 2: [B, E, C, D, F], Stack 3: [G] | Taking action Move F from A to G | Moved to state -> Stack 1: [A], Stack 2: [B, E, C, D], Stack 3: [G, F] | Plan so far [Move G from A to table | Move A from D to table | Move D from F to C | Move F from table to A | Move F from A to G] | Taking action Move D from F to table | Moved to state -> Stack 1: [A], Stack 2: [B, E, C], Stack 3: [D], Stack 4: [F], Stack 5: [G] | Plan so far [Move G from A to table | Move A from D to table | Move D from F to table] | Exploring action Move F from table to G | New state -> Stack 1: [A], Stack 2: [B, E, C], Stack 3: [D], Stack 4: [G, F] | Exploring action Move C from E to table | New state -> Stack 1: [A], Stack 2: [B, E], Stack 3: [C], Stack 4: [D], Stack 5: [F], Stack 6: [G] | Exploring action Move B from table to G | New state -> Invalid | Exploring action Move D from table to C | New state -> Stack 1: [A], Stack 2: [B, E, C, D], Stack 3: [F], Stack 4: [G] | Taking action Move D from table to C | Moved to state -> Stack 1: [A], Stack 2: [B, E, C, D], Stack 3: [F], Stack 4: [G] | Plan so far [Move G from A to table | Move A from D to table | Move D from F to table | Move D from table to C] | Taking action Move A from table to G | Moved to state -> Stack 1: [B, E, C, D], Stack 2: [F], Stack 3: [G, A] | Plan so far [Move G from A to table | Move A from D to table | Move D from F to C | Move A from table to G] | Exploring action Move F from table to A | New state -> Stack 1: [B, E, C, D], Stack 2: [G, A, F] | Exploring action Move E from B to table | New state -> Invalid | Exploring action Move A from G to table | New state -> Stack 1: [A], Stack 2: [B, E, C, D], Stack 3: [F], Stack 4: [G] | Exploring action Move A from G to F | New state -> Stack 1: [B, E, C, D], Stack 2: [F, A], Stack 3: [G] | Taking action Move A from table to F | Moved to state -> Stack 1: [B, E, C, D], Stack 2: [F, A], Stack 3: [G] | Plan so far [Move G from A to table | Move A from D to table | Move D from F to C | Move A from table to F] | Exploring action Move A from F to table | New state -> Stack 1: [A], Stack 2: [B, E, C, D], Stack 3: [F], Stack 4: [G] | Exploring action Move A from F to G | New state -> Stack 1: [B, E, C, D], Stack 2: [F], Stack 3: [G, A] | Exploring action Move C from E to table | New state -> Invalid | Exploring action Move G from table to A | New state -> Stack 1: [B, E, C, D], Stack 2: [F, A, G] | Exploring action Move C from E to D | New state -> Invalid | Taking action Move A from D to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [E], Stack 5: [F, D], Stack 6: [G] | Plan so far [Move C from E to table | Move E from B to table | Move G from A to table | Move A from D to table] | Exploring action Move D from F to C | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, D], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Exploring action Move C from table to E | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [E, C], Stack 4: [F, D], Stack 5: [G] | Exploring action Move F from table to A | New state -> Invalid | Exploring action Move F from table to E | New state -> Invalid | Exploring action Move D from F to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F], Stack 7: [G] | Taking action Move A from D to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [E, C], Stack 4: [F, D], Stack 5: [G] | Plan so far [Move C from E to table | Move E from B to table | Move G from A to table | Move C from table to E | Move A from D to table] | Exploring action Move D from F to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D], Stack 4: [E, C], Stack 5: [F], Stack 6: [G] | Exploring action Move A from table to B | New state -> Stack 1: [B, A], Stack 2: [E, C], Stack 3: [F, D], Stack 4: [G] | Exploring action Move D from F to C | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [E, C, D], Stack 4: [F], Stack 5: [G] | Exploring action Move F from table to D | New state -> Invalid | Exploring action Move E from table to A | New state -> Invalid | Taking action Move D from F to C | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [E, C, D], Stack 4: [F], Stack 5: [G] | Plan so far [Move C from E to table | Move E from B to table | Move G from A to table | Move C from table to E | Move A from D to table | Move D from F to C] | Exploring action Move C from E to B | New state -> Invalid | Exploring action Move A from table to B | New state -> Stack 1: [B, A], Stack 2: [E, C, D], Stack 3: [F], Stack 4: [G] | Exploring action Move A from table to F | New state -> Stack 1: [B], Stack 2: [E, C, D], Stack 3: [F, A], Stack 4: [G] | Exploring action Move F from table to G | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [E, C, D], Stack 4: [G, F] | Exploring action Move C from E to A | New state -> Invalid | Taking action Move F from table to G | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [E, C, D], Stack 4: [G, F] | Plan so far [Move C from E to table | Move E from B to table | Move G from A to table | Move C from table to E | Move A from D to table | Move D from F to C | Move F from table to G] | Exploring action Move A from table to F | New state -> Stack 1: [B], Stack 2: [E, C, D], Stack 3: [G, F, A] | Exploring action Move C from E to A | New state -> Invalid | Exploring action Move A from table to B | New state -> Stack 1: [B, A], Stack 2: [E, C, D], Stack 3: [G, F] | Exploring action Move B from table to F | New state -> Stack 1: [A], Stack 2: [E, C, D], Stack 3: [G, F, B] | Taking action Move B from table to F | Moved to state -> Stack 1: [A], Stack 2: [E, C, D], Stack 3: [G, F, B] | Plan so far [Move C from E to table | Move E from B to table | Move G from A to table | Move C from table to E | Move A from D to table | Move D from F to C | Move F from table to G | Move B from table to F] | Exploring action Move G from table to A | New state -> Invalid | Exploring action Move B from F to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [E, C, D], Stack 4: [G, F] | Exploring action Move D from C to table | New state -> Stack 1: [A], Stack 2: [D], Stack 3: [E, C], Stack 4: [G, F, B] | Exploring action Move A from table to B | New state -> Stack 1: [E, C, D], Stack 2: [G, F, B, A] | Taking action Move A from table to B | Moved to state -> Stack 1: [E, C, D], Stack 2: [G, F, B, A] | Plan so far [Move C from E to table | Move E from B to table | Move G from A to table | Move C from table to E | Move A from D to table | Move D from F to C | Move F from table to G | Move B from table to F | Move A from table to B] | Reached goal state!",
        "system2_states_v1": 102
    },
    {
        "idx": 807,
        "start": [
            [
                "table",
                "E",
                "D",
                "A",
                "F",
                "B",
                "C"
            ]
        ],
        "goal": [
            [
                "table",
                "B",
                "E",
                "F",
                "C",
                "A"
            ],
            [
                "table",
                "D"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": false,
                "on": "D",
                "under": "F",
                "ontable": false
            },
            "B": {
                "clear": false,
                "on": "F",
                "under": "C",
                "ontable": false
            },
            "C": {
                "clear": true,
                "on": "B",
                "under": -1,
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": "E",
                "under": "A",
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": -1,
                "under": "D",
                "ontable": true
            },
            "F": {
                "clear": false,
                "on": "A",
                "under": "B",
                "ontable": false
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": true,
                "on": "C",
                "under": -1,
                "ontable": false
            },
            "B": {
                "clear": false,
                "on": -1,
                "under": "E",
                "ontable": true
            },
            "C": {
                "clear": false,
                "on": "F",
                "under": "A",
                "ontable": false
            },
            "D": {
                "clear": true,
                "on": -1,
                "under": -1,
                "ontable": true
            },
            "E": {
                "clear": false,
                "on": "B",
                "under": "F",
                "ontable": false
            },
            "F": {
                "clear": false,
                "on": "E",
                "under": "C",
                "ontable": false
            }
        },
        "plan_len": 9,
        "num_blocks": 6,
        "prompt": "The initial state:\nThe hand is empty.\nE is on the table. D is on E. A is on D. F is on A. B is on F. C is on B. C is clear.\n\nThe goal is:\nB is on the table. E is on B. F is on E. C is on F. A is on C. A is clear.\nD is on the table. D is clear.\n",
        "system1_plan": "Move C from B to table | Move B from F to table | Move F from A to table | Move A from D to table | Move D from E to table | Move E from table to B | Move F from table to E | Move C from table to F | Move A from table to C",
        "system1_states": 9,
        "system2_plan_v1": "Moved to state -> Stack 1: [E, D, A, F, B, C] | Plan so far [] | Exploring action Move D from E to C | New state -> Invalid | Exploring action Move C from B to table | New state -> Stack 1: [C], Stack 2: [E, D, A, F, B] | Taking action Move C from B to table | Moved to state -> Stack 1: [C], Stack 2: [E, D, A, F, B] | Plan so far [Move C from B to table] | Exploring action Move B from F to C | New state -> Stack 1: [C, B], Stack 2: [E, D, A, F] | Exploring action Move B from F to table | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [E, D, A, F] | Exploring action Move F from A to table | New state -> Invalid | Exploring action Move C from table to B | New state -> Stack 1: [E, D, A, F, B, C] | Taking action Move B from F to table | Moved to state -> Stack 1: [B], Stack 2: [C], Stack 3: [E, D, A, F] | Plan so far [Move C from B to table | Move B from F to table] | Exploring action Move F from A to C | New state -> Stack 1: [B], Stack 2: [C, F], Stack 3: [E, D, A] | Exploring action Move F from A to table | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [E, D, A], Stack 4: [F] | Exploring action Move A from D to B | New state -> Invalid | Exploring action Move D from E to C | New state -> Invalid | Exploring action Move F from A to B | New state -> Stack 1: [B, F], Stack 2: [C], Stack 3: [E, D, A] | Taking action Move F from A to table | Moved to state -> Stack 1: [B], Stack 2: [C], Stack 3: [E, D, A], Stack 4: [F] | Plan so far [Move C from B to table | Move B from F to table | Move F from A to table] | Exploring action Move E from table to C | New state -> Invalid | Exploring action Move A from D to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [E, D], Stack 5: [F] | Exploring action Move A from D to B | New state -> Stack 1: [B, A], Stack 2: [C], Stack 3: [E, D], Stack 4: [F] | Exploring action Move A from D to C | New state -> Stack 1: [B], Stack 2: [C, A], Stack 3: [E, D], Stack 4: [F] | Exploring action Move D from E to B | New state -> Invalid | Taking action Move A from D to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [E, D], Stack 5: [F] | Plan so far [Move C from B to table | Move B from F to table | Move F from A to table | Move A from D to table] | Exploring action Move E from table to A | New state -> Invalid | Exploring action Move A from table to C | New state -> Stack 1: [B], Stack 2: [C, A], Stack 3: [E, D], Stack 4: [F] | Exploring action Move D from E to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Exploring action Move D from E to A | New state -> Stack 1: [A, D], Stack 2: [B], Stack 3: [C], Stack 4: [E], Stack 5: [F] | Exploring action Move E from table to B | New state -> Invalid | Taking action Move D from E to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Plan so far [Move C from B to table | Move B from F to table | Move F from A to table | Move A from D to table | Move D from E to table] | Exploring action Move E from table to B | New state -> Stack 1: [A], Stack 2: [B, E], Stack 3: [C], Stack 4: [D], Stack 5: [F] | Exploring action Move B from table to A | New state -> Stack 1: [A, B], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Exploring action Move A from table to C | New state -> Stack 1: [B], Stack 2: [C, A], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Taking action Move E from table to B | Moved to state -> Stack 1: [A], Stack 2: [B, E], Stack 3: [C], Stack 4: [D], Stack 5: [F] | Plan so far [Move C from B to table | Move B from F to table | Move F from A to table | Move A from D to table | Move D from E to table | Move E from table to B] | Exploring action Move B from table to F | New state -> Invalid | Exploring action Move F from table to E | New state -> Stack 1: [A], Stack 2: [B, E, F], Stack 3: [C], Stack 4: [D] | Exploring action Move B from table to C | New state -> Invalid | Exploring action Move A from table to E | New state -> Stack 1: [B, E, A], Stack 2: [C], Stack 3: [D], Stack 4: [F] | Exploring action Move A from table to C | New state -> Stack 1: [B, E], Stack 2: [C, A], Stack 3: [D], Stack 4: [F] | Taking action Move F from table to E | Moved to state -> Stack 1: [A], Stack 2: [B, E, F], Stack 3: [C], Stack 4: [D] | Plan so far [Move C from B to table | Move B from F to table | Move F from A to table | Move A from D to table | Move D from E to table | Move E from table to B | Move F from table to E] | Exploring action Move B from table to C | New state -> Invalid | Exploring action Move C from table to F | New state -> Stack 1: [A], Stack 2: [B, E, F, C], Stack 3: [D] | Exploring action Move A from table to F | New state -> Stack 1: [B, E, F, A], Stack 2: [C], Stack 3: [D] | Exploring action Move A from table to C | New state -> Stack 1: [B, E, F], Stack 2: [C, A], Stack 3: [D] | Taking action Move C from table to F | Moved to state -> Stack 1: [A], Stack 2: [B, E, F, C], Stack 3: [D] | Plan so far [Move C from B to table | Move B from F to table | Move F from A to table | Move A from D to table | Move D from E to table | Move E from table to B | Move F from table to E | Move C from table to F] | Exploring action Move A from table to C | New state -> Stack 1: [B, E, F, C, A], Stack 2: [D] | Exploring action Move D from table to A | New state -> Stack 1: [A, D], Stack 2: [B, E, F, C] | Exploring action Move E from B to D | New state -> Invalid | Exploring action Move C from F to table | New state -> Stack 1: [A], Stack 2: [B, E, F], Stack 3: [C], Stack 4: [D] | Taking action Move A from table to C | Moved to state -> Stack 1: [B, E, F, C, A], Stack 2: [D] | Plan so far [Move C from B to table | Move B from F to table | Move F from A to table | Move A from D to table | Move D from E to table | Move E from table to B | Move F from table to E | Move C from table to F | Move A from table to C] | Reached goal state!",
        "system2_states_v1": 37
    },
    {
        "idx": 805,
        "start": [
            [
                "table",
                "C",
                "F",
                "E",
                "D",
                "A",
                "B"
            ]
        ],
        "goal": [
            [
                "table",
                "C",
                "A",
                "F",
                "E",
                "B"
            ],
            [
                "table",
                "D"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": false,
                "on": "D",
                "under": "B",
                "ontable": false
            },
            "B": {
                "clear": true,
                "on": "A",
                "under": -1,
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": -1,
                "under": "F",
                "ontable": true
            },
            "D": {
                "clear": false,
                "on": "E",
                "under": "A",
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": "F",
                "under": "D",
                "ontable": false
            },
            "F": {
                "clear": false,
                "on": "C",
                "under": "E",
                "ontable": false
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": false,
                "on": "C",
                "under": "F",
                "ontable": false
            },
            "B": {
                "clear": true,
                "on": "E",
                "under": -1,
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": -1,
                "under": "A",
                "ontable": true
            },
            "D": {
                "clear": true,
                "on": -1,
                "under": -1,
                "ontable": true
            },
            "E": {
                "clear": false,
                "on": "F",
                "under": "B",
                "ontable": false
            },
            "F": {
                "clear": false,
                "on": "A",
                "under": "E",
                "ontable": false
            }
        },
        "plan_len": 9,
        "num_blocks": 6,
        "prompt": "The initial state:\nThe hand is empty.\nC is on the table. F is on C. E is on F. D is on E. A is on D. B is on A. B is clear.\n\nThe goal is:\nC is on the table. A is on C. F is on A. E is on F. B is on E. B is clear.\nD is on the table. D is clear.\n",
        "system1_plan": "Move B from A to table | Move A from D to table | Move D from E to table | Move E from F to table | Move F from C to table | Move A from table to C | Move F from table to A | Move E from table to F | Move B from table to E",
        "system1_states": 9,
        "system2_plan_v1": "Moved to state -> Stack 1: [C, F, E, D, A, B] | Plan so far [] | Exploring action Move C from table to B | New state -> Invalid | Exploring action Move B from A to table | New state -> Stack 1: [B], Stack 2: [C, F, E, D, A] | Taking action Move B from A to table | Moved to state -> Stack 1: [B], Stack 2: [C, F, E, D, A] | Plan so far [Move B from A to table] | Exploring action Move E from F to table | New state -> Invalid | Exploring action Move B from table to A | New state -> Stack 1: [C, F, E, D, A, B] | Exploring action Move A from D to B | New state -> Stack 1: [B, A], Stack 2: [C, F, E, D] | Exploring action Move A from D to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, F, E, D] | Taking action Move A from D to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, F, E, D] | Plan so far [Move B from A to table | Move A from D to table] | Exploring action Move D from E to A | New state -> Stack 1: [A, D], Stack 2: [B], Stack 3: [C, F, E] | Exploring action Move F from C to D | New state -> Invalid | Exploring action Move E from F to A | New state -> Invalid | Exploring action Move D from E to B | New state -> Stack 1: [A], Stack 2: [B, D], Stack 3: [C, F, E] | Exploring action Move D from E to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, F, E], Stack 4: [D] | Taking action Move D from E to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, F, E], Stack 4: [D] | Plan so far [Move B from A to table | Move A from D to table | Move D from E to table] | Exploring action Move C from table to E | New state -> Invalid | Exploring action Move B from table to E | New state -> Stack 1: [A], Stack 2: [C, F, E, B], Stack 3: [D] | Exploring action Move E from F to B | New state -> Stack 1: [A], Stack 2: [B, E], Stack 3: [C, F], Stack 4: [D] | Exploring action Move E from F to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, F], Stack 4: [D], Stack 5: [E] | Taking action Move B from table to E | Moved to state -> Stack 1: [A], Stack 2: [C, F, E, B], Stack 3: [D] | Plan so far [Move B from A to table | Move A from D to table | Move D from E to table | Move B from table to E] | Exploring action Move E from F to D | New state -> Invalid | Exploring action Move B from E to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, F, E], Stack 4: [D] | Exploring action Move A from table to B | New state -> Stack 1: [C, F, E, B, A], Stack 2: [D] | Exploring action Move D from table to A | New state -> Stack 1: [A, D], Stack 2: [C, F, E, B] | Taking action Move E from F to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, F], Stack 4: [D], Stack 5: [E] | Plan so far [Move B from A to table | Move A from D to table | Move D from E to table | Move E from F to table] | Exploring action Move B from table to E | New state -> Stack 1: [A], Stack 2: [C, F], Stack 3: [D], Stack 4: [E, B] | Exploring action Move F from C to E | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E, F] | Exploring action Move F from C to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Exploring action Move C from table to E | New state -> Invalid | Taking action Move F from C to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Plan so far [Move B from A to table | Move A from D to table | Move D from E to table | Move E from F to table | Move F from C to table] | Exploring action Move B from table to A | New state -> Stack 1: [A, B], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Exploring action Move A from table to C | New state -> Stack 1: [B], Stack 2: [C, A], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Exploring action Move B from table to E | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D], Stack 4: [E, B], Stack 5: [F] | Taking action Move A from table to C | Moved to state -> Stack 1: [B], Stack 2: [C, A], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Plan so far [Move B from A to table | Move A from D to table | Move D from E to table | Move E from F to table | Move F from C to table | Move A from table to C] | Exploring action Move C from table to D | New state -> Invalid | Exploring action Move B from table to E | New state -> Stack 1: [C, A], Stack 2: [D], Stack 3: [E, B], Stack 4: [F] | Exploring action Move B from table to A | New state -> Stack 1: [C, A, B], Stack 2: [D], Stack 3: [E], Stack 4: [F] | Exploring action Move F from table to A | New state -> Stack 1: [B], Stack 2: [C, A, F], Stack 3: [D], Stack 4: [E] | Taking action Move F from table to A | Moved to state -> Stack 1: [B], Stack 2: [C, A, F], Stack 3: [D], Stack 4: [E] | Plan so far [Move B from A to table | Move A from D to table | Move D from E to table | Move E from F to table | Move F from C to table | Move A from table to C | Move F from table to A] | Exploring action Move C from table to F | New state -> Invalid | Exploring action Move E from table to F | New state -> Stack 1: [B], Stack 2: [C, A, F, E], Stack 3: [D] | Exploring action Move B from table to E | New state -> Stack 1: [C, A, F], Stack 2: [D], Stack 3: [E, B] | Exploring action Move B from table to F | New state -> Stack 1: [C, A, F, B], Stack 2: [D], Stack 3: [E] | Taking action Move E from table to F | Moved to state -> Stack 1: [B], Stack 2: [C, A, F, E], Stack 3: [D] | Plan so far [Move B from A to table | Move A from D to table | Move D from E to table | Move E from F to table | Move F from C to table | Move A from table to C | Move F from table to A | Move E from table to F] | Exploring action Move D from table to B | New state -> Stack 1: [B, D], Stack 2: [C, A, F, E] | Exploring action Move A from C to B | New state -> Invalid | Exploring action Move B from table to E | New state -> Stack 1: [C, A, F, E, B], Stack 2: [D] | Exploring action Move E from F to table | New state -> Stack 1: [B], Stack 2: [C, A, F], Stack 3: [D], Stack 4: [E] | Taking action Move B from table to E | Moved to state -> Stack 1: [C, A, F, E, B], Stack 2: [D] | Plan so far [Move B from A to table | Move A from D to table | Move D from E to table | Move E from F to table | Move F from C to table | Move A from table to C | Move F from table to A | Move E from table to F | Move B from table to E] | Reached goal state!",
        "system2_states_v1": 38
    },
    {
        "idx": 599,
        "start": [
            [
                "table",
                "B",
                "D",
                "E"
            ],
            [
                "table",
                "C",
                "A"
            ]
        ],
        "goal": [
            [
                "table",
                "E",
                "C",
                "A",
                "B",
                "D"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": true,
                "on": "C",
                "under": -1,
                "ontable": false
            },
            "B": {
                "clear": false,
                "on": -1,
                "under": "D",
                "ontable": true
            },
            "C": {
                "clear": false,
                "on": -1,
                "under": "A",
                "ontable": true
            },
            "D": {
                "clear": false,
                "on": "B",
                "under": "E",
                "ontable": false
            },
            "E": {
                "clear": true,
                "on": "D",
                "under": -1,
                "ontable": false
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": false,
                "on": "C",
                "under": "B",
                "ontable": false
            },
            "B": {
                "clear": false,
                "on": "A",
                "under": "D",
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": "E",
                "under": "A",
                "ontable": false
            },
            "D": {
                "clear": true,
                "on": "B",
                "under": -1,
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": -1,
                "under": "C",
                "ontable": true
            }
        },
        "plan_len": 7,
        "num_blocks": 5,
        "prompt": "The initial state:\nThe hand is empty.\nB is on the table. D is on B. E is on D. E is clear.\nC is on the table. A is on C. A is clear.\n\nThe goal is:\nE is on the table. C is on E. A is on C. B is on A. D is on B. D is clear.\n",
        "system1_plan": "Move E from D to table | Move A from C to table | Move C from table to E | Move D from B to table | Move A from table to C | Move B from table to A | Move D from table to B",
        "system1_states": 7,
        "system2_plan_v1": "Moved to state -> Stack 1: [B, D, E], Stack 2: [C, A] | Plan so far [] | Exploring action Move E from D to A | New state -> Stack 1: [B, D], Stack 2: [C, A, E] | Exploring action Move C from table to A | New state -> Invalid | Exploring action Move E from D to table | New state -> Stack 1: [B, D], Stack 2: [C, A], Stack 3: [E] | Exploring action Move A from C to table | New state -> Stack 1: [A], Stack 2: [B, D, E], Stack 3: [C] | Taking action Move E from D to table | Moved to state -> Stack 1: [B, D], Stack 2: [C, A], Stack 3: [E] | Plan so far [Move E from D to table] | Exploring action Move A from C to E | New state -> Stack 1: [B, D], Stack 2: [C], Stack 3: [E, A] | Exploring action Move D from B to table | New state -> Stack 1: [B], Stack 2: [C, A], Stack 3: [D], Stack 4: [E] | Exploring action Move A from C to table | New state -> Stack 1: [A], Stack 2: [B, D], Stack 3: [C], Stack 4: [E] | Exploring action Move C from table to A | New state -> Invalid | Taking action Move A from C to table | Moved to state -> Stack 1: [A], Stack 2: [B, D], Stack 3: [C], Stack 4: [E] | Plan so far [Move E from D to table | Move A from C to table] | Exploring action Move D from B to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Exploring action Move A from table to C | New state -> Stack 1: [B, D], Stack 2: [C, A], Stack 3: [E] | Exploring action Move B from table to C | New state -> Invalid | Exploring action Move C from table to E | New state -> Stack 1: [A], Stack 2: [B, D], Stack 3: [E, C] | Taking action Move C from table to E | Moved to state -> Stack 1: [A], Stack 2: [B, D], Stack 3: [E, C] | Plan so far [Move E from D to table | Move A from C to table | Move C from table to E] | Exploring action Move A from table to C | New state -> Stack 1: [B, D], Stack 2: [E, C, A] | Exploring action Move B from table to C | New state -> Invalid | Exploring action Move D from B to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D], Stack 4: [E, C] | Exploring action Move D from B to A | New state -> Stack 1: [A, D], Stack 2: [B], Stack 3: [E, C] | Taking action Move A from table to C | Moved to state -> Stack 1: [B, D], Stack 2: [E, C, A] | Plan so far [Move E from D to table | Move A from C to table | Move C from table to E | Move A from table to C] | Exploring action Move B from table to A | New state -> Invalid | Exploring action Move A from C to table | New state -> Stack 1: [A], Stack 2: [B, D], Stack 3: [E, C] | Exploring action Move D from B to table | New state -> Stack 1: [B], Stack 2: [D], Stack 3: [E, C, A] | Exploring action Move D from B to A | New state -> Stack 1: [B], Stack 2: [E, C, A, D] | Exploring action Move C from E to table | New state -> Invalid | Taking action Move D from B to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [D], Stack 4: [E, C] | Plan so far [Move E from D to table | Move A from C to table | Move C from table to E | Move D from B to table] | Exploring action Move D from table to B | New state -> Stack 1: [A], Stack 2: [B, D], Stack 3: [E, C] | Exploring action Move A from table to C | New state -> Stack 1: [B], Stack 2: [D], Stack 3: [E, C, A] | Exploring action Move E from table to D | New state -> Invalid | Exploring action Move E from table to C | New state -> Invalid | Exploring action Move C from E to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Taking action Move D from B to table | Moved to state -> Stack 1: [B], Stack 2: [C, A], Stack 3: [D], Stack 4: [E] | Plan so far [Move E from D to table | Move D from B to table] | Exploring action Move A from C to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Exploring action Move A from C to D | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, A], Stack 4: [E] | Exploring action Move B from table to A | New state -> Stack 1: [C, A, B], Stack 2: [D], Stack 3: [E] | Exploring action Move C from table to B | New state -> Invalid | Exploring action Move C from table to E | New state -> Invalid | Taking action Move A from C to E | Moved to state -> Stack 1: [B, D], Stack 2: [C], Stack 3: [E, A] | Plan so far [Move E from D to table | Move A from C to E] | Exploring action Move A from E to C | New state -> Stack 1: [B, D], Stack 2: [C, A], Stack 3: [E] | Exploring action Move A from E to table | New state -> Stack 1: [A], Stack 2: [B, D], Stack 3: [C], Stack 4: [E] | Exploring action Move E from table to D | New state -> Invalid | Exploring action Move D from B to table | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D], Stack 4: [E, A] | Exploring action Move E from table to A | New state -> Invalid | Taking action Move B from table to A | Moved to state -> Stack 1: [C, A, B], Stack 2: [D], Stack 3: [E] | Plan so far [Move E from D to table | Move D from B to table | Move B from table to A] | Exploring action Move D from table to B | New state -> Stack 1: [C, A, B, D], Stack 2: [E] | Exploring action Move C from table to B | New state -> Invalid | Exploring action Move E from table to B | New state -> Stack 1: [C, A, B, E], Stack 2: [D] | Exploring action Move A from C to B | New state -> Invalid | Exploring action Move E from table to D | New state -> Stack 1: [C, A, B], Stack 2: [D, E] | Taking action Move D from table to B | Moved to state -> Stack 1: [C, A, B, D], Stack 2: [E] | Plan so far [Move E from D to table | Move D from B to table | Move B from table to A | Move D from table to B] | Exploring action Move E from table to D | New state -> Stack 1: [C, A, B, D, E] | Exploring action Move D from B to table | New state -> Stack 1: [C, A, B], Stack 2: [D], Stack 3: [E] | Exploring action Move B from A to table | New state -> Invalid | Exploring action Move A from C to D | New state -> Invalid | Exploring action Move D from B to E | New state -> Stack 1: [C, A, B], Stack 2: [E, D] | Taking action Move A from E to table | Moved to state -> Stack 1: [A], Stack 2: [B, D], Stack 3: [C], Stack 4: [E] | Plan so far [Move E from D to table | Move A from C to E | Move A from E to table] | Taking action Move A from C to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Plan so far [Move E from D to table | Move D from B to table | Move A from C to table] | Exploring action Move A from table to B | New state -> Stack 1: [B, A], Stack 2: [C], Stack 3: [D], Stack 4: [E] | Exploring action Move C from table to E | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D], Stack 4: [E, C] | Exploring action Move D from table to B | New state -> Stack 1: [A], Stack 2: [B, D], Stack 3: [C], Stack 4: [E] | Taking action Move A from C to table | Moved to state -> Stack 1: [A], Stack 2: [B, D, E], Stack 3: [C] | Plan so far [Move A from C to table] | Exploring action Move D from B to E | New state -> Invalid | Exploring action Move B from table to C | New state -> Invalid | Exploring action Move E from D to C | New state -> Stack 1: [A], Stack 2: [B, D], Stack 3: [C, E] | Exploring action Move E from D to A | New state -> Stack 1: [A, E], Stack 2: [B, D], Stack 3: [C] | Exploring action Move E from D to table | New state -> Stack 1: [A], Stack 2: [B, D], Stack 3: [C], Stack 4: [E] | Taking action Move E from D to table | Moved to state -> Stack 1: [A], Stack 2: [B, D], Stack 3: [C], Stack 4: [E] | Plan so far [Move A from C to table | Move E from D to table] | Taking action Move E from D to C | Moved to state -> Stack 1: [A], Stack 2: [B, D], Stack 3: [C, E] | Plan so far [Move A from C to table | Move E from D to C] | Exploring action Move D from B to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, E], Stack 4: [D] | Exploring action Move C from table to D | New state -> Invalid | Exploring action Move E from C to table | New state -> Stack 1: [A], Stack 2: [B, D], Stack 3: [C], Stack 4: [E] | Exploring action Move E from C to A | New state -> Stack 1: [A, E], Stack 2: [B, D], Stack 3: [C] | Taking action Move E from D to A | Moved to state -> Stack 1: [B, D], Stack 2: [C, A, E] | Plan so far [Move E from D to A] | Exploring action Move B from table to D | New state -> Invalid | Exploring action Move D from B to E | New state -> Stack 1: [B], Stack 2: [C, A, E, D] | Exploring action Move B from table to E | New state -> Invalid | Exploring action Move D from B to table | New state -> Stack 1: [B], Stack 2: [C, A, E], Stack 3: [D] | Exploring action Move E from A to table | New state -> Stack 1: [B, D], Stack 2: [C, A], Stack 3: [E] | Taking action Move E from C to table | Moved to state -> Stack 1: [A], Stack 2: [B, D], Stack 3: [C], Stack 4: [E] | Plan so far [Move A from C to table | Move E from D to C | Move E from C to table] | Taking action Move E from A to table | Moved to state -> Stack 1: [B, D], Stack 2: [C, A], Stack 3: [E] | Plan so far [Move E from D to A | Move E from A to table] | Taking action Move C from table to E | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [D], Stack 4: [E, C] | Plan so far [Move E from D to table | Move D from B to table | Move A from C to table | Move C from table to E] | Taking action Move E from D to A | Moved to state -> Stack 1: [A, E], Stack 2: [B, D], Stack 3: [C] | Plan so far [Move A from C to table | Move E from D to A] | Exploring action Move A from table to E | New state -> Invalid | Exploring action Move E from A to C | New state -> Stack 1: [A], Stack 2: [B, D], Stack 3: [C, E] | Exploring action Move D from B to table | New state -> Stack 1: [A, E], Stack 2: [B], Stack 3: [C], Stack 4: [D] | Exploring action Move E from A to table | New state -> Stack 1: [A], Stack 2: [B, D], Stack 3: [C], Stack 4: [E] | Taking action Move A from table to C | Moved to state -> Stack 1: [B], Stack 2: [D], Stack 3: [E, C, A] | Plan so far [Move E from D to table | Move A from C to table | Move C from table to E | Move D from B to table | Move A from table to C] | Exploring action Move D from table to A | New state -> Stack 1: [B], Stack 2: [E, C, A, D] | Exploring action Move D from table to B | New state -> Stack 1: [B, D], Stack 2: [E, C, A] | Exploring action Move B from table to A | New state -> Stack 1: [D], Stack 2: [E, C, A, B] | Exploring action Move C from E to D | New state -> Invalid | Exploring action Move C from E to A | New state -> Invalid | Taking action Move E from A to table | Moved to state -> Stack 1: [A], Stack 2: [B, D], Stack 3: [C], Stack 4: [E] | Plan so far [Move A from C to table | Move E from D to A | Move E from A to table] | Taking action Move B from table to A | Moved to state -> Stack 1: [D], Stack 2: [E, C, A, B] | Plan so far [Move E from D to table | Move A from C to table | Move C from table to E | Move D from B to table | Move A from table to C | Move B from table to A] | Exploring action Move C from E to table | New state -> Invalid | Exploring action Move B from A to D | New state -> Stack 1: [D, B], Stack 2: [E, C, A] | Exploring action Move B from A to table | New state -> Stack 1: [B], Stack 2: [D], Stack 3: [E, C, A] | Exploring action Move A from C to B | New state -> Invalid | Exploring action Move D from table to B | New state -> Stack 1: [E, C, A, B, D] | Taking action Move D from table to B | Moved to state -> Stack 1: [E, C, A, B, D] | Plan so far [Move E from D to table | Move A from C to table | Move C from table to E | Move D from B to table | Move A from table to C | Move B from table to A | Move D from table to B] | Reached goal state!",
        "system2_states_v1": 77
    },
    {
        "idx": 817,
        "start": [
            [
                "table",
                "B"
            ],
            [
                "table",
                "F",
                "C",
                "G",
                "D",
                "A",
                "E"
            ]
        ],
        "goal": [
            [
                "table",
                "C"
            ],
            [
                "table",
                "F",
                "E"
            ],
            [
                "table",
                "G",
                "A",
                "B",
                "D"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": false,
                "on": "D",
                "under": "E",
                "ontable": false
            },
            "B": {
                "clear": true,
                "on": -1,
                "under": -1,
                "ontable": true
            },
            "C": {
                "clear": false,
                "on": "F",
                "under": "G",
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": "G",
                "under": "A",
                "ontable": false
            },
            "E": {
                "clear": true,
                "on": "A",
                "under": -1,
                "ontable": false
            },
            "F": {
                "clear": false,
                "on": -1,
                "under": "C",
                "ontable": true
            },
            "G": {
                "clear": false,
                "on": "C",
                "under": "D",
                "ontable": false
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": false,
                "on": "G",
                "under": "B",
                "ontable": false
            },
            "B": {
                "clear": false,
                "on": "A",
                "under": "D",
                "ontable": false
            },
            "C": {
                "clear": true,
                "on": -1,
                "under": -1,
                "ontable": true
            },
            "D": {
                "clear": true,
                "on": "B",
                "under": -1,
                "ontable": false
            },
            "E": {
                "clear": true,
                "on": "F",
                "under": -1,
                "ontable": false
            },
            "F": {
                "clear": false,
                "on": -1,
                "under": "E",
                "ontable": true
            },
            "G": {
                "clear": false,
                "on": -1,
                "under": "A",
                "ontable": true
            }
        },
        "plan_len": 9,
        "num_blocks": 7,
        "prompt": "The initial state:\nThe hand is empty.\nB is on the table. B is clear.\nF is on the table. C is on F. G is on C. D is on G. A is on D. E is on A. E is clear.\n\nThe goal is:\nC is on the table. C is clear.\nF is on the table. E is on F. E is clear.\nG is on the table. A is on G. B is on A. D is on B. D is clear.\n",
        "system1_plan": "Move E from A to table | Move A from D to table | Move D from G to table | Move G from C to table | Move C from F to table | Move E from table to F | Move A from table to G | Move B from table to A | Move D from table to B",
        "system1_states": 9,
        "system2_plan_v1": "Moved to state -> Stack 1: [B], Stack 2: [F, C, G, D, A, E] | Plan so far [] | Exploring action Move B from table to E | New state -> Stack 1: [F, C, G, D, A, E, B] | Exploring action Move E from A to B | New state -> Stack 1: [B, E], Stack 2: [F, C, G, D, A] | Exploring action Move F from table to B | New state -> Invalid | Exploring action Move E from A to table | New state -> Stack 1: [B], Stack 2: [E], Stack 3: [F, C, G, D, A] | Taking action Move E from A to table | Moved to state -> Stack 1: [B], Stack 2: [E], Stack 3: [F, C, G, D, A] | Plan so far [Move E from A to table] | Exploring action Move A from D to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [E], Stack 4: [F, C, G, D] | Exploring action Move A from D to B | New state -> Stack 1: [B, A], Stack 2: [E], Stack 3: [F, C, G, D] | Exploring action Move A from D to E | New state -> Stack 1: [B], Stack 2: [E, A], Stack 3: [F, C, G, D] | Exploring action Move C from F to table | New state -> Invalid | Exploring action Move D from G to B | New state -> Invalid | Taking action Move A from D to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [E], Stack 4: [F, C, G, D] | Plan so far [Move E from A to table | Move A from D to table] | Exploring action Move G from C to B | New state -> Invalid | Exploring action Move G from C to D | New state -> Invalid | Exploring action Move D from G to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D], Stack 4: [E], Stack 5: [F, C, G] | Exploring action Move D from G to B | New state -> Stack 1: [A], Stack 2: [B, D], Stack 3: [E], Stack 4: [F, C, G] | Exploring action Move D from G to E | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [E, D], Stack 4: [F, C, G] | Taking action Move D from G to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [D], Stack 4: [E], Stack 5: [F, C, G] | Plan so far [Move E from A to table | Move A from D to table | Move D from G to table] | Exploring action Move D from table to B | New state -> Stack 1: [A], Stack 2: [B, D], Stack 3: [E], Stack 4: [F, C, G] | Exploring action Move G from C to D | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, G], Stack 4: [E], Stack 5: [F, C] | Exploring action Move G from C to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D], Stack 4: [E], Stack 5: [F, C], Stack 6: [G] | Exploring action Move C from F to A | New state -> Invalid | Exploring action Move C from F to D | New state -> Invalid | Taking action Move D from G to B | Moved to state -> Stack 1: [A], Stack 2: [B, D], Stack 3: [E], Stack 4: [F, C, G] | Plan so far [Move E from A to table | Move A from D to table | Move D from G to B] | Exploring action Move G from C to A | New state -> Stack 1: [A, G], Stack 2: [B, D], Stack 3: [E], Stack 4: [F, C] | Exploring action Move C from F to A | New state -> Invalid | Exploring action Move C from F to D | New state -> Invalid | Exploring action Move G from C to E | New state -> Stack 1: [A], Stack 2: [B, D], Stack 3: [E, G], Stack 4: [F, C] | Exploring action Move G from C to table | New state -> Stack 1: [A], Stack 2: [B, D], Stack 3: [E], Stack 4: [F, C], Stack 5: [G] | Taking action Move G from C to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [D], Stack 4: [E], Stack 5: [F, C], Stack 6: [G] | Plan so far [Move E from A to table | Move A from D to table | Move D from G to table | Move G from C to table] | Exploring action Move C from F to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F], Stack 7: [G] | Exploring action Move C from F to A | New state -> Stack 1: [A, C], Stack 2: [B], Stack 3: [D], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Exploring action Move F from table to C | New state -> Invalid | Exploring action Move F from table to A | New state -> Invalid | Exploring action Move A from table to G | New state -> Stack 1: [B], Stack 2: [D], Stack 3: [E], Stack 4: [F, C], Stack 5: [G, A] | Taking action Move C from F to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F], Stack 7: [G] | Plan so far [Move E from A to table | Move A from D to table | Move D from G to table | Move G from C to table | Move C from F to table] | Exploring action Move A from table to G | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [F], Stack 6: [G, A] | Exploring action Move D from table to B | New state -> Stack 1: [A], Stack 2: [B, D], Stack 3: [C], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Exploring action Move E from table to F | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [F, E], Stack 6: [G] | Taking action Move E from table to F | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [F, E], Stack 6: [G] | Plan so far [Move E from A to table | Move A from D to table | Move D from G to table | Move G from C to table | Move C from F to table | Move E from table to F] | Exploring action Move A from table to D | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, A], Stack 4: [F, E], Stack 5: [G] | Exploring action Move D from table to B | New state -> Stack 1: [A], Stack 2: [B, D], Stack 3: [C], Stack 4: [F, E], Stack 5: [G] | Exploring action Move A from table to G | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D], Stack 4: [F, E], Stack 5: [G, A] | Exploring action Move F from table to G | New state -> Invalid | Taking action Move A from table to G | Moved to state -> Stack 1: [B], Stack 2: [C], Stack 3: [D], Stack 4: [F, E], Stack 5: [G, A] | Plan so far [Move E from A to table | Move A from D to table | Move D from G to table | Move G from C to table | Move C from F to table | Move E from table to F | Move A from table to G] | Exploring action Move F from table to B | New state -> Invalid | Exploring action Move B from table to A | New state -> Stack 1: [C], Stack 2: [D], Stack 3: [F, E], Stack 4: [G, A, B] | Exploring action Move A from G to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [F, E], Stack 6: [G] | Exploring action Move D from table to B | New state -> Stack 1: [B, D], Stack 2: [C], Stack 3: [F, E], Stack 4: [G, A] | Exploring action Move F from table to E | New state -> Invalid | Taking action Move B from table to A | Moved to state -> Stack 1: [C], Stack 2: [D], Stack 3: [F, E], Stack 4: [G, A, B] | Plan so far [Move E from A to table | Move A from D to table | Move D from G to table | Move G from C to table | Move C from F to table | Move E from table to F | Move A from table to G | Move B from table to A] | Exploring action Move B from A to D | New state -> Stack 1: [C], Stack 2: [D, B], Stack 3: [F, E], Stack 4: [G, A] | Exploring action Move B from A to table | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D], Stack 4: [F, E], Stack 5: [G, A] | Exploring action Move G from table to D | New state -> Invalid | Exploring action Move D from table to B | New state -> Stack 1: [C], Stack 2: [F, E], Stack 3: [G, A, B, D] | Taking action Move D from table to B | Moved to state -> Stack 1: [C], Stack 2: [F, E], Stack 3: [G, A, B, D] | Plan so far [Move E from A to table | Move A from D to table | Move D from G to table | Move G from C to table | Move C from F to table | Move E from table to F | Move A from table to G | Move B from table to A | Move D from table to B] | Reached goal state!",
        "system2_states_v1": 45
    },
    {
        "idx": 685,
        "start": [
            [
                "table",
                "A",
                "C",
                "B",
                "F",
                "E",
                "D"
            ]
        ],
        "goal": [
            [
                "table",
                "B",
                "A"
            ],
            [
                "table",
                "E"
            ],
            [
                "table",
                "F",
                "D",
                "C"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": false,
                "on": -1,
                "under": "C",
                "ontable": true
            },
            "B": {
                "clear": false,
                "on": "C",
                "under": "F",
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": "A",
                "under": "B",
                "ontable": false
            },
            "D": {
                "clear": true,
                "on": "E",
                "under": -1,
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": "F",
                "under": "D",
                "ontable": false
            },
            "F": {
                "clear": false,
                "on": "B",
                "under": "E",
                "ontable": false
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": true,
                "on": "B",
                "under": -1,
                "ontable": false
            },
            "B": {
                "clear": false,
                "on": -1,
                "under": "A",
                "ontable": true
            },
            "C": {
                "clear": true,
                "on": "D",
                "under": -1,
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": "F",
                "under": "C",
                "ontable": false
            },
            "E": {
                "clear": true,
                "on": -1,
                "under": -1,
                "ontable": true
            },
            "F": {
                "clear": false,
                "on": -1,
                "under": "D",
                "ontable": true
            }
        },
        "plan_len": 8,
        "num_blocks": 6,
        "prompt": "The initial state:\nThe hand is empty.\nA is on the table. C is on A. B is on C. F is on B. E is on F. D is on E. D is clear.\n\nThe goal is:\nB is on the table. A is on B. A is clear.\nE is on the table. E is clear.\nF is on the table. D is on F. C is on D. C is clear.\n",
        "system1_plan": "Move D from E to table | Move E from F to table | Move F from B to table | Move B from C to table | Move C from A to table | Move A from table to B | Move D from table to F | Move C from table to D",
        "system1_states": 8,
        "system2_plan_v1": "Moved to state -> Stack 1: [A, C, B, F, E, D] | Plan so far [] | Exploring action Move B from C to D | New state -> Invalid | Exploring action Move F from B to table | New state -> Invalid | Exploring action Move D from E to table | New state -> Stack 1: [A, C, B, F, E], Stack 2: [D] | Taking action Move D from E to table | Moved to state -> Stack 1: [A, C, B, F, E], Stack 2: [D] | Plan so far [Move D from E to table] | Exploring action Move F from B to table | New state -> Invalid | Exploring action Move E from F to table | New state -> Stack 1: [A, C, B, F], Stack 2: [D], Stack 3: [E] | Exploring action Move D from table to E | New state -> Stack 1: [A, C, B, F, E, D] | Exploring action Move C from A to table | New state -> Invalid | Exploring action Move E from F to D | New state -> Stack 1: [A, C, B, F], Stack 2: [D, E] | Taking action Move E from F to table | Moved to state -> Stack 1: [A, C, B, F], Stack 2: [D], Stack 3: [E] | Plan so far [Move D from E to table | Move E from F to table] | Exploring action Move A from table to E | New state -> Invalid | Exploring action Move F from B to D | New state -> Stack 1: [A, C, B], Stack 2: [D, F], Stack 3: [E] | Exploring action Move B from C to table | New state -> Invalid | Exploring action Move F from B to E | New state -> Stack 1: [A, C, B], Stack 2: [D], Stack 3: [E, F] | Exploring action Move F from B to table | New state -> Stack 1: [A, C, B], Stack 2: [D], Stack 3: [E], Stack 4: [F] | Taking action Move F from B to table | Moved to state -> Stack 1: [A, C, B], Stack 2: [D], Stack 3: [E], Stack 4: [F] | Plan so far [Move D from E to table | Move E from F to table | Move F from B to table] | Exploring action Move B from C to table | New state -> Stack 1: [A, C], Stack 2: [B], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Exploring action Move C from A to table | New state -> Invalid | Exploring action Move B from C to D | New state -> Stack 1: [A, C], Stack 2: [D, B], Stack 3: [E], Stack 4: [F] | Exploring action Move A from table to E | New state -> Invalid | Exploring action Move D from table to F | New state -> Stack 1: [A, C, B], Stack 2: [E], Stack 3: [F, D] | Taking action Move B from C to table | Moved to state -> Stack 1: [A, C], Stack 2: [B], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Plan so far [Move D from E to table | Move E from F to table | Move F from B to table | Move B from C to table] | Exploring action Move D from table to F | New state -> Stack 1: [A, C], Stack 2: [B], Stack 3: [E], Stack 4: [F, D] | Exploring action Move C from A to D | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, C], Stack 4: [E], Stack 5: [F] | Exploring action Move A from table to C | New state -> Invalid | Exploring action Move C from A to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Taking action Move D from table to F | Moved to state -> Stack 1: [A, C, B], Stack 2: [E], Stack 3: [F, D] | Plan so far [Move D from E to table | Move E from F to table | Move F from B to table | Move D from table to F] | Exploring action Move F from table to E | New state -> Invalid | Exploring action Move B from C to E | New state -> Stack 1: [A, C], Stack 2: [E, B], Stack 3: [F, D] | Exploring action Move B from C to D | New state -> Stack 1: [A, C], Stack 2: [E], Stack 3: [F, D, B] | Exploring action Move B from C to table | New state -> Stack 1: [A, C], Stack 2: [B], Stack 3: [E], Stack 4: [F, D] | Taking action Move C from A to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Plan so far [Move D from E to table | Move E from F to table | Move F from B to table | Move B from C to table | Move C from A to table] | Exploring action Move D from table to F | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [E], Stack 5: [F, D] | Exploring action Move A from table to B | New state -> Stack 1: [B, A], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Exploring action Move C from table to D | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, C], Stack 4: [E], Stack 5: [F] | Taking action Move A from table to B | Moved to state -> Stack 1: [B, A], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Plan so far [Move D from E to table | Move E from F to table | Move F from B to table | Move B from C to table | Move C from A to table | Move A from table to B] | Exploring action Move D from table to F | New state -> Stack 1: [B, A], Stack 2: [C], Stack 3: [E], Stack 4: [F, D] | Exploring action Move B from table to D | New state -> Invalid | Exploring action Move C from table to D | New state -> Stack 1: [B, A], Stack 2: [D, C], Stack 3: [E], Stack 4: [F] | Exploring action Move C from table to F | New state -> Stack 1: [B, A], Stack 2: [D], Stack 3: [E], Stack 4: [F, C] | Exploring action Move B from table to E | New state -> Invalid | Taking action Move D from table to F | Moved to state -> Stack 1: [B, A], Stack 2: [C], Stack 3: [E], Stack 4: [F, D] | Plan so far [Move D from E to table | Move E from F to table | Move F from B to table | Move B from C to table | Move C from A to table | Move A from table to B | Move D from table to F] | Exploring action Move D from F to table | New state -> Stack 1: [B, A], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Exploring action Move A from B to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [E], Stack 5: [F, D] | Exploring action Move C from table to D | New state -> Stack 1: [B, A], Stack 2: [E], Stack 3: [F, D, C] | Exploring action Move F from table to C | New state -> Invalid | Exploring action Move B from table to C | New state -> Invalid | Taking action Move C from table to D | Moved to state -> Stack 1: [B, A], Stack 2: [E], Stack 3: [F, D, C] | Plan so far [Move D from E to table | Move E from F to table | Move F from B to table | Move B from C to table | Move C from A to table | Move A from table to B | Move D from table to F | Move C from table to D] | Reached goal state!",
        "system2_states_v1": 39
    },
    {
        "idx": 793,
        "start": [
            [
                "table",
                "A",
                "F",
                "D",
                "B",
                "C"
            ],
            [
                "table",
                "E"
            ]
        ],
        "goal": [
            [
                "table",
                "D",
                "C",
                "A",
                "E",
                "F",
                "B"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": false,
                "on": -1,
                "under": "F",
                "ontable": true
            },
            "B": {
                "clear": false,
                "on": "D",
                "under": "C",
                "ontable": false
            },
            "C": {
                "clear": true,
                "on": "B",
                "under": -1,
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": "F",
                "under": "B",
                "ontable": false
            },
            "E": {
                "clear": true,
                "on": -1,
                "under": -1,
                "ontable": true
            },
            "F": {
                "clear": false,
                "on": "A",
                "under": "D",
                "ontable": false
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": false,
                "on": "C",
                "under": "E",
                "ontable": false
            },
            "B": {
                "clear": true,
                "on": "F",
                "under": -1,
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": "D",
                "under": "A",
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": -1,
                "under": "C",
                "ontable": true
            },
            "E": {
                "clear": false,
                "on": "A",
                "under": "F",
                "ontable": false
            },
            "F": {
                "clear": false,
                "on": "E",
                "under": "B",
                "ontable": false
            }
        },
        "plan_len": 9,
        "num_blocks": 6,
        "prompt": "The initial state:\nThe hand is empty.\nA is on the table. F is on A. D is on F. B is on D. C is on B. C is clear.\nE is on the table. E is clear.\n\nThe goal is:\nD is on the table. C is on D. A is on C. E is on A. F is on E. B is on F. B is clear.\n",
        "system1_plan": "Move C from B to table | Move B from D to table | Move D from F to table | Move C from table to D | Move F from A to table | Move A from table to C | Move E from table to A | Move F from table to E | Move B from table to F",
        "system1_states": 9,
        "system2_plan_v1": "Moved to state -> Stack 1: [A, F, D, B, C], Stack 2: [E] | Plan so far [] | Exploring action Move C from B to E | New state -> Stack 1: [A, F, D, B], Stack 2: [E, C] | Exploring action Move D from F to E | New state -> Invalid | Exploring action Move D from F to table | New state -> Invalid | Exploring action Move E from table to C | New state -> Stack 1: [A, F, D, B, C, E] | Exploring action Move C from B to table | New state -> Stack 1: [A, F, D, B], Stack 2: [C], Stack 3: [E] | Taking action Move C from B to table | Moved to state -> Stack 1: [A, F, D, B], Stack 2: [C], Stack 3: [E] | Plan so far [Move C from B to table] | Exploring action Move D from F to C | New state -> Invalid | Exploring action Move B from D to C | New state -> Stack 1: [A, F, D], Stack 2: [C, B], Stack 3: [E] | Exploring action Move B from D to table | New state -> Stack 1: [A, F, D], Stack 2: [B], Stack 3: [C], Stack 4: [E] | Exploring action Move B from D to E | New state -> Stack 1: [A, F, D], Stack 2: [C], Stack 3: [E, B] | Taking action Move B from D to table | Moved to state -> Stack 1: [A, F, D], Stack 2: [B], Stack 3: [C], Stack 4: [E] | Plan so far [Move C from B to table | Move B from D to table] | Exploring action Move D from F to B | New state -> Stack 1: [A, F], Stack 2: [B, D], Stack 3: [C], Stack 4: [E] | Exploring action Move F from A to C | New state -> Invalid | Exploring action Move D from F to E | New state -> Stack 1: [A, F], Stack 2: [B], Stack 3: [C], Stack 4: [E, D] | Exploring action Move D from F to table | New state -> Stack 1: [A, F], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Taking action Move D from F to table | Moved to state -> Stack 1: [A, F], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Plan so far [Move C from B to table | Move B from D to table | Move D from F to table] | Exploring action Move C from table to D | New state -> Stack 1: [A, F], Stack 2: [B], Stack 3: [D, C], Stack 4: [E] | Exploring action Move B from table to F | New state -> Stack 1: [A, F, B], Stack 2: [C], Stack 3: [D], Stack 4: [E] | Exploring action Move A from table to C | New state -> Invalid | Exploring action Move F from A to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Taking action Move C from table to D | Moved to state -> Stack 1: [A, F], Stack 2: [B], Stack 3: [D, C], Stack 4: [E] | Plan so far [Move C from B to table | Move B from D to table | Move D from F to table | Move C from table to D] | Exploring action Move D from table to F | New state -> Invalid | Exploring action Move A from table to C | New state -> Invalid | Exploring action Move F from A to B | New state -> Stack 1: [A], Stack 2: [B, F], Stack 3: [D, C], Stack 4: [E] | Exploring action Move F from A to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, C], Stack 4: [E], Stack 5: [F] | Exploring action Move F from A to E | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, C], Stack 4: [E, F] | Taking action Move F from A to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Plan so far [Move C from B to table | Move B from D to table | Move D from F to table | Move F from A to table] | Exploring action Move B from table to F | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [F, B] | Exploring action Move C from table to D | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, C], Stack 4: [E], Stack 5: [F] | Exploring action Move B from table to C | New state -> Stack 1: [A], Stack 2: [C, B], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Taking action Move F from A to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, C], Stack 4: [E], Stack 5: [F] | Plan so far [Move C from B to table | Move B from D to table | Move D from F to table | Move C from table to D | Move F from A to table] | Exploring action Move B from table to F | New state -> Stack 1: [A], Stack 2: [D, C], Stack 3: [E], Stack 4: [F, B] | Exploring action Move D from table to A | New state -> Invalid | Exploring action Move A from table to C | New state -> Stack 1: [B], Stack 2: [D, C, A], Stack 3: [E], Stack 4: [F] | Exploring action Move D from table to B | New state -> Invalid | Exploring action Move A from table to E | New state -> Stack 1: [B], Stack 2: [D, C], Stack 3: [E, A], Stack 4: [F] | Taking action Move C from table to D | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, C], Stack 4: [E], Stack 5: [F] | Plan so far [Move C from B to table | Move B from D to table | Move D from F to table | Move F from A to table | Move C from table to D] | Taking action Move A from table to C | Moved to state -> Stack 1: [B], Stack 2: [D, C, A], Stack 3: [E], Stack 4: [F] | Plan so far [Move C from B to table | Move B from D to table | Move D from F to table | Move C from table to D | Move F from A to table | Move A from table to C] | Exploring action Move D from table to B | New state -> Invalid | Exploring action Move B from table to F | New state -> Stack 1: [D, C, A], Stack 2: [E], Stack 3: [F, B] | Exploring action Move D from table to E | New state -> Invalid | Exploring action Move A from C to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, C], Stack 4: [E], Stack 5: [F] | Exploring action Move E from table to A | New state -> Stack 1: [B], Stack 2: [D, C, A, E], Stack 3: [F] | Taking action Move E from table to A | Moved to state -> Stack 1: [B], Stack 2: [D, C, A, E], Stack 3: [F] | Plan so far [Move C from B to table | Move B from D to table | Move D from F to table | Move C from table to D | Move F from A to table | Move A from table to C | Move E from table to A] | Exploring action Move A from C to table | New state -> Invalid | Exploring action Move F from table to B | New state -> Stack 1: [B, F], Stack 2: [D, C, A, E] | Exploring action Move F from table to E | New state -> Stack 1: [B], Stack 2: [D, C, A, E, F] | Exploring action Move B from table to F | New state -> Stack 1: [D, C, A, E], Stack 2: [F, B] | Taking action Move F from table to E | Moved to state -> Stack 1: [B], Stack 2: [D, C, A, E, F] | Plan so far [Move C from B to table | Move B from D to table | Move D from F to table | Move C from table to D | Move F from A to table | Move A from table to C | Move E from table to A | Move F from table to E] | Exploring action Move D from table to F | New state -> Invalid | Exploring action Move C from D to F | New state -> Invalid | Exploring action Move B from table to F | New state -> Stack 1: [D, C, A, E, F, B] | Exploring action Move F from E to table | New state -> Stack 1: [B], Stack 2: [D, C, A, E], Stack 3: [F] | Exploring action Move F from E to B | New state -> Stack 1: [B, F], Stack 2: [D, C, A, E] | Taking action Move B from table to F | Moved to state -> Stack 1: [D, C, A, E, F, B] | Plan so far [Move C from B to table | Move B from D to table | Move D from F to table | Move C from table to D | Move F from A to table | Move A from table to C | Move E from table to A | Move F from table to E | Move B from table to F] | Reached goal state!",
        "system2_states_v1": 44
    },
    {
        "idx": 906,
        "start": [
            [
                "table",
                "G",
                "A",
                "C",
                "E",
                "D",
                "F",
                "B"
            ]
        ],
        "goal": [
            [
                "table",
                "A",
                "B"
            ],
            [
                "table",
                "E",
                "F",
                "D",
                "C"
            ],
            [
                "table",
                "G"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": false,
                "on": "G",
                "under": "C",
                "ontable": false
            },
            "B": {
                "clear": true,
                "on": "F",
                "under": -1,
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": "A",
                "under": "E",
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": "E",
                "under": "F",
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": "C",
                "under": "D",
                "ontable": false
            },
            "F": {
                "clear": false,
                "on": "D",
                "under": "B",
                "ontable": false
            },
            "G": {
                "clear": false,
                "on": -1,
                "under": "A",
                "ontable": true
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": false,
                "on": -1,
                "under": "B",
                "ontable": true
            },
            "B": {
                "clear": true,
                "on": "A",
                "under": -1,
                "ontable": false
            },
            "C": {
                "clear": true,
                "on": "D",
                "under": -1,
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": "F",
                "under": "C",
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": -1,
                "under": "F",
                "ontable": true
            },
            "F": {
                "clear": false,
                "on": "E",
                "under": "D",
                "ontable": false
            },
            "G": {
                "clear": true,
                "on": -1,
                "under": -1,
                "ontable": true
            }
        },
        "plan_len": 10,
        "num_blocks": 7,
        "prompt": "The initial state:\nThe hand is empty.\nG is on the table. A is on G. C is on A. E is on C. D is on E. F is on D. B is on F. B is clear.\n\nThe goal is:\nA is on the table. B is on A. B is clear.\nE is on the table. F is on E. D is on F. C is on D. C is clear.\nG is on the table. G is clear.\n",
        "system1_plan": "Move B from F to table | Move F from D to table | Move D from E to table | Move E from C to table | Move C from A to table | Move A from G to table | Move B from table to A | Move F from table to E | Move D from table to F | Move C from table to D",
        "system1_states": 10,
        "system2_plan_v1": "Moved to state -> Stack 1: [G, A, C, E, D, F, B] | Plan so far [] | Exploring action Move B from F to table | New state -> Stack 1: [B], Stack 2: [G, A, C, E, D, F] | Exploring action Move D from E to table | New state -> Invalid | Taking action Move B from F to table | Moved to state -> Stack 1: [B], Stack 2: [G, A, C, E, D, F] | Plan so far [Move B from F to table] | Exploring action Move D from E to F | New state -> Invalid | Exploring action Move F from D to B | New state -> Stack 1: [B, F], Stack 2: [G, A, C, E, D] | Exploring action Move B from table to F | New state -> Stack 1: [G, A, C, E, D, F, B] | Exploring action Move F from D to table | New state -> Stack 1: [B], Stack 2: [F], Stack 3: [G, A, C, E, D] | Taking action Move F from D to table | Moved to state -> Stack 1: [B], Stack 2: [F], Stack 3: [G, A, C, E, D] | Plan so far [Move B from F to table | Move F from D to table] | Exploring action Move D from E to F | New state -> Stack 1: [B], Stack 2: [F, D], Stack 3: [G, A, C, E] | Exploring action Move D from E to table | New state -> Stack 1: [B], Stack 2: [D], Stack 3: [F], Stack 4: [G, A, C, E] | Exploring action Move D from E to B | New state -> Stack 1: [B, D], Stack 2: [F], Stack 3: [G, A, C, E] | Exploring action Move C from A to F | New state -> Invalid | Taking action Move D from E to table | Moved to state -> Stack 1: [B], Stack 2: [D], Stack 3: [F], Stack 4: [G, A, C, E] | Plan so far [Move B from F to table | Move F from D to table | Move D from E to table] | Exploring action Move E from C to F | New state -> Stack 1: [B], Stack 2: [D], Stack 3: [F, E], Stack 4: [G, A, C] | Exploring action Move A from G to F | New state -> Invalid | Exploring action Move E from C to table | New state -> Stack 1: [B], Stack 2: [D], Stack 3: [E], Stack 4: [F], Stack 5: [G, A, C] | Exploring action Move C from A to table | New state -> Invalid | Exploring action Move E from C to B | New state -> Stack 1: [B, E], Stack 2: [D], Stack 3: [F], Stack 4: [G, A, C] | Taking action Move E from C to table | Moved to state -> Stack 1: [B], Stack 2: [D], Stack 3: [E], Stack 4: [F], Stack 5: [G, A, C] | Plan so far [Move B from F to table | Move F from D to table | Move D from E to table | Move E from C to table] | Exploring action Move A from G to F | New state -> Invalid | Exploring action Move C from A to D | New state -> Stack 1: [B], Stack 2: [D, C], Stack 3: [E], Stack 4: [F], Stack 5: [G, A] | Exploring action Move C from A to table | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [F], Stack 6: [G, A] | Exploring action Move A from G to C | New state -> Invalid | Exploring action Move F from table to E | New state -> Stack 1: [B], Stack 2: [D], Stack 3: [E, F], Stack 4: [G, A, C] | Taking action Move C from A to table | Moved to state -> Stack 1: [B], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [F], Stack 6: [G, A] | Plan so far [Move B from F to table | Move F from D to table | Move D from E to table | Move E from C to table | Move C from A to table] | Exploring action Move G from table to E | New state -> Invalid | Exploring action Move A from G to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F], Stack 7: [G] | Exploring action Move A from G to C | New state -> Stack 1: [B], Stack 2: [C, A], Stack 3: [D], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Exploring action Move F from table to E | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D], Stack 4: [E, F], Stack 5: [G, A] | Taking action Move A from G to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F], Stack 7: [G] | Plan so far [Move B from F to table | Move F from D to table | Move D from E to table | Move E from C to table | Move C from A to table | Move A from G to table] | Exploring action Move C from table to D | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, C], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Exploring action Move F from table to E | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E, F], Stack 6: [G] | Exploring action Move B from table to A | New state -> Stack 1: [A, B], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Taking action Move B from table to A | Moved to state -> Stack 1: [A, B], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Plan so far [Move B from F to table | Move F from D to table | Move D from E to table | Move E from C to table | Move C from A to table | Move A from G to table | Move B from table to A] | Exploring action Move F from table to E | New state -> Stack 1: [A, B], Stack 2: [C], Stack 3: [D], Stack 4: [E, F], Stack 5: [G] | Exploring action Move C from table to D | New state -> Stack 1: [A, B], Stack 2: [D, C], Stack 3: [E], Stack 4: [F], Stack 5: [G] | Exploring action Move D from table to E | New state -> Stack 1: [A, B], Stack 2: [C], Stack 3: [E, D], Stack 4: [F], Stack 5: [G] | Exploring action Move A from table to C | New state -> Invalid | Exploring action Move A from table to D | New state -> Invalid | Taking action Move F from table to E | Moved to state -> Stack 1: [A, B], Stack 2: [C], Stack 3: [D], Stack 4: [E, F], Stack 5: [G] | Plan so far [Move B from F to table | Move F from D to table | Move D from E to table | Move E from C to table | Move C from A to table | Move A from G to table | Move B from table to A | Move F from table to E] | Exploring action Move F from E to table | New state -> Stack 1: [A, B], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [F], Stack 6: [G] | Exploring action Move D from table to F | New state -> Stack 1: [A, B], Stack 2: [C], Stack 3: [E, F, D], Stack 4: [G] | Exploring action Move E from table to B | New state -> Invalid | Exploring action Move C from table to D | New state -> Stack 1: [A, B], Stack 2: [D, C], Stack 3: [E, F], Stack 4: [G] | Taking action Move D from table to F | Moved to state -> Stack 1: [A, B], Stack 2: [C], Stack 3: [E, F, D], Stack 4: [G] | Plan so far [Move B from F to table | Move F from D to table | Move D from E to table | Move E from C to table | Move C from A to table | Move A from G to table | Move B from table to A | Move F from table to E | Move D from table to F] | Exploring action Move D from F to table | New state -> Stack 1: [A, B], Stack 2: [C], Stack 3: [D], Stack 4: [E, F], Stack 5: [G] | Exploring action Move E from table to C | New state -> Invalid | Exploring action Move C from table to D | New state -> Stack 1: [A, B], Stack 2: [E, F, D, C], Stack 3: [G] | Exploring action Move F from E to table | New state -> Invalid | Exploring action Move B from A to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [E, F, D], Stack 5: [G] | Taking action Move C from table to D | Moved to state -> Stack 1: [A, B], Stack 2: [E, F, D, C], Stack 3: [G] | Plan so far [Move B from F to table | Move F from D to table | Move D from E to table | Move E from C to table | Move C from A to table | Move A from G to table | Move B from table to A | Move F from table to E | Move D from table to F | Move C from table to D] | Reached goal state!",
        "system2_states_v1": 41
    },
    {
        "idx": 678,
        "start": [
            [
                "table",
                "A",
                "F",
                "E"
            ],
            [
                "table",
                "D",
                "C",
                "B"
            ]
        ],
        "goal": [
            [
                "table",
                "A",
                "C",
                "E"
            ],
            [
                "table",
                "D",
                "B",
                "F"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": false,
                "on": -1,
                "under": "F",
                "ontable": true
            },
            "B": {
                "clear": true,
                "on": "C",
                "under": -1,
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": "D",
                "under": "B",
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": -1,
                "under": "C",
                "ontable": true
            },
            "E": {
                "clear": true,
                "on": "F",
                "under": -1,
                "ontable": false
            },
            "F": {
                "clear": false,
                "on": "A",
                "under": "E",
                "ontable": false
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": false,
                "on": -1,
                "under": "C",
                "ontable": true
            },
            "B": {
                "clear": false,
                "on": "D",
                "under": "F",
                "ontable": false
            },
            "C": {
                "clear": false,
                "on": "A",
                "under": "E",
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": -1,
                "under": "B",
                "ontable": true
            },
            "E": {
                "clear": true,
                "on": "C",
                "under": -1,
                "ontable": false
            },
            "F": {
                "clear": true,
                "on": "B",
                "under": -1,
                "ontable": false
            }
        },
        "plan_len": 8,
        "num_blocks": 6,
        "prompt": "The initial state:\nThe hand is empty.\nA is on the table. F is on A. E is on F. E is clear.\nD is on the table. C is on D. B is on C. B is clear.\n\nThe goal is:\nA is on the table. C is on A. E is on C. E is clear.\nD is on the table. B is on D. F is on B. F is clear.\n",
        "system1_plan": "Move B from C to table | Move C from D to table | Move E from F to C | Move B from table to D | Move F from A to B | Move E from C to table | Move C from table to A | Move E from table to C",
        "system1_states": 8,
        "system2_plan_v1": "Moved to state -> Stack 1: [A, F, E], Stack 2: [D, C, B] | Plan so far [] | Exploring action Move A from table to E | New state -> Invalid | Exploring action Move F from A to B | New state -> Invalid | Exploring action Move B from C to E | New state -> Stack 1: [A, F, E, B], Stack 2: [D, C] | Exploring action Move E from F to table | New state -> Stack 1: [A, F], Stack 2: [D, C, B], Stack 3: [E] | Exploring action Move B from C to table | New state -> Stack 1: [A, F, E], Stack 2: [B], Stack 3: [D, C] | Taking action Move B from C to table | Moved to state -> Stack 1: [A, F, E], Stack 2: [B], Stack 3: [D, C] | Plan so far [Move B from C to table] | Exploring action Move E from F to C | New state -> Stack 1: [A, F], Stack 2: [B], Stack 3: [D, C, E] | Exploring action Move C from D to table | New state -> Stack 1: [A, F, E], Stack 2: [B], Stack 3: [C], Stack 4: [D] | Exploring action Move E from F to table | New state -> Stack 1: [A, F], Stack 2: [B], Stack 3: [D, C], Stack 4: [E] | Exploring action Move A from table to E | New state -> Invalid | Taking action Move E from F to table | Moved to state -> Stack 1: [A, F], Stack 2: [D, C, B], Stack 3: [E] | Plan so far [Move E from F to table] | Exploring action Move F from A to table | New state -> Stack 1: [A], Stack 2: [D, C, B], Stack 3: [E], Stack 4: [F] | Exploring action Move A from table to E | New state -> Invalid | Exploring action Move B from C to table | New state -> Stack 1: [A, F], Stack 2: [B], Stack 3: [D, C], Stack 4: [E] | Exploring action Move F from A to B | New state -> Stack 1: [A], Stack 2: [D, C, B, F], Stack 3: [E] | Taking action Move C from D to table | Moved to state -> Stack 1: [A, F, E], Stack 2: [B], Stack 3: [C], Stack 4: [D] | Plan so far [Move B from C to table | Move C from D to table] | Exploring action Move B from table to D | New state -> Stack 1: [A, F, E], Stack 2: [C], Stack 3: [D, B] | Exploring action Move F from A to C | New state -> Invalid | Exploring action Move E from F to table | New state -> Stack 1: [A, F], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Exploring action Move A from table to D | New state -> Invalid | Exploring action Move E from F to C | New state -> Stack 1: [A, F], Stack 2: [B], Stack 3: [C, E], Stack 4: [D] | Taking action Move E from F to table | Moved to state -> Stack 1: [A, F], Stack 2: [B], Stack 3: [D, C], Stack 4: [E] | Plan so far [Move B from C to table | Move E from F to table] | Exploring action Move C from D to table | New state -> Stack 1: [A, F], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Exploring action Move F from A to B | New state -> Stack 1: [A], Stack 2: [B, F], Stack 3: [D, C], Stack 4: [E] | Exploring action Move A from table to E | New state -> Invalid | Exploring action Move F from A to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [D, C], Stack 4: [E], Stack 5: [F] | Taking action Move E from F to table | Moved to state -> Stack 1: [A, F], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Plan so far [Move B from C to table | Move C from D to table | Move E from F to table] | Exploring action Move F from A to B | New state -> Stack 1: [A], Stack 2: [B, F], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Exploring action Move A from table to F | New state -> Invalid | Exploring action Move B from table to D | New state -> Stack 1: [A, F], Stack 2: [C], Stack 3: [D, B], Stack 4: [E] | Exploring action Move A from table to E | New state -> Invalid | Exploring action Move F from A to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Taking action Move E from F to C | Moved to state -> Stack 1: [A, F], Stack 2: [B], Stack 3: [C, E], Stack 4: [D] | Plan so far [Move B from C to table | Move C from D to table | Move E from F to C] | Exploring action Move C from table to B | New state -> Invalid | Exploring action Move B from table to D | New state -> Stack 1: [A, F], Stack 2: [C, E], Stack 3: [D, B] | Exploring action Move F from A to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C, E], Stack 4: [D], Stack 5: [F] | Exploring action Move C from table to F | New state -> Invalid | Exploring action Move F from A to B | New state -> Stack 1: [A], Stack 2: [B, F], Stack 3: [C, E], Stack 4: [D] | Taking action Move F from A to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Plan so far [Move B from C to table | Move C from D to table | Move E from F to table | Move F from A to table] | Exploring action Move C from table to A | New state -> Stack 1: [A, C], Stack 2: [B], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Exploring action Move F from table to B | New state -> Stack 1: [A], Stack 2: [B, F], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Exploring action Move B from table to D | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, B], Stack 4: [E], Stack 5: [F] | Taking action Move F from A to B | Moved to state -> Stack 1: [A], Stack 2: [B, F], Stack 3: [C], Stack 4: [D], Stack 5: [E] | Plan so far [Move B from C to table | Move C from D to table | Move E from F to table | Move F from A to B] | Exploring action Move F from B to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Exploring action Move B from table to C | New state -> Invalid | Exploring action Move C from table to A | New state -> Stack 1: [A, C], Stack 2: [B, F], Stack 3: [D], Stack 4: [E] | Exploring action Move E from table to C | New state -> Stack 1: [A], Stack 2: [B, F], Stack 3: [C, E], Stack 4: [D] | Taking action Move B from table to D | Moved to state -> Stack 1: [A, F], Stack 2: [C, E], Stack 3: [D, B] | Plan so far [Move B from C to table | Move C from D to table | Move E from F to C | Move B from table to D] | Exploring action Move A from table to E | New state -> Invalid | Exploring action Move F from A to B | New state -> Stack 1: [A], Stack 2: [C, E], Stack 3: [D, B, F] | Exploring action Move F from A to table | New state -> Stack 1: [A], Stack 2: [C, E], Stack 3: [D, B], Stack 4: [F] | Exploring action Move E from C to table | New state -> Stack 1: [A, F], Stack 2: [C], Stack 3: [D, B], Stack 4: [E] | Taking action Move F from A to B | Moved to state -> Stack 1: [A], Stack 2: [C, E], Stack 3: [D, B, F] | Plan so far [Move B from C to table | Move C from D to table | Move E from F to C | Move B from table to D | Move F from A to B] | Exploring action Move E from C to A | New state -> Stack 1: [A, E], Stack 2: [C], Stack 3: [D, B, F] | Exploring action Move A from table to E | New state -> Stack 1: [C, E, A], Stack 2: [D, B, F] | Exploring action Move D from table to A | New state -> Invalid | Exploring action Move E from C to table | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, B, F], Stack 4: [E] | Taking action Move E from C to table | Moved to state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, B, F], Stack 4: [E] | Plan so far [Move B from C to table | Move C from D to table | Move E from F to C | Move B from table to D | Move F from A to B | Move E from C to table] | Exploring action Move D from table to A | New state -> Invalid | Exploring action Move C from table to A | New state -> Stack 1: [A, C], Stack 2: [D, B, F], Stack 3: [E] | Exploring action Move E from table to A | New state -> Stack 1: [A, E], Stack 2: [C], Stack 3: [D, B, F] | Exploring action Move E from table to C | New state -> Stack 1: [A], Stack 2: [C, E], Stack 3: [D, B, F] | Exploring action Move B from D to A | New state -> Invalid | Taking action Move C from table to A | Moved to state -> Stack 1: [A, C], Stack 2: [D, B, F], Stack 3: [E] | Plan so far [Move B from C to table | Move C from D to table | Move E from F to C | Move B from table to D | Move F from A to B | Move E from C to table | Move C from table to A] | Exploring action Move F from B to table | New state -> Stack 1: [A, C], Stack 2: [D, B], Stack 3: [E], Stack 4: [F] | Exploring action Move C from A to table | New state -> Stack 1: [A], Stack 2: [C], Stack 3: [D, B, F], Stack 4: [E] | Exploring action Move A from table to E | New state -> Invalid | Exploring action Move E from table to C | New state -> Stack 1: [A, C, E], Stack 2: [D, B, F] | Exploring action Move B from D to table | New state -> Invalid | Taking action Move E from table to C | Moved to state -> Stack 1: [A, C, E], Stack 2: [D, B, F] | Plan so far [Move B from C to table | Move C from D to table | Move E from F to C | Move B from table to D | Move F from A to B | Move E from C to table | Move C from table to A | Move E from table to C] | Reached goal state!",
        "system2_states_v1": 57
    },
    {
        "idx": 779,
        "start": [
            [
                "table",
                "B",
                "A",
                "C",
                "F",
                "E",
                "D"
            ]
        ],
        "goal": [
            [
                "table",
                "B",
                "C",
                "D",
                "F",
                "A"
            ],
            [
                "table",
                "E"
            ]
        ],
        "start_as_blocks": {
            "A": {
                "clear": false,
                "on": "B",
                "under": "C",
                "ontable": false
            },
            "B": {
                "clear": false,
                "on": -1,
                "under": "A",
                "ontable": true
            },
            "C": {
                "clear": false,
                "on": "A",
                "under": "F",
                "ontable": false
            },
            "D": {
                "clear": true,
                "on": "E",
                "under": -1,
                "ontable": false
            },
            "E": {
                "clear": false,
                "on": "F",
                "under": "D",
                "ontable": false
            },
            "F": {
                "clear": false,
                "on": "C",
                "under": "E",
                "ontable": false
            }
        },
        "goal_as_blocks": {
            "A": {
                "clear": true,
                "on": "F",
                "under": -1,
                "ontable": false
            },
            "B": {
                "clear": false,
                "on": -1,
                "under": "C",
                "ontable": true
            },
            "C": {
                "clear": false,
                "on": "B",
                "under": "D",
                "ontable": false
            },
            "D": {
                "clear": false,
                "on": "C",
                "under": "F",
                "ontable": false
            },
            "E": {
                "clear": true,
                "on": -1,
                "under": -1,
                "ontable": true
            },
            "F": {
                "clear": false,
                "on": "D",
                "under": "A",
                "ontable": false
            }
        },
        "plan_len": 9,
        "num_blocks": 6,
        "prompt": "The initial state:\nThe hand is empty.\nB is on the table. A is on B. C is on A. F is on C. E is on F. D is on E. D is clear.\n\nThe goal is:\nB is on the table. C is on B. D is on C. F is on D. A is on F. A is clear.\nE is on the table. E is clear.\n",
        "system1_plan": "Move D from E to table | Move E from F to table | Move F from C to table | Move C from A to table | Move A from B to table | Move C from table to B | Move D from table to C | Move F from table to D | Move A from table to F",
        "system1_states": 9,
        "system2_plan_v1": "Moved to state -> Stack 1: [B, A, C, F, E, D] | Plan so far [] | Exploring action Move C from A to table | New state -> Invalid | Exploring action Move A from B to table | New state -> Invalid | Exploring action Move D from E to table | New state -> Stack 1: [B, A, C, F, E], Stack 2: [D] | Taking action Move D from E to table | Moved to state -> Stack 1: [B, A, C, F, E], Stack 2: [D] | Plan so far [Move D from E to table] | Exploring action Move E from F to table | New state -> Stack 1: [B, A, C, F], Stack 2: [D], Stack 3: [E] | Exploring action Move C from A to D | New state -> Invalid | Exploring action Move B from table to E | New state -> Invalid | Exploring action Move D from table to E | New state -> Stack 1: [B, A, C, F, E, D] | Exploring action Move E from F to D | New state -> Stack 1: [B, A, C, F], Stack 2: [D, E] | Taking action Move E from F to table | Moved to state -> Stack 1: [B, A, C, F], Stack 2: [D], Stack 3: [E] | Plan so far [Move D from E to table | Move E from F to table] | Exploring action Move F from C to D | New state -> Stack 1: [B, A, C], Stack 2: [D, F], Stack 3: [E] | Exploring action Move F from C to table | New state -> Stack 1: [B, A, C], Stack 2: [D], Stack 3: [E], Stack 4: [F] | Exploring action Move F from C to E | New state -> Stack 1: [B, A, C], Stack 2: [D], Stack 3: [E, F] | Exploring action Move A from B to table | New state -> Invalid | Taking action Move F from C to table | Moved to state -> Stack 1: [B, A, C], Stack 2: [D], Stack 3: [E], Stack 4: [F] | Plan so far [Move D from E to table | Move E from F to table | Move F from C to table] | Exploring action Move A from B to E | New state -> Invalid | Exploring action Move C from A to D | New state -> Stack 1: [B, A], Stack 2: [D, C], Stack 3: [E], Stack 4: [F] | Exploring action Move C from A to F | New state -> Stack 1: [B, A], Stack 2: [D], Stack 3: [E], Stack 4: [F, C] | Exploring action Move C from A to table | New state -> Stack 1: [B, A], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Taking action Move C from A to table | Moved to state -> Stack 1: [B, A], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Plan so far [Move D from E to table | Move E from F to table | Move F from C to table | Move C from A to table] | Exploring action Move B from table to F | New state -> Invalid | Exploring action Move A from B to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Exploring action Move B from table to A | New state -> Invalid | Exploring action Move A from B to F | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [F, A] | Exploring action Move A from B to D | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D, A], Stack 4: [E], Stack 5: [F] | Taking action Move A from B to table | Moved to state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Plan so far [Move D from E to table | Move E from F to table | Move F from C to table | Move C from A to table | Move A from B to table] | Exploring action Move C from table to B | New state -> Stack 1: [A], Stack 2: [B, C], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Exploring action Move A from table to F | New state -> Stack 1: [B], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [F, A] | Exploring action Move B from table to C | New state -> Stack 1: [A], Stack 2: [C, B], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Taking action Move A from B to F | Moved to state -> Stack 1: [B], Stack 2: [C], Stack 3: [D], Stack 4: [E], Stack 5: [F, A] | Plan so far [Move D from E to table | Move E from F to table | Move F from C to table | Move C from A to table | Move A from B to F] | Exploring action Move A from F to table | New state -> Stack 1: [A], Stack 2: [B], Stack 3: [C], Stack 4: [D], Stack 5: [E], Stack 6: [F] | Exploring action Move F from table to C | New state -> Invalid | Exploring action Move C from table to B | New state -> Stack 1: [B, C], Stack 2: [D], Stack 3: [E], Stack 4: [F, A] | Exploring action Move F from table to A | New state -> Invalid | Exploring action Move A from F to C | New state -> Stack 1: [B], Stack 2: [C, A], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Taking action Move C from table to B | Moved to state -> Stack 1: [A], Stack 2: [B, C], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Plan so far [Move D from E to table | Move E from F to table | Move F from C to table | Move C from A to table | Move A from B to table | Move C from table to B] | Exploring action Move A from table to F | New state -> Stack 1: [B, C], Stack 2: [D], Stack 3: [E], Stack 4: [F, A] | Exploring action Move B from table to F | New state -> Invalid | Exploring action Move D from table to F | New state -> Stack 1: [A], Stack 2: [B, C], Stack 3: [E], Stack 4: [F, D] | Exploring action Move D from table to C | New state -> Stack 1: [A], Stack 2: [B, C, D], Stack 3: [E], Stack 4: [F] | Taking action Move C from table to B | Moved to state -> Stack 1: [B, C], Stack 2: [D], Stack 3: [E], Stack 4: [F, A] | Plan so far [Move D from E to table | Move E from F to table | Move F from C to table | Move C from A to table | Move A from B to F | Move C from table to B] | Exploring action Move D from table to C | New state -> Stack 1: [B, C, D], Stack 2: [E], Stack 3: [F, A] | Exploring action Move B from table to C | New state -> Invalid | Exploring action Move A from F to D | New state -> Stack 1: [B, C], Stack 2: [D, A], Stack 3: [E], Stack 4: [F] | Exploring action Move A from F to table | New state -> Stack 1: [A], Stack 2: [B, C], Stack 3: [D], Stack 4: [E], Stack 5: [F] | Taking action Move D from table to C | Moved to state -> Stack 1: [A], Stack 2: [B, C, D], Stack 3: [E], Stack 4: [F] | Plan so far [Move D from E to table | Move E from F to table | Move F from C to table | Move C from A to table | Move A from B to table | Move C from table to B | Move D from table to C] | Exploring action Move A from table to D | New state -> Stack 1: [B, C, D, A], Stack 2: [E], Stack 3: [F] | Exploring action Move F from table to D | New state -> Stack 1: [A], Stack 2: [B, C, D, F], Stack 3: [E] | Exploring action Move A from table to F | New state -> Stack 1: [B, C, D], Stack 2: [E], Stack 3: [F, A] | Exploring action Move C from B to E | New state -> Invalid | Taking action Move D from table to C | Moved to state -> Stack 1: [B, C, D], Stack 2: [E], Stack 3: [F, A] | Plan so far [Move D from E to table | Move E from F to table | Move F from C to table | Move C from A to table | Move A from B to F | Move C from table to B | Move D from table to C] | Exploring action Move A from F to D | New state -> Stack 1: [B, C, D, A], Stack 2: [E], Stack 3: [F] | Exploring action Move C from B to E | New state -> Invalid | Exploring action Move A from F to table | New state -> Stack 1: [A], Stack 2: [B, C, D], Stack 3: [E], Stack 4: [F] | Exploring action Move D from C to table | New state -> Stack 1: [B, C], Stack 2: [D], Stack 3: [E], Stack 4: [F, A] | Taking action Move F from table to D | Moved to state -> Stack 1: [A], Stack 2: [B, C, D, F], Stack 3: [E] | Plan so far [Move D from E to table | Move E from F to table | Move F from C to table | Move C from A to table | Move A from B to table | Move C from table to B | Move D from table to C | Move F from table to D] | Exploring action Move F from D to table | New state -> Stack 1: [A], Stack 2: [B, C, D], Stack 3: [E], Stack 4: [F] | Exploring action Move C from B to A | New state -> Invalid | Exploring action Move E from table to A | New state -> Stack 1: [A, E], Stack 2: [B, C, D, F] | Exploring action Move A from table to F | New state -> Stack 1: [B, C, D, F, A], Stack 2: [E] | Taking action Move A from table to F | Moved to state -> Stack 1: [B, C, D, F, A], Stack 2: [E] | Plan so far [Move D from E to table | Move E from F to table | Move F from C to table | Move C from A to table | Move A from B to table | Move C from table to B | Move D from table to C | Move F from table to D | Move A from table to F] | Reached goal state!",
        "system2_states_v1": 49
    }
]